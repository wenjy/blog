<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>江湖义气的博客</title><link>https://blog.wenjy.top/</link><description>Recent content on 江湖义气的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 21 Aug 2020 20:29:21 +0800</lastBuildDate><atom:link href="https://blog.wenjy.top/index.xml" rel="self" type="application/rss+xml"/><item><title>道德经</title><link>https://blog.wenjy.top/2020/08/21/%E9%81%93%E5%BE%B7%E7%BB%8F.html</link><pubDate>Fri, 21 Aug 2020 20:29:21 +0800</pubDate><guid>https://blog.wenjy.top/2020/08/21/%E9%81%93%E5%BE%B7%E7%BB%8F.html</guid><description>《道德经》 一 道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。 故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄</description></item><item><title>二叉搜索树</title><link>https://blog.wenjy.top/2020/08/18/binary-tree.html</link><pubDate>Tue, 18 Aug 2020 20:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/08/18/binary-tree.html</guid><description>二叉树简介 二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点 二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字&amp;lt;这个父节点，右子节点</description></item><item><title>Mysql 常用的查询</title><link>https://blog.wenjy.top/2020/08/02/mysql-common-sql.html</link><pubDate>Sun, 02 Aug 2020 22:30:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/08/02/mysql-common-sql.html</guid><description>查看数据版本 1 2 3 4 5 select version(); select @@version; SHOW VARIABLES LIKE &amp;#34;version&amp;#34;; 查看当前会话隔离级别 1 select @@tx_isolation; 查看系统当前隔离级别 1 select @@global.tx_isolation; 查看当前的事务 1 SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX; 查看当前锁定的事务 1 SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; 查看当前等锁的事务 1</description></item><item><title>Linux 输出重定向</title><link>https://blog.wenjy.top/2020/06/07/linux-stdin.html</link><pubDate>Sun, 07 Jun 2020 19:29:11 +0800</pubDate><guid>https://blog.wenjy.top/2020/06/07/linux-stdin.html</guid><description>Linux 一切皆文件 标准输入、输出、错误 Linux中有三种标准输入输出，分别是STDIN，STDOUT，STDERR，对应的数字是0，1，2。 STDIN是标准输入，默认从</description></item><item><title>一次Redis read error on connection 错误调试</title><link>https://blog.wenjy.top/2020/06/04/redis-read-error-on-connection.html</link><pubDate>Thu, 04 Jun 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/06/04/redis-read-error-on-connection.html</guid><description>故事之初 一次重启SOA服务后，突然发现有报错read error on connection to 127.0.0.1:6379 下面是SOA服务中环境和依赖的包版本 PHP 7.2.25 使用 PCNTL POSIX 来管理进程 ext-phpredis 5.2.1 ext-event 2.5.4 laravel 6.18.14 SOA是基于event 写的一个</description></item><item><title>5G简介</title><link>https://blog.wenjy.top/2020/05/24/5g.html</link><pubDate>Sun, 24 May 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/24/5g.html</guid><description>本文转载自 小枣君 一文读懂5G无线通信与4G的典型区别 定义 第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generatio</description></item><item><title>Phpstorm常用快捷键</title><link>https://blog.wenjy.top/2020/05/12/phpstorm-keymap.html</link><pubDate>Tue, 12 May 2020 18:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/12/phpstorm-keymap.html</guid><description>本文参考：peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please 提取了一些自己常用的快捷键做记录 Mac符号 符号 解释 ⌘ Command ⇧ Shift ⌃ Control ↩ Enter/Return ⌥ Option/Alt 编辑 Win/Linux Mac 注释 Ctrl + mouse over code ⌘+mouse over code 查看到简短的函数介绍 Alt</description></item><item><title>字符集和字符集编码</title><link>https://blog.wenjy.top/2020/05/11/charset.html</link><pubDate>Tue, 12 May 2020 18:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/11/charset.html</guid><description>本文转载自 cenalulu http://cenalulu.github.io/linux/character-encoding/ 什么是字符集 在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。</description></item><item><title>精确算法bitmap</title><link>https://blog.wenjy.top/2020/05/12/bitmap.html</link><pubDate>Tue, 12 May 2020 18:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/12/bitmap.html</guid><description>本文参考：陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX Bitmap的原理 定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。 例如有一个集合[2,3,5,8]对应的 Bitmap 数组是[001101001]，</description></item><item><title>非精确算法HyperLogLog</title><link>https://blog.wenjy.top/2020/05/12/hyper-log-log.html</link><pubDate>Tue, 12 May 2020 18:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/12/hyper-log-log.html</guid><description>本文参考： 陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX rainybowe 神奇的HyperLogLog算法 算法简介 是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数 HLL 算法需要完整遍历所有元素一</description></item><item><title>浮点数精度问题</title><link>https://blog.wenjy.top/2020/05/11/decimal.html</link><pubDate>Tue, 12 May 2020 12:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2020/05/11/decimal.html</guid><description>写PHP遇到问题 开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分） 通常我的做法是 乘100 然后保存，原本以为这</description></item><item><title>NAT原理</title><link>https://blog.wenjy.top/2020/04/25/nat.html</link><pubDate>Sat, 25 Apr 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/25/nat.html</guid><description>简介 NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。 允许一个整体机构以一个公用IP（Internet Protocol）地址</description></item><item><title>Markdown语法</title><link>https://blog.wenjy.top/2020/04/14/markdown.html</link><pubDate>Tue, 14 Apr 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/14/markdown.html</guid><description>标题2 1 ## 标题2 块 这是一个块 块嵌套 嵌套1 嵌套2 1 2 3 4 5 &amp;gt; 这是一个块 &amp;gt; 块嵌套 &amp;gt; &amp;gt; 嵌套1 &amp;gt; &amp;gt; &amp;gt; 嵌套2 无序列表 无序列表1 无序列表2 无序列表3 1 2 3 - 无序列表1 - 无序列</description></item><item><title>TLS握手通信</title><link>https://blog.wenjy.top/2020/04/14/tls.html</link><pubDate>Tue, 14 Apr 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/14/tls.html</guid><description>RSA 阮一峰 RSA算法原理（一） 阮一峰 RSA算法原理（二） 一些数学知识 质数 质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数 百度百科</description></item><item><title>正则表达式</title><link>https://blog.wenjy.top/2020/04/14/regexp.html</link><pubDate>Tue, 14 Apr 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/14/regexp.html</guid><description>表达式集合 字符 描述 \ 转义，\\ 将匹配 \ ^ 匹配开始字符 $ 匹配结束字符 . 匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符 * 匹配前面的子表达式零次或多</description></item><item><title>TCP 三次握手 四次挥手</title><link>https://blog.wenjy.top/2020/04/02/tcp-connect-close.html</link><pubDate>Thu, 02 Apr 2020 20:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/02/tcp-connect-close.html</guid><description>TCP连接三次握手 假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于CLOSED（关闭）状态。 下图中在主机下面的方框分别是TC</description></item><item><title>HTTP 响应状态码</title><link>https://blog.wenjy.top/2020/04/01/http-response-status-codes.html</link><pubDate>Wed, 01 Apr 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/04/01/http-response-status-codes.html</guid><description>1xx 这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。 由于HTTP/1.0协议中没有定义任何1</description></item><item><title>Linux文件目录权限</title><link>https://blog.wenjy.top/2020/03/29/linux-file-permission.html</link><pubDate>Sun, 29 Mar 2020 19:29:11 +0800</pubDate><guid>https://blog.wenjy.top/2020/03/29/linux-file-permission.html</guid><description>Linux一切皆文件 权限解释 首先我们执行 ls -al /etc/passwd 看一下 passwd文件的权限如下： 权限 连接 所有者 用户组 文件大小 修改日期 文件名 -rw-r&amp;ndash;r&amp;ndash; 1 root wheel 6393 Jul 31 2016 /etc/passwd 第一个字符代表这个文件</description></item><item><title>Git 常用命令</title><link>https://blog.wenjy.top/2020/03/26/git-command.html</link><pubDate>Thu, 26 Mar 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/03/26/git-command.html</guid><description>git init 初始化本地git仓库（创建新仓库） git init 创建普通库 git init --bare 创建裸库 当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。 你</description></item><item><title>Linux 常用命令</title><link>https://blog.wenjy.top/2020/03/26/linux-command.html</link><pubDate>Thu, 26 Mar 2020 22:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2020/03/26/linux-command.html</guid><description>ls ls -alh -a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件 -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 -h, –human-readable 以容易理解</description></item><item><title>工具</title><link>https://blog.wenjy.top/tools/</link><pubDate>Thu, 26 Mar 2020 20:29:32 +0800</pubDate><guid>https://blog.wenjy.top/tools/</guid><description>Git常用命令 Linux常用命令 HTTP响应状态码 正则表达式 Markdown语法 Phpstorm快捷键</description></item><item><title>工作中遇到的问题+踩过的坑</title><link>https://blog.wenjy.top/2019/01/01/work-debug.html</link><pubDate>Fri, 11 Oct 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/01/01/work-debug.html</guid><description>安装的虚拟机时间不同步 ntpdate cn.pool.ntp.org phpxdebug 运行失败，端口繁忙 因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001 本地测试环境curl，https</description></item><item><title>Mysql 索引学习</title><link>https://blog.wenjy.top/2019/10/11/mysql-index-optimize.html</link><pubDate>Fri, 11 Oct 2019 22:30:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/10/11/mysql-index-optimize.html</guid><description>一、索引 索引的类型（数据结构） 1. B-Tree 所有引擎都支持 InnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引</description></item><item><title>Linux Lock的原理</title><link>https://blog.wenjy.top/2019/10/11/linux-lock-principle.html</link><pubDate>Fri, 11 Oct 2019 22:29:21 +0800</pubDate><guid>https://blog.wenjy.top/2019/10/11/linux-lock-principle.html</guid><description>《操作系统之哲学原理》-锁 死锁的4个必要条件 死锁发生的必要条件是 资源有限 持有等待 不能抢占资源 循环等待条件 哲学家就餐问题 哲学家每天只做两家事情：思考 吃饭 吃饭规矩：哲</description></item><item><title>PHP7数组的实现</title><link>https://blog.wenjy.top/2019/10/11/php7-array.html</link><pubDate>Fri, 11 Oct 2019 22:29:21 +0800</pubDate><guid>https://blog.wenjy.top/2019/10/11/php7-array.html</guid><description>PHP数组是一个有序的字典，它必须同时满足下面两个语义 PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符</description></item><item><title>算法-一致性Hash</title><link>https://blog.wenjy.top/2019/04/01/algorithms-consistent-hash.html</link><pubDate>Mon, 01 Apr 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/04/01/algorithms-consistent-hash.html</guid><description>简介 一致性哈希算法（Consistent Hashing）最早在论文 《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》 中被提出。简单来说，一致性哈希将整个</description></item><item><title>算法-简单的概率算法</title><link>https://blog.wenjy.top/2019/04/01/algorithms-probability.html</link><pubDate>Mon, 01 Apr 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/04/01/algorithms-probability.html</guid><description>经典概率算法简介 假设数组为：array(100,200,300,400)， 开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内， 如果不在，则将</description></item><item><title>算法-简易模拟熔断器</title><link>https://blog.wenjy.top/2019/04/01/algorithms-circuit-breaker.html</link><pubDate>Mon, 01 Apr 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/04/01/algorithms-circuit-breaker.html</guid><description>简介 一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试， 导致宕机的基础服务遭受到数倍的流量放</description></item><item><title>算法-二分查找</title><link>https://blog.wenjy.top/2019/03/01/algorithms-binary_search.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-binary_search.html</guid><description>二分查找简介 二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。 因此，折半查找方法适用于不经常变动而查找频</description></item><item><title>算法-冒泡排序</title><link>https://blog.wenjy.top/2019/03/01/algorithms-bubble-sort.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-bubble-sort.html</guid><description>冒泡排序简介 冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。 它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换</description></item><item><title>算法-归并排序</title><link>https://blog.wenjy.top/2019/03/01/algorithms-merge-sort.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-merge-sort.html</guid><description>归并排序(快速排序) 分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解 在最坏、最佳、平均情况下归并排</description></item><item><title>算法-排列组合</title><link>https://blog.wenjy.top/2019/03/01/algorithms-arrangement-combination.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-arrangement-combination.html</guid><description>排列组合 数学上的阶乘、排列、组合的实现 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58</description></item><item><title>算法-插入排序</title><link>https://blog.wenjy.top/2019/03/01/algorithms-insertion_sort.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-insertion_sort.html</guid><description>插入排序简介 插入排序（Insertion sort）是一种简单直观且稳定的排序算法。 如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插</description></item><item><title>算法-选择排序</title><link>https://blog.wenjy.top/2019/03/01/algorithms-select-sort.html</link><pubDate>Fri, 01 Mar 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/03/01/algorithms-select-sort.html</guid><description>选择排序 选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置 实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数 代码实现 1 2 3 4 5 6 7 8</description></item><item><title>设计模式(23)-访问者模式</title><link>https://blog.wenjy.top/2018/10/23/design-patten-visitor.html</link><pubDate>Tue, 23 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/23/design-patten-visitor.html</guid><description>访问者模式 简介 表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下 定义作用于这些元素的新操作 访问者模式适用于数据结构相对稳定的系统 它把数</description></item><item><title>设计模式(22)-模板方法模式</title><link>https://blog.wenjy.top/2018/10/22/design-patten-template-method.html</link><pubDate>Mon, 22 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/22/design-patten-template-method.html</guid><description>模板方法模式 简介 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤 当我们要完成在某一细</description></item><item><title>设计模式(21)-策略模式</title><link>https://blog.wenjy.top/2018/10/21/design-patten-strategy.html</link><pubDate>Sun, 21 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/21/design-patten-strategy.html</guid><description>策略模式 简介 它定义了算法家族，分别封装起来，让它们之间可以相互替换， 此模式让算法的变化，不会影响到使用算法的客户。 策略模式是一种定义一系列算法的方法，从概念上来看</description></item><item><title>设计模式(20)-状态模式</title><link>https://blog.wenjy.top/2018/10/20/design-patten-state.html</link><pubDate>Sat, 20 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/20/design-patten-state.html</guid><description>状态模式 简介 当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类 状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判</description></item><item><title>设计模式(20)-状态模式2</title><link>https://blog.wenjy.top/2018/10/20/design-patten-state-work.html</link><pubDate>Sat, 20 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/20/design-patten-state-work.html</guid><description>状态模式2 简介 简单实现一个表示工作状态的类。 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55</description></item><item><title>设计模式(19)-单例模式</title><link>https://blog.wenjy.top/2018/10/19/design-patten-singleton.html</link><pubDate>Fri, 19 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/19/design-patten-singleton.html</guid><description>单例模式 简介 保证一个类仅有一个实例，并提供一个访问它的全局访问点 通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。 一个最好的办法就是，让</description></item><item><title>设计模式(18)-代理模式</title><link>https://blog.wenjy.top/2018/10/18/design-patten-proxy.html</link><pubDate>Thu, 18 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/18/design-patten-proxy.html</guid><description>代理模式 简介 为其他对象提供一种代理以控制对这个对象的访问 远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实 虚拟代</description></item><item><title>设计模式(17)-原型模式</title><link>https://blog.wenjy.top/2018/10/17/design-patten-prototype.html</link><pubDate>Wed, 17 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/17/design-patten-prototype.html</guid><description>原型模式 简介 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象 从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节 代码示例 1 2 3 4 5 6 7 8</description></item><item><title>设计模式(16)-简单工厂模式</title><link>https://blog.wenjy.top/2018/10/16/design-patten-operation.html</link><pubDate>Tue, 16 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/16/design-patten-operation.html</guid><description>简单工厂模式 简介 根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description></item><item><title>设计模式(15)-观察者模式</title><link>https://blog.wenjy.top/2018/10/15/design-patten-observer.html</link><pubDate>Mon, 15 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/15/design-patten-observer.html</guid><description>观察者模式 简介 定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。 这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。 Subject 类，</description></item><item><title>设计模式(14)-备忘录模式</title><link>https://blog.wenjy.top/2018/10/14/design-patten-memento.html</link><pubDate>Sun, 14 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/14/design-patten-memento.html</guid><description>备忘录模式 简介 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。 这样以后就可以将该对象恢复都原先保存的状态。 备忘录模式比较适用于功能比较</description></item><item><title>设计模式(13)-中介者模式</title><link>https://blog.wenjy.top/2018/10/13/design-patten-mediator.html</link><pubDate>Sat, 13 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/13/design-patten-mediator.html</guid><description>中介者模式 简介 用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用， 从而使其耦合松散，而且可以独立地改变它们之间的交互 中介者模式很容易在系统</description></item><item><title>设计模式(12)-解释器模式</title><link>https://blog.wenjy.top/2018/10/12/design-patten-interpreter.html</link><pubDate>Fri, 12 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/12/design-patten-interpreter.html</guid><description>解释器模式 简介 给定一个语言，定义它的文法的一种表示，并定义一个解释器， 这个解释器使用该表示来解释语言中的句子 当有一个语言需要解释执行，并且你可以将该语言中的句子表</description></item><item><title>设计模式(11)-享元模式</title><link>https://blog.wenjy.top/2018/10/11/design-patten-flyweight.html</link><pubDate>Thu, 11 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/11/design-patten-flyweight.html</guid><description>享元模式 简介 运用共享技术有效地支持大量细粒度的对象 享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。 如果发现这些实例除</description></item><item><title>设计模式(10)-工厂方法模式</title><link>https://blog.wenjy.top/2018/10/10/design-patten-factory-method.html</link><pubDate>Wed, 10 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/10/design-patten-factory-method.html</guid><description>工厂方法模式 简介 定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。 工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持</description></item><item><title>设计模式(9)-外观模式</title><link>https://blog.wenjy.top/2018/10/09/design-patten-facade.html</link><pubDate>Tue, 09 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/09/design-patten-facade.html</guid><description>外观模式 简介 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口， 这个接口使得这一子系统更加容易使用 首先，在设计初期阶段，应该要有意识的将不同的两个层</description></item><item><title>设计模式(8)-装饰模式</title><link>https://blog.wenjy.top/2018/10/08/design-patten-decorator.html</link><pubDate>Mon, 08 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/08/design-patten-decorator.html</guid><description>装饰模式 简介 动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活 当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰</description></item><item><title>设计模式(7)-组合模式</title><link>https://blog.wenjy.top/2018/10/07/design-patten-composite.html</link><pubDate>Sun, 07 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/07/design-patten-composite.html</guid><description>组合模式 简介 将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。 当你发现需求中是体现部分与整体层次的结构时，以及</description></item><item><title>设计模式(6)-命令模式</title><link>https://blog.wenjy.top/2018/10/06/design-patten-command.html</link><pubDate>Sat, 06 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/06/design-patten-command.html</guid><description>命令模式 简介 将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化； 对请求排队或记录请求日志，以及支持可撤销的操作 第一，它能较容易地设计一个命令队列；</description></item><item><title>设计模式(5)-职责链模式</title><link>https://blog.wenjy.top/2018/10/05/design-patten-chain-of-responsibility.html</link><pubDate>Fri, 05 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/05/design-patten-chain-of-responsibility.html</guid><description>职责链模式 简介 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系 将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。 当客户</description></item><item><title>设计模式(4)-建造者模式</title><link>https://blog.wenjy.top/2018/10/04/design-patten-builder.html</link><pubDate>Thu, 04 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/04/design-patten-builder.html</guid><description>建造者模式 简介 将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程 主要用于创建一些复杂的对象，这些对象内部构建的</description></item><item><title>设计模式(3)-桥接模式</title><link>https://blog.wenjy.top/2018/10/03/design-patten-bridge.html</link><pubDate>Wed, 03 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/03/design-patten-bridge.html</guid><description>桥接模式 简介 将抽象部分与它的实现部分分离，使它们都可以独立地变化 什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义 实现指的是抽象类和</description></item><item><title>设计模式(2)-适配器模式</title><link>https://blog.wenjy.top/2018/10/02/design-patten-adapter.html</link><pubDate>Tue, 02 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/02/design-patten-adapter.html</guid><description>适配器模式 简介 将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 系统的数据和行为都正确，但是接口不符合时</description></item><item><title>设计模式(1)-抽象工厂模式</title><link>https://blog.wenjy.top/2018/10/01/design-patten-abstract-factory.html</link><pubDate>Mon, 01 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/01/design-patten-abstract-factory.html</guid><description>抽象工厂模式 简介 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36</description></item><item><title>设计模式-学习《大话设计模式》的整理</title><link>https://blog.wenjy.top/2018/10/01/design-patten-readme.html</link><pubDate>Mon, 01 Oct 2018 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2018/10/01/design-patten-readme.html</guid><description>单一职责 就一个类而言，应该仅有一个引起它变化的原因。 如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力</description></item><item><title>PHP Spl Datastructures</title><link>https://blog.wenjy.top/2017/12/20/php-spl-datastructures.html</link><pubDate>Wed, 20 Dec 2017 14:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2017/12/20/php-spl-datastructures.html</guid><description>PHP文档 这里主要学习，PHP SPL 提供了一套标准的数据结构。 它们按底层实现进行分组, 通常定义了它们的一般应用领域 SplDoublyLinkedList 双向链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description></item><item><title>PHP Spl Iterators</title><link>https://blog.wenjy.top/2017/12/20/php-spl-iterators.html</link><pubDate>Wed, 20 Dec 2017 14:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2017/12/20/php-spl-iterators.html</guid><description>PHP文档 PHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。 Iterator 实现一个最简单的迭代器接口 1 2 3 4 5 6 7</description></item><item><title>关于我</title><link>https://blog.wenjy.top/about/</link><pubDate>Sun, 10 Jan 2016 17:29:32 +0800</pubDate><guid>https://blog.wenjy.top/about/</guid><description/></item><item><title>归档</title><link>https://blog.wenjy.top/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wenjy.top/archives/</guid><description/></item><item><title>搜索</title><link>https://blog.wenjy.top/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.wenjy.top/search/</guid><description/></item></channel></rss>