<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>般若波罗蜜多心经</title>
      <link href="2020/11/15/ban-ruo-bo-luo-mi-duo-xin-jing.html"/>
      <url>2020/11/15/ban-ruo-bo-luo-mi-duo-xin-jing.html</url>
      
        <content type="html"><![CDATA[<p>观自在菩萨，行深般若波罗蜜时，照见五蕴皆空，度一切苦厄。<br>舍利子，色不异空，空不异色，色即是空，空即是色，受想行识亦复如是。<br>舍利子是诸法空相，不生不灭，不垢不净，不增不减。<br>是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界。<br>无无明，亦无无明尽，乃至无老死，亦无老死尽，无苦集灭道，无智亦无得，以无所得故。<br>菩提萨埵（duǒ），依般若波罗蜜多故，心无挂碍，无挂碍故，无有恐怖，远离颠倒梦想，究竟涅槃。<br>三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提，故知般若波罗蜜多是大神咒，是大明咒，是无上咒，是无等等咒。<br>能除一切苦，真实不虚，故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</p>]]></content>
      
      
      <categories>
          
          <category> 佛经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 佛经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我能唱的歌</title>
      <link href="2020/11/01/wo-neng-chang-de-ge.html"/>
      <url>2020/11/01/wo-neng-chang-de-ge.html</url>
      
        <content type="html"><![CDATA[<h1 id="我能唱的歌"><a href="#我能唱的歌" class="headerlink" title="我能唱的歌"></a>我能唱的歌</h1><p>记录一些我能唱的歌、还有一直想唱确唱不好的歌，感觉好遗憾，不会唱粤语歌也遗憾。</p><p>我还是喜欢那个老歌的人，伤感的歌曲，果然听音乐就知道是大叔级别了</p><p>好吧，我承认我老了，唱歌没有以前那么有感觉了，可能是没有喜欢的人来听？</p><p>记得高中时的音乐老师，拿着他的碟子给我们看，当时真的被惊艳到了，原来我也可以有偶像的！<br>那是真的是喜欢他的歌，他的舞蹈，<strong>Michael Jackson</strong>，可惜不会唱他的歌，更遗憾的是没参加他演唱会。</p><p>我不是麦霸哈~</p><h2 id="《流星雨》-F4"><a href="#《流星雨》-F4" class="headerlink" title="《流星雨》 F4"></a>《流星雨》 F4</h2><p>看电视剧学会的？</p><h2 id="《秋天不回来》-王强"><a href="#《秋天不回来》-王强" class="headerlink" title="《秋天不回来》 王强"></a>《秋天不回来》 王强</h2><p>初中经常听然后就会了吧</p><h2 id="《我的好兄弟》-高进、小沈阳"><a href="#《我的好兄弟》-高进、小沈阳" class="headerlink" title="《我的好兄弟》 高进、小沈阳"></a>《我的好兄弟》 高进、小沈阳</h2><p>兄弟们合唱不错</p><h2 id="《过火》-张信哲"><a href="#《过火》-张信哲" class="headerlink" title="《过火》 张信哲"></a>《过火》 张信哲</h2><p>高三时超喜欢这首歌，唱了无数遍了</p><h2 id="《父亲》-筷子兄弟"><a href="#《父亲》-筷子兄弟" class="headerlink" title="《父亲》 筷子兄弟"></a>《父亲》 筷子兄弟</h2><p>我能自己唱得流泪，鼻子好酸</p><h2 id="《小苹果》-筷子兄弟"><a href="#《小苹果》-筷子兄弟" class="headerlink" title="《小苹果》 筷子兄弟"></a>《小苹果》 筷子兄弟</h2><p>哈哈，这首要欢乐</p><h2 id="《朋友的酒》-李晓杰"><a href="#《朋友的酒》-李晓杰" class="headerlink" title="《朋友的酒》 李晓杰"></a>《朋友的酒》 李晓杰</h2><p>节奏蛮好的</p><h2 id="《再见》-张震岳"><a href="#《再见》-张震岳" class="headerlink" title="《再见》 张震岳"></a>《再见》 张震岳</h2><p>有点伤感，也有情怀</p><h2 id="《等一分钟》-徐腾誉"><a href="#《等一分钟》-徐腾誉" class="headerlink" title="《等一分钟》 徐腾誉"></a>《等一分钟》 徐腾誉</h2><p>什么时候喜欢这首歌的呢？</p><h2 id="《天使的翅膀》-徐腾誉"><a href="#《天使的翅膀》-徐腾誉" class="headerlink" title="《天使的翅膀》 徐腾誉"></a>《天使的翅膀》 徐腾誉</h2><p>应该都是高中时的歌吧</p><h2 id="《分飞》-徐怀钰"><a href="#《分飞》-徐怀钰" class="headerlink" title="《分飞》 徐怀钰"></a>《分飞》 徐怀钰</h2><p>高中的一段时间经常唱</p><h2 id="《大海》-张雨生"><a href="#《大海》-张雨生" class="headerlink" title="《大海》 张雨生"></a>《大海》 张雨生</h2><p>都是老歌咯</p><h2 id="《一千个伤心的理由》-张学友"><a href="#《一千个伤心的理由》-张学友" class="headerlink" title="《一千个伤心的理由》 张学友"></a>《一千个伤心的理由》 张学友</h2><p>可以酝酿一下，感情来了</p><h2 id="《兄弟抱一下》-庞龙"><a href="#《兄弟抱一下》-庞龙" class="headerlink" title="《兄弟抱一下》 庞龙"></a>《兄弟抱一下》 庞龙</h2><p>曾经的歌啊，真是让人伤感，再唱已是曲中人</p><h2 id="《拯救》-孙楠"><a href="#《拯救》-孙楠" class="headerlink" title="《拯救》 孙楠"></a>《拯救》 孙楠</h2><p>我要伴奏，一个人唱</p><h2 id="《你不是真正的快乐》-五月天"><a href="#《你不是真正的快乐》-五月天" class="headerlink" title="《你不是真正的快乐》 五月天"></a>《你不是真正的快乐》 五月天</h2><p>这下是真的不快乐了</p><h2 id="《心太软》-任贤齐"><a href="#《心太软》-任贤齐" class="headerlink" title="《心太软》 任贤齐"></a>《心太软》 任贤齐</h2><p>老歌老歌</p><h2 id="《挪威的森林》-伍佰"><a href="#《挪威的森林》-伍佰" class="headerlink" title="《挪威的森林》 伍佰"></a>《挪威的森林》 伍佰</h2><p>没啥说的</p><h2 id="《冬天的秘密》-周传雄"><a href="#《冬天的秘密》-周传雄" class="headerlink" title="《冬天的秘密》 周传雄"></a>《冬天的秘密》 周传雄</h2><p>我会伤心吗？</p><h2 id="《关不上的窗》-周传雄"><a href="#《关不上的窗》-周传雄" class="headerlink" title="《关不上的窗》 周传雄"></a>《关不上的窗》 周传雄</h2><p>不能多唱</p><h2 id="《黄昏》-周传雄"><a href="#《黄昏》-周传雄" class="headerlink" title="《黄昏》 周传雄"></a>《黄昏》 周传雄</h2><p>伤感，感觉来了</p><h2 id="《我的心太乱》-周传雄"><a href="#《我的心太乱》-周传雄" class="headerlink" title="《我的心太乱》 周传雄"></a>《我的心太乱》 周传雄</h2><p>这首歌我没怎么唱吧？</p><h2 id="《2002年的第一场雪》-刀郎"><a href="#《2002年的第一场雪》-刀郎" class="headerlink" title="《2002年的第一场雪》 刀郎"></a>《2002年的第一场雪》 刀郎</h2><p>初中时的歌，忘不了的吧！</p><h2 id="《冲动的惩罚》-刀郎"><a href="#《冲动的惩罚》-刀郎" class="headerlink" title="《冲动的惩罚》 刀郎"></a>《冲动的惩罚》 刀郎</h2><p>也是喜欢唱的，现在还能一个人唱完吗？</p><h2 id="《冰雨》-刘德华"><a href="#《冰雨》-刘德华" class="headerlink" title="《冰雨》 刘德华"></a>《冰雨》 刘德华</h2><p>会唱国语版的，还不错</p><h2 id="《谢谢你的爱》-刘德华"><a href="#《谢谢你的爱》-刘德华" class="headerlink" title="《谢谢你的爱》 刘德华"></a>《谢谢你的爱》 刘德华</h2><p>哦豁，和舍友一起唱，不错不错</p><h2 id="《精忠报国》-屠洪刚"><a href="#《精忠报国》-屠洪刚" class="headerlink" title="《精忠报国》 屠洪刚"></a>《精忠报国》 屠洪刚</h2><p>这就有点激情了，请允许我站起来</p><h2 id="《听海》-张惠妹"><a href="#《听海》-张惠妹" class="headerlink" title="《听海》 张惠妹"></a>《听海》 张惠妹</h2><p>可能会伤心吧</p><h2 id="《天下》-张杰"><a href="#《天下》-张杰" class="headerlink" title="《天下》 张杰"></a>《天下》 张杰</h2><p>可以和我弟唱，非常不错的</p><h2 id="《剑心》-张杰"><a href="#《剑心》-张杰" class="headerlink" title="《剑心》 张杰"></a>《剑心》 张杰</h2><p>可以和我弟唱，非常不错的</p><h2 id="《着魔》-张杰"><a href="#《着魔》-张杰" class="headerlink" title="《着魔》 张杰"></a>《着魔》 张杰</h2><p>舍歌咯，一个人搞不定</p><h2 id="《逆战》-张杰"><a href="#《逆战》-张杰" class="headerlink" title="《逆战》 张杰"></a>《逆战》 张杰</h2><p>一样一样，曾经的游戏生涯，高音真的唱不下去，不行了</p><h2 id="《画心》-张靓颖"><a href="#《画心》-张靓颖" class="headerlink" title="《画心》 张靓颖"></a>《画心》 张靓颖</h2><p>这个太低沉了，很少唱</p><h2 id="《相见恨晚》-彭佳慧"><a href="#《相见恨晚》-彭佳慧" class="headerlink" title="《相见恨晚》 彭佳慧"></a>《相见恨晚》 彭佳慧</h2><p>我能唱出感情吗？</p><h2 id="《痴心绝对》-李圣杰"><a href="#《痴心绝对》-李圣杰" class="headerlink" title="《痴心绝对》 李圣杰"></a>《痴心绝对》 李圣杰</h2><p>好久没唱了。。。</p><h2 id="《窗外》"><a href="#《窗外》" class="headerlink" title="《窗外》"></a>《窗外》</h2><p>小学会唱的歌？</p><h2 id="《小芳》"><a href="#《小芳》" class="headerlink" title="《小芳》"></a>《小芳》</h2><p>小学会唱的歌？</p><h2 id="《单身情歌》-林志炫"><a href="#《单身情歌》-林志炫" class="headerlink" title="《单身情歌》 林志炫"></a>《单身情歌》 林志炫</h2><p>不想说了，这都单身二十几年，每次都说明年不要再唱了嘛，最后还是唱起这首歌</p><h2 id="《生日礼物》-江涛"><a href="#《生日礼物》-江涛" class="headerlink" title="《生日礼物》 江涛"></a>《生日礼物》 江涛</h2><p>哦豁，可能代入感很强</p><h2 id="《你的承诺》-海明威"><a href="#《你的承诺》-海明威" class="headerlink" title="《你的承诺》 海明威"></a>《你的承诺》 海明威</h2><p>应该也是高中时的歌</p><h2 id="《放生》-范逸臣"><a href="#《放生》-范逸臣" class="headerlink" title="《放生》 范逸臣"></a>《放生》 范逸臣</h2><p>我为啥会觉得伤心？！</p><h2 id="《水手》-郑智化"><a href="#《水手》-郑智化" class="headerlink" title="《水手》 郑智化"></a>《水手》 郑智化</h2><p>有点辛酸的感觉</p><h2 id="《包容》-郑源"><a href="#《包容》-郑源" class="headerlink" title="《包容》 郑源"></a>《包容》 郑源</h2><p>伤感</p><h2 id="《别说我的眼泪你无所谓》-郑源"><a href="#《别说我的眼泪你无所谓》-郑源" class="headerlink" title="《别说我的眼泪你无所谓》 郑源"></a>《别说我的眼泪你无所谓》 郑源</h2><p>伤感</p><h2 id="《死了都要爱》-阿信"><a href="#《死了都要爱》-阿信" class="headerlink" title="《死了都要爱》 阿信"></a>《死了都要爱》 阿信</h2><p>借我一副嗓子吧，我好想唱完，吃奶的力气</p><h2 id="《离歌》-阿信"><a href="#《离歌》-阿信" class="headerlink" title="《离歌》 阿信"></a>《离歌》 阿信</h2><p>低沉+告辞把握节奏</p><h2 id="《天黑》-阿杜"><a href="#《天黑》-阿杜" class="headerlink" title="《天黑》 阿杜"></a>《天黑》 阿杜</h2><p>高中，买磁带听的</p><h2 id="《离别》-阿杜"><a href="#《离别》-阿杜" class="headerlink" title="《离别》 阿杜"></a>《离别》 阿杜</h2><p>我还会唱吗？</p><h2 id="《一个人的冬天》-陈楚生"><a href="#《一个人的冬天》-陈楚生" class="headerlink" title="《一个人的冬天》 陈楚生"></a>《一个人的冬天》 陈楚生</h2><p>还是伤感</p><h2 id="《有没有人曾告诉你》-陈楚生"><a href="#《有没有人曾告诉你》-陈楚生" class="headerlink" title="《有没有人曾告诉你》 陈楚生"></a>《有没有人曾告诉你》 陈楚生</h2><p>伤</p><h2 id="《西海情歌》-降央卓玛"><a href="#《西海情歌》-降央卓玛" class="headerlink" title="《西海情歌》 降央卓玛"></a>《西海情歌》 降央卓玛</h2><p>喜欢这个中性的声音</p><h2 id="《lydia》-飞儿乐团"><a href="#《lydia》-飞儿乐团" class="headerlink" title="《lydia》 飞儿乐团"></a>《lydia》 飞儿乐团</h2><p>好像我听的都是音质不好的</p><h2 id="《该死的温柔》-马天宇"><a href="#《该死的温柔》-马天宇" class="headerlink" title="《该死的温柔》 马天宇"></a>《该死的温柔》 马天宇</h2><p>。。。</p><h2 id="《千年等一回》-高胜美"><a href="#《千年等一回》-高胜美" class="headerlink" title="《千年等一回》 高胜美"></a>《千年等一回》 高胜美</h2><p>这是小学听过的歌，无疑</p><h2 id="《青青河边草》-高胜美"><a href="#《青青河边草》-高胜美" class="headerlink" title="《青青河边草》 高胜美"></a>《青青河边草》 高胜美</h2><p>这是小学听过的歌，无疑</p><h2 id="《没那么简单》-黄小琥"><a href="#《没那么简单》-黄小琥" class="headerlink" title="《没那么简单》 黄小琥"></a>《没那么简单》 黄小琥</h2><p>感情真挚，唱出自己</p><h2 id="《白天不懂夜的黑》-黄小琥"><a href="#《白天不懂夜的黑》-黄小琥" class="headerlink" title="《白天不懂夜的黑》 黄小琥"></a>《白天不懂夜的黑》 黄小琥</h2><p>我有如此体会吗</p><h2 id="《相思》-毛阿敏"><a href="#《相思》-毛阿敏" class="headerlink" title="《相思》 毛阿敏"></a>《相思》 毛阿敏</h2><p>曾经的《西游记后传》主题曲，现在听来，相当不错</p><h2 id="《问》-简弘亦"><a href="#《问》-简弘亦" class="headerlink" title="《问》 简弘亦"></a>《问》 简弘亦</h2><p>曾经非常喜欢的一首歌，学了一段时间</p><p>。。。忘咯</p>]]></content>
      
      
      <categories>
          
          <category> 歌曲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增广贤文</title>
      <link href="2020/10/15/guo-cui/zeng-guang-xian-wen.html"/>
      <url>2020/10/15/guo-cui/zeng-guang-xian-wen.html</url>
      
        <content type="html"><![CDATA[<h1 id="记自《增广贤文》一书"><a href="#记自《增广贤文》一书" class="headerlink" title="记自《增广贤文》一书"></a>记自《增广贤文》一书</h1><p>昔时贤文，诲汝谆谆。集韵增广，多见多闻。观今宜鉴古，无古不成今。</p><p>知己知彼，将心比心。酒逢知己千杯少，诗向会人吟。相识满天下，知心能几人？<br>相逢好似初相识，到老终无怨恨心。</p><p>近水知鱼性，近山识鸟音。易涨易退山溪水，易反易复是小人。<br>运去金成铁，时来铁成金。读书须用意，一字值千金。</p><p>逢人且说三分话，未可全抛一片心。有意栽花花不开，无心栽柳柳成荫。<br>画虎画皮难画骨，知人知面不知心。钱财如粪土，仁义值千金。</p><p>流水下滩非有意，白云出岫本无心。当时若不登高望，谁信东流海洋深。<br>路遥知马力，日久见人心。马行无力皆因瘦，人不风流只为贫。</p><p>饶人不是痴汉，痴汉不会饶人。是亲不是亲，非亲却是亲。<br>美不美，乡中水；亲不亲，故乡人。相逢不饮空归去，洞口桃花也笑人。</p><p>为人莫做亏心事，半夜敲门心不惊。两人已般心，有钱堪买金。一人一般心，无钱难买针。</p><p>莺花犹怕春光老，岂可叫人枉度春。红粉佳人休使老，风流浪子莫教贫。</p><p>黄金无假，阿魏无真。客来住不顾，应恐是痴人。贫居闹市无人问，富在深山有远亲。</p><p>谁人背后无人说？那个人前不说人。有钱道真语，无钱语不真。不信但看筵中酒，杯杯先敬有钱人。</p><p>闹里有钱，静处安身。如来风雨，去似微尘。长江后浪推前浪，世上新人赶旧人。<br>近水楼台先得月，向阳花木早逢春。</p><p>古人不见今时月，今月何曾照古人。先到为君，后到为臣。<br>莫道君行早，更有早行人。莫言直中直，须防仁不仁。</p><p>山中有直树，世上无直人。自恨枝无叶，莫怨太阳倾。大家都是命，半点不由人。</p><p>一年之计在于春，一日之计在于晨。一家之计在于和，一生之计在于勤。<br>责人之心责己，怒己之心怒人。守口如瓶，防意如城。</p><p>宁可人负我，切莫我负人。再三须重事，第一莫欺心。虎生犹可近，人毒不堪亲。来说是非者，便是是非人。</p><p>远水难救近火，远亲不如近邻。有茶有酒多兄弟，急难何曾见一人？<br>人情似纸张张薄，世事如棋局局新。山中自有千年树，世上难逢百岁人。</p><p>力微休负重，言轻莫劝人。无钱休入众，遭难莫寻亲。<br>平生莫作皱眉事，世上应无切齿人。士者国宝之，儒为席上珍。</p><p>若要断酒法，醒眼看醉人。求人须求大丈夫，济人须济急时无。<br>渴时一滴如甘露，醉后添杯不如无。久往令人贱，频来亲也疏。</p><p>酒中不语真君子，财上分明大丈夫。<br>积金千两，不如明解经书。养子不教如养驴，养女不教如养猪。</p><p>有田不耕仓廪（lǐn）虚，有书不读子孙愚。仓廪虚兮岁月乏，子孙愚兮礼仪疏。<br>同君一席话，胜读十年书。人不通古今，牛马而襟裾。</p><p>茫茫四海人无数，那个男儿是丈夫！美酒酿成缘好客，黄金散尽为收书。<br>救人一命，胜造七级浮屠。城门失火，殃及池鱼。</p><p>庭前生瑞草，好事不如无。欲求生富贵，需下死功夫。<br>百年成之不足，一旦败之有余。人心似铁，官法如炉。</p><p>善化不足，恶化有余。水至清则无鱼，人至察则无徒。<br>知者减半，愚者全无。在家由父，出嫁从夫。痴人畏妇，贤女敬夫。</p><p>是非终日有，不听自然无。宁可正而不足，不可邪而有余。宁可信其有，不可信其无。</p><p>竹篱茅舍风光好，僧院道房终不如。命里有时终须有，命里无时莫强求。<br>道院迎仙客，书堂隐相儒。庭栽栖凤竹，池养化龙鱼。</p><p>结交须胜己，似我不如无。但看三五日，相见不如初。<br>人情似水分高下，世事如云任卷舒。会说说都市，不会说说屋里。</p><p>磨刀恨不利，刀利伤人指。求财恨不多，财多海人子。<br>知足常足，终身不辱；知止常止，终身不耻。</p><p>有福伤财，无福伤己。差之毫厘，谬以千里。若登高必自卑，若涉远必自迩。三思而行，再思可矣。</p><p>使口不如自走，求人不如求己。小时是兄弟，长大各乡里。嫉财莫嫉食，怨生莫怨死。</p><p>人见白头嗔，我见白头喜。多少少年亡，不到白头死。</p><p>墙有缝，壁有耳。好事不出门，恶事传千里。</p><p>贼是小人，智过君子。君子固穷，小人穷斯滥矣。<br>贫穷自在，富贵多忧。不以我为德，反以我为仇。宁可直中取，不向曲中求。</p><p>人无远虑必有近忧。知我者谓我心忧，不知我者谓我何求。晴天不肯去，直待雨淋头。<br>成事莫说，覆水难收。</p><p>是非只为多开口，烦恼皆因强出头。忍得一时之气，免得百日之忧。<br>近来学得乌龟法，得缩头时且缩头。惧法朝朝乐，欺公日日忧。</p><p>人生一世，草生一春。黑发不知勤学早，转眼便是白头翁。月过十五光阴少，人到中年万事休。</p><p>儿孙自有儿孙福，莫为儿孙作马牛。人生不满百，常怀千岁忧。</p><p>今朝有酒今朝醉，明日愁来明日愁。路逢险处须回避，事到头来不自由。药能医假病，酒不解真愁。</p><p>人贫不语，水平不流。一家养女百家求，一马不行百马忧。<br>有花方酌酒，无月不登楼。三杯通大道，一醉解千愁。</p><p>深山毕竟藏猛虎，大海终须纳细流。惜花须检点，爱月不梳头。大抵选他肌骨好，不搽红粉也风流。</p><p>受恩深处宜先退，得意浓时便可休。莫待是非来入耳，从前恩爱反成仇。</p><p>留得五湖明月在，不愁无处下金钩。休别又鱼处，莫恋浅滩头。</p><p>去时终须去，再三留不住。忍一句，息一怒；饶一着，退一步。</p><p>三十不豪，四十不富，五十临近寻死路。生不认魂，死不认尸。<br>一寸光阴一寸金，寸金难买寸光阴。</p><p>父母恩深终有别，夫妻义重也分离。人生似鸟同林宿，大限来时各自飞。</p><p>人善被人欺，马善被人骑。人无横财不富，马无夜草不肥。人恶人怕天不怕，人善人欺天不欺。<br>善恶到头终有报，只争来早与来迟。黄河尚有澄清时，岂可人无得运时？</p><p>得宠思辱，居安思危。念念有如临敌日，心心常似过桥时。英雄行险道，富贵似花枝。<br>人情莫道春光好，只怕秋来有冷时。送君千里，终须一别。</p><p>但将冷眼观螃蟹，看你横行到几时。见事莫说，问事不知，闲事休管，无事早归。</p><p>假缎染就真红色，也被旁人说是非。善事可做，恶事莫为。许人一物，千金不移。</p><p>龙生龙子，虎生虎儿。龙游浅水遭虾戏，虎落平阳被犬欺。<br>一举首登龙虎榜，十年身到风凰池。十载寒窗无人问，一举成名天下知。</p><p>酒债寻常行处有，人生七十古来稀。养儿防老，积谷防饥。<br>当家才知盐米贵，养子方只父母恩。常将有日思无日，莫把无时当有时。</p><p>时来风送滕王阁，运去雷轰荐福碑。入门休问枯荣事，观看容颜便得知。<br>官清书吏廋，神灵庙祝肥。</p><p>息却雷霆之怒，罢却虎狼之威。饶人算之本，输人算之机。好言难得，恶语易施。一言既出，驷马难追。</p><p>道吾好者是吾贼，道吾恶者是吾师。路逢险处须当避，不是人才莫献诗。<br>三人行，必有我师焉。择其善者而从之，其不善者而改之。</p><p>欲昌和顺须为善，要振家声在读书。少壮不努力，老大徒伤悲。人有善愿，天必佑之。</p><p>莫吃卯时酒，昏昏醉倒酉。莫骂酉时妻，一夜受孤凄。种麻得麻，种豆得豆。天网恢恢，疏而不漏。</p><p>见官莫向前，做客莫向后。宁添一斗，莫添一口。</p><p>螳螂捕蝉，岂知黄雀在后。不求金玉重重，但愿儿孙个个贤。<br>一日夫妻，百世姻缘。百世修来同船渡，千世修来共枕眠。</p><p>杀人一万，自损三千。伤人一语，利如刀割。枯木逢春犹再发，人无两度再少年。未晚先投宿，鸡鸣早看天。</p><p>将相顶头堪走马，宰相肚里能撑船。富人思来年，贫人思眼前。世上若要人情好，赊去物件莫取钱。<br>生死有命，富贵在天。</p><p>击石原有火，不击乃无烟。人学始知道，不学亦枉然。莫笑他人老，终须还到老。<br>和得邻里好，犹如拾片宝。但能依本分，终须无烦恼。</p><p>大家做事寻常，小家做事慌张。大家礼仪教子弟，小家凶恶训儿郎。</p><p>君子爱财，取之有道；贞妇爱色，纳之以礼。善有善报，恶有恶报；不是不报，时候未到。<br>万恶淫为首，百善孝为先。</p>]]></content>
      
      
      <categories>
          
          <category> 国粹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国粹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最美古诗词</title>
      <link href="2020/10/10/guo-cui/zui-mei-gu-shi-ci.html"/>
      <url>2020/10/10/guo-cui/zui-mei-gu-shi-ci.html</url>
      
        <content type="html"><![CDATA[<h1 id="记我能熟读背诵的古诗词"><a href="#记我能熟读背诵的古诗词" class="headerlink" title="记我能熟读背诵的古诗词"></a>记我能熟读背诵的古诗词</h1><h2 id="《诗经-邶风》-静女"><a href="#《诗经-邶风》-静女" class="headerlink" title="《诗经 邶风》 静女"></a>《诗经 邶风》 静女</h2><p>静女其姝，俟我于城隅。<br>爱而不见，搔首踟蹰。</p><p>静女其娈，贻我彤管。<br>彤管有炜，说怿女美。</p><p>自牧归荑，洵美且异。<br>匪女之为美，美人之贻。</p><h2 id="《诗经-秦风》-蒹葭"><a href="#《诗经-秦风》-蒹葭" class="headerlink" title="《诗经 秦风》 蒹葭"></a>《诗经 秦风》 蒹葭</h2><p> 蒹葭苍苍，白露为霜<br> 所谓伊人，在水一方。<br> 溯洄从之，道阻且长。<br> 溯游从之，宛在水中央。  </p><p> 蒹葭萋萋，白露未晞。<br> 所谓伊人，在水之湄。<br> 溯洄从之，道阻且跻。<br> 溯游从之，宛在水中坻。</p><p> 蒹葭采采，白露未已。<br> 所谓伊人，在水之涘。<br> 溯洄从之，道阻且右。<br> 溯游从之，宛在水中沚。</p><h2 id="《垓（gai）下歌》-项羽"><a href="#《垓（gai）下歌》-项羽" class="headerlink" title="《垓（gāi）下歌》 项羽"></a>《垓（gāi）下歌》 项羽</h2><p> 力拔山兮气盖世。时不利兮骓不逝。<br> 骓不逝兮可奈何！虞兮虞兮奈若何！</p><h2 id="《大风歌》-刘邦"><a href="#《大风歌》-刘邦" class="headerlink" title="《大风歌》 刘邦"></a>《大风歌》 刘邦</h2><p>大风起兮云飞扬，威加海内兮归故乡。安得猛士兮守四方！</p><h2 id="《长歌行》-汉乐府"><a href="#《长歌行》-汉乐府" class="headerlink" title="《长歌行》 汉乐府"></a>《长歌行》 汉乐府</h2><p>青青园中葵，朝露待日晞。<br>阳春布德泽，万物生光辉。<br>常恐秋节至， 焜黄华叶衰。<br>百川东到海，何时复西归？<br>少壮不努力，老大徒伤悲！</p><h2 id="《上邪》-汉乐府"><a href="#《上邪》-汉乐府" class="headerlink" title="《上邪》 汉乐府"></a>《上邪》 汉乐府</h2><p>上邪！<br>我欲与君相知，长命无绝衰。<br>山无棱，江水为竭，<br>冬雷震震，夏雨雪，<br>天地合，乃敢与君绝！</p><h2 id="《迢迢牵牛星》-无名氏"><a href="#《迢迢牵牛星》-无名氏" class="headerlink" title="《迢迢牵牛星》 无名氏"></a>《迢迢牵牛星》 无名氏</h2><p>迢迢牵牛星，皎皎河汉女。<br>纤纤擢素手，札扎弄机杼。<br>终日不成章，泣涕零如雨；<br>河汉清且浅，相去复几许！<br>盈盈一水间，脉脉不得语。</p><h2 id="《观沧海》-曹操"><a href="#《观沧海》-曹操" class="headerlink" title="《观沧海》 曹操"></a>《观沧海》 曹操</h2><p>东临碣石，以观沧海。<br>水何澹澹（dàn），山岛竦峙。<br>树木丛生，百草丰茂。<br>秋风萧瑟，洪波涌起。<br>日月之行，若出其中；<br>星汉灿烂，若出其里。<br>幸甚至哉，歌以咏志。</p><h2 id="《龟虽寿》-曹操"><a href="#《龟虽寿》-曹操" class="headerlink" title="《龟虽寿》 曹操"></a>《龟虽寿》 曹操</h2><p>神龟虽寿，犹有竟时。<br>腾蛇乘雾，终为土灰。<br>老骥伏枥，志在千里；<br>烈士暮年， 壮心不已。<br>盈缩之期，不但在天；<br>养怡之福，可得永年。<br>幸甚至哉，歌以咏志。</p><h2 id="《短歌行》-曹操"><a href="#《短歌行》-曹操" class="headerlink" title="《短歌行》 曹操"></a>《短歌行》 曹操</h2><p>对酒当歌，人生几何？<br>譬如朝露，去日苦多。<br>慨当以慷，忧思难忘。<br>何以解忧，唯有杜康。</p><p>青青子衿，悠悠我心。<br>但为君故，沉吟至今。<br>呦呦鹿鸣，食野之苹。<br>我有嘉宾，鼓瑟吹笙。  </p><p>明明如月，何时可掇？<br>忧从中来，不可断绝。<br>越陌度阡，枉用相存。<br>契阔谈宴，心念旧恩。</p><p>月明星稀，乌鹊南飞。<br>绕树三匝，何枝可依？<br>山不厌高，海不厌深。<br>周公吐哺，天下归心。</p><h2 id="《归园田居-其一》-陶渊明"><a href="#《归园田居-其一》-陶渊明" class="headerlink" title="《归园田居 其一》 陶渊明"></a>《归园田居 其一》 陶渊明</h2><p>少无适俗韵，性本爱丘山。<br>误落尘网中，一去三十年。<br>羁鸟恋旧林，池鱼思故渊。<br>开荒南野际，守拙归园田。<br>方宅十余亩，草屋八九间。<br>榆柳荫后檐，桃李罗堂前。<br>暧暧远人村，依依墟里烟。<br>狗吠深巷中，鸡鸣桑树颠。<br>户庭无尘杂，虚室有余闲。<br>久在樊笼里，复得返自然。</p><h2 id="《归园田居-其三》-陶渊明"><a href="#《归园田居-其三》-陶渊明" class="headerlink" title="《归园田居 其三》 陶渊明"></a>《归园田居 其三》 陶渊明</h2><p>种豆南山下，草盛豆苗稀。<br>晨兴理荒秽，带月荷锄归。<br>道狭草木长，夕露沾我衣。<br>衣沾不足惜，但使愿无违。</p><h2 id="《饮酒-其五》-陶渊明"><a href="#《饮酒-其五》-陶渊明" class="headerlink" title="《饮酒 其五》 陶渊明"></a>《饮酒 其五》 陶渊明</h2><p>结庐在人境，而无车马喧。<br>问君何能尔，心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p><h2 id="《入若耶溪》-王籍"><a href="#《入若耶溪》-王籍" class="headerlink" title="《入若耶溪》 王籍"></a>《入若耶溪》 王籍</h2><p>艅艎何泛泛，空水共悠悠。<br>阴霞生远岫，阳景逐回流。<br>蝉噪林逾静，鸟鸣山更幽。<br>此地动归念，长年悲倦游。</p><h2 id="《敕勒歌》-北朝乐府"><a href="#《敕勒歌》-北朝乐府" class="headerlink" title="《敕勒歌》 北朝乐府"></a>《敕勒歌》 北朝乐府</h2><p>敕勒川，阴山下。<br>天似穹庐，笼盖四野。<br>天苍苍。野茫茫。<br>风吹草低见牛羊。</p><h2 id="《木兰诗》-北朝乐府"><a href="#《木兰诗》-北朝乐府" class="headerlink" title="《木兰诗》 北朝乐府"></a>《木兰诗》 北朝乐府</h2><p>唧唧复唧唧，木兰当户织。<br>不闻机杼声，惟闻女叹息。<br>问女何所思，问女何所忆。<br>女亦无所思，女亦无所忆。<br>昨夜见军帖，可汗大点兵，<br>军书十二卷，卷卷有爷名。<br>阿爷无大儿，木兰无长兄，<br>愿为市鞍马，从此替爷征。<br>东市买骏马，西市买鞍鞯，<br>南市买辔头，北市买长鞭。  </p><p>旦辞爷娘去，暮宿黄河边。<br>不闻爷娘唤女声，但闻黄河流水鸣溅溅。<br>旦辞黄河去，暮至黑山头。<br>不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。<br>万里赴戎机，关山度若飞。<br>朔气传金柝（tuò），寒光照铁衣。<br>将军百战死，壮士十年归。<br>归来见天子，天子坐明堂。<br>策勋十二转，赏赐百千强。<br>可汗问所欲，木兰不用尚书郎，<br>愿驰千里足，送儿还故乡。</p><p>爷娘闻女来，出郭相扶将。<br>阿姊闻妹来，当户理红妆。<br>小弟闻姊来，磨刀霍霍向猪羊。<br>开我东阁门，坐我西阁床。<br>脱我战时袍，著我旧时裳。<br>当窗理云鬓，对镜贴花黄。<br>出门看火伴，火伴皆惊忙。<br>同行十二年，不知木兰是女郎。<br>雄兔脚扑朔，雌兔眼迷离；<br>双兔傍地走，安能辨我是雌雄？</p><h2 id="《送杜少府之任蜀川》-王勃"><a href="#《送杜少府之任蜀川》-王勃" class="headerlink" title="《送杜少府之任蜀川》 王勃"></a>《送杜少府之任蜀川》 王勃</h2><p>城阙辅三秦，风烟望五津。<br>与君离别意， 同是宦游人。<br>海内存知己，天涯若比邻。<br>无为在歧路，儿女共沾巾。</p><h2 id="《登幽州台歌》-陈子昂"><a href="#《登幽州台歌》-陈子昂" class="headerlink" title="《登幽州台歌》 陈子昂"></a>《登幽州台歌》 陈子昂</h2><p>前不见古人，后不见来者。<br>念天地之悠悠，独怆然而涕下。</p><h2 id="《春江花月夜》-张若虚"><a href="#《春江花月夜》-张若虚" class="headerlink" title="《春江花月夜》 张若虚"></a>《春江花月夜》 张若虚</h2><p>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明。<br>江流宛转绕芳甸，月照花林皆似霰。<br>空里流霜不觉飞，汀（tīng）上白沙看不见。<br>江天一色无纤尘， 皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p><h2 id="《望月怀远》-张九龄"><a href="#《望月怀远》-张九龄" class="headerlink" title="《望月怀远》 张九龄"></a>《望月怀远》 张九龄</h2><p>海上生明月，天涯共此时。<br>情人怨遥夜，竟夕起相思。<br>灭烛怜光满，披衣觉露滋。<br>不堪盈手赠，还寝梦佳期。</p><h2 id="《回乡偶书》-贺知章"><a href="#《回乡偶书》-贺知章" class="headerlink" title="《回乡偶书》 贺知章"></a>《回乡偶书》 贺知章</h2><p>少小离家老大回，乡音无改鬓毛衰。<br>儿童相见不相识，笑问客从何处来。</p><h2 id="《登鹳雀楼》-王之涣"><a href="#《登鹳雀楼》-王之涣" class="headerlink" title="《登鹳雀楼》 王之涣"></a>《登鹳雀楼》 王之涣</h2><p>白日依山尽，黄河入海流。<br>欲穷千里目，更上一层楼。</p><h2 id="《凉州词》-王之涣"><a href="#《凉州词》-王之涣" class="headerlink" title="《凉州词》 王之涣"></a>《凉州词》 王之涣</h2><p>黄河远上白云间，一片孤城万仞山。<br>羌笛何须怨杨柳，春风不度玉门关。</p><h2 id="《春晓》-孟浩然"><a href="#《春晓》-孟浩然" class="headerlink" title="《春晓》 孟浩然"></a>《春晓》 孟浩然</h2><p>春眠不觉晓，处处闻啼鸟。<br>夜来风雨声，花落知多少。</p><h2 id="《过故人庄》-孟浩然"><a href="#《过故人庄》-孟浩然" class="headerlink" title="《过故人庄》 孟浩然"></a>《过故人庄》 孟浩然</h2><p>故人具鸡黍，邀我至田家。<br>绿树村边合，青山郭外斜。<br>开轩面场圃，把酒话桑麻。<br>待到重阳日，还来就菊花。</p><h2 id="《出塞-其一》-王昌龄"><a href="#《出塞-其一》-王昌龄" class="headerlink" title="《出塞 其一》 王昌龄"></a>《出塞 其一》 王昌龄</h2><p>秦时明月汉时关，万里长征人未还。<br>但使龙城飞将在，不教胡马度阴山。</p><h2 id="《从军行-其四》-王昌龄"><a href="#《从军行-其四》-王昌龄" class="headerlink" title="《从军行 其四》 王昌龄"></a>《从军行 其四》 王昌龄</h2><p>青海长云暗雪山，孤城遥望玉门关。<br>黄沙百战穿金甲，不破楼兰终不还。</p><h2 id="《芙蓉楼送辛渐》-王昌龄"><a href="#《芙蓉楼送辛渐》-王昌龄" class="headerlink" title="《芙蓉楼送辛渐》 王昌龄"></a>《芙蓉楼送辛渐》 王昌龄</h2><p>寒雨连江夜入吴，平明送客楚山孤。<br>洛阳亲友如相问，一片冰心在玉壶。</p><h2 id="《闺怨》-王昌龄"><a href="#《闺怨》-王昌龄" class="headerlink" title="《闺怨》 王昌龄"></a>《闺怨》 王昌龄</h2><p>闺中少妇不知愁，春日凝妆上翠楼。<br>忽见陌头杨柳色，悔教夫婿觅封侯。</p><h2 id="《凉州词》-王翰"><a href="#《凉州词》-王翰" class="headerlink" title="《凉州词》 王翰"></a>《凉州词》 王翰</h2><p>葡萄美酒夜光杯，欲饮琵琶马上催。<br>醉卧沙场君莫笑，古来征战几人回？</p><h2 id="《九月九忆山东兄弟》-王维"><a href="#《九月九忆山东兄弟》-王维" class="headerlink" title="《九月九忆山东兄弟》 王维"></a>《九月九忆山东兄弟》 王维</h2><p>独在异乡为异客，每逢佳节倍思亲。<br>遥知兄弟登高处，遍插茱（zhū）萸少一人。</p><h2 id="《山居秋暝》-王维"><a href="#《山居秋暝》-王维" class="headerlink" title="《山居秋暝》 王维"></a>《山居秋暝》 王维</h2><p>空山新雨后，天气晚来秋。<br>明月松间照，清泉石上流。<br>竹喧归浣女，莲动下渔舟。<br>随意春芳歇，王孙自可留。</p><h2 id="《相思》-王维"><a href="#《相思》-王维" class="headerlink" title="《相思》 王维"></a>《相思》 王维</h2><p>红豆生南国，春来发几枝。<br>愿君多采撷，此物最相思。</p><h2 id="《送元二使安西》-王维"><a href="#《送元二使安西》-王维" class="headerlink" title="《送元二使安西》 王维"></a>《送元二使安西》 王维</h2><p>渭城朝雨浥轻尘，客舍青青柳色新。<br>劝君更尽一杯酒，西出阳关无故人。</p><h2 id="《使至塞上》-王维"><a href="#《使至塞上》-王维" class="headerlink" title="《使至塞上》 王维"></a>《使至塞上》 王维</h2><p>单车欲问边，属国过居延。<br>征蓬出汉塞，归雁入胡天。<br>大漠孤烟直，长河落日圆。<br>萧关逢候骑，都护在燕然。</p><h2 id="《早发白帝城》-李白"><a href="#《早发白帝城》-李白" class="headerlink" title="《早发白帝城》 李白"></a>《早发白帝城》 李白</h2><p>朝辞白帝彩云间，千里江陵一日还。<br>两岸猿声啼不住，轻舟已过万重山。</p><h2 id="《峨眉山月歌》-李白"><a href="#《峨眉山月歌》-李白" class="headerlink" title="《峨眉山月歌》 李白"></a>《峨眉山月歌》 李白</h2><p>峨眉山月半轮秋，影入平羌江水流。<br>夜发清溪向三峡，思君不见下渝州。</p><h2 id="《度荆门送别》-李白"><a href="#《度荆门送别》-李白" class="headerlink" title="《度荆门送别》 李白"></a>《度荆门送别》 李白</h2><p>渡远荆门外，来从楚国游。<br>山随平野尽，江入大荒流。<br>月下飞天镜，云生结海楼。<br>仍怜故乡水，万里送行舟。</p><h2 id="《望庐山瀑布》-李白"><a href="#《望庐山瀑布》-李白" class="headerlink" title="《望庐山瀑布》 李白"></a>《望庐山瀑布》 李白</h2><p>日照香炉生紫烟，遥看瀑布挂前川。<br>飞流直下三千尺，疑是银河落九天。</p><h2 id="《黄鹤楼送孟浩然之广陵》-李白"><a href="#《黄鹤楼送孟浩然之广陵》-李白" class="headerlink" title="《黄鹤楼送孟浩然之广陵》 李白"></a>《黄鹤楼送孟浩然之广陵》 李白</h2><p>故人西辞黄鹤楼，烟花三月下扬州。<br>孤帆远影碧空尽，唯见长江天际流。</p><h2 id="《蜀道难》-李白"><a href="#《蜀道难》-李白" class="headerlink" title="《蜀道难》 李白"></a>《蜀道难》 李白</h2><p>噫吁嚱，危乎高哉！蜀道之难，难于上青天！<br>蚕丛及鱼凫，开国何茫然！<br>尔来四万八千岁，不与秦塞通人烟。<br>西当太白有鸟道，可以横绝峨眉巅。<br>地崩山摧壮士死，然后天梯石栈相钩连。<br>上有六龙回日之高标，下有冲波逆折之回川。<br>黄鹤之飞尚不得过， 猿揉欲度愁攀援。<br>青泥何盘盘，百步九折萦岩峦。<br>扪参历井仰胁息，以手抚膺坐长叹。<br>问君西游何时还？畏途巉岩不可攀。<br>但见悲鸟号古木，雄飞雌从绕林间。<br>又闻子规啼月夜，愁空山。<br>蜀道之难，难于上青天，使人听此凋朱颜！<br>连峰去天不盈尺，枯松倒挂倚绝壁。<br>飞湍瀑流争喧豗，砯（pīng）崖转石万壑雷。<br>其险也如此，嗟尔远道之人胡为乎来哉！<br>剑阁峥嵘而崔嵬，一夫当关，万夫莫开。<br>所守或匪亲，化为狼与豺。<br>朝避猛虎，夕避长蛇。<br>磨牙吮血，杀人如麻。<br>锦城虽云乐，不如早还家。<br>蜀道之难，难于上青天，侧身西望常咨嗟！</p><h2 id="《宣州谢朓（tiao）楼饯别校书叔云》-李白"><a href="#《宣州谢朓（tiao）楼饯别校书叔云》-李白" class="headerlink" title="《宣州谢朓（tiǎo）楼饯别校书叔云》 李白"></a>《宣州谢朓（tiǎo）楼饯别校书叔云》 李白</h2><p>弃我去者，昨日之日不可留，<br>乱我心者，今日之日多烦忧。<br>长风万里送秋雁，对此可以酣高楼。<br>蓬莱文章建安骨，中间小谢又清发。<br>俱怀逸兴壮思飞， 欲上青天揽明月。<br>抽刀断水水更流，举杯消愁愁更愁。<br>人生在世不称意，明朝散发弄扁舟。</p><h2 id="《将（qiang）进酒》-李白"><a href="#《将（qiang）进酒》-李白" class="headerlink" title="《将（qiāng）进酒》 李白"></a>《将（qiāng）进酒》 李白</h2><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。<br>钟鼓馔玉不足贵，但愿长醉不复醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑（xuè）。<br>主人何为言少钱，径须沽取对君酌。<br>五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。</p><h2 id="《月下独酌》-李白"><a href="#《月下独酌》-李白" class="headerlink" title="《月下独酌》 李白"></a>《月下独酌》 李白</h2><p>花间一壶酒，独酌无相亲。<br>举杯邀明月，对影成三人。<br>月既不解饮，影徒随我身。<br>暂伴月将影，行乐须及春。<br>我歌月徘徊，我舞影零乱。<br>醒时相交欢，醉后各分散。<br>永结无情游，相期邈云汉。</p><h2 id="《春夜洛城闻笛》-李白"><a href="#《春夜洛城闻笛》-李白" class="headerlink" title="《春夜洛城闻笛》 李白"></a>《春夜洛城闻笛》 李白</h2><p>谁家玉笛暗飞声，散入春风满洛城。<br>此夜曲中闻折柳，何人不起故园情。</p><h2 id="《闻王昌龄左迁龙标，遥有此寄》-李白"><a href="#《闻王昌龄左迁龙标，遥有此寄》-李白" class="headerlink" title="《闻王昌龄左迁龙标，遥有此寄》 李白"></a>《闻王昌龄左迁龙标，遥有此寄》 李白</h2><p>杨花落尽子规啼，闻道龙标过五溪。<br>我寄愁心与明月，随风直到夜郎西。</p><h2 id="《望天门山》-李白"><a href="#《望天门山》-李白" class="headerlink" title="《望天门山》 李白"></a>《望天门山》 李白</h2><p>天门中断楚江开，碧水东流至此回。<br>两岸青山相对出，孤帆一片日边来。</p><h2 id="《行路难三首-其一》-李白"><a href="#《行路难三首-其一》-李白" class="headerlink" title="《行路难三首 其一》 李白"></a>《行路难三首 其一》 李白</h2><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川， 将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海！</p><h2 id="《梦游天姥吟留别》-李白"><a href="#《梦游天姥吟留别》-李白" class="headerlink" title="《梦游天姥吟留别》 李白"></a>《梦游天姥吟留别》 李白</h2><p>海客谈瀛洲，烟涛微茫信难求。<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。<br>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐。身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。<br>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还，且放白鹿青崖间，须行即骑访名山。<br>按摧眉折腰事权贵，使我不得开心颜。</p><h2 id="《赠汪伦》-李白"><a href="#《赠汪伦》-李白" class="headerlink" title="《赠汪伦》 李白"></a>《赠汪伦》 李白</h2><p>李白乘舟将欲行，忽闻岸上踏歌声。<br>桃花潭水深千尺，不及汪伦送我情。</p><h2 id="《次北固山下》-王湾"><a href="#《次北固山下》-王湾" class="headerlink" title="《次北固山下》 王湾"></a>《次北固山下》 王湾</h2><p>客路青山外，行舟绿水前。<br>潮平两岸阔，风正一帆悬。<br>海日生残夜，江春入旧年。<br>乡书何处达，归雁洛阳边。</p><h2 id="《黄鹤楼》-崔颢（hao）"><a href="#《黄鹤楼》-崔颢（hao）" class="headerlink" title="《黄鹤楼》 崔颢（hào）"></a>《黄鹤楼》 崔颢（hào）</h2><p>昔人已乘黄鹤去，此地空余黄鹤楼。<br>黄鹤一去不复返，白云千载空悠悠。<br>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br>日暮乡关何处是，烟波江上使人愁。 </p><h2 id="《别董大二首-其一》-高适"><a href="#《别董大二首-其一》-高适" class="headerlink" title="《别董大二首 其一》 高适"></a>《别董大二首 其一》 高适</h2><p>千里黄云白日曛，北风吹雁雪纷纷。<br>莫愁前路无知己，天下谁人不识君。</p><h2 id="《题破山寺后禅院》-常建"><a href="#《题破山寺后禅院》-常建" class="headerlink" title="《题破山寺后禅院》 常建"></a>《题破山寺后禅院》 常建</h2><p>清晨入古寺，初日照高林。<br>曲径通幽处，禅房花木深。<br>山光悦鸟性，潭影空人心。<br>万籁此俱寂，但余钟磬音。</p><h2 id="《春望》-杜甫"><a href="#《春望》-杜甫" class="headerlink" title="《春望》 杜甫"></a>《春望》 杜甫</h2><p>国破山河在，城春草木深。<br>感时花溅泪，恨别鸟惊心。<br>烽火连三月，家书抵万金。<br>白头搔更短，浑欲不胜簪。</p><h2 id="《旅夜书怀》-杜甫"><a href="#《旅夜书怀》-杜甫" class="headerlink" title="《旅夜书怀》 杜甫"></a>《旅夜书怀》 杜甫</h2><p>细草微风岸，危樯独夜舟。<br>星垂平野阔，月涌大江流。<br>名岂文章著，官应老病休。<br>飘飘何所似，天地一沙鸥。</p><h2 id="《江南逢李龟年》-杜甫"><a href="#《江南逢李龟年》-杜甫" class="headerlink" title="《江南逢李龟年》 杜甫"></a>《江南逢李龟年》 杜甫</h2><p>岐王宅里寻常见，崔九堂前几度闻。<br>正是江南好风景，落花时节又逢君。</p><h2 id="《蜀相》-杜甫"><a href="#《蜀相》-杜甫" class="headerlink" title="《蜀相》 杜甫"></a>《蜀相》 杜甫</h2><p>丞相祠堂何处寻，锦官城外柏森森。<br>映阶碧草自春色，隔叶黄鹂空好音。<br>三顾频烦天下计，两朝开济老臣心。<br>出师未捷身先死，长使英雄泪满襟。</p><h2 id="《春夜喜雨》-杜甫"><a href="#《春夜喜雨》-杜甫" class="headerlink" title="《春夜喜雨》 杜甫"></a>《春夜喜雨》 杜甫</h2><p>好雨知时节，当春乃发生。<br>随风潜入夜，润物细无声。<br>野径云俱黑，江船火独明。<br>晓看红湿处，花重谨琯城。</p><h2 id="《客至》-杜甫"><a href="#《客至》-杜甫" class="headerlink" title="《客至》 杜甫"></a>《客至》 杜甫</h2><p>舍南舍北皆春水，但见群鸥日日来。<br>花径不曾缘客扫，蓬门今始为君开。<br>盘飧市远无兼味，樽酒家贫只旧醅。<br>肯与邻翁相对饮， 隔篱呼取尽余杯。</p><h2 id="《茅屋为秋风所破歌》-杜甫"><a href="#《茅屋为秋风所破歌》-杜甫" class="headerlink" title="《茅屋为秋风所破歌》 杜甫"></a>《茅屋为秋风所破歌》 杜甫</h2><p>八月秋高风怒号，卷我屋上三重茅。<br>茅飞渡江洒江郊，高者挂罥长林梢，下着飘转沉塘坳。<br>南村群童欺我老无力，忍能对面为盗贼。<br>公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。<br>俄顷风定云墨色，秋天漠漠向昏黑。<br>布衾多年冷似铁，娇儿恶卧踏里裂。<br>床头屋漏无干处，雨脚如麻未断绝。<br>自经丧乱少睡眠，长夜沾湿何由彻！<br>安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！<br>呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足。</p><h2 id="《赠花卿》-杜甫"><a href="#《赠花卿》-杜甫" class="headerlink" title="《赠花卿》 杜甫"></a>《赠花卿》 杜甫</h2><p>锦城丝管日纷纷，半入江风半入云。<br>此曲只应天上有，人间能得几回闻。</p><h2 id="《登岳阳楼》-杜甫"><a href="#《登岳阳楼》-杜甫" class="headerlink" title="《登岳阳楼》 杜甫"></a>《登岳阳楼》 杜甫</h2><p>昔闻洞庭水，今上岳阳楼。<br>吴楚东南坼，乾坤日夜浮。<br>亲朋无一字，老病有孤舟。<br>戎马关山北，凭轩涕泗流。</p><h2 id="《登高》-杜甫"><a href="#《登高》-杜甫" class="headerlink" title="《登高》 杜甫"></a>《登高》 杜甫</h2><p>风急天高猿啸哀，渚清沙白鸟飞回。<br>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。<br>艰难苦恨繁霜鬓，潦倒新停浊酒杯。</p><h2 id="《白雪歌送武判官归京》-岑参"><a href="#《白雪歌送武判官归京》-岑参" class="headerlink" title="《白雪歌送武判官归京》 岑参"></a>《白雪歌送武判官归京》 岑参</h2><p>北风卷地白草折，胡天八月即飞雪。<br>忽如一夜春风来，千树万树梨花开。<br>散入珠帘湿罗幕，狐裘不暖锦衾（qīn）薄。<br>将军角弓不得控，都护铁衣冷难着。<br>瀚海阑干百丈冰，愁云惨淡万里凝。<br>中军置酒饮归客，胡琴琵琶与羌笛。<br>纷纷暮雪下辕门，风掣红旗冻不翻。<br>轮台东门送君去，去时雪满天山路。<br>山回路转不见君，雪上空留马行处。</p><h2 id="《逢入京使》-岑参"><a href="#《逢入京使》-岑参" class="headerlink" title="《逢入京使》 岑参"></a>《逢入京使》 岑参</h2><p>故园东望路漫漫，双袖龙钟泪不干。<br>马上相逢无纸笔，凭君传语报平安。</p><h2 id="《枫桥夜泊》-张继"><a href="#《枫桥夜泊》-张继" class="headerlink" title="《枫桥夜泊》 张继"></a>《枫桥夜泊》 张继</h2><p>月落乌啼霜满天，江枫渔火对愁眠。<br>姑苏城外寒山寺，夜半钟声到客船。</p><h2 id="《逢雪宿芙蓉山主人》-刘长卿"><a href="#《逢雪宿芙蓉山主人》-刘长卿" class="headerlink" title="《逢雪宿芙蓉山主人》 刘长卿"></a>《逢雪宿芙蓉山主人》 刘长卿</h2><p>日暮苍山远，天寒白屋贫。<br>柴门闻犬吠，风雪夜归人。</p><h2 id="《滁州西涧》-韦应物"><a href="#《滁州西涧》-韦应物" class="headerlink" title="《滁州西涧》 韦应物"></a>《滁州西涧》 韦应物</h2><p>独怜幽草涧边生，上有黄鹂深树鸣。<br>春潮带雨晚来急，野渡无人舟自横。</p><h2 id="《游子吟》-孟郊"><a href="#《游子吟》-孟郊" class="headerlink" title="《游子吟》 孟郊"></a>《游子吟》 孟郊</h2><p>慈母手中线，游子身上衣。<br>临行密密缝，意恐迟迟归。<br>谁言寸草心，报得三春晖。</p><h2 id="《题都城南庄》-崔护"><a href="#《题都城南庄》-崔护" class="headerlink" title="《题都城南庄》 崔护"></a>《题都城南庄》 崔护</h2><p>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p><h2 id="《早春呈水部张十八员外二首-其一》-韩愈"><a href="#《早春呈水部张十八员外二首-其一》-韩愈" class="headerlink" title="《早春呈水部张十八员外二首 其一》 韩愈"></a>《早春呈水部张十八员外二首 其一》 韩愈</h2><p>天街小雨润如酥，草色遥看近却无。<br>最是一年春好处，绝胜烟柳满皇都。</p><h2 id="《秋词二首-其一》-刘禹锡"><a href="#《秋词二首-其一》-刘禹锡" class="headerlink" title="《秋词二首 其一》 刘禹锡"></a>《秋词二首 其一》 刘禹锡</h2><p>自古逢秋悲寂寥，我言秋日胜春朝。<br>晴空一鹤排云上，便引诗情到碧霄。</p><h2 id="《竹枝词二首-其一》-刘禹锡"><a href="#《竹枝词二首-其一》-刘禹锡" class="headerlink" title="《竹枝词二首 其一》 刘禹锡"></a>《竹枝词二首 其一》 刘禹锡</h2><p>杨柳青青江水平，闻郎江上唱歌声。<br>东边日出西边雨，道是无晴却有晴。</p><h2 id="《乌衣巷》-刘禹锡"><a href="#《乌衣巷》-刘禹锡" class="headerlink" title="《乌衣巷》 刘禹锡"></a>《乌衣巷》 刘禹锡</h2><p>朱雀桥边野草花，乌衣巷口夕阳斜。<br>旧时王谢堂前燕，飞入寻常百姓家。</p><h2 id="《石头城》-刘禹锡"><a href="#《石头城》-刘禹锡" class="headerlink" title="《石头城》 刘禹锡"></a>《石头城》 刘禹锡</h2><p>山围故国周遭在，潮打空城寂寞回。<br>淮水东边旧时月，夜深还过女墙来。</p><h2 id="《酬乐天扬州初逢席上见赠》-刘禹锡"><a href="#《酬乐天扬州初逢席上见赠》-刘禹锡" class="headerlink" title="《酬乐天扬州初逢席上见赠》 刘禹锡"></a>《酬乐天扬州初逢席上见赠》 刘禹锡</h2><p>巴山楚水凄凉地，二十三年弃置身。<br>怀旧空吟闻笛赋，到乡翻似烂柯人。<br>沉舟侧畔千帆过，病树前头万木春。<br>今日听君歌一曲，暂凭杯酒长精神。</p><h2 id="《赠的古原草送别》-白居易"><a href="#《赠的古原草送别》-白居易" class="headerlink" title="《赠的古原草送别》 白居易"></a>《赠的古原草送别》 白居易</h2><p>离离原上草，一岁一枯荣。<br>野火烧不尽，春风吹又生。<br>远芳侵古道，晴翠接荒城。<br>又送王孙去，萋萋满别情。</p><h2 id="《长恨歌》-白居易"><a href="#《长恨歌》-白居易" class="headerlink" title="《长恨歌》 白居易"></a>《长恨歌》 白居易</h2><p>汉皇重色思倾国，御宇多年求不得。<br>杨家有女初长成，养在深闺人未识。<br>天生丽质难自弃，一朝选在君王侧。<br>回眸一笑百媚生，六宫粉黛无颜色。<br>春寒赐浴华清池，温泉水滑洗凝脂。<br>侍儿扶起娇无力，始是新承恩泽时。<br>云鬓花颜金步摇，芙蓉帐暖度春宵。<br>春宵苦短日高起，从此君王不早朝。<br>承欢侍宴无闲暇，春从春游夜专夜。<br>后宫佳丽三千人，三千宠爱在一身。<br>金屋妆成娇侍夜，玉楼宴罢醉和春。<br>姊妹弟兄皆列土，可怜光彩生门户。<br>遂令天下父母心，不重生男重生女。<br>骊宫高处入青云，仙乐风飘处处闻。<br>缓歌慢舞凝丝竹，尽日君王不看足。<br>渔阳鼙（pí）鼓动地来，惊破霓裳羽衣曲。<br>九重城阙烟尘生，千乘万骑西南行。<br>翠华摇摇行复止，西出都门百余里。<br>六军不发无奈何，宛转蛾眉马前死。<br>花钿委地无人收，翠翘金雀玉搔头。<br>君王掩面救不得，回看血泪相和流。<br>黄埃散漫风萧索，云栈萦纡登剑阁。<br>峨眉山下少人行，旌旗无光日色薄。<br>行宫见月伤心色，夜雨闻铃肠断声。<br>天旋地转回龙驭，到此踌躇不能去。<br>马嵬坡下泥土中，不见玉颜空死处。<br>君臣相顾尽沾衣，东望都门信马归。<br>归来池苑皆依旧，太液芙蓉未央柳。<br>芙蓉如面柳如眉，对此如何不泪垂。<br>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南内多秋草，落叶满阶红不扫。<br>梨园弟子白发新，椒房阿监青娥老。<br>夕殿萤飞思悄然，孤灯挑尽未成眠。<br>迟迟钟鼓初长夜，耿耿星河欲曙天。<br>鸳鸯瓦冷霜华重，翡翠衾（qīn）寒谁与共。<br>悠悠生死别经年，魂魄不曾来入梦。<br>临邛（qióng）道士鸿都客，能以精诚致魂魄。<br>为感君王展转思，遂教方士殷勤觅。<br>排空驭气奔如电，升天入地求之遍。<br>上穷碧落下黄泉，两处茫茫皆不见。<br>忽闻海上有仙山，山在虚无缥缈间。<br>楼阁玲珑五云起，其中绰（chuò）约多仙子。<br>中有一人字太真，雪肤花貌参差是。<br>金阙西厢叩玉扃（jiōng），转教小玉报双成。<br>闻道汉家天子使，九华帐里梦魂惊。<br>揽衣推枕起徘徊，珠箔银屏迤（yǐ）逦开。<br>云鬓半偏新睡觉，花冠不整下堂来。<br>风吹仙袂飘飘举，犹似霓裳羽衣舞。<br>玉容寂寞泪阑干，梨花一枝春带雨。<br>含情凝睇谢君王，一别音容两渺茫。<br>昭阳殿里恩爱绝，蓬莱宫中日月长。<br>回头下望人寰（huán）处，不见长安见尘雾。<br>惟将旧物表深情，钿合金钗寄将去。<br>钗留一股合一扇，钗擘黄金合分钿。<br>但教心似金钿坚，天上人间会相见。<br>临别殷勤重寄词，词中有誓两心知。<br>七月七日长生殿，半夜无人私语时。<br>在天愿作比翼鸟，在地愿为连理枝。<br>天长地久有时尽，此恨绵绵无绝期。</p><h2 id="《琵琶行》-白居易"><a href="#《琵琶行》-白居易" class="headerlink" title="《琵琶行》 白居易"></a>《琵琶行》 白居易</h2><p>浔阳江头夜送客，枫叶荻花秋瑟瑟。<br>主人下马客在船，举酒欲饮无管弦。<br>醉不成欢惨将别，别时茫茫江浸月。<br>忽闻水上琵琶声，主人忘归客不发。<br>寻声暗问弹者谁，琵琶声停欲语迟。<br>移船相近邀相见，添酒回灯重开宴。<br>千呼万唤始出来，犹抱琵琶半遮面。<br>转轴拨弦三两声，未成曲调先有情。<br>弦弦掩抑声声思，似诉平生不得志。<br>低眉信手续续弹，说尽心中无限事。<br>轻拢慢捻抹复挑，初为霓裳后六幺。<br>大弦嘈嘈如急雨，小弦切切如私语。<br>嘈嘈切切错杂弹，大珠小珠落玉盘。<br>间关莺语花底滑，幽咽泉流冰下难。<br>冰泉冷涩弦凝绝，凝绝不通声暂歇。<br>别有幽愁暗恨生，此时无声胜有声。<br>银瓶乍破水浆迸，铁骑突出刀枪鸣。<br>曲终收拨当心画，四弦一声如裂帛。<br>东船西舫悄无言，唯见江心秋月白。<br>沉吟放拨插弦中，整顿衣裳起敛容。<br>自言本是京城女，家在虾蟆陵下住。<br>十三学得琵琶成，名属教坊第一部。<br>曲罢曾教善才服，妆成每被秋娘妒。<br>五陵年少争缠头，一曲红绡不知数。<br>钿头云篦击节碎，血色罗裙翻酒污。<br>今年欢笑复明年，秋月春风等闲度。<br>弟走从军阿姨死，暮去朝来颜色故。<br>门前冷落鞍马稀，老大嫁作商人妇。<br>商人重利轻别离，前月浮梁买茶去。<br>去来江口守空船，绕船月明江水寒。<br>深夜忽梦少年事，梦啼妆泪红阑干。<br>我闻琵琶已叹息，又闻此语重唧唧。<br>同是天涯沦落人，相逢何必曾相识。<br>我从去年辞帝京，谪居卧病浔阳城。<br>浔阳地僻无音乐，终岁不闻丝竹声。<br>住近湓江地低湿，黄芦苦竹绕宅生。<br>其间旦暮闻何物，杜鹃啼血猿哀鸣。<br>春江花朝秋月夜，往往取酒还独倾。<br>岂无山歌与村笛，呕哑嘲哳难为听。<br>今夜闻君琵琶语，如听仙乐耳暂明。<br>莫辞更坐弹一曲，为君翻作琵琶行。<br>感我此言良久立，却坐促弦弦转急。<br>凄凄不似向前声，满座重闻皆掩泣。<br>座中泣下谁最多，江州司马青衫湿。</p><h2 id="《钱塘江春行》-白居易"><a href="#《钱塘江春行》-白居易" class="headerlink" title="《钱塘江春行》 白居易"></a>《钱塘江春行》 白居易</h2><p>孤山寺北贾亭西，水面初平云脚低。<br>几处早莺争暖树，谁家新燕啄春泥。<br>乱花渐欲迷人眼，浅草才能没马蹄。<br>最爱湖东行不足，绿杨阴里白沙堤。</p><h2 id="《江雪》-柳宗元"><a href="#《江雪》-柳宗元" class="headerlink" title="《江雪》 柳宗元"></a>《江雪》 柳宗元</h2><p>千山鸟飞绝，万径人踪灭。<br>孤舟蓑笠翁，独钓寒江雪。</p><h2 id="《闻乐天授江州司马》-元稹（zhen）"><a href="#《闻乐天授江州司马》-元稹（zhen）" class="headerlink" title="《闻乐天授江州司马》 元稹（zhěn）"></a>《闻乐天授江州司马》 元稹（zhěn）</h2><p>残灯无焰影幢幢，此夕闻君谪九江。<br>垂死病中惊坐起，暗风吹雨入寒窗。</p><h2 id="《离思五首-其四》-元稹"><a href="#《离思五首-其四》-元稹" class="headerlink" title="《离思五首 其四》 元稹"></a>《离思五首 其四》 元稹</h2><p>曾经沧海难为水，除却巫山不是云。<br>取次花丛懒回顾，半缘修道半缘君。</p><h2 id="《题鹤林寺僧舍》-李涉"><a href="#《题鹤林寺僧舍》-李涉" class="headerlink" title="《题鹤林寺僧舍》 李涉"></a>《题鹤林寺僧舍》 李涉</h2><p>终日昏昏醉梦间，忽闻春尽强登山。<br>因过竹院逢僧话，又得浮生半日闲。</p><h2 id="《陇西行》-陈陶"><a href="#《陇西行》-陈陶" class="headerlink" title="《陇西行》 陈陶"></a>《陇西行》 陈陶</h2><p>誓扫匈奴不顾身，五千貂锦丧胡尘。<br>可怜无定河边骨，犹是春闺梦里人。</p><h2 id="《寻隐者不遇》-贾岛"><a href="#《寻隐者不遇》-贾岛" class="headerlink" title="《寻隐者不遇》 贾岛"></a>《寻隐者不遇》 贾岛</h2><p>松下问童子，言师采药去。<br>只在此山中，云深不知处。</p><h2 id="《近试上张水部》-朱庆馀"><a href="#《近试上张水部》-朱庆馀" class="headerlink" title="《近试上张水部》 朱庆馀"></a>《近试上张水部》 朱庆馀</h2><p>洞房昨夜停红烛，待晓堂前拜舅姑。<br>妆罢低声问夫婿：画眉深浅入时无？</p><h2 id="《雁门太守行》-李贺"><a href="#《雁门太守行》-李贺" class="headerlink" title="《雁门太守行》 李贺"></a>《雁门太守行》 李贺</h2><p>黑云压城城欲摧，甲光向日金鳞开。<br>角声满天秋色里，塞上燕脂凝夜紫。<br>半卷红旗临易水，霜重鼓寒声不起。<br>报君黄金台上意，提携玉龙为君死。</p><h2 id="《寄扬州韩绰判官》-杜牧"><a href="#《寄扬州韩绰判官》-杜牧" class="headerlink" title="《寄扬州韩绰判官》 杜牧"></a>《寄扬州韩绰判官》 杜牧</h2><p>青山隐隐水迢迢，秋尽江南草未凋。<br>二十四桥明月夜，玉人何处教吹箫。</p><h2 id="《山行》-杜牧"><a href="#《山行》-杜牧" class="headerlink" title="《山行》 杜牧"></a>《山行》 杜牧</h2><p>远上寒山石径斜，白云深处有人家。<br>停车坐爱枫林晚，霜叶红于二月花。</p><h2 id="《过华清宫绝句三首-其一》-杜牧"><a href="#《过华清宫绝句三首-其一》-杜牧" class="headerlink" title="《过华清宫绝句三首 其一》 杜牧"></a>《过华清宫绝句三首 其一》 杜牧</h2><p>长安回望绣成堆，山顶千门次第开。<br>一骑红尘妃子笑，无人知是荔枝来。</p><h2 id="《赤壁》-杜牧"><a href="#《赤壁》-杜牧" class="headerlink" title="《赤壁》 杜牧"></a>《赤壁》 杜牧</h2><p>折戟沉沙铁未销，自将磨洗认前朝。<br>东风不与周郎便，铜雀春深锁二乔。</p><h2 id="《江南春》-杜牧"><a href="#《江南春》-杜牧" class="headerlink" title="《江南春》 杜牧"></a>《江南春》 杜牧</h2><p>千里莺啼绿映红，水村山郭酒旗风。<br>南朝四百八十寺，多少楼台烟雨中。</p><h2 id="《泊秦淮》-杜牧"><a href="#《泊秦淮》-杜牧" class="headerlink" title="《泊秦淮》 杜牧"></a>《泊秦淮》 杜牧</h2><p>烟笼寒水月笼沙，夜泊秦淮近酒家。<br>商女不知亡国恨，隔江犹唱后庭花。</p><h2 id="《清明》-杜牧"><a href="#《清明》-杜牧" class="headerlink" title="《清明》 杜牧"></a>《清明》 杜牧</h2><p>清明时节雨纷纷，路上行人欲断魂。<br>借问酒家何处有？牧童遥指杏花村。</p><h2 id="《锦瑟》-李商隐"><a href="#《锦瑟》-李商隐" class="headerlink" title="《锦瑟》 李商隐"></a>《锦瑟》 李商隐</h2><p>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p><h2 id="《无题》-李商隐"><a href="#《无题》-李商隐" class="headerlink" title="《无题》 李商隐"></a>《无题》 李商隐</h2><p>相见时难别亦难，东风无力百花残。<br>春蚕到死丝方尽，蜡炬成灰泪始干。<br>晓镜但愁云鬓改，夜吟应觉月光寒。<br>蓬山此去无多路，青鸟殷勤为探看。</p><h2 id="《无题二首-其一》-李商隐"><a href="#《无题二首-其一》-李商隐" class="headerlink" title="《无题二首 其一》 李商隐"></a>《无题二首 其一》 李商隐</h2><p>昨夜星辰昨夜风，画楼西畔桂堂东。<br>身无彩凤双飞翼，心有灵犀一点通。<br>隔座送钩春酒暖，分曹射覆蜡灯红。<br>嗟余听鼓应官去，走马兰台类转蓬。</p><h2 id="《登乐游原》-李商隐"><a href="#《登乐游原》-李商隐" class="headerlink" title="《登乐游原》 李商隐"></a>《登乐游原》 李商隐</h2><p>向晚意不适，驱车登古原。<br>夕阳无限好，只是近黄昏。</p><h2 id="《夜雨寄北》-李商隐"><a href="#《夜雨寄北》-李商隐" class="headerlink" title="《夜雨寄北》 李商隐"></a>《夜雨寄北》 李商隐</h2><p>君问归期未有期，巴山夜雨涨秋池。<br>何当共剪西窗烛，却话巴山夜雨时。</p><h2 id="《林逋》-梅花"><a href="#《林逋》-梅花" class="headerlink" title="《林逋》 梅花"></a>《林逋》 梅花</h2><p>众芳摇落独暄妍，占尽风情向小园。<br>疏影横斜水清浅，暗香浮动月黄昏。<br>霜禽欲下先偷眼，粉蝶如知合断魂。<br>幸有微吟可相狎，不须檀（tán）板共金尊。</p><h2 id="《泊船瓜州》-王安石"><a href="#《泊船瓜州》-王安石" class="headerlink" title="《泊船瓜州》 王安石"></a>《泊船瓜州》 王安石</h2><p>京口瓜洲一水间，钟山只隔数重山。<br>春风又绿江南岸，明月何时照我还。</p><h2 id="《梅花》-王安石"><a href="#《梅花》-王安石" class="headerlink" title="《梅花》 王安石"></a>《梅花》 王安石</h2><p>墙角数枝梅，凌寒独自开。<br>遥知不是雪，为有暗香来。</p><h2 id="《饮湖上初晴后雨-其二》-苏轼"><a href="#《饮湖上初晴后雨-其二》-苏轼" class="headerlink" title="《饮湖上初晴后雨 其二》 苏轼"></a>《饮湖上初晴后雨 其二》 苏轼</h2><p>水光潋滟晴方好，山色空蒙雨亦奇。<br>欲把西湖比西子，淡妆浓抹总相宜。</p><h2 id="《题西林壁》-苏轼"><a href="#《题西林壁》-苏轼" class="headerlink" title="《题西林壁》 苏轼"></a>《题西林壁》 苏轼</h2><p>横看成岭侧成峰，远近高低各不同。<br>不识庐山真面目，只缘身在此山中。</p><h2 id="《惠崇春江晚景》-苏轼"><a href="#《惠崇春江晚景》-苏轼" class="headerlink" title="《惠崇春江晚景》 苏轼"></a>《惠崇春江晚景》 苏轼</h2><p>竹外桃花三两枝，春江水暖鸭先知。<br>蒌蒿满地芦芽短，正是河豚欲上时。</p><h2 id="《小池》-杨万里"><a href="#《小池》-杨万里" class="headerlink" title="《小池》 杨万里"></a>《小池》 杨万里</h2><p>泉眼无声惜细流，树阴照水爱晴柔。<br>小荷才露尖尖角，早有蜻蜓立上头。</p><h2 id="《晓出净慈寺送林子方》-杨万里"><a href="#《晓出净慈寺送林子方》-杨万里" class="headerlink" title="《晓出净慈寺送林子方》 杨万里"></a>《晓出净慈寺送林子方》 杨万里</h2><p>毕竟西湖六月中，风光不与四时同。<br>接天莲叶无穷碧，映日荷花别样红。</p><h2 id="《游山西村》-陆游"><a href="#《游山西村》-陆游" class="headerlink" title="《游山西村》 陆游"></a>《游山西村》 陆游</h2><p>莫笑农家腊酒浑，丰年留客足鸡豚。<br>山重水复疑无路，柳暗花明又一村。<br>箫鼓追随春社近，衣冠简朴古风存。<br>从今若许闲乘月，拄杖无时夜叩门。</p><h2 id="《书愤》-陆游"><a href="#《书愤》-陆游" class="headerlink" title="《书愤》 陆游"></a>《书愤》 陆游</h2><p>早岁那知世事艰，中原北望气如山。<br>楼船夜雪瓜洲渡，铁马秋风大散关。<br>塞上长城空自许，镜中衰鬓已先斑。<br>出师一表真名世，千载谁堪伯仲间。</p><h2 id="《十一月四日风雨大作二首-其二》-陆游"><a href="#《十一月四日风雨大作二首-其二》-陆游" class="headerlink" title="《十一月四日风雨大作二首 其二》 陆游"></a>《十一月四日风雨大作二首 其二》 陆游</h2><p>僵卧孤村不自哀，尚思为国戍轮台。<br>夜阑卧听风吹雨，铁马冰河入梦来。</p><h2 id="《示儿》-陆游"><a href="#《示儿》-陆游" class="headerlink" title="《示儿》 陆游"></a>《示儿》 陆游</h2><p>死去元知万事空，但悲不见九州同。<br>王师北定中原日，家祭无忘告乃翁。</p><h2 id="《春日》-朱熹"><a href="#《春日》-朱熹" class="headerlink" title="《春日》 朱熹"></a>《春日》 朱熹</h2><p>胜日寻芳泗水滨，无边光景一时新。<br>等闲识得东风面，万紫千红总是春。</p><h2 id="《观书有感二首-其一》-朱熹"><a href="#《观书有感二首-其一》-朱熹" class="headerlink" title="《观书有感二首 其一》 朱熹"></a>《观书有感二首 其一》 朱熹</h2><p>半亩方塘一鉴开，天光云影共徘徊。<br>问渠那得清如许，为有源头活水来。</p><h2 id="《题临安邸》-林升"><a href="#《题临安邸》-林升" class="headerlink" title="《题临安邸》 林升"></a>《题临安邸》 林升</h2><p>山外青山楼外楼，西湖歌舞几时休？<br>暖风熏得游人醉，直把杭州作汴州。</p><h2 id="《游园不值》-叶绍翁"><a href="#《游园不值》-叶绍翁" class="headerlink" title="《游园不值》 叶绍翁"></a>《游园不值》 叶绍翁</h2><p>应怜屐齿印苍苔，小扣柴扉久不开。<br>春色满园关不住，一枝红杏出墙来。</p><h2 id="《过零丁洋》-文天祥"><a href="#《过零丁洋》-文天祥" class="headerlink" title="《过零丁洋》 文天祥"></a>《过零丁洋》 文天祥</h2><p>辛苦遭逢起一经，干戈寥落四周星。<br>山河破碎风飘絮，身世浮沉雨打萍。<br>惶恐滩头说惶恐，零丁洋里叹零丁。<br>人生自古谁无死，留取丹心照汗青。</p><h2 id="《墨梅》-王冕"><a href="#《墨梅》-王冕" class="headerlink" title="《墨梅》 王冕"></a>《墨梅》 王冕</h2><p>我家洗砚池头树，朵朵花开淡墨痕。<br>不要人夸好颜色，只留清气满乾坤。</p><h2 id="《石灰吟》-于谦"><a href="#《石灰吟》-于谦" class="headerlink" title="《石灰吟》 于谦"></a>《石灰吟》 于谦</h2><p>千锤万击出深山，烈火焚烧若等闲。<br>粉身碎骨浑不怕，要留清白在人间。</p><h2 id="《竹石》-郑板桥"><a href="#《竹石》-郑板桥" class="headerlink" title="《竹石》 郑板桥"></a>《竹石》 郑板桥</h2><p>咬定青山不放松，立根原在破岩中。<br>千磨万击还坚劲，任尔东西南北风。</p><h2 id="《论诗五首-其二》-赵翼"><a href="#《论诗五首-其二》-赵翼" class="headerlink" title="《论诗五首 其二》 赵翼"></a>《论诗五首 其二》 赵翼</h2><p>李杜诗篇万口传，至今已觉不新鲜。<br>江山代有才人出，各领风骚数百年。</p><h2 id="《已亥杂诗-第五首》-龚自珍"><a href="#《已亥杂诗-第五首》-龚自珍" class="headerlink" title="《已亥杂诗 第五首》 龚自珍"></a>《已亥杂诗 第五首》 龚自珍</h2><p>浩荡离愁白日斜，吟鞭东指即天涯。<br>落红不是无情物，化作春泥更护花。</p><h2 id="《已亥杂诗-第一首》-龚自珍"><a href="#《已亥杂诗-第一首》-龚自珍" class="headerlink" title="《已亥杂诗 第一首》 龚自珍"></a>《已亥杂诗 第一首》 龚自珍</h2><p>九州生气恃风雷，万马齐喑究可哀。<br>我劝天公重抖擞，不拘一格降人才。</p><h2 id="《渔父》-张志和"><a href="#《渔父》-张志和" class="headerlink" title="《渔父》 张志和"></a>《渔父》 张志和</h2><p>西塞山前白鹭飞，桃花流水鳜鱼肥。青箬笠，绿蓑衣，斜风细雨不须归。</p><h2 id="《忆江南》-白居易"><a href="#《忆江南》-白居易" class="headerlink" title="《忆江南》 白居易"></a>《忆江南》 白居易</h2><p>江南好，风景旧曾谙。日出江花红胜火，春来江水绿如蓝。能不忆江南。</p><h2 id="《虞美人》-李煜"><a href="#《虞美人》-李煜" class="headerlink" title="《虞美人》 李煜"></a>《虞美人》 李煜</h2><p>春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。<br>雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。</p><h2 id="《乌夜啼》-李煜"><a href="#《乌夜啼》-李煜" class="headerlink" title="《乌夜啼》 李煜"></a>《乌夜啼》 李煜</h2><p>无言独上西楼，月如钩。寂寞梧桐深院锁清秋。<br>剪不断，理还乱，是离愁。别有一番滋味在心头。</p><h2 id="《渔家傲》-秋思-范仲淹"><a href="#《渔家傲》-秋思-范仲淹" class="headerlink" title="《渔家傲》-秋思 范仲淹"></a>《渔家傲》-秋思 范仲淹</h2><p>塞下秋来风景异，衡阳雁去无留意。四面边声连角起。千嶂里，长烟落日孤城闭。<br>浊酒一杯家万里，燕然未勒归无计。羌管悠悠霜满地。人不寐，将军白发征夫泪。</p><h2 id="《雨霖铃》-柳永"><a href="#《雨霖铃》-柳永" class="headerlink" title="《雨霖铃》 柳永"></a>《雨霖铃》 柳永</h2><p>寒蝉凄切。对长亭晚，骤雨初歇。都门帐饮无绪，留恋处、兰舟催发。执手相看泪眼，<br>竟无语凝噎。念去去、千里烟波，暮霭沉沉楚天阔。<br>多情自古伤离别。更那堪、冷落清秋节。今宵酒醒何处？杨柳岸、晓风残月。<br>此去经年，应是良辰好景虚设。便纵有、千种风情，更与何人说。</p><h2 id="《凤栖梧》-柳永"><a href="#《凤栖梧》-柳永" class="headerlink" title="《凤栖梧》 柳永"></a>《凤栖梧》 柳永</h2><p>伫（zhù）倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。<br>拟把疏狂图一醉。对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。</p><h2 id="《天仙子》-张先"><a href="#《天仙子》-张先" class="headerlink" title="《天仙子》 张先"></a>《天仙子》 张先</h2><p>水调数声持酒听，午醉醒来愁未醒。送春春去几时回？临晚镜，伤流景，往事后期空记省。<br>沙上并禽池上暝，云破月来花弄影。重重帘幕密遮灯，风不定，人初静。明日落红应满径。</p><h2 id="《浣溪沙》-晏殊"><a href="#《浣溪沙》-晏殊" class="headerlink" title="《浣溪沙》 晏殊"></a>《浣溪沙》 晏殊</h2><p>一曲新词酒一杯，去年天气旧亭台。夕阳西下几时回。<br>无可奈何花落去，似曾相识燕归来。小园香径独徘徊。</p><h2 id="《蝶恋花》-晏殊"><a href="#《蝶恋花》-晏殊" class="headerlink" title="《蝶恋花》 晏殊"></a>《蝶恋花》 晏殊</h2><p>槛菊愁烟兰泣露，罗幕轻寒，燕子双飞去。明月不谙离恨苦，斜光到晓穿朱户。<br>昨夜西风凋碧树，独上高楼，望尽天涯路。欲寄彩笺兼尺素，山长水阔知何处。</p><h2 id="《玉楼春》-宋祁"><a href="#《玉楼春》-宋祁" class="headerlink" title="《玉楼春》 宋祁"></a>《玉楼春》 宋祁</h2><p>东城渐觉风光好，縠皱波纹迎客棹。绿杨烟外晓寒轻，红杏枝头春意闹。<br>浮生长恨欢娱少，肯爱千金轻一笑。为君持酒劝斜阳，且向花间留晚照。</p><h2 id="《江城子-密州出猎》-苏轼"><a href="#《江城子-密州出猎》-苏轼" class="headerlink" title="《江城子 密州出猎》 苏轼"></a>《江城子 密州出猎》 苏轼</h2><p>老夫聊发少年狂，左牵黄，右擎苍。锦帽貂裘，千骑卷平冈。为报倾城随太守，亲射虎，看孙郎。<br>酒酣胸胆尚开张，鬓微霜，又何妨。持节云中，何日遣冯唐。会挽雕弓如满月，西北望，射天狼。</p><h2 id="《江城子-乙卯正月二十日记梦》-苏轼"><a href="#《江城子-乙卯正月二十日记梦》-苏轼" class="headerlink" title="《江城子 乙卯正月二十日记梦》 苏轼"></a>《江城子 乙卯正月二十日记梦》 苏轼</h2><p>十年生死两茫茫。不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。<br>夜来幽梦忽还乡。小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。</p><h2 id="《水调歌头-…》-苏轼"><a href="#《水调歌头-…》-苏轼" class="headerlink" title="《水调歌头 …》 苏轼"></a>《水调歌头 …》 苏轼</h2><p>明月几时有，把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。<br>转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆。人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。</p><h2 id="《念奴娇-赤壁怀古》-苏轼"><a href="#《念奴娇-赤壁怀古》-苏轼" class="headerlink" title="《念奴娇 赤壁怀古》 苏轼"></a>《念奴娇 赤壁怀古》 苏轼</h2><p>大江东去，浪淘尽、千古风流人物。故垒西边，人道是，三国周郎赤壁。乱石崩云，惊涛裂岸，卷起千堆雪。江山如画，一时多少豪杰。<br>遥想公瑾当年，小乔初嫁了，雄姿英发。羽扇纶巾，谈笑间、强弩灰飞烟灭。故国神游，多情应笑我，早生华发。人生如梦，一樽还酹江月。</p><h2 id="《浣溪沙-…》-苏轼"><a href="#《浣溪沙-…》-苏轼" class="headerlink" title="《浣溪沙 …》 苏轼"></a>《浣溪沙 …》 苏轼</h2><p>山下兰芽短浸溪。松间沙路净无泥。潇潇暮雨子规啼。<br>谁道人生无再少，门前流水尚能西，休将白发唱黄鸡。</p><h2 id="《蝶恋花-春景》-苏轼"><a href="#《蝶恋花-春景》-苏轼" class="headerlink" title="《蝶恋花 春景》 苏轼"></a>《蝶恋花 春景》 苏轼</h2><p>花褪残红青杏小。燕子飞时，绿水人家绕。枝上柳绵吹又少，天涯何处无芳草。<br>墙里秋千墙外道。墙外行人，墙里佳人笑。笑渐不闻声渐悄，多情却被无情恼。</p><h2 id="《鹊桥仙》-秦观"><a href="#《鹊桥仙》-秦观" class="headerlink" title="《鹊桥仙》 秦观"></a>《鹊桥仙》 秦观</h2><p>纤云弄巧，飞星传恨，银汉迢迢暗渡。金风玉露一相逢，便胜却人间无数。<br>柔情似水，佳期如梦，忍顾鹊桥归路。两情若是久长时，又岂在朝朝暮暮。</p><h2 id="《如梦令》-李清照"><a href="#《如梦令》-李清照" class="headerlink" title="《如梦令》 李清照"></a>《如梦令》 李清照</h2><p>常记溪亭日暮，沉醉不知归路。兴尽晚回舟，误入藕花深处。争渡，争渡，惊起一滩鸥鹭。</p><h2 id="《如梦令》-李清照-1"><a href="#《如梦令》-李清照-1" class="headerlink" title="《如梦令》 李清照"></a>《如梦令》 李清照</h2><p>昨夜雨疏风骤，浓睡不消残酒。试问卷帘人，却道海棠依旧。知否？知否？应是绿肥红瘦。</p><h2 id="《一剪梅》-李清照"><a href="#《一剪梅》-李清照" class="headerlink" title="《一剪梅》 李清照"></a>《一剪梅》 李清照</h2><p>红藕香残玉簟（diàn）秋。轻解罗裳，独上兰舟。云中谁寄锦书来，雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><h2 id="《醉花阴》-李清照"><a href="#《醉花阴》-李清照" class="headerlink" title="《醉花阴》 李清照"></a>《醉花阴》 李清照</h2><p>薄雾浓云愁永昼，瑞脑消金兽。佳节又重阳，玉枕纱橱，半夜凉初透。<br>东篱把酒黄昏后，有暗香盈袖。莫道不消魂，帘卷西风，人似黄花廋。</p><h2 id="《武陵春》-李清照"><a href="#《武陵春》-李清照" class="headerlink" title="《武陵春》 李清照"></a>《武陵春》 李清照</h2><p>风住尘香花已尽，日晚倦梳头。物是人非事事休，欲语泪先流。<br>闻说双溪春尚好，也拟泛轻舟。只恐双溪舴艋舟，载不动，许多愁。</p><h2 id="《声声慢》-李清照"><a href="#《声声慢》-李清照" class="headerlink" title="《声声慢》 李清照"></a>《声声慢》 李清照</h2><p>寻寻觅觅，冷冷清清，凄凄惨惨戚戚。乍暖还寒时候，最难将息。三杯两盏淡酒，怎敌他晓来风急。<br>雁过也，正伤心，却是旧时相识。<br>满地黄花堆积。憔悴损，如今有谁堪摘。守着窗儿，独自怎生得黑。梧桐更兼细雨，到黄昏，点点滴滴。<br>这次第，怎一个愁字了得。</p><h2 id="《满江红》-岳飞"><a href="#《满江红》-岳飞" class="headerlink" title="《满江红》 岳飞"></a>《满江红》 岳飞</h2><p>怒发冲冠，凭栏处，潇潇雨歇。抬望眼，仰天长啸，壮怀激烈。三十功名尘与土，八千里路云和月。<br>莫等闲，白了少年头，空悲切。<br>靖康耻，犹未雪。臣子恨，何时灭。驾长车踏破，贺兰山缺。壮志饥餐胡虏肉，笑谈渴饮匈奴血。<br>待从头，收拾旧河山，朝天阙。</p><h2 id="《卜算子-咏梅》-陆游"><a href="#《卜算子-咏梅》-陆游" class="headerlink" title="《卜算子 咏梅》 陆游"></a>《卜算子 咏梅》 陆游</h2><p>驿外断桥边，寂寞开无主。已是黄昏独自愁，更著风和雨。<br>无意苦争春，一任群芳妒。零落成泥碾作尘，只有香如故。</p><h2 id="《青玉案》-辛弃疾"><a href="#《青玉案》-辛弃疾" class="headerlink" title="《青玉案》 辛弃疾"></a>《青玉案》 辛弃疾</h2><p>东风夜放花千树。更吹落，星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞。<br>蛾儿雪柳黄金缕。笑语盈盈暗香去。众里寻他千百度。蓦然回首，那人却在，灯火阑珊处。</p><h2 id="《丑奴儿》-辛弃疾"><a href="#《丑奴儿》-辛弃疾" class="headerlink" title="《丑奴儿》 辛弃疾"></a>《丑奴儿》 辛弃疾</h2><p>少年不知愁滋味，爱上层楼。爱上层楼，为赋新词强说愁。<br>而今识尽愁滋味，欲说还休。欲说还休，却道天凉好个秋。</p><h2 id="《破阵子》-辛弃疾"><a href="#《破阵子》-辛弃疾" class="headerlink" title="《破阵子》 辛弃疾"></a>《破阵子》 辛弃疾</h2><p>醉里挑灯看剑，梦回吹角连营。八百里分麾下炙，五十弦翻塞外声。沙场秋点兵。<br>马作的卢飞快，弓如霹雳弦惊。了却君王天下事，赢得生前身后名。可怜白发生！</p><h2 id="《永遇乐》-辛弃疾"><a href="#《永遇乐》-辛弃疾" class="headerlink" title="《永遇乐》 辛弃疾"></a>《永遇乐》 辛弃疾</h2><p>千古江山，英雄无觅，孙仲谋处。舞榭歌台，风流总被雨打风吹去。<br>斜阳草树，寻常巷陌，人道寄奴曾住。想当年，金戈铁马，气吞万里如虎。<br>元嘉草草，封狼居胥，赢得仓皇北顾。四十三年，望中犹记，烽火扬州路。<br>可堪回首，佛狸祠下一片神鸦社鼓。凭谁问，廉颇老矣，尚能饭否。</p><h2 id="《一剪梅》-蒋捷"><a href="#《一剪梅》-蒋捷" class="headerlink" title="《一剪梅》 蒋捷"></a>《一剪梅》 蒋捷</h2><p>一片春愁待酒浇。江上舟摇，楼上帘招。秋娘度与泰娘娇。风又飘飘，雨又潇潇。<br>何日归家洗客袍。银字笙调，心字香烧。流光容易把人抛。红了樱桃，绿了芭蕉。</p><h2 id="《临江仙》-杨慎"><a href="#《临江仙》-杨慎" class="headerlink" title="《临江仙》 杨慎"></a>《临江仙》 杨慎</h2><p>滚滚长江东逝水，浪花淘尽英雄。是非成败转头空。青山依旧在，几度夕阳红。<br>白发渔樵江渚上，惯看秋月春风。一壶浊酒喜相逢。古今多少事，都付笑谈中。</p><h2 id="《木兰花令》-纳兰性德"><a href="#《木兰花令》-纳兰性德" class="headerlink" title="《木兰花令》 纳兰性德"></a>《木兰花令》 纳兰性德</h2><p>人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故人心易变。<br>骊山语罢清宵半，泪雨霖铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。</p>]]></content>
      
      
      <categories>
          
          <category> 国粹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国粹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="2020/08/25/algorithms/tree/balanced-binary-tree.html"/>
      <url>2020/08/25/algorithms/tree/balanced-binary-tree.html</url>
      
        <content type="html"><![CDATA[<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树<br>平衡二叉树要求对于每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，<br>就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化成链表的问题，<br>把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。<br>但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>道德经</title>
      <link href="2020/08/21/guo-cui/dao-de-jing.html"/>
      <url>2020/08/21/guo-cui/dao-de-jing.html</url>
      
        <content type="html"><![CDATA[<h1 id="《道德经》"><a href="#《道德经》" class="headerlink" title="《道德经》"></a>《道德经》</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p><strong>道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。<br>故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄，众妙之门。</strong></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p><strong>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。<br>故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。<br>是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不持，功成而弗居。<br>夫唯弗居，是以不去。</strong></p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p><strong>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。<br>是以圣人之治，虚其心，实其腹；弱其志，强其骨。<br>常使民无知无欲，使夫智者不敢为也。为无为，则无不治。</strong></p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p><strong>道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。<br>湛兮似或存，吾不知谁之子，象帝之先。</strong></p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p><strong>天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。<br>天地之间，其犹橐（tuó）籥（yuè）乎？虚而不屈，动而愈出。多言数穷，不如守中。</strong></p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><p><strong>谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。</strong></p><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><p><strong>天长地久。天地所以能长且久者，以其不自生，故能长生。<br>是以圣人后其身而身先，外其身而身存。非以其无私邪？故能成其私。</strong></p><h2 id="八"><a href="#八" class="headerlink" title="八"></a>八</h2><p><strong>上善若水，水善利万物而不争：处众人之所恶，故几于道，<br>居善地；心善渊；与善仁；言善信；正善治；事善能；动善时。夫唯不争，故无尤。</strong></p><h2 id="九"><a href="#九" class="headerlink" title="九"></a>九</h2><p><strong>持而盈之，不如其已。揣而棁（zhuò）之，不可长保。金玉满堂，莫之能守。<br>富贵而骄，自遗其咎。功遂身退，天之道</strong></p><h2 id="十"><a href="#十" class="headerlink" title="十"></a>十</h2><p><strong>载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？<br>爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎？<br>生之、畜之，生而不有，为而不恃（shì），长而不宰，是谓玄德。</strong></p><h2 id="十一"><a href="#十一" class="headerlink" title="十一"></a>十一</h2><p><strong>三十辐共一毂（gǔ），当其无，有车之用。埏（shān）埴(zhí)以为器，当其无，有器之用。<br>凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。</strong></p><h2 id="十二"><a href="#十二" class="headerlink" title="十二"></a>十二</h2><p><strong>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令人行妨。<br>是以圣人为腹不为目，故去彼取此。</strong></p><h2 id="十三"><a href="#十三" class="headerlink" title="十三"></a>十三</h2><p><strong>宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。<br>何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！<br>故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。</strong></p><h2 id="十四"><a href="#十四" class="headerlink" title="十四"></a>十四</h2><p><strong>视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jíe），故混而为一。<br>其上不皦（jiǎo），其下不昧，绳绳（mǐn）不可名，复归于无物。<br>是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。<br>执古之道，以御今之有。能知古始，是谓道纪。</strong></p><h2 id="十五"><a href="#十五" class="headerlink" title="十五"></a>十五</h2><p><strong>古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。<br>豫焉若冬渉川，犹兮若畏四邻，俨兮其若家，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。<br>孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道这不欲盈，夫唯不盈，故能蔽而新成。</strong></p><h2 id="十六"><a href="#十六" class="headerlink" title="十六"></a>十六</h2><p><strong>至虚极，守静笃，万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复命。<br>复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。没身不殆。</strong></p><h2 id="十七"><a href="#十七" class="headerlink" title="十七"></a>十七</h2><p><strong>太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。<br>信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓”我自然”。</strong></p><h2 id="十八"><a href="#十八" class="headerlink" title="十八"></a>十八</h2><p><strong>大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</strong></p><h2 id="十九"><a href="#十九" class="headerlink" title="十九"></a>十九</h2><p><strong>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。<br>此三者，以为文不足，故令有所属：见素抱朴，少私寡欲。</strong></p><h2 id="二十"><a href="#二十" class="headerlink" title="二十"></a>二十</h2><p><strong>绝学无忧。唯之与阿，相去几何？善之与恶，相去几何？<br>人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。<br>我独泊兮其未兆，如婴儿之未孩。㒦（léi）㒦兮若无所归。众人皆有余，而我独若遗。<br>我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。<br>澹（dàn）兮其若海，飀（liù）兮若无止。众人皆有以，而我独顽似鄙。<br>我独异于人，而贵食母。</strong></p><h2 id="二一"><a href="#二一" class="headerlink" title="二一"></a>二一</h2><p><strong>孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。<br>窃兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。<br>吾何以知众甫之状哉？以此。</strong></p><h2 id="二二"><a href="#二二" class="headerlink" title="二二"></a>二二</h2><p><strong>曲则全：枉则直，洼则盈，敝则新，少则得，多则惑。<br>是以圣人抱一为天下式：不自见故明，不自是故彰，不自伐故有功，不自矜故长。<br>夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。</strong></p><h2 id="二三"><a href="#二三" class="headerlink" title="二三"></a>二三</h2><p><strong>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能长久，而况于人乎？<br>故从事于道者，道者同于道，德者同于德，失者同于失。<br>同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。</strong></p><h2 id="二四"><a href="#二四" class="headerlink" title="二四"></a>二四</h2><p><strong>企者不立，跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。<br>其在道也，曰余食赘行。物或恶之，故有道者不处。</strong></p><h2 id="二五"><a href="#二五" class="headerlink" title="二五"></a>二五</h2><p><strong>有物混成，先天地生，寂兮寥兮，独立不改，周行而不殆，可以为天下母。<br>吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。<br>域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。</strong></p><h2 id="二六"><a href="#二六" class="headerlink" title="二六"></a>二六</h2><p><strong>重为轻根，静为躁君，是以圣人终日行不离辎（zī）重。虽有荣观，燕处超然。<br>奈何万乘之主，而已身轻天下？轻则失本，躁则失君。</strong></p><h2 id="二七"><a href="#二七" class="headerlink" title="二七"></a>二七</h2><p><strong>善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。<br>是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。<br>故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。</strong></p><h2 id="二八"><a href="#二八" class="headerlink" title="二八"></a>二八</h2><p><strong>知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。<br>知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。<br>知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。<br>朴散则为器，圣人用之则为官长，故大制不割。</strong></p><h2 id="二九"><a href="#二九" class="headerlink" title="二九"></a>二九</h2><p><strong>将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。<br>故物或行或随，或歔或吹，或强或赢，或挫或隳（huī）。是以圣人去甚，去奢，去泰。</strong></p><h2 id="三十"><a href="#三十" class="headerlink" title="三十"></a>三十</h2><p><strong>以道佐人主者，不以兵强天下，其事好还。师之所处，荆棘生焉。大军之后，必有凶年。<br>善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。<br>物壮则老，是谓不道，不道早已。</strong></p><h2 id="三一"><a href="#三一" class="headerlink" title="三一"></a>三一</h2><p><strong>夫佳兵者，不详之器。物或恶之，故有道者不处。君子居则贵左，用兵则贵右。<br>兵者，不详之器，非君子之器，不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。<br>夫乐杀人者，则不可以得志与天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。<br>杀人之众，以哀悲泣之。战胜，以丧礼处之。</strong></p><h2 id="三二"><a href="#三二" class="headerlink" title="三二"></a>三二</h2><p><strong>道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。<br>天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。<br>譬道之在天下，犹川谷之于江海。</strong></p><h2 id="三三"><a href="#三三" class="headerlink" title="三三"></a>三三</h2><p><strong>知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志。<br>不失其所者久，死而不亡者寿。</strong></p><h2 id="三四"><a href="#三四" class="headerlink" title="三四"></a>三四</h2><p><strong>大道汜兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主。<br>常无欲，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。</strong></p><h2 id="三五"><a href="#三五" class="headerlink" title="三五"></a>三五</h2><p><strong>执大象，天下往；往而不害，安平太。乐与饵，过客止。<br>道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。</strong></p><h2 id="三六-三七"><a href="#三六-三七" class="headerlink" title="三六 三七"></a>三六 三七</h2><p><strong>将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之，是谓微明。<br>柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。<br>道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。<br>无名之朴，夫亦将无欲。不欲以静，天下将自定。</strong></p><h2 id="三八"><a href="#三八" class="headerlink" title="三八"></a>三八</h2><p><strong>上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德无为而有以为；<br>上仁为之而无以为；上义为之而有以为；上礼为之而莫之应，则攘臂而扔之。<br>故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首；前识者，道之华而愚之始。<br>是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。</strong></p><h2 id="三九"><a href="#三九" class="headerlink" title="三九"></a>三九</h2><p><strong>昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下负。<br>其致之。天无以清将恐裂，地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以高贵将恐蹶。<br>故贵以贱为本，高以下为基。是以侯王自谓孤寡不榖（gǔ）。此非以贱为本邪？非乎？<br>故致数舆无舆。不欲琭琭如玉，珞（luò）珞如石。</strong></p><h2 id="四十"><a href="#四十" class="headerlink" title="四十"></a>四十</h2><p><strong>反者，道之动；弱者，道之用。天下万物生与有，有生于无。</strong></p><h2 id="四一"><a href="#四一" class="headerlink" title="四一"></a>四一</h2><p><strong>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。<br>故建言有之：明道若昧，进道若退，夷道若纇（lèi）。<br>上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。<br>大方无隅，大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。</strong></p><h2 id="四二"><a href="#四二" class="headerlink" title="四二"></a>四二</h2><p><strong>道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。<br>人之所恶，唯孤寡不榖，而王公以为称。故物或损之而益，或益之而损。<br>人之所教，我亦教之。强梁者不得其死，吾将以为教父。</strong></p><h2 id="四三"><a href="#四三" class="headerlink" title="四三"></a>四三</h2><p><strong>天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益，天下希及之。</strong></p><h2 id="四四"><a href="#四四" class="headerlink" title="四四"></a>四四</h2><p><strong>名与身孰亲？身与货孰多？得与亡孰病？是故甚爱必大费，多藏必厚亡。<br>知足不辱，知止不殆，可以长久。</strong></p><h2 id="四五"><a href="#四五" class="headerlink" title="四五"></a>四五</h2><p><strong>大成若缺，其用不弊；大盈若冲，其用不穷。<br>大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清净为天下正。</strong></p><h2 id="四六"><a href="#四六" class="headerlink" title="四六"></a>四六</h2><p><strong>天下有道，却走马以粪；天下无道，戎马生与郊。<br>祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。</strong></p><h2 id="四七、四八"><a href="#四七、四八" class="headerlink" title="四七、四八"></a>四七、四八</h2><p><strong>不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成。<br>为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常事以无事，及其有事，不足以取天下。</strong></p><h2 id="四九"><a href="#四九" class="headerlink" title="四九"></a>四九</h2><p><strong>圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。<br>信者，吾信之；不信者，吾亦信之，德信。<br>圣人在天下歙（xī）歙，为天下浑其心。百姓皆注其耳目，圣人皆孩之。</strong></p><h2 id="五十"><a href="#五十" class="headerlink" title="五十"></a>五十</h2><p><strong>出生入死。生之徒十有三，死之徒十有三。人之生，动之死地，亦十有三。<br>夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被甲兵。<br>兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。</strong></p><h2 id="五一"><a href="#五一" class="headerlink" title="五一"></a>五一</h2><p><strong>道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。<br>道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之：长之、育之、亭之、毒之、养之、覆之。<br>生而不有，为而不持，长而不宰，是谓玄德</strong></p><h2 id="五二"><a href="#五二" class="headerlink" title="五二"></a>五二</h2><p><strong>天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没身不殆。<br>塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。<br>用其光，复归其明，无遗身殃，是为习常。</strong></p><h2 id="五三"><a href="#五三" class="headerlink" title="五三"></a>五三</h2><p><strong>使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。<br>朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！</strong></p><h2 id="五四"><a href="#五四" class="headerlink" title="五四"></a>五四</h2><p><strong>善建者不拔，善抱者不脱，子孙以祭祀不缀。修之于身，其德乃真；修之于家，其德乃余；<br>修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。<br>故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。</strong></p><h2 id="五五"><a href="#五五" class="headerlink" title="五五"></a>五五</h2><p><strong>含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫，猛兽不据，攫（jué）鸟不搏。<br>骨柔筋柔而握固，未知牝（pìn）牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。<br>知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。</strong></p><h2 id="五六"><a href="#五六" class="headerlink" title="五六"></a>五六</h2><p><strong>知者不言，言者不知。塞其兑，闭其门，挫其锐，解其分，和其光，同其尘，是谓玄同。<br>故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱，故为天下贵。</strong></p><h2 id="五七"><a href="#五七" class="headerlink" title="五七"></a>五七</h2><p><strong>以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。<br>天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋生；法令滋彰，盗贼多有。<br>故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。</strong></p><h2 id="五八"><a href="#五八" class="headerlink" title="五八"></a>五八</h2><p><strong>其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。<br>正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光而不耀。</strong></p><h2 id="五九"><a href="#五九" class="headerlink" title="五九"></a>五九</h2><p><strong>治人事天莫若啬。夫唯啬，是谓早服，早服谓之重积德。重积德则无不克，无不克则莫知其极。<br>莫知其极，可以有国，有国之母，可以长久。是谓深根固柢，长生久视之道。</strong></p><h2 id="六十"><a href="#六十" class="headerlink" title="六十"></a>六十</h2><p><strong>治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。<br>夫两不相伤，故德交归焉。</strong></p><h2 id="六一"><a href="#六一" class="headerlink" title="六一"></a>六一</h2><p><strong>大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。<br>故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。<br>大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。</strong></p><h2 id="六二"><a href="#六二" class="headerlink" title="六二"></a>六二</h2><p><strong>道者万物之奥，善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？<br>故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？<br>不曰以求得，有罪以免邪？故为天下贵。</strong></p><h2 id="六三"><a href="#六三" class="headerlink" title="六三"></a>六三</h2><p><strong>为无为，事无事，味无味。大小，多少，报怨以德。<br>图难于其易，为大于其细。天下难事必作于易，天下大事必作于细。<br>是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。</strong></p><h2 id="六四"><a href="#六四" class="headerlink" title="六四"></a>六四</h2><p><strong>其安易持，其未兆易谋，其脆易泮，其微易散。为之于未有，治之于未乱。<br>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。<br>为者败之，执者失之。是以圣人无为，故无败；无执，故无失。<br>民之从事，常于几成而败之。慎始如终，则无败事。是以圣人欲不欲，不贵难得之货；<br>学不学，复众人之所过。以辅万物之自然，而不敢为。</strong></p><h2 id="六五"><a href="#六五" class="headerlink" title="六五"></a>六五</h2><p><strong>古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。<br>知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。</strong></p><h2 id="六六"><a href="#六六" class="headerlink" title="六六"></a>六六</h2><p><strong>江海所以能为百谷王者，以其善下之，故能为百谷王。<br>是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。<br>是以天下乐推而不厌。以其不争，故天下莫能与之争。</strong></p><h2 id="六七"><a href="#六七" class="headerlink" title="六七"></a>六七</h2><p><strong>天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细而夫。<br>我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。<br>慈，故能勇；俭，故能广；不敢为天下先，故能成器长。<br>今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固。天将救之，以慈卫之。</strong></p><h2 id="六八"><a href="#六八" class="headerlink" title="六八"></a>六八</h2><p><strong>善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。<br>是谓不争之德，是谓用人之力，是谓配天古之极。</strong></p><h2 id="六九"><a href="#六九" class="headerlink" title="六九"></a>六九</h2><p><strong>用兵有言：吾不敢为主而为客，不敢进寸而退尺。是谓行无行，攘无臂，扔无敌，执无兵。<br>祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。</strong></p><h2 id="七十"><a href="#七十" class="headerlink" title="七十"></a>七十</h2><p><strong>吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。<br>夫唯无知，是以不我知。知我这希，则我者贵。是以圣人被褐（hè）怀玉。</strong></p><h2 id="七一"><a href="#七一" class="headerlink" title="七一"></a>七一</h2><p><strong>知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。</strong></p><h2 id="七二"><a href="#七二" class="headerlink" title="七二"></a>七二</h2><p><strong>民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。<br>是以圣人自知，不自见；自爱，不自贵。故去彼取此。</strong></p><h2 id="七三"><a href="#七三" class="headerlink" title="七三"></a>七三</h2><p><strong>勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶。孰知其故？<br>是以圣人犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。<br>天网恢恢，疏而不失。</strong></p><h2 id="七四"><a href="#七四" class="headerlink" title="七四"></a>七四</h2><p><strong>民不畏死，奈何以死惧之？若使民常畏死，而为奇者吾得执而杀之，孰敢？<br>常有司杀者杀，夫代司杀者杀，是谓代大匠斫（zhuò）。夫代大匠斫者，希有不伤其手矣。</strong></p><h2 id="七五"><a href="#七五" class="headerlink" title="七五"></a>七五</h2><p><strong>民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。<br>民之轻死，以其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。</strong></p><h2 id="七六"><a href="#七六" class="headerlink" title="七六"></a>七六</h2><p><strong>人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。<br>故坚强者死之徒，柔弱者生之徒。是以兵强则不胜，木强则折。强大处下，柔弱处上。</strong></p><h2 id="七七"><a href="#七七" class="headerlink" title="七七"></a>七七</h2><p><strong>天之道，其犹张弓与？高者抑之，下者举之；有余者损之，不足者补之。<br>天之道，损有余而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。<br>是以圣人为而不持，功成而不处，其不欲见贤。</strong></p><h2 id="七八"><a href="#七八" class="headerlink" title="七八"></a>七八</h2><p><strong>天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之，弱之胜强，柔之胜刚，天下莫不知，莫能行。<br>是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。</strong></p><h2 id="七九"><a href="#七九" class="headerlink" title="七九"></a>七九</h2><p><strong>和大怨，必有余怨，安以为善？是以圣人执左契，而不责于人。无德司彻。天道无亲，常与善人。</strong></p><h2 id="八十"><a href="#八十" class="headerlink" title="八十"></a>八十</h2><p><strong>小国寡民，使有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；<br>使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡鸣犬之声相闻，民至老死不相往来。</strong></p><h2 id="八一"><a href="#八一" class="headerlink" title="八一"></a>八一</h2><p><strong>信言不美，美言不信；善者不辩，辩者不善；知者不博，博者不知。<br>圣人不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害；圣人之道，为而不争。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 国粹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国粹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="2020/08/18/algorithms/tree/binary-tree.html"/>
      <url>2020/08/18/algorithms/tree/binary-tree.html</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树简介"><a href="#二叉树简介" class="headerlink" title="二叉树简介"></a>二叉树简介</h2><p>二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点</p><p>二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字<code>&lt;</code>这个父节点，右子节点关键字<code>&gt;=</code>这个父节点</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 表示节点 */</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var int 表示索引     */</span>    <span class="token keyword">private</span> <span class="token variable">$index</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @var Node 左节点     */</span>    <span class="token keyword">private</span> <span class="token variable">$leftNode</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @var Node 又节点     */</span>    <span class="token keyword">private</span> <span class="token variable">$rightNode</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Node constructor.     * @param int $index     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>int <span class="token variable">$index</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">index</span> <span class="token operator">=</span> <span class="token variable">$index</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> int    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">index</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return Node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getLeftNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Node    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">leftNode</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return Node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRightNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Node    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rightNode</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param Node $leftNode     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setLeftNode</span><span class="token punctuation">(</span>Node <span class="token variable">$leftNode</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">leftNode</span> <span class="token operator">=</span> <span class="token variable">$leftNode</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param Node $rightNode     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRightNode</span><span class="token punctuation">(</span>Node <span class="token variable">$rightNode</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">rightNode</span> <span class="token operator">=</span> <span class="token variable">$rightNode</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 表示树 */</span><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Node 树的根节点     */</span>    <span class="token keyword">private</span> <span class="token variable">$root</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 插入一个索引节点     * @param int $index     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>int <span class="token variable">$index</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$node</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">root</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">root</span> <span class="token operator">=</span> <span class="token variable">$node</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">root</span><span class="token punctuation">;</span>            <span class="token variable">$parent</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$parent</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存当current变为null之前的那一个父节点</span>                <span class="token comment" spellcheck="true">// 插入左节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token markup">&lt; $current-></span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeftNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                        <span class="token variable">$parent</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeftNode</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                    <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRightNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                        <span class="token variable">$parent</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRightNode</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 查找索引节点     * @param int $index     * @return Node|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>int <span class="token variable">$index</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>Node    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">root</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token variable">$index</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token variable">$index</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeftNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                <span class="token variable">$current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRightNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$current</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 常用的查询</title>
      <link href="2020/08/02/mysql/common.html"/>
      <url>2020/08/02/mysql/common.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看数据版本"><a href="#查看数据版本" class="headerlink" title="查看数据版本"></a>查看数据版本</h2><pre class=" language-mysql"><code class="language-mysql">select version();select @@version;SHOW VARIABLES LIKE "version";</code></pre><h2 id="查看当前会话隔离级别"><a href="#查看当前会话隔离级别" class="headerlink" title="查看当前会话隔离级别"></a>查看当前会话隔离级别</h2><pre class=" language-mysql"><code class="language-mysql">select @@tx_isolation;</code></pre><h2 id="查看系统当前隔离级别"><a href="#查看系统当前隔离级别" class="headerlink" title="查看系统当前隔离级别"></a>查看系统当前隔离级别</h2><pre class=" language-mysql"><code class="language-mysql">select @@global.tx_isolation;</code></pre><h2 id="查看当前的事务"><a href="#查看当前的事务" class="headerlink" title="查看当前的事务"></a>查看当前的事务</h2><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</code></pre><h2 id="查看当前锁定的事务"><a href="#查看当前锁定的事务" class="headerlink" title="查看当前锁定的事务"></a>查看当前锁定的事务</h2><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</code></pre><h2 id="查看当前等锁的事务"><a href="#查看当前等锁的事务" class="headerlink" title="查看当前等锁的事务"></a>查看当前等锁的事务</h2><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</code></pre><h2 id="启用标准InnoDB监视器"><a href="#启用标准InnoDB监视器" class="headerlink" title="启用标准InnoDB监视器"></a>启用标准InnoDB监视器</h2><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL innodb_status_output=ON;</code></pre><h2 id="启用InnoDB锁定监视器"><a href="#启用InnoDB锁定监视器" class="headerlink" title="启用InnoDB锁定监视器"></a>启用InnoDB锁定监视器</h2><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL innodb_status_output_locks=ON;</code></pre><h2 id="显示加锁信息"><a href="#显示加锁信息" class="headerlink" title="显示加锁信息"></a>显示加锁信息</h2><pre class=" language-mysql"><code class="language-mysql">SHOW ENGINE INNODB STATUS;</code></pre><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><pre class=" language-mysql"><code class="language-mysql">CREATE USER 'test1'@'127.0.0.1' IDENTIFIED BY '123456';</code></pre><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><pre class=" language-mysql"><code class="language-mysql">RENAME USER 'test1'@'127.0.0.1' TO 'test1'@'127.0.0.2';SET PASSWORD FOR 'test1'@'127.0.0.2' = PASSWORD('1234567');update user set password = password('123456') where user = 'test1';grant all privileges on test_dadabase.* to 'test1'@'127.0.0.2' identified by '1234567';flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Lock的发展</title>
      <link href="2020/07/16/linux/lock.html"/>
      <url>2020/07/16/linux/lock.html</url>
      
        <content type="html"><![CDATA[<p>《操作系统之哲学原理》-锁的发展</p><h2 id="养金鱼的故事"><a href="#养金鱼的故事" class="headerlink" title="养金鱼的故事"></a>养金鱼的故事</h2><p>金鱼有一个很大的特点，就是没有饱的感觉。因此，金鱼吃东西不会因为吃饱就停止，它们会不停的吃<br>一直到鱼缸里的食物都被吃完为止。所以，如果你一直喂，它就一直吃，直到胀死。</p><p>现在假设小明和小刚两个人合住一套公寓，共同养了一条金鱼，该金鱼一天进食一次。<br>两个人想把金鱼养活，一天只喂一次，也只能喂一次。如果有一天两人都喂了鱼，鱼就胀死，<br>如果一天内两人都没有喂鱼，鱼就饿死。</p><p>他们二人为了把鱼养好，做出如下约定：</p><ul><li><p>每天喂鱼一次，且仅一次</p></li><li><p>如果今天小明喂了鱼，小刚今天就不能再喂，反之亦然</p></li><li><p>如果今天小明没有喂鱼，小刚就必须喂，反之亦然</p></li></ul><h3 id="一、不具备任何协调能力"><a href="#一、不具备任何协调能力" class="headerlink" title="一、不具备任何协调能力"></a>一、不具备任何协调能力</h3><p>小明与小刚不进行任何沟通，没人觉得要喂鱼时，查看一下鱼的状态，如果感觉鱼像是没有进食，则喂鱼，否则不喂</p><p>下面是给出的是在没有同步情况下的程序</p><p>小明：</p><pre><code>if (noFeed) &#123;    feed fish&#125;</code></pre><p>小刚：</p><pre><code>if (noFeed) &#123;    feed fish&#125;</code></pre><p>假设小明和小刚都是养鱼高手，一眼就能看出鱼是否喂过，上述的程序也能正确的执行吗？<br>答案是否定的</p><p>由于线程的执行可以任意穿插，小明可以先检查鱼，发现没有喂鱼，就准备喂鱼<br>但是就在小明准备喂时，程序切换，轮到小刚执行，小刚一看鱼还没喂，就喂鱼，喂完之后，线程切换到小明，<br>小明充检查完鱼状态的指令开始执行，于是就喂鱼，这样鱼就被喂了两次，鱼就胀死了</p><p>时序图:</p><table><thead><tr><th>时序</th><th>小明</th><th>小刚</th></tr></thead><tbody><tr><td>1</td><td>look at fish(no feed)</td><td></td></tr><tr><td>2</td><td></td><td>look at fish(no feed)</td></tr><tr><td>3</td><td></td><td>feed fish</td></tr><tr><td>4</td><td>feed fish</td><td></td></tr></tbody></table><p>两个或多个线程争相执行同一段代码或访问同一资源的现象称为竞争(race)。<br>这个可能造成竞争的共享代码段或者资源称为临界区(critical section)</p><h3 id="二、第一种同步机制：留字条"><a href="#二、第一种同步机制：留字条" class="headerlink" title="二、第一种同步机制：留字条"></a>二、第一种同步机制：留字条</h3><p>要防止与胀死，就需要防止竞争，想要避免竞争，就需要防止两个或多个进程同时进入临界区<br>要达到这一点，就需要某种协调手段</p><p>协调的目的就是在任何时刻都只能有一个人在临界区里，这称为互斥(mutual exclusion)</p><p>互斥需要满足4个条件</p><ul><li><p>不能有两个进程同时在临界区里面</p></li><li><p>进程能够在任何数量和速度的CPU上正确执行</p></li><li><p>在互斥区域外不能阻止另一个进程的运行</p></li><li><p>进程不能无限制地等待进入临界区</p></li></ul><p>第一种同步方式：小明与小刚商定，每人在喂鱼之前留下字条，告诉对方自己将检查鱼，并在需要时喂鱼</p><p>小明</p><pre><code>if (noNote) &#123;    leave note    if (noFeed) &#123;        feed fish    &#125;    remove note&#125;</code></pre><p>小刚：</p><pre><code>if (noNote) &#123;    leave note    if (noFeed) &#123;        feed fish    &#125;    remove note&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 输出重定向</title>
      <link href="2020/06/07/linux/stdin.html"/>
      <url>2020/06/07/linux/stdin.html</url>
      
        <content type="html"><![CDATA[<p>Linux 一切皆文件</p><h2 id="标准输入、输出、错误"><a href="#标准输入、输出、错误" class="headerlink" title="标准输入、输出、错误"></a>标准输入、输出、错误</h2><p>Linux中有三种标准输入输出，分别是<code>STDIN</code>，<code>STDOUT</code>，<code>STDERR</code>，对应的数字是0，1，2。</p><p><code>STDIN</code>是标准输入，默认从键盘读取信息；</p><p><code>STDOUT</code>是标准输出，默认将输出结果输出至终端；</p><p><code>STDERR</code>是标准错误，默认将输出结果输出至终端。</p><p>而一般默认</p><p><code>STDIN</code> 打开 /dev/stdin 也就是标准输入</p><p><code>STDOUT</code> 打开 /dev/stdout 也就是标准输出</p><p><code>STDERR</code> 打开 /dev/stderr 也就是标准错误</p><p>所以一般使用的时候，用 0,1,2代替</p><h2 id="重定向命令"><a href="#重定向命令" class="headerlink" title="重定向命令"></a>重定向命令</h2><p>重定向命令<code>&gt;</code>就是改变fd所对应的指针</p><p>常用的重定向命令</p><pre><code>&gt;/dev/null 2&gt;&amp;1 // 会将标准输出，错误输出都重定向至/dev/null，也就是全部丢弃// 首先将fd1的文件指针更改为指向/dev/null// 然后将fd2的文件指针更改为fd1所对应的文件指针，也就是/dev/null文件</code></pre><p>验证示例：</p><pre><code>touch exists.logll exists.log not_exists.log// 输出// ls: cannot access not_exists.log: No such file or directory// -rw-rw-r-- 1 www www 0 Jun  8 15:01 exists.logll exists.log not_exists.log &gt;/dev/null 2&gt;&amp;1</code></pre><p>结果我们看到什么输出都没有</p><p><code>/dev/null</code>在类Unix系统中称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个EOF。</p><pre><code>2&gt;&amp;1 &gt;/dev/null // 只会将标准输出重定向至/dev/null// 首先将fd2的文件指针更改为fd1所对应的文件指针，也就是STDOUT文件// 然后将fd1的文件指针更改为指向/dev/null</code></pre><p>验证示例：</p><pre><code>touch exists.logll exists.log not_exists.log 2&gt;&amp;1 &gt;/dev/null// 只输出错误// ls: cannot access not_exists.log: No such file or directory</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次Redis read error on connection 错误调试</title>
      <link href="2020/06/04/bug/redis-read-error-on-connection.html"/>
      <url>2020/06/04/bug/redis-read-error-on-connection.html</url>
      
        <content type="html"><![CDATA[<h2 id="故事之初"><a href="#故事之初" class="headerlink" title="故事之初"></a>故事之初</h2><p>一次重启SOA服务后，突然发现有报错<code>read error on connection to 127.0.0.1:6379</code></p><p>下面是SOA服务中环境和依赖的包版本</p><p>PHP 7.2.25</p><p>使用 PCNTL POSIX 来管理进程</p><p><a href="https://pecl.php.net/get/redis-5.2.1.tgz">ext-phpredis 5.2.1</a></p><p><a href="https://pecl.php.net/get/event-2.5.4.tgz">ext-event 2.5.4</a></p><p>laravel 6.18.14</p><p>SOA是基于event 写的一个多进程服务 使用laravel command来启动和停止进程</p><p>由master 进程 fork 多个work进程处理业务</p><p><code>ps -ef|grep Soa</code></p><pre><code>root      31614      1  0 Jun04 ?        00:00:00 Soa master serverwww       31615  31614  0 Jun04 ?        00:00:01 Soa worker serverwww       31616  31614  0 Jun04 ?        00:00:01 Soa worker server</code></pre><h2 id="网上查资料"><a href="#网上查资料" class="headerlink" title="网上查资料"></a>网上查资料</h2><p>按照报错，应该是连接被关闭然后再发请求造成的</p><p><a href="https://www.jianshu.com/p/6d6a09db55e8">参考 Redis：排查 read error on connection 小记</a></p><p>感觉可能是超时时间引起的</p><p>于是设置<code>phpredis</code> read_timeout 为-1，重启SOA调试，错误依旧</p><p>我们redis客户端是启用 persistent 的，使用的 pconnect</p><p>看一下redis扩展的配置</p><pre><code>redis.pconnect.pooling_enabled =&gt; 1 =&gt; 1redis.pconnect.connection_limit =&gt; 0 =&gt; 0</code></pre><p>配置没什么问题</p><p>也去<a href="https://github.com/phpredis/phpredis">phpredis</a> 源码搜索这个错误，和上面所说的一样</p><h2 id="重现并调试"><a href="#重现并调试" class="headerlink" title="重现并调试"></a>重现并调试</h2><p>既然能稳定重现 那用 <code>strace -p $pid</code> 看看系统调用（开始也使用tcpdump gdb 调试，没发现导致的错误的原因）</p><pre><code>13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=11, u64=11&#125;&#125;], 32, -1) = 113414 accept(11, &#123;sa_family=AF_INET, sin_port=htons(9342), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 1213414 setsockopt(12, SOL_SOCKET, SO_RCVTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 setsockopt(12, SOL_SOCKET, SO_SNDTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 fcntl(12, F_GETFL)                = 0x2 (flags O_RDWR)13414 fcntl(12, F_SETFL, O_RDWR|O_NONBLOCK) = 013414 epoll_ctl(8, EPOLL_CTL_ADD, 12, &#123;EPOLLIN, &#123;u32=12, u64=12&#125;&#125;) = 013414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=12, u64=12&#125;&#125;], 32, -1) = 113414 recvfrom(12, &quot;\200&quot;, 1, 0, NULL, NULL) = 113414 recvfrom(12, &quot;\1\0\1&quot;, 3, 0, NULL, NULL) = 313414 recvfrom(12, &quot;\0\0\0\16&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(12, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) = 1413414 recvfrom(12, &quot;\0\0\0\0&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(12, &quot;\v\0\1\0\0\0 d6e820eebbac8b527d721621a&quot;..., 4096, 0, NULL, NULL) = 4013414 poll([&#123;fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 sendto(7, &quot;*3\r\n$4\r\nHGET\r\n$33\r\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) = 9313414 poll([&#123;fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 poll([&#123;fd=7, events=POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) = 1 ([&#123;fd=7, revents=POLLIN&#125;])13414 recvfrom(7, 0x32e7d40, 8192, MSG_DONTWAIT, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)13414 close(7)                          = 013414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6179) = 617913414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=11, u64=11&#125;&#125;], 32, -1) = 113414 accept(11, &#123;sa_family=AF_INET, sin_port=htons(9348), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 713414 setsockopt(7, SOL_SOCKET, SO_RCVTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 setsockopt(7, SOL_SOCKET, SO_SNDTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 fcntl(7, F_GETFL)                 = 0x2 (flags O_RDWR)13414 fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) = 013414 epoll_ctl(8, EPOLL_CTL_ADD, 7, &#123;EPOLLIN, &#123;u32=7, u64=7&#125;&#125;) = 013414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=7, u64=7&#125;&#125;], 32, -1) = 113414 recvfrom(7, &quot;\200&quot;, 1, 0, NULL, NULL) = 113414 recvfrom(7, &quot;\1\0\1&quot;, 3, 0, NULL, NULL) = 313414 recvfrom(7, &quot;\0\0\0\16&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(7, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) = 1413414 recvfrom(7, &quot;\0\0\0\0&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(7, &quot;\v\0\1\0\0\0 1e5d42e6117278050b3818af8&quot;..., 4096, 0, NULL, NULL) = 4013414 socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 1513414 fcntl(15, F_GETFL)                = 0x2 (flags O_RDWR)13414 fcntl(15, F_SETFL, O_RDWR|O_NONBLOCK) = 013414 connect(15, &#123;sa_family=AF_INET, sin_port=htons(6379), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) = -1 EINPROGRESS (Operation now in progress)13414 poll([&#123;fd=15, events=POLLIN|POLLOUT|POLLERR|POLLHUP&#125;], 1, 60000) = 1 ([&#123;fd=15, revents=POLLOUT&#125;])13414 getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) = 013414 fcntl(15, F_SETFL, O_RDWR)        = 013414 setsockopt(15, SOL_TCP, TCP_NODELAY, [1], 4) = 013414 setsockopt(15, SOL_SOCKET, SO_KEEPALIVE, [0], 4) = 013414 poll([&#123;fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 sendto(15, &quot;*3\r\n$4\r\nHGET\r\n$33\r\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) = 9313414 poll([&#123;fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 poll([&#123;fd=15, events=POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) = 1 ([&#123;fd=15, revents=POLLIN&#125;])13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) = 3413414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) = 616613414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=11, u64=11&#125;&#125;], 32, -1) = 113414 accept(11, &#123;sa_family=AF_INET, sin_port=htons(9344), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 1613414 setsockopt(16, SOL_SOCKET, SO_RCVTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 setsockopt(16, SOL_SOCKET, SO_SNDTIMEO, &quot;2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 013414 fcntl(16, F_GETFL)                = 0x2 (flags O_RDWR)13414 fcntl(16, F_SETFL, O_RDWR|O_NONBLOCK) = 013414 epoll_ctl(8, EPOLL_CTL_ADD, 16, &#123;EPOLLIN, &#123;u32=16, u64=16&#125;&#125;) = 013414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=16, u64=16&#125;&#125;], 32, -1) = 113414 recvfrom(16, &quot;\200&quot;, 1, 0, NULL, NULL) = 113414 recvfrom(16, &quot;\1\0\1&quot;, 3, 0, NULL, NULL) = 313414 recvfrom(16, &quot;\0\0\0\16&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(16, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) = 1413414 recvfrom(16, &quot;\0\0\0\0&quot;, 4, 0, NULL, NULL) = 413414 recvfrom(16, &quot;\v\0\1\0\0\0 9eadf923b6dceadd66727a163&quot;..., 4096, 0, NULL, NULL) = 4013414 poll([&#123;fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 sendto(15, &quot;*3\r\n$4\r\nHGET\r\n$33\r\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) = 9313414 poll([&#123;fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) = 0 (Timeout)13414 poll([&#123;fd=15, events=POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) = 1 ([&#123;fd=15, revents=POLLIN&#125;])13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) = 3413414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) = 616613414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=16, u64=16&#125;&#125;], 32, -1) = 113414 recvfrom(16, &quot;&quot;, 1, 0, NULL, NULL) = 013414 epoll_ctl(8, EPOLL_CTL_DEL, 16, 0x7ffe0c36b200) = 013414 shutdown(16, SHUT_RDWR)           = 013414 close(16)                         = 013414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=12, u64=12&#125;&#125;], 32, -1) = 113414 recvfrom(12, &quot;&quot;, 1, 0, NULL, NULL) = 013414 epoll_ctl(8, EPOLL_CTL_DEL, 12, 0x7ffe0c36b200) = 013414 shutdown(12, SHUT_RDWR)           = 013414 close(12)                         = 013414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32=7, u64=7&#125;&#125;], 32, -1) = 113414 recvfrom(7, &quot;&quot;, 1, 0, NULL, NULL) = 013414 epoll_ctl(8, EPOLL_CTL_DEL, 7, 0x7ffe0c36b200) = 013414 shutdown(7, SHUT_RDWR)            = 013414 close(7)                          = 013414 epoll_wait(8,  &lt;detached ...&gt;</code></pre><p>上面的调试 看到了 <code>EAGAIN (Resource temporarily unavailable)</code> 然后关闭了连接</p><p>下一步redis重连了，重连之后没有发送auth，还报了未验证的错误</p><p>去官方看看，重连未验证这个问题已经在<code>phpredis</code> 5.2.2解决，于是升级到了 5.2.2 未验证的问题修复了 </p><p>看看具体的redis连接情况 <code>lsof -i:6379</code></p><pre><code>php     17778 root    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)php     17778 root    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)php     17779  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)php     17779  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)php     17780  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)php     17780  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</code></pre><p>每次重启都发现有两个redis连接存在，而且是master进程创建的redis连接</p><p>对比php-fpm的redis连接</p><pre><code>php     57305  www    6u  IPv4 5487078      0t0  TCP 127.0.0.1:31788-&gt;127.0.0.1:6379 (ESTABLISHED)php     57305  www    7u  IPv4 5488024      0t0  TCP 127.0.0.1:31790-&gt;127.0.0.1:6379 (ESTABLISHED)php     57305  www    8u  IPv4 5486093      0t0  TCP 127.0.0.1:31792-&gt;127.0.0.1:6379 (ESTABLISHED)php     57305  www    9u  IPv4 5486094      0t0  TCP 127.0.0.1:31794-&gt;127.0.0.1:6379 (ESTABLISHED)php     57313  www    6u  IPv4 5488037      0t0  TCP 127.0.0.1:31798-&gt;127.0.0.1:6379 (ESTABLISHED)php     57313  www    7u  IPv4 5488038      0t0  TCP 127.0.0.1:31800-&gt;127.0.0.1:6379 (ESTABLISHED)php     57313  www    8u  IPv4 5488043      0t0  TCP 127.0.0.1:31802-&gt;127.0.0.1:6379 (ESTABLISHED)php     57313  www    9u  IPv4 5486102      0t0  TCP 127.0.0.1:31804-&gt;127.0.0.1:6379 (ESTABLISHED)</code></pre><p>仔细看上面的SOA redis连接，发现work进程共享了master的资源，两个work进程有一样的redis连接</p><p>继续测试果然发现 redis读取的数据是错乱的，每次都是读取到了上一次的数据</p><p>一开始以为laravel加载服务提供者的时候就已经创建了redis连接</p><p>于是 在master进程中调用关闭redis连接，然后再work进程中重新注册redis服务提供者，redis连接依然存在</p><p>因为线上环境也有一台服务器有这样的问题</p><p>于是回到线上环境，线上两台服务器，有一台正常，有一台的问题和我本地环境一样，对比两台服务器的history命令 看看是否和服务启动有关，还是改了什么</p><p>通过对比发现正常的那台服务器 是先restart queue 再 restart soa</p><p>然后在有问题的那台服务器上重新操作一遍，发现问题居然解决了！是queue影响了吗？queue也是使用laravel command来管理</p><p>回到本地测试环境</p><p>一样操作，发现问题居然还在，这就有点神奇了 玄学吗（代码的世界是没有玄学的）</p><p>最后想到到底在哪里创建了redis连接呢？线上已经验证启动SOA时是没有redis连接的，创建redis连接在具体的业务调用里面</p><p>到这里就问题就变成了找到 master 启动时在哪里调用了Redis:connect</p><p>最快的方法是看看调用栈，到 laravel 源码 PhpRedisConnector 出直接抛个Exception 看看是哪里调用了 Redis::connect</p><p>最后发现是 app/Console/Commands/ProxyUserUsedMigrate 这个文件</p><p>然后看看代码，原来我在这类的_ _construct 调用了 redis:connect</p><p>而且Commands里面的类 是laravel初始化的时候就全部加载的，这就导致了启动SOA时master已经连接redis了</p><p>问题已经明确：</p><p>并发测试时，<code>EAGAIN (Resource temporarily unavailable)</code> 导致连接被断开，其它子进程还在使用此连接</p><p>最终导致了<code>read error on connection to 127.0.0.1:6379</code></p><p>至此找到了问题的所在（上面laravel注册服务提供者时，是没有创建redis连接的）</p><p>删除这个命令文件 重启soa服务，一切正常了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的bug是新增代码影响的，而且新增的代码只是临时执行需要，开始没有考虑到这新增的代码会影响到SOA</p><p>laravel Commands __construct 里面不要做redis操作 或者其他的连接操作 这样会影响soa master</p><p>像这样的问题，还是得先仔细看看最近修改、增加了那些代码，这样比较容易发现问题的所在</p><p>从这次调试中也加深了对phpredis的熟悉</p><p>最后讨论和延伸：</p><p>主进程不应该创建任何不需要共享的资源，比如问题中的redis连接</p><p>主进程进行fork子进程，子进程会继承主进程的资源</p><p>两个子进程操作同一个socket，在没有锁的情况下是会出问题的，比如问题中的数据错乱，或者连接关闭了但是信息不同步</p><p>需要共享时 应该做好临界区管理，各种锁或者机制来保证</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5G简介</title>
      <link href="2020/05/24/network/5g.html"/>
      <url>2020/05/24/network/5g.html</url>
      
        <content type="html"><![CDATA[<p>本文转载自 <a href="https://www.ednchina.com/news/201707265G.html">小枣君 一文读懂5G无线通信与4G的典型区别</a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generation，简称5G或5G技术）是最新一代蜂窝移动通信技术，<br>也是继4G（LTE-A、WiMax）、3G（UMTS、LTE）和2G（GSM）系统之后的延伸</p><p>无论技术怎么演变，就目前而言，都离不开下面这个公式</p><p>一切移动通信技术的数学基石：<code>光速 = 波长 * 频率</code></p><p>这个公式是我们学过物理所熟知的，光速在真空的传播速度的理论值是：每秒30万公里</p><p>无论我们的2G、3G还是现在的4G、5G都是在这个公式上做文章。</p><h2 id="通信技术的简单分类"><a href="#通信技术的简单分类" class="headerlink" title="通信技术的简单分类"></a>通信技术的简单分类</h2><ol><li>有线通信</li></ol><p>电缆、网线、光纤都属于此类，在有线介质上传播数据，想要高速很容易。实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍</p><ol start="2"><li>无线通信</li></ol><p>空中传播这部分，才是移动通信的瓶颈所在</p><h2 id="电磁波"><a href="#电磁波" class="headerlink" title="电磁波"></a>电磁波</h2><p>电波和光波都属于电磁波。电磁波的频率资源有限，根据不同的频率特性，有不同的用途</p><p>目前主要使用电波进行通信。当然，光波通信也在崛起，例如可见光通信LiFi（LightFidelity）</p><p>电波属于电磁波的一种，它的频率资源也是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途</p><table><thead><tr><th>名称</th><th>符号</th><th>频率</th><th>波段</th><th>波长</th><th>主要用途</th></tr></thead><tbody><tr><td>甚低频</td><td>VLF</td><td>3-30KHz</td><td>超长波</td><td>1000Km-100Km</td><td>海岸潜艇通信、远距离通信、超远距离通信</td></tr><tr><td>低频</td><td>LF</td><td>30-300KHz</td><td>长波</td><td>10Km-1Km</td><td>越洋通信、中距离通信、地下岩层通信、远距离导航</td></tr><tr><td>中频</td><td>MF</td><td>0.3-3MHz</td><td>中波</td><td>1Km-100m</td><td>船用通信、业余无线通信、<code>移动通信</code>、中距离通信</td></tr><tr><td>高频</td><td>HF</td><td>3-30MHz</td><td>短波</td><td>100m-10m</td><td>远距离短波通信、国际定点通信、<code>移动通信</code></td></tr><tr><td>甚高频</td><td>VHF</td><td>30-300MHz</td><td>米波</td><td>10m-1m</td><td>电离层散射、流星余迹通信、人造电离层通信、对空间飞行体通信、<code>移动通信</code></td></tr><tr><td>超高频</td><td>UHF</td><td>0.3-3GHz</td><td>分米波</td><td>1m-0.1m</td><td>小中容量微波中继通信、对流层散射通信、<code>移动通信</code></td></tr><tr><td>特高频</td><td>SHF</td><td>3-30GHz</td><td>厘米波</td><td>10cm-1cm</td><td>大容量微波中继通信、数字通信、卫星通信</td></tr><tr><td>极高频</td><td>EHF</td><td>30-300GHz</td><td>毫米波</td><td>10mm-1mm</td><td>再入大气层时的通信、波导通信</td></tr></tbody></table><p>一直以来，我们主要是用中频~超高频进行手机通信的。<br>例如经常说的“GSM900”、“CDMA800”，其实就是工作频段900MHz和800MHz的意思。目前主流的4G LTE，属于超高频和特高频。<br>我们国家主要使用超高频：<br><img src="/images/lte.jpg" alt="LTE"></p><p>随着技术的发展，使用的频率越来越高</p><p>因为频率越高，车道（频段）越宽，传输速度也就越快</p><p>我们国家工信部下发通知，明确了我国的5G初始中频频段：3.3-3.6GHz、4.8-5GHz两个频段。<br>同时，24.75-27.5GHz、37-42.5GHz高频频段正在征集意见。<br>目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。<br>如果按28GHz来算，根据前文我们提到的公式：<code>波长 = 光速 / 频率</code> 约为10.7mm</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？”<br>原因很简单——不是不想用，是用不起！<br>电磁波的一个显著特点：频率越高（波长越短），就越趋近于直线传播（绕射能力越差）。而且，频率越高，传播过程中的衰减也越大。</p><p>你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。<br>再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。<br>而且，卫星那口大锅，必须校准瞄着卫星的方向。稍微歪一点，都会有影响。</p><p>如果5G用高频段，那么它最大的问题，就是覆盖能力会大幅减弱。覆盖同一个区域，需要的基站数量将大大超过4G。</p><p>这就是为什么这些年，电信、移动、联通为了低频段而争得头破血流。<br>基站就是要花钱买的啊，能不玩命争取么？有的频段甚至被称为——黄金频段。</p><h3 id="微基站"><a href="#微基站" class="headerlink" title="微基站"></a>微基站</h3><p>基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！以前都是大的基站，建一个覆盖一大片</p><p>以后更多的将是微基站，到处都装，随处可见</p><p>基站对人体健康不会造成影响</p><p>而且，恰好相反，其实基站数量越多，辐射反而越小！你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好</p><p>一个大功率取暖器近的热，远的冷</p><h3 id="天线去哪了"><a href="#天线去哪了" class="headerlink" title="天线去哪了"></a>天线去哪了</h3><p>大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么后来我们就看不到带天线的手机了？</p><p>有人说，是因为信号好了，不需要天线了。<br>其实不对。信号再好，也不能没有天线。更主要的原因是——天线变小了。<br>根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。</p><p>频率越高，波长越短，天线也就跟着变短啦！毫米波，天线也变成毫米级。这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根</p><p>这就是5G的第三大杀手锏——Massive MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。在LTE时代就已经有MIMO了，5G继续发扬光大，变成了加强版的Massive</p><p>以前的基站，天线就那么几根<br>5G时代，就不是按根来算了，是按“阵”，叫“天线阵列”</p><p>天线多得排成阵了，一眼看去一大片的节奏<br>不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。不要问我为什么，去问科学家</p><h3 id="你是直的？还是弯的？"><a href="#你是直的？还是弯的？" class="headerlink" title="你是直的？还是弯的？"></a>你是直的？还是弯的？</h3><p>大家都见过灯泡发光吧？<br>其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。</p><p>基站也是一样，大量的能量和资源都浪费了。我们能不能找到一只无形的手，把散开的光束缚起来呢？这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。</p><h3 id="波束赋形"><a href="#波束赋形" class="headerlink" title="波束赋形"></a>波束赋形</h3><p>波束赋形：在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。<br>这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。</p><h3 id="别收我钱，行不行？"><a href="#别收我钱，行不行？" class="headerlink" title="别收我钱，行不行？"></a>别收我钱，行不行？</h3><p>在目前的通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。<br>而在5G时代，这种情况就不一定了。<br>5G的第五大特点——D2D，也就是Device to Device。</p><p>5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。</p><p>这样，就节约了大量的空中资源，也减轻了基站的压力。不过，如果你觉得这样就不用付钱，那你就图样图森破了。<br>控制消息还是要从基站走的，而且用着频谱资源，运营商爸爸怎么可能放过你。</p>]]></content>
      
      
      <categories>
          
          <category> 5G </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 5G </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 锁和事务机制</title>
      <link href="2020/05/16/mysql/lock-transaction.html"/>
      <url>2020/05/16/mysql/lock-transaction.html</url>
      
        <content type="html"><![CDATA[<h2 id="锁简介"><a href="#锁简介" class="headerlink" title="锁简介"></a>锁简介</h2><p>想要控制并发读写，就离不开锁<br>在处理并发读或者写时，可以通过实现一个由两种类型锁组成的锁系统来解决问题。<br>这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）.</p><p>读锁是共享的，互不阻塞的；写锁是排他的，一个写锁会阻塞其他的写锁和读锁；这样才能确保在给定的时间只有一个用户能执行写入，<br>并防止其他客户读取正在写入的同一资源。</p><p>MySQL最重要的两种锁策略：</p><ol><li>表锁（table lock）</li></ol><p>表锁是MySQL中最基本的锁策略，并且是开销最小的的策略</p><ol start="2"><li>行锁（row lock）</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符集和字符集编码</title>
      <link href="2020/05/12/charset.html"/>
      <url>2020/05/12/charset.html</url>
      
        <content type="html"><![CDATA[<p>本文转载自 <a href="http://cenalulu.github.io/linux/character-encoding/">cenalulu http://cenalulu.github.io/linux/character-encoding/</a></p><h2 id="什么是字符集"><a href="#什么是字符集" class="headerlink" title="什么是字符集"></a>什么是字符集</h2><p>在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。<br>那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老板的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。<br>于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。<br>那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？<br>很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。<br>于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 </p><p>说了那么多我们来看一个实际例子，下面就是<code>屌</code>这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？</p><table><thead><tr><th>字符集</th><th>16进制编码</th><th>对应的二进制数据</th></tr></thead><tbody><tr><td>UTF-8</td><td>0xE5B18C</td><td>1110 0101 1011 0001 1000 1100</td></tr><tr><td>UTF-16</td><td>0x5C4C</td><td>1011 1000 1001 1000</td></tr><tr><td>GBK</td><td>0x8CC5</td><td>1000 1100 1100 0101</td></tr></tbody></table><h2 id="什么是字符编码"><a href="#什么是字符编码" class="headerlink" title="什么是字符编码"></a>什么是字符编码</h2><p>字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。<br>对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。</p><p>其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。<br>编码字符集，即用一个编码值<code>code point</code>来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。<br>一般来说都会直接将<code>code point</code>的值作为编码后的值直接存储。例如在<code>ASCII</code>中<code>A</code>在表中排第65位，而编码后<code>A</code>的数值是<code>0100 0001</code>也即十进制的65的二进制转换结果。</p><p>看到这里，可能很多读者都会有和我当初一样的疑问：<code>字库表</code>和<code>编码字符集</code>看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。<br>为什么还要多此一举通过<code>字符编码</code>把序号转换成另外一种存储格式呢？</p><p>其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。<br>例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的<code>ASCII</code>字库表就能满足基本需求。<br>而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。<br>算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。<br>虽然现在硬盘或者内存都很廉价，但是在网络传输中，这个问题就凸显出来了，你可以这样想想，本来1M的带宽在ANSI下可以代表1024<em>1024个字符，但是在Unicode下却只能代表1024</em>1024/2个字符。<br>也就是1MB/s的带宽只能等价于512KB/s，这个很可怕啊。所以为了解决符号在网络中传输的浪费问题，于是就出现了UTF-8这样的变长编码<code>Unicode transfer format -8</code>，后面的8代表是以8位二进制为单位来传输符号的<br>在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。</p><h2 id="字符编码发展史"><a href="#字符编码发展史" class="headerlink" title="字符编码发展史"></a>字符编码发展史</h2><ul><li><p>美国人首先对其英文字符进行了编码，也就是最早的<code>ASCII</code>码，用一个字节的低7位来表示英文的128个字符，高1位统一为0；</p></li><li><p>后来欧洲人发现你这128位哪够用，比如法国人字母上面的还有注音符，这个怎么区分，得，把高1位编进来吧，这样欧洲普遍使用一个全字节进行编码，最多可表示256位。</p></li><li><p>但是即使位数少，不同国家地区用不同的字符编码，虽然0–127表示的符号是一样的，但是128–255这一段的解释完全乱套了，即使2进制完全一样，表示的字符完全不一样，比如135在法语，希伯来语，俄语编码中完全是不同的符号；</p></li><li><p>更麻烦的是，电脑传到中国后，我们发现我们有10万多个汉字，你们欧美这256字塞牙缝都不够。于是就发明了GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字，最多可以表示65536个汉字字符，这样就不难理解有些汉字你在新华字典里查得到，但是电脑上如果不处理一下你是显示不出来的了吧；</p></li><li><p>这下各用各的字符集编码，这世界咋统一？俄国人发封email给中国人，两边字符集编码不同，显示都是乱码啊。为了统一，于是就发明了Unicode，将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，现在unicode可以容纳100多万个符号，每个符号的编码都不一样，这下可统一了，所有语言都可以互通，一个网页页面里可以同时显示各国文字。</p></li><li><p>然而，unicode虽然统一了全世界字符的二进制编码，但没有规定如何存储啊，亲。x86和amd体系结构的电脑小端序和大端序都分不清，别提计算机如何识别到底是Unicode还是ASCII了。如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，文本文件的大小会因此大出二三倍，这对于存储来说是极大的浪费。这样导致一个后果：出现了Unicode的多种存储方式。</p></li><li><p>互联网的兴起，网页上要显示各种字符，必须统一啊，UTF-8就是Unicode最重要的实现方式之一。另外还有UTF-16、UTF-32等。UTF-8不是固定字长编码的，而是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p></li></ul><h2 id="UTF-8和Unicode的关系"><a href="#UTF-8和Unicode的关系" class="headerlink" title="UTF-8和Unicode的关系"></a>UTF-8和Unicode的关系</h2><p>看完上面的概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。<br>随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。<br>详见：<a href="https://en.wikipedia.org/wiki/Unicode">Unicode on Wikipedia</a>。Unicode的编号从<code>0000</code>开始一直到<code>10FFFF</code>共分为17个Plane，每个Plane中有65536个字符。</p><p>而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。</p><h2 id="UTF-8编码简介"><a href="#UTF-8编码简介" class="headerlink" title="UTF-8编码简介"></a>UTF-8编码简介</h2><p>为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 </p><p>UTF-8编码为变长编码。最小编码单位（<code>code unit</code>）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</p><ol><li><p>如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</p></li><li><p>如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</p></li><li><p>如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</p></li><li><p>如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</p></li></ol><p>具体每个字节的特征可见下表，其中<code>x</code>代表序号部分，把各个字节中的所有<code>x</code>部分拼接在一起就组成了在Unicode字库中的序号</p><table><thead><tr><th>Byte 1</th><th>Byte 2</th><th>Byte 3</th></tr></thead><tbody><tr><td>0xxx xxxx</td><td></td><td></td></tr><tr><td>110x xxxx</td><td>10xx xxxx</td><td></td></tr><tr><td>1110 xxxx</td><td>10xx xxxx</td><td>10xx xxxx</td></tr></tbody></table><p>我们分别看三个从一个字节到三个字节的UTF-8编码例子：</p><table><thead><tr><th>实际字符</th><th>在Unicode字库序号的十六进制</th><th>在Unicode字库序号的二进制</th><th>UTF-8编码后的二进制</th><th>UTF-8编码后的十六进制</th></tr></thead><tbody><tr><td>$</td><td>0024</td><td>010 0100</td><td>0010 0100</td><td>24</td></tr><tr><td>¢</td><td>00A2</td><td>000 1010 0010</td><td>1100 0010 1010 0010</td><td>C2 A2</td></tr><tr><td>€</td><td>20AC</td><td>0010 0000 1010 1100</td><td>1110 0010 1000 0010 1010 1100</td><td>E2 82 AC</td></tr></tbody></table><p>细心的读者不难从以上的简单介绍中得出以下规律：</p><ol><li><p>3个字节的UTF-8十六进制编码一定是以<code>E</code>开头的</p></li><li><p>2个字节的UTF-8十六进制编码一定是以<code>C</code>或<code>D</code>开头的</p></li><li><p>1个字节的UTF-8十六进制编码一定是以比<code>8</code>小的数字开头的</p></li></ol><h2 id="为什么会出现乱码"><a href="#为什么会出现乱码" class="headerlink" title="为什么会出现乱码"></a>为什么会出现乱码</h2><p><code>乱码</code>也就是英文常说的<code>mojibake</code>（由日语的<code>文字化け</code>音译）。 简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。<br>对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了<code>bless</code>（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是<code>受伤</code>（解码过程）。<br>这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。<br>由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。</p><p>我们来看一个例子：假设我们用UTF-8编码存储<code>很屌</code>两个字，会有如下转换：</p><table><thead><tr><th>字符</th><th>UTF-8编码后的十六进制</th></tr></thead><tbody><tr><td>很</td><td>E5BE88</td></tr><tr><td>屌</td><td>E5B18C</td></tr></tbody></table><p>于是我们得到了<code>E5BE88E5B18C</code>这么一串数值。而显示时我们用GBK解码进行展示，通过查表我们获得以下信息：</p><table><thead><tr><th>两个字节的十六进制数值</th><th>GBK解码后对应的字符</th></tr></thead><tbody><tr><td>E5BE</td><td>寰</td></tr><tr><td>88E5</td><td>堝</td></tr><tr><td>B18C</td><td>睂</td></tr></tbody></table><p>解码后我们就得到了<code>寰堝睂</code>这么一个错误的结果，更要命的是连字符个数都变了。</p><h2 id="如何识别乱码的本来想要表达的文字"><a href="#如何识别乱码的本来想要表达的文字" class="headerlink" title="如何识别乱码的本来想要表达的文字"></a>如何识别乱码的本来想要表达的文字</h2><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p><h3 id="第1步-编码"><a href="#第1步-编码" class="headerlink" title="第1步 编码"></a>第1步 编码</h3><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。<br>当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：</p><pre class=" language-mysql"><code class="language-mysql">mysql [localhost] &#123;msandbox&#125; > select hex(convert('寰堝睂' using gbk));+-------------------------------------+| hex(convert('寰堝睂' using gbk))    |+-------------------------------------+| E5BE88E5B18C                        |+-------------------------------------+1 row in set (0.01 sec)</code></pre><h3 id="第2步-识别"><a href="#第2步-识别" class="headerlink" title="第2步 识别"></a>第2步 识别</h3><p>现在我们得到了解码后的二进制字符串<code>E5BE88E5B18C</code>。然后我们将它按字节拆开。</p><table><thead><tr><th>Byte1</th><th>Byte2</th><th>Byte3</th><th>Byte4</th><th>Byte5</th><th>Byte6</th></tr></thead><tbody><tr><td>E5</td><td>BE</td><td>88</td><td>E5</td><td>B1</td><td>8C</td></tr></tbody></table><p>然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。<br>如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8</p><h3 id="第3步-解码"><a href="#第3步-解码" class="headerlink" title="第3步 解码"></a>第3步 解码</h3><p>然后我们就能拿着<code>E5BE88E5B18C</code>用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：</p><pre class=" language-mysql"><code class="language-mysql">mysql [localhost] &#123;msandbox&#125; ((none)) > select convert(0xE5BE88E5B18C using utf8);+------------------------------------+| convert(0xE5BE88E5B18C using utf8) |+------------------------------------+| 很屌                               |+------------------------------------+1 row in set (0.00 sec)</code></pre><h2 id="常见问题处理之Emoji"><a href="#常见问题处理之Emoji" class="headerlink" title="常见问题处理之Emoji"></a>常见问题处理之Emoji</h2><p>所谓Emoji就是一种在Unicode位于<code>\u1F601-\u1F64F</code>区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围<code>\u0000-\uFFFF</code>。<br>Emoji表情随着IOS的普及和微信的支持越来越常见。下面就是几个常见的Emoji: &#128524; &#128526; &#128525; 那么Emoji字符表情会对我们平时的开发运维带来什么影响呢？</p><p>最常见的问题就在于将他存入MySQL数据库的时候。<br>一般来说MySQL数据库的默认字符集都会配置成UTF-8（三字节），而utf8mb4在5.5以后才被支持，也很少会有DBA主动将系统默认字符集改成utf8mb4。<br>那么问题就来了，当我们把一个需要4字节UTF-8编码才能表示的字符存入数据库的时候就会报错：<br><code>ERROR 1366: Incorrect string value: &#39;\xF0\x9D\x8C\x86&#39; for column</code> 。 </p><p>如果认真阅读了上面的解释，那么这个报错也就不难看懂了。我们试图将一串Bytes插入到一列中，而这串Bytes的第一个字节是<code>\xF0</code>意味着这是一个四字节的UTF-8编码。<br>但是当MySQL表和列字符集配置为UTF-8的时候是无法存储这样的字符的，所以报了错。<br>那么遇到这种情况我们如何解决呢？</p><p>有两种方式：<br>第一种升级MySQL到5.6或更高版本，并且将表字符集切换至utf8mb4。<br>第二种方法就是在把内容存入到数据库之前做一次过滤，将Emoji字符替换成一段特殊的文字编码，然后再存入数据库中。<br>之后从数据库获取或者前端展示时再将这段特殊文字编码转换成Emoji显示。第二种方法我们假设用<code>-*-1F601-*-</code>来替代4字节的Emoji，那么具体实现python代码可以参见<a href="https://stackoverflow.com/questions/3220031/how-to-filter-or-replace-unicode-characters-that-would-take-more-than-3-bytes">Stackoverflow</a>上的回答</p>]]></content>
      
      
      <categories>
          
          <category> 字符集编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符集编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精确算法bitmap</title>
      <link href="2020/05/12/algorithms/bitmap.html"/>
      <url>2020/05/12/algorithms/bitmap.html</url>
      
        <content type="html"><![CDATA[<p>本文参考：<a href="https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p><h2 id="Bitmap的原理"><a href="#Bitmap的原理" class="headerlink" title="Bitmap的原理"></a>Bitmap的原理</h2><p>定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。</p><p>例如有一个集合<code>[2,3,5,8]</code>对应的 Bitmap 数组是<code>[001101001]</code>，集合中的 2 对应到数组 index 为 2 的位置，3 对应到 index 为 3 的位置，<br>得到的这样一个数组，我们就称之为 Bitmap。</p><p>数组中 1 的数量就是集合的基数。</p><p>我们可以把 Bitmap 想象成一个容器，我们知道一个 Integer 是 32 位的，如果一个 Bitmap 可以存放最多 Integer.MAX_VALUE 个值，那么这个 Bitmap 最少需要 32 的长度。<br>一个 32 位长度的 Bitmap 占用的空间是 512 M （2^32/8/1024/1024）字节。</p><p>这种 Bitmap 存在着非常明显的问题：这种 Bitmap 中不论只有 1 个元素或者有 40 亿个元素，它都需要占据 512 M 的空间。</p><h2 id="Roaring-Bitmap"><a href="#Roaring-Bitmap" class="headerlink" title="Roaring Bitmap"></a>Roaring Bitmap</h2><p>Roaring Bitmap 把一个 32 位的 Integer 划分为高 16 位和低 16 位，取高 16 位找到该条数据所对应的 key，每个 key 都有自己的一个 Container。<br>我们把剩余的低 16 位放入该 Container 中。<br>依据不同的场景，有 3 种不同的 Container，分别是 Array Container、Bitmap Container 和 Run Container</p><h3 id="Array-Container"><a href="#Array-Container" class="headerlink" title="Array Container"></a>Array Container</h3><p>Array Container 适合存放稀疏的数据，Array Container 内部的数据结构是一个 short array，这个 array 是有序的，方便查找。<br>数组初始容量为 4，数组最大容量为 4096。超过最大容量 4096 时，会转换为 Bitmap Container。</p><p>这边举例来说明数据放入一个 Array Container 的过程：<br>有 0xFFFF0000 和 0xFFFF0001 两个数需要放到 Bitmap 中, 它们的前 16 位都是 FFFF，所以他们是同一个 key，它们的后 16 位存放在同一个 Container 中 ;<br>它们的后 16 位分别是 0 和 1, 在 Array Container 的数组中分别保存 0 和 1 就可以了，<br>相较于原始的 Bitmap 需要占用 512M 内存来存储这两个数，这种存放实际只占用了 2+4=6 个字节（key 占 2 Bytes，两个 value 占 4 Bytes，不考虑数组的初始容量）。</p><h3 id="Bitmap-Container"><a href="#Bitmap-Container" class="headerlink" title="Bitmap Container"></a>Bitmap Container</h3><p>Bitmap Container，其原理就是上文说的 Bitmap。它的数据结构是一个 long 的数组，数组容量固定为 1024，和上文的 Array Container 不同，Array Container 是一个动态扩容的数组。</p><p>这边推导下 1024 这个值：<br>由于每个 Container 还需处理剩余的后 16 位数据，使用 Bitmap 来存储需要 8192 Bytes（2^16/8）, 而一个 long 值占 8 个 Bytes，所以一共需要 1024（8192/8）个 long 值。<br>所以一个 Bitmap container 固定占用内存 8 KB（1024 * 8 Byte）。</p><p>当 Array Container 中元素到 4096 个时，也恰好占用 8 k（4096*2Bytes）的空间，正好等于 Bitmap 所占用的 8 KB。<br>而当你存放的元素个数超过 4096 的时候，Array Container 的大小占用还是会线性的增长，但是 Bitmap Container 的内存空间并不会增长，始终还是占用 8 K，<br>所以当 Array Container 超过最大容量（DEFAULT_MAX_SIZE）会转换为 Bitmap Container。</p><h3 id="Run-Container"><a href="#Run-Container" class="headerlink" title="Run Container"></a>Run Container</h3><p>Run Container，这种 Container 适用于存放连续的数据。<br>比如说 1 到 100，一共 100 个数，这种类型的数据称为连续的数据。这边的 Run 指的是 Run Length Encoding（RLE），它对连续数据有比较好的压缩效果。<br>原理是对于连续出现的数字, 只记录初始数字和后续数量。<br>例如: 对于 <code>[11, 12, 13, 14, 15, 21, 22]</code>，会被记录为 <code>11, 4, 21, 1</code>。<br>很显然，该 Container 的存储占用与数据的分布紧密相关。最好情况是如果数据是连续分布的，就算是存放 65536 个元素，也只会占用 2 个 short。<br>而最坏的情况就是当数据全部不连续的时候，会占用 128 KB 内存（每个元素都多了一个表示长度的数）。</p><p>Redis 实现了位图</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非精确算法HyperLogLog</title>
      <link href="2020/05/12/algorithms/hyper-log-log.html"/>
      <url>2020/05/12/algorithms/hyper-log-log.html</url>
      
        <content type="html"><![CDATA[<p>本文参考：</p><p><a href="https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p><p><a href="http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html">rainybowe 神奇的HyperLogLog算法</a></p><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数</p><p>HLL 算法需要完整遍历所有元素一次，而非多次或采样；</p><p>该算法只能计算集合中有多少个不重复的元素，不能给出每个元素的出现次数或是判断一个元素是否之前出现过；</p><p>多个使用 HLL 统计出的基数值可以融合。</p><p>在牺牲一定准确性的前提下，存储空间可以被大量节省</p><table><thead><tr><th>算法</th><th>存储空间(10^6)</th><th>误差</th></tr></thead><tbody><tr><td>Bitmap</td><td>120KB</td><td>0%</td></tr><tr><td>HLL(10)</td><td>1KB</td><td>9.75%</td></tr><tr><td>HLL(12)</td><td>4KB</td><td>4.88%</td></tr><tr><td>HLL(14)</td><td>16KB</td><td>2.44%</td></tr><tr><td>HLL(16)</td><td>64KB</td><td>1.22%</td></tr></tbody></table><p>空间复杂度：Bitmap（O(N)），HLL（O(log2log2N)）</p><p>HLL 算法有着非常优异的空间复杂度，可以看到它的空间占用随着基数值的增长并没有变化。<br>HLL 后面不同的数字代表着不同的精度，数字越大，精度越高，占用的空间也越大，可以认为 HLL 的空间占用只和精度成正相关。</p><h2 id="算法的原理简介"><a href="#算法的原理简介" class="headerlink" title="算法的原理简介"></a>算法的原理简介</h2><p>举一个生活中的例子来帮助大家理解 HLL 算法的原理：<br>比如你在进行一个实验，内容是不停地抛硬币，出现正反面的概率都是1/2，记录你连续抛到正面的次数K，<br>这种抛硬币多次直到出现正面的过程记为一次伯努利过程，对于n次伯努利过程，我们会得到n个出现正面的投掷次数值K1,K2,K3…Kn，其中最大值记为Kmax，<br>那么可以得到下面结论：</p><ul><li>n次伯努利过程的投掷次数都不大于Kmax</li><li>n次伯努利过程，至少有一次投掷次数等于Kmax</li></ul><p><img src="/images/hyper_log_log.jpg" alt="概率公式"></p><p>以上结论可以总结为：进行了n次进行抛硬币实验，每次分别记录下第一次抛到正面的抛掷次数K，那么可以用n次实验中最大的抛掷次数Kmax来预估实验组数量n：<br>n = 2^Kmax</p><p>如果你最多连抛正面记录是 3 次，那可以想象你并没有做这个实验太多次，如果你最长连抛正面记录是 20 次，那你可能进行了这个实验上千次。</p><p>一种理论上存在的情况是，你非常幸运，第一次进行这个实验就连抛了 20 次正面，我们也会认为你进行了很多次这个实验才得到了这个记录，这就会导致错误预估；<br>改进的方式是请 10 位同学进行这项实验，这样就可以观察到更多的样本数据，降低出现上述情况的概率。这就是 HLL 算法的核心思想。</p><h2 id="算法具体实现"><a href="#算法具体实现" class="headerlink" title="算法具体实现"></a>算法具体实现</h2><ol><li>用一个哈希函数，对数据流中的每一个元素求出哈希值</li></ol><p>如果使用long来存储哈希值，则该哈希函数需要把2^64个不同的值映射到 0 ~ 2^64 -1 上</p><ol start="2"><li><p>对于每个哈希值，取最后p位来决定桶的序号</p></li><li><p>在剩下的(64 - p)位中找到第一个1出现的位置，如果大于桶中现有的值，则更新</p></li><li><p>所有元素处理完毕后，求所有桶中值的调和平均数</p></li></ol><p>调和平均数是将所有的数值取倒数并求其算术平均数之后，再将次算术平均数取倒数而得</p><ol start="5"><li>乘以m得到最后的结果E</li></ol><p>HLL 会通过一个 hash 函数来求出集合中所有元素的 hash 值（二进制表示的 hash 值，就可以理解为一串抛硬币正反面结果的序列），得到一个 hash 值的集合，然后找出该 hash 值集合中，第一个 1 出现的最晚的位置。</p><p>例如有集合为 <code>[010, 100, 001]</code>, 集合中元素的第一个 1 出现的位置分别为 2, 1, 3，可以得到里面最大值为 3，故该集合中第一个 1 出现的最晚的位置为 3。<br>因为每个位置上出现 1 的概率都是 1/2，所以我们可以做一个简单的推断，该集合中有 8 个不重复的元素。</p><p>可以看到这种简单推断计算出来集合的基数值是有较大的偏差的，那如何来减少偏差呢？</p><p>正如我上面的例子里说的一样，HLL 通过多次的进行试验来减少误差。那它是如何进行多次的实验的呢？</p><p>这里 HLL 使用了分桶的思想，上文中我们一直有提到一个精度的概念，比如说 HLL(10)，这个 10 代表的就是取该元素对应 Hash 值二进制的后 10 位，<br>计算出记录对应的桶，桶中会记录一个数字，代表对应到该桶的 hash 值的第一个 1 出现的最晚的位置。</p><p>例如哈希值：<code>0000010010111010111100 0000001001</code><br>该 hash 值的后 10 位的 hash 值是 <code>0000001001</code>，转成 10 进制是 9，对应第 9 号桶，而该 hash 值第一个 1 出现的位置是第 6 位，如果比原先 9 号桶中的数字大，那么把 9 号桶中的数字更新为 6。<br>可以看到桶的个数越多，HLL 算法的精度就越高，HLL(10) 有 1024(2^10) 个桶，HLL(16) 有 65536(2^16) 个桶。<br>同样的，桶的个数越多，所占用的空间也会越大。</p><p>HLL 的误差分布服从正态分布，它的空间复杂度: O(m log2log2N), Ｎ 为基数, m 为桶个数。<br>这边给大家推导一下它的空间复杂度，我有 264 个的不重复元素 (Long. MAX_VALUE)，表达为二进制一个数是 64 位，这是第一重 log2, 那么第一个 1 最晚可能出现在第 64 位。<br>64 需要 6 个 bit (26=64) 就可以存储，这是第二重 log2。如果精度为 10，则会有 1024 个桶，所以最外面还要乘以桶的个数。<br>由于需要完整的遍历元素一遍，所以它的时间复杂度是一个线性的时间复杂度</p><p>Redis实现了HyperLogLog</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phpstorm常用快捷键</title>
      <link href="2020/05/12/tools/phpstorm-keymap.html"/>
      <url>2020/05/12/tools/phpstorm-keymap.html</url>
      
        <content type="html"><![CDATA[<p>本文参考：<a href="https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please">peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please</a></p><p>提取了一些自己常用的快捷键做记录</p><h2 id="Mac符号"><a href="#Mac符号" class="headerlink" title="Mac符号"></a>Mac符号</h2><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>⌘</td><td>Command</td></tr><tr><td>⇧</td><td>Shift</td></tr><tr><td>⌃</td><td>Control</td></tr><tr><td>↩</td><td>Enter/Return</td></tr><tr><td>⌥</td><td>Option/Alt</td></tr></tbody></table><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table><thead><tr><th>Win/Linux</th><th>Mac</th><th>注释</th></tr></thead><tbody><tr><td>Ctrl + mouse over code</td><td>⌘+mouse over code</td><td>查看到简短的函数介绍</td></tr><tr><td>Alt + Insert</td><td>⌘N,⌃↩,⌃N</td><td>生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等），函数、类的注释我一般喜欢 <code>/**</code> + ↩</td></tr><tr><td>Ctrl + /</td><td>⌘/</td><td>以添加 “//” 的方式添加注释（单行注释）</td></tr><tr><td>Ctrl + Shift + /</td><td>⌘⌥/</td><td>添加 “/**/” 的方式添加注释（块注释），选中代码块，然后快捷键</td></tr><tr><td>Alt + Enter</td><td>⌥↩</td><td>显示意图行动。 Show Intention Action，自动use namespace、给私有属性生成getter setter函数</td></tr><tr><td>Ctrl + Alt + L</td><td>⌘⌥L</td><td>格式化代码，自动缩进</td></tr><tr><td>Tab / Shift + Tab</td><td>tab,⇧+tab</td><td>手动缩进 / 反向缩进</td></tr><tr><td>Ctrl + X or Shift + Delete</td><td>⌘X</td><td>剪切</td></tr><tr><td>Ctrl + C or Ctrl + Insert</td><td>⌘C</td><td>复制</td></tr><tr><td>Ctrl + V or Shift + Insert</td><td>⌘V</td><td>粘贴</td></tr><tr><td>Ctrl + Shift + V</td><td>⌘⇧V</td><td>从粘贴板中选择内容进行粘贴</td></tr><tr><td>Ctrl + D</td><td>⌘D</td><td>将当前行或者选择的内容复制到下一行或光标处</td></tr><tr><td>Ctrl + Y</td><td>⌘del</td><td>删除光标所在的行，win上我改成了 Ctrl+Insert</td></tr><tr><td>Ctrl + Delete</td><td>⌥ + del</td><td>删除光标之后的部分单词</td></tr><tr><td>Ctrl + +/-</td><td>⌘ +,-</td><td>折叠 / 打开代码块，再次点击扩大折叠 / 打开范围</td></tr><tr><td>Ctrl + F4</td><td>⌘W</td><td>关闭当前页面，win上也被我设置成 Ctrl + W</td></tr><tr><td>Alt + Up/Down</td><td>⌘ + 上/下方向键</td><td>上下移动代码块、行，我自己设置的</td></tr></tbody></table><h2 id="搜索-替换"><a href="#搜索-替换" class="headerlink" title="搜索 / 替换"></a>搜索 / 替换</h2><table><thead><tr><th>Win/Linux</th><th>Mac</th><th>注释</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>⌘F</td><td>查找、替换</td></tr><tr><td>Shift + Shift</td><td>⇧ + ⇧</td><td>可在全项目里搜索</td></tr></tbody></table><h2 id="导航相关"><a href="#导航相关" class="headerlink" title="导航相关"></a>导航相关</h2><table><thead><tr><th>Win/Linux</th><th>Mac</th><th>注释</th></tr></thead><tbody><tr><td>Ctrl + E</td><td>⌘E</td><td>打开最近打开过的文件列表</td></tr><tr><td>Ctrl + L</td><td>⌘L</td><td>跳转到行，有时根据报错日志可以快速定位到行</td></tr><tr><td>Ctrl + Click</td><td>⌘ + Click</td><td>跳转到函数的声明处</td></tr><tr><td>Alt + Left</td><td>⌥ + Left</td><td>返回从上次点击跳转到函数的声明处的地方</td></tr><tr><td>Ctrl + W</td><td>⌘ + W</td><td>关闭当前文件，自己设置的快捷键</td></tr><tr><td>Ctrl + Tab</td><td>⌘ + Tab</td><td>切换最近打开的文件</td></tr></tbody></table><h2 id="重构相关"><a href="#重构相关" class="headerlink" title="重构相关"></a>重构相关</h2><p>重命名变量、类、函数，我一般都是用鼠标</p>]]></content>
      
      
      <categories>
          
          <category> Phpstorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮点数精度问题</title>
      <link href="2020/05/11/decimal.html"/>
      <url>2020/05/11/decimal.html</url>
      
        <content type="html"><![CDATA[<h2 id="写PHP遇到问题"><a href="#写PHP遇到问题" class="headerlink" title="写PHP遇到问题"></a>写PHP遇到问题</h2><p>开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分）</p><p>通常我的做法是 乘100 然后保存，原本以为这样写是没有问题的，结果却是写了一个bug，我把浮点型转换为整形的时候</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1633 float</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1632 int</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1633</span><span class="token keyword">echo</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1632</span></code></pre><p>然后去复习了一遍计算机中的浮点数（该打）</p><h2 id="浮点数在计算机如何保存"><a href="#浮点数在计算机如何保存" class="headerlink" title="浮点数在计算机如何保存"></a>浮点数在计算机如何保存</h2><p>之所以产生这样的问题，其根本原因是：计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。</p><p>计算机如何保存浮点数？</p><ol><li><p>整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称<code>除2取余法</code>。</p></li><li><p>小数部分：十进制小数转换为二进制小数，采用<code>乘2取整，顺序排列</code>法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，<br>然后再将积的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。<br>然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的高位，后取出的整数部分作为低位有效位。简称<code>乘2取整法</code>。</p></li><li><p>含有小数的十进制数转换成二进制，整数、小数部分分别进行转换，然后相加</p></li></ol><p>例如将十进制 29.75 转换为二进制，步骤如下</p><p>整数部分</p><pre><code>29/2 = 14...114/2 = 7...07/2 = 3...13/2 = 1...11/2 = 0...1</code></pre><p>29(10) = 11101(2)</p><p>小数部分</p><pre><code>0.75*2 = 1.5...10.5*2 = 1...1</code></pre><p>0.75(10) = 0.11(2)</p><p>29.75(10) = 11101.11(2)</p><p>按照上面的算法，我们来计算 16.33，我们只需要验证小数部分就行</p><pre><code>0.33*2 = 0.66...00.66*2 = 1.32...10.32*2 = 0.64...00.64*2 = 1.28...10.28*2 = 0.56...00.56*2 = 1.12...10.12*2 = 0.24...00.24*2 = 0.48...00.48*2 = 0.96...00.96*2 = 1.92...10.92*2 = 1.84...1.... </code></pre><p>发现是算不完的</p><p>目前计算机上存储浮点数值是按照<a href="https://zh.wikipedia.org/zh-hans/IEEE_754">IEEE（电气和电子工程师协会）754</a>浮点存储格式标准来存储的</p><p>IEEE单精度浮点格式共32位，包含三个构成字段：<br>23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f；23:30位包含8位指数e；第31位包含符号s</p><p>也就是说上面将0.33转换出的二进制代码，我们只能存储23位，即使数据类型为double，也只能存储52位，这样大家便能看出问题出现的原因了。</p><p>截取的二进制代码已无法正确表示0.33，根据这个二进制代码肯定无法正确得到结果</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><ol><li><p>因为二进制数值可以准确表示整数（可以使用整数转换为二进制方法验证下），所以可以将小数乘以10或100等变成整数，然后做运算，最后再通过除以10或100等获得结果。</p></li><li><p>通过截取结果的有效小数位数等，来取得最好的近似结果，然后在做处理。</p></li><li><p>对于可以用有限长度的二进制数值表示的十进制数值，可以使用存储位数大于其长度的数据类型。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 计算机杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAT原理</title>
      <link href="2020/04/25/network/nat.html"/>
      <url>2020/04/25/network/nat.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。<br>允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）转换成合法网络IP地址的技术。<br>因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。（也有人说这是阻碍IPV6发展的原因之一）</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>静态NAT(Static NAT)</p></li><li><p>动态地址NAT(Pooled NAT)</p></li><li><p>网络地址端口转换NAPT(Port-Level NAT)</p></li></ul><p>（Network Address Port Translation）是把内部地址映射到外部网络的一个IP地址的不同端口上。它可以将中小型的网络隐藏在一个合法的IP地址后面。<br>NAPT与 动态地址NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的端口号。<br>NAPT是使用最普遍的一种转换方式，在HomeGW中也主要使用该方式。它又包含两种转换方式：SNAT和DNAT。</p><p>（Source NAT）：修改数据包的源地址。SNAT改变第一个数据包的来源地址，它永远会在数据包发送到网络之前完成，数据包伪装就是一具SNAT的例子。</p><p>（Destination NAT，DNAT）：修改数据包的目的地址。DNAT刚好与SNAT相反，它是改变第一个数据包的目的地地址，如平衡负载、端口转发和透明代理就是属于DNAT。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>地址转换</li></ul><p>NAT的基本工作原理是，当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。</p><p>如下图所示，NAT网关有2个网络端口，其中公共网络端口的IP地址是统一分配的公共 IP，为202.20.65.5；<br>私有网络端口的IP地址是保留地址，为192.168.1.1。私有网中的主机192.168.1.2向公共网中的主机202.20.65.4发送了1个IP包(Dst=202.20.65.4,Src=192.168.1.2)。</p><p><img src="/images/nat_1.jpg" alt="NAT工作原理1"></p><p>当IP包经过NAT网关时，NAT Gateway会将IP包的源IP转换为NAT Gateway的公共IP并转发到公共网，此时IP包（Dst=202.20.65.4，Src=202.20.65.5）中已经不含任何私有网IP的信息。<br>由于IP包的源IP已经被转换成NAT Gateway的公共IP，Web Server发出的响应IP包（Dst= 202.20.65.5,Src=202.20.65.4）将被发送到NAT Gateway。</p><p>这时，NAT Gateway会将IP包的目的IP转换成私有网中主机的IP，然后将IP包（Des=192.168.1.2，Src=202.20.65.4）转发到私有网。<br>对于通信双方而言，这种地址的转换过程是完全透明的。转换示意图如下：</p><p><img src="/images/nat_2.jpg" alt="转换示意图"></p><ul><li>连接追踪</li></ul><p>在上述过程中，NAT Gateway在收到响应包后，就需要判断将数据包转发给谁。此时如果子网内仅有少量客户机，可以用静态NAT手工指定；<br>但如果内网有多台客户机，并且各自访问不同网站，这时候就需要连接追踪（connection track）。如下图所示：</p><p><img src="/images/nat_3.jpg" alt="连接追踪"></p><p>在NAT Gateway收到客户机发来的请求包后，做源地址转换，并且将该连接记录保存下来，当NAT Gateway收到服务器来的响应包后，查找Track Table，确定转发目标，做目的地址转换，转发给客户机。</p><ul><li>端口转换</li></ul><p>以上述客户机访问服务器为例，当仅有一台客户机访问服务器时，NAT Gateway只须更改数据包的源IP或目的IP即可正常通讯。<br>但是如果Client A和Client B同时访问Web Server，那么当NAT Gateway收到响应包的时候，就无法判断将数据包转发给哪台客户机，如下图所示：</p><p><img src="/images/nat_4.jpg" alt="端口转换1"></p><p>此时，NAT Gateway会在Connection Track中加入端口信息加以区分。<br>如果两客户机访问同一服务器的源端口不同，那么在Track Table里加入端口信息即可区分，如果源端口正好相同，那么在时行SNAT和DNAT的同时对源端口也要做相应的转换，如下图所示：</p><p><img src="/images/nat_5.jpg" alt="端口转换2"></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>数据伪装: 可以将内网数据包中的地址信息更改成统一的对外地址信息，不让内网主机直接暴露在因特网上，保证内网主机的安全。同时，该功能也常用来实现共享上网。</p><p>端口转发: 当内网主机对外提供服务时，由于使用的是内部私有IP地址，外网无法直接访问。因此，需要在网关上进行端口转发，将特定服务的数据包转发给内网主机。</p><p>负载均衡: 目的地址转换NAT可以重定向一些服务器的连接到其他随机选定的服务器（被负载均衡的服务器就相当于上面的内网主机）。</p><p>失效终结: 目的地址转换NAT可以用来提供高可靠性的服务。如果一个系统有一台通过路由器访问的关键服务器，一旦路由器检测到该服务器宕机（心跳检测），它可以使用目的地址转换NAT透明地把连接转移到一个备份服务器上。</p><p>透明代理: NAT可以把连接到因特网的HTTP连接重定向到一个指定的HTTP代理服务器以缓存数据和过滤请求。一些因特网服务提供商就使用这种技术来减少带宽的使用而不用让他们的客户配置他们的浏览器支持代理连接。</p><p>转载链接：</p><p><a href="https://blog.csdn.net/hzhsan/article/details/45038265">风吹过的时光 https://blog.csdn.net/hzhsan/article/details/45038265</a></p><p><a href="http://www.stars625.com/nat.html">芷菁博客 http://www.stars625.com/nat.html</a></p>]]></content>
      
      
      <categories>
          
          <category> NAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> NAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS握手通信</title>
      <link href="2020/04/14/network/tls.html"/>
      <url>2020/04/14/network/tls.html</url>
      
        <content type="html"><![CDATA[<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">阮一峰 RSA算法原理（一）</a></p><p><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">阮一峰 RSA算法原理（二）</a></p><h3 id="一些数学知识"><a href="#一些数学知识" class="headerlink" title="一些数学知识"></a>一些数学知识</h3><ul><li>质数</li></ul><p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数</p><p><a href="https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0">百度百科 质数</a></p><ul><li>互质关系</li></ul><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）</p><p>互质关系的结论：</p><pre><code>1. 任意两个质数构成互质关系，比如13和61。2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。4. 1和任意一个自然数是都是互质关系，比如1和99。5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</code></pre><ul><li>欧拉函数</li></ul><p>任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？</p><p>计算这个值的方法就叫做欧拉函数，以φ(n)表示。</p><p>分以下情况讨论</p><pre><code>1. 如果n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系。2. 如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。3. 如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)，则 φ(p^k) = p^k - p^(k-1) = p^k(1-1/p)。例如：φ(8) = φ(2^3) = 2^3 - 2^2 = 8 - 4 = 4。4. 如果n可以分解成两个互质的整数之积，n = p1 * p2，则 φ(n) = φ(p1p2) = φ(p1)φ(p2)5. 任意一个大于1的正整数，都可以写成一系列质数的积。φ(n) = n(1-1/p1)(1-1/p2)...(1-1/pr)</code></pre><ul><li>欧拉定理</li></ul><p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：<code>a^φ(n) ≡ 1(mod n)</code></p><p>a的φ(n)次方被n除的余数为1</p><p>费马小定理：<br>假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：<code>a^(p-1) ≡ 1(mod p)</code></p><ul><li>模反元素</li></ul><p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1</p><p><code>ab ≡ 1(mod n)</code> b叫做a的模反元素</p><h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><p>假设A与B通信</p><ol><li>A随机选择两个不相等的质数p和q</li></ol><p>这里 p=61 q=53，在实际应用中，这两个质数越大就越难破解</p><ol start="2"><li>计算p和q的乘积n</li></ol><p>n = p<em>q = 61</em>53 = 3233</p><p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。<br>实际应用中，RSA密钥一般是1024位，重要场合则为2048位</p><ol start="3"><li>计算n的欧拉函数φ(n)</li></ol><p>φ(n) = (p-1)(q-1) = 60*52 = 3120</p><ol start="4"><li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</li></ol><p>这里选择 17，实际应用中，常常选择65537</p><ol start="5"><li>计算e对于φ(n)的模反元素d</li></ol><p><code>ed ≡ 1 (mod φ(n))</code> 等价于 <code>ed - 1 = kφ(n)</code></p><p>17d - 3120k = 1 (d,k)=(2753,15) d=2753</p><ol start="6"><li>将n和e封装成公钥，n和d封装成私钥</li></ol><p>n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）</p><p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏</p><p>有无可能在已知n和e的情况下，推导出d？</p><p><code>ed≡1 (mod φ(n))</code>。只有知道e和φ(n)，才能算出d。</p><p><code>φ(n)=(p-1)(q-1)</code>。只有知道p和q，才能算出φ(n)。</p><p>n=pq。只有将n因数分解，才能算出p和q。</p><p>如果n可以被因数分解，d就可以算出，也就意味着私钥被破解</p><p>对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。</p><p>假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。</p><p>只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的</p><ul><li>加密和解密</li></ul><p>假设A向B发送信息m，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n</p><p>m = 65</p><p><code>m^e ≡ c (mod n)</code></p><p>B的公钥是(n,e) (3233, 17)</p><p>65^17 ≡ 2790 (mod 3233)</p><p>c等于2790，于是A把2790发送给B</p><p>解密要用私钥(n,d) (3233, 2753) </p><p>B收到2790</p><p><code>cd ≡ m (mod n)</code></p><p>2790^2753 ≡ 65 (mod 3233)</p><p>因此加密前的原文就是65</p><h2 id="TLS1-2"><a href="#TLS1-2" class="headerlink" title="TLS1.2"></a>TLS1.2</h2><ol><li><p>客户端发送 ClientHello, 包含一个随机数 ClientHello.random。</p></li><li><p>服务器回复 ServerHello，包含一个随机数 ServerHello.random，同时回复 certificate，携带了证书公钥P。</p></li><li><p>客户端收到 ServerHello.random 之后，就能够生成 pre_master_secret 以及 master_secret。</p><p>其中，pre_master_secret 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：<br><code>Struct &#123;byte Version[2]; bute random[46];&#125;</code></p><p>master_secret 的生成算法简述如下：<br><code>master_secret = PRF(pre_master_secret, &quot;master secret&quot;, ClientHello.random+ServerHello.random)</code></p><p>其中，PRF是一个随机函数，定义如下:<br><code>PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)</code></p><p>而 master_secret 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，<br>以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把 pre_master_secret 赋值给 secret，<br>master_key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。</p></li><li><p>客户端使用证书公钥P将 pre_master_secret 加密后发送给服务器。</p></li><li><p>服务器使用私钥解密得到 pre_master_secret，又由于服务端之前就接收了 ClientHello.random ，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master_secret。</p></li><li><p>客户端和服务器使用 master_secret 加密数据通信</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> TLS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> TLS </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="2020/04/14/tools/markdown.html"/>
      <url>2020/04/14/tools/markdown.html</url>
      
        <content type="html"><![CDATA[<h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 标题2</span></code></pre><h2 id="块"><a href="#块" class="headerlink" title="块"></a>块</h2><blockquote><p>这是一个块</p></blockquote><blockquote><p>块嵌套</p><blockquote><p>嵌套1</p><blockquote><p>嵌套2</p></blockquote></blockquote></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 这是一个块<span class="token blockquote punctuation">></span> 块嵌套<span class="token blockquote punctuation">> ></span> 嵌套1<span class="token blockquote punctuation">> > ></span> 嵌套2</code></pre><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表1<span class="token list punctuation">-</span> 无序列表2<span class="token list punctuation">-</span> 无序列表3</code></pre><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>有序列表1</li><li>有序列表1</li><li>有序列表1</li></ol><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表1<span class="token list punctuation">2.</span> 有序列表1<span class="token list punctuation">3.</span> 有序列表1</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th align="left">表头1</th><th align="center">表头2</th><th align="right">表头3</th></tr></thead><tbody><tr><td align="left">单元1</td><td align="center">单元2</td><td align="right">单元3</td></tr></tbody></table><pre class=" language-markdown"><code class="language-markdown">表头1|表头2|表头3:---|:---:|---:单元1|单元2|单元3</code></pre><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">'Hello world'</span><span class="token punctuation">;</span></code></pre><pre class=" language-markdown"><code class="language-markdown">```php&lt;?phpecho 'Hello world';```多余</code></pre><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><hr><hr><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">---</span></code></pre><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><a href="https://blog.wenjy.top/">连接</a></p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">[连接](https://blog.wenjy.top)</span></code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="图片" title="百度的logo"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![图片](https://www.baidu.com/img/bd_logo1.png <span class="token string">"百度的logo"</span>)</span></code></pre><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p><em>加粗1</em></p><p><strong>加粗1</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span>加粗1<span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span>加粗1<span class="token punctuation">**</span></span></code></pre><p>参考链接：</p><p><a href="https://markdown-zh.readthedocs.io/en/latest/">Markdown文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/04/14/tools/regexp.html"/>
      <url>2020/04/14/tools/regexp.html</url>
      
        <content type="html"><![CDATA[<h2 id="表达式集合"><a href="#表达式集合" class="headerlink" title="表达式集合"></a>表达式集合</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>转义，<code>\\</code> 将匹配 \</td></tr><tr><td>^</td><td>匹配开始字符</td></tr><tr><td>$</td><td>匹配结束字符</td></tr><tr><td>.</td><td>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配“z”以及“zoo”。*等价于{0,}</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配“does”或“does”中的“do”。?等价于{0,1}</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，<code>o+?</code>将匹配单个“o”，而<code>o+</code>将匹配所有“o”</td></tr><tr><td>{n}</td><td>n是一个非负整数，匹配确定的n次。例如，<code>o&#123;2&#125;</code>不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o</td></tr><tr><td>{n,}</td><td>n是一个非负整数，至少匹配n次。例如，<code>o&#123;2,&#125;</code>不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。<code>o&#123;1,&#125;</code>等价于<code>o+</code>。<code>o&#123;0,&#125;</code>则等价于<code>o*</code></td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，<code>&#123;1,3&#125;</code>将匹配“fooooood”中的前三个o。<code>o&#123;0,1&#125;</code>等价于<code>o?</code>。请注意在逗号和两个数之间不能有空格</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到</td></tr><tr><td>(?<group>pattern)</td><td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，分组匹配</td></tr><tr><td>x&#124;y</td><td>匹配x或y，例如，z&#124;food能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”</td></tr><tr><td>xyz</td><td>字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配“plain”中的“a”</td></tr><tr><td>[^xyz]</td><td>负值字符集合，匹配未包含的任意字符。例如，<code>[^abc]</code>可以匹配“plain”中的“p”</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任意字符。例如，<code>[a-z]</code>可以匹配“a”到“z”范围内的任意小写字母字符</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在“a”到“z”范围内的任意字符</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于<code>[0-9]</code></td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于<code>[^0-9]</code></td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code></td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code></td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code></td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code></td></tr></tbody></table><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><p><code>/^[\u2E80-\u9FFF]+$/</code> 匹配中文</p><h2 id="常用在线调试链接"><a href="#常用在线调试链接" class="headerlink" title="常用在线调试链接"></a>常用在线调试链接</h2><p><a href="https://regex101.com/">在线调试1</a></p><p>参考链接：</p><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 三次握手 四次挥手</title>
      <link href="2020/04/02/network/tcp-connect-close.html"/>
      <url>2020/04/02/network/tcp-connect-close.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP连接三次握手"><a href="#TCP连接三次握手" class="headerlink" title="TCP连接三次握手"></a>TCP连接三次握手</h2><p>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于<code>CLOSED</code>（关闭）状态。<br>下图中在主机下面的方框分别是TCP进程所处的状态。请注意，A主动打开连接，而B被动打开连接。</p><p><img src="/images/tcp_connect.jpeg" alt="TCP三次握手"></p><p>B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。<br>然后服务器进程就处于<code>LISTEN</code>（收听）状态，等待客户的连接请求。如有，即作出响应。</p><p>A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，<br>这时首部中的同步位SYN = 1，同时选择一个初始序号seq = x。<br>TCP规定，SYN报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。<br>这时，TCP客户进程进入<code>SYN-SENT</code>（同步已发送）状态。</p><p>B收到连接请求报文段后，如同意建立连接，则向A发送确认。<br>在确认报文段中应把SYN位和ACK位都置1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。<br>请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入<code>SYN-RCVD</code>（同步收到）状态。</p><p>TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack = y + 1，而自己的序号seq = x + 1。<br>TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。<br>这时，TCP连接已经建立，A进入<code>ESTABLISHED</code>（已建立连接）状态。</p><p>当B收到A的确认后，也进入<code>ESTABLISHED</code>状态。</p><p>上面给出的连接建立过程叫做三次握手(three-way handshake)。</p><p>为什么A还要发送一次确认呢？这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。</p><p>所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。A发出连接请求，但因连接请求报文丢失而未收到确认。<br>于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。<br>A共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。没有“已失效的连接请求报文段”。</p><p>现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。<br>本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。<br>于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。</p><p>由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。<br>但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了。</p><p>采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。</p><h2 id="TCP连接四次挥手"><a href="#TCP连接四次挥手" class="headerlink" title="TCP连接四次挥手"></a>TCP连接四次挥手</h2><p>数据传输结束后，通信的双方都可释放连接。现在A和B都处于<code>ESTABLISHED</code>状态，如下图。</p><p><img src="/images/tcp_close.jpg" alt="TCP四次挥手"></p><p>A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。<br>A把连接释放报文段首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节的序号加1。<br>这时A进入<code>FIN-WAIT-1</code>（终止等待1）状态，等待B的确认。</p><p>请注意，TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。</p><p>B收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。<br>然后B就进入<code>CLOSE-WAIT</code>（关闭等待）状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，<br>这时的TCP连接处于半关闭(<code>half-close</code>)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。<br>也就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。</p><p>A收到来自B的确认后，就进入<code>FIN-WAIT-2</code>（终止等待2）状态，等待B发出的连接释放报文段。</p><p>若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使FIN = 1。<br>现假定B的序号为w（在半关闭状态B可能又发送了一些数据）。B还必须重复上次已发送过的确认号ack = u + 1。<br>这时B就进入<code>LAST-ACK</code>（最后确认）状态，等待A的确认。</p><p>A在收到B的连接释放报文段后，必须对此发出确认。<br>在确认报文段中把ACK置1，确认号ack = w + 1，而自己的序号是seq = u + 1（根据TCP标准，前面发送过的FIN报文段要消耗一个序号）。<br>然后进入到<code>TIME-WAIT</code>（时间等待）状态。请注意，现在TCP连接还没有释放掉。<br>必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到<code>CLOSED</code>状态。</p><p>时间MSL叫做最长报文段寿命(Maximum Segment Lifetime)，RFC 793建议设为2分钟。<br>但这完全是从工程上来考虑，对于现在的网络，MSL = 2分钟可能太长了一些。<br>因此TCP允许不同的实现可根据具体情况使用更小的MSL值。<br>因此，从A进入到<code>TIME-WAIT</code>状态后，要经过4分钟才能进入到<code>CLOSED</code>状态，才能开始建立下一个新的连接。<br>当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接。</p><p>为什么A在<code>TIME-WAIT</code>状态必须等待2MSL的时间呢？这有两个理由。</p><p>第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN + ACK报文段的确认。<br>B会超时重传这个FIN + ACK报文段，而A就能在2MSL时间内收到这个重传的FIN + ACK报文段。<br>接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到<code>CLOSED</code>状态。<br>如果A在<code>TIME-WAIT</code>状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN + ACK报文段，因而也不会再发送一次确认报文段。<br>这样，B就无法按照正常步骤进入<code>CLOSED</code>状态。</p><p>第二，防止“已失效的连接请求报文段”出现在本连接中。<br>A在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。<br>这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p><p>B只要收到了A发出的确认，就进入<code>CLOSED</code>状态。同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接。我们注意到，B结束TCP连接的时间要比A早一些。<br>上述的TCP连接释放过程是四次挥手。<br>除时间等待计时器外，TCP还设有一个保活计时器(keepalive timer)。</p><p>设想有这样的情况：客户已主动与服务器建立了TCP连接。但后来客户端的主机突然出故障。<br>显然，服务器以后就不能再收到客户发来的数据。因此，应当有措施使服务器不要再白白等待下去。<br>这就是使用保活计时器。服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两小时。<br>若两小时没有收到客户的数据，服务器就发送一个探测报文段，以后则每隔75分钟发送一次。<br>若一连发送10个探测报文段后仍无客户的响应，服务器就认为客户端出了故障，接着就关闭这个连接。</p><p>如果B在接收到A的FIN请求后，自己的数据已经发送完毕，B的ACK和FIN可以合并为FIN，也就相当于三次挥手。</p><p>参考文献：《计算机网络》谢希仁编著</p>]]></content>
      
      
      <categories>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 响应状态码</title>
      <link href="2020/04/01/tools/http-response-status-codes.html"/>
      <url>2020/04/01/tools/http-response-status-codes.html</url>
      
        <content type="html"><![CDATA[<h2 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。<br>由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。<br>这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p><h3 id="100-CONTINUE"><a href="#100-CONTINUE" class="headerlink" title="100 CONTINUE"></a>100 CONTINUE</h3><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送body的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。<br>服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，<br>并在发送正文之前接收100 Continue状态代码。如果客户端收到一个错误代码，如403(禁止)或405(方法不允许)，那么它不应该发送请求的主体。<br>响应代码417期望失败表示请求不应继续，因为它表明服务器不支持预期(这种情况下例如HTTP/1.0的服务器)。</p><h3 id="101-SWITCHING-PROTOCOLS"><a href="#101-SWITCHING-PROTOCOLS" class="headerlink" title="101 SWITCHING_PROTOCOLS"></a>101 SWITCHING_PROTOCOLS</h3><p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。<br>在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。<br>例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p><h3 id="102-PROCESSING"><a href="#102-PROCESSING" class="headerlink" title="102 PROCESSING"></a>102 PROCESSING</h3><p>一个WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。<br>该响应表明服务器已经收到并正在处理请求，但无响应可用。这可以防止客户端超时并假设请求丢失。</p><h3 id="103-EARLY-HINTS"><a href="#103-EARLY-HINTS" class="headerlink" title="103 EARLY_HINTS"></a>103 EARLY_HINTS</h3><p>用于在最终HTTP消息之前返回一些响应头。</p><h2 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p><h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p>请求已成功，请求所希望的响应头或数据体将随此响应返回，实际的响应将取决于所使用的请求方法。<br>在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p><h3 id="201-CREATED"><a href="#201-CREATED" class="headerlink" title="201 CREATED"></a>201 CREATED</h3><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其URI已经随Location头信息返回。<br>假如需要的资源无法及时创建的话，应当返回<code>202 Accepted</code>。</p><h3 id="202-ACCEPTED"><a href="#202-ACCEPTED" class="headerlink" title="202 ACCEPTED"></a>202 ACCEPTED</h3><p>请求已被接受处理，但处理尚未完成。请求可能最终会被处理，也可能不会被处理，在处理发生时可能会被拒绝。</p><h3 id="203-NON-AUTHORITATIVE-INFORMATION"><a href="#203-NON-AUTHORITATIVE-INFORMATION" class="headerlink" title="203 NON_AUTHORITATIVE_INFORMATION"></a>203 NON_AUTHORITATIVE_INFORMATION</h3><p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p><h3 id="204-NO-CONTENT"><a href="#204-NO-CONTENT" class="headerlink" title="204 NO_CONTENT"></a>204 NO_CONTENT</h3><p>服务器成功处理了请求，没有返回任何内容。</p><h3 id="205-RESET-CONTENT"><a href="#205-RESET-CONTENT" class="headerlink" title="205 RESET_CONTENT"></a>205 RESET_CONTENT</h3><p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p><h3 id="206-PARTIAL-CONTENT"><a href="#206-PARTIAL-CONTENT" class="headerlink" title="206 PARTIAL_CONTENT"></a>206 PARTIAL_CONTENT</h3><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p><h3 id="207-MULTI-STATUS"><a href="#207-MULTI-STATUS" class="headerlink" title="207 MULTI_STATUS"></a>207 MULTI_STATUS</h3><p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p><h3 id="208-ALREADY-REPORTED"><a href="#208-ALREADY-REPORTED" class="headerlink" title="208 ALREADY_REPORTED"></a>208 ALREADY_REPORTED</h3><p>DAV绑定的成员已经在(多状态 multistatus)响应的前面部分中列举过，并且不再包含。</p><h3 id="226-IM-USED"><a href="#226-IM-USED" class="headerlink" title="226 IM_USED"></a>226 IM_USED</h3><p>服务器已经完成了对资源的请求，响应是应用于当前实例的一个或多个实例操作的结果的表示。</p><h2 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h2><p>此类状态代码指示客户端必须采取附加操作来完成请求。其中许多状态码用于URL重定向，后续的请求地址（重定向目标）在本次响应的<code>Location</code>域中指明。<br>当且仅当后续的请求所使用的方法是<code>GET</code>或者<code>HEAD</code>时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。<br>客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。<br>按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p><h3 id="300-MULTIPLE-CHOICES"><a href="#300-MULTIPLE-CHOICES" class="headerlink" title="300 MULTIPLE_CHOICES"></a>300 MULTIPLE_CHOICES</h3><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个<code>HEAD</code>请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。<br>这个实体的格式由<code>Content-Type</code>定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。<br>当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在<code>Location</code>中应当指明这个回馈的URI，<br>浏览器可能会将这个<code>Location</code>值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p><h3 id="301-MOVED-PERMANENTLY"><a href="#301-MOVED-PERMANENTLY" class="headerlink" title="301 MOVED_PERMANENTLY"></a>301 MOVED_PERMANENTLY</h3><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。<br>如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的<code>Location</code>域中返回。除非这是一个<code>HEAD</code>请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个<code>GET</code>或者<code>HEAD</code>请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p><h3 id="302-FOUND"><a href="#302-FOUND" class="headerlink" title="302 FOUND"></a>302 FOUND</h3><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。<br>只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI应当在响应的<code>Location</code>域中返回。<br>除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。<br>因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p><h3 id="303-SEE-OTHER"><a href="#303-SEE-OTHER" class="headerlink" title="303 SEE_OTHER"></a>303 SEE_OTHER</h3><p>对应当前请求的响应可以在另一个<code>URI</code>上被找到，当响应于<code>POST</code>（或<code>PUT</code> / <code>DELETE</code>）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。<br>这个方法的存在主要是为了允许由脚本激活的<code>POST</code>请求输出重定向到一个新的资源。<br>这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的<code>Location</code>域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。<br>如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p><h3 id="304-NOT-MODIFIED"><a href="#304-NOT-MODIFIED" class="headerlink" title="304 NOT_MODIFIED"></a>304 NOT_MODIFIED</h3><p>表示资源在由请求头中的<code>If-Modified-Since</code>或<code>If-None-Match</code>参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p><h3 id="305-USE-PROXY"><a href="#305-USE-PROXY" class="headerlink" title="305 USE_PROXY"></a>305 USE_PROXY</h3><p>被请求的资源必须通过指定的代理才能被访问。<code>Location</code>域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。<br>只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla Firefox和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p><h3 id="306-RESERVED"><a href="#306-RESERVED" class="headerlink" title="306 RESERVED"></a>306 RESERVED</h3><p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p><h3 id="307-TEMPORARY-REDIRECT"><a href="#307-TEMPORARY-REDIRECT" class="headerlink" title="307 TEMPORARY_REDIRECT"></a>307 TEMPORARY_REDIRECT</h3><p>在这种情况下，请求应该与另一个<code>URI</code>重复，但后续的请求应仍使用原始的<code>URI</code>。 与<code>302</code>相反，当重新发出原始请求时，不允许更改请求方法。<br>例如，应该使用另一个<code>POST</code>请求来重复<code>POST</code>请求。</p><h3 id="308-PERMANENTLY-REDIRECT"><a href="#308-PERMANENTLY-REDIRECT" class="headerlink" title="308 PERMANENTLY_REDIRECT"></a>308 PERMANENTLY_REDIRECT</h3><p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p><h2 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，<br>否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。<br>这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p><p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。<br>如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，<br>以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p><h3 id="400-BAD-REQUEST"><a href="#400-BAD-REQUEST" class="headerlink" title="400 BAD_REQUEST"></a>400 BAD_REQUEST</h3><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><h3 id="401-UNAUTHORIZED"><a href="#401-UNAUTHORIZED" class="headerlink" title="401 UNAUTHORIZED"></a>401 UNAUTHORIZED</h3><p>参见：HTTP基本认证、HTTP摘要认证 类似于<code>403 Forbidden</code>，<code>401</code>语义即“未认证”，即用户没有必要的凭据。<br>该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的<code>WWW-Authenticate</code>信息头用以询问用户信息。<br>客户端可以重复提交一个包含恰当的<code>Authorization</code>头信息的请求。如果当前请求已经包含了<code>Authorization</code>证书，那么<code>401</code>响应代表着服务器验证已经拒绝了那些证书。<br>如果<code>401</code>响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p><h3 id="402-PAYMENT-REQUIRED"><a href="#402-PAYMENT-REQUIRED" class="headerlink" title="402 PAYMENT_REQUIRED"></a>402 PAYMENT_REQUIRED</h3><p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。<br>如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。<br>如果帐户没有足够的资金启动调用，Sipgate将使用此代码。<br>当商店没有支付他们的费用并且暂时被禁用时，Shopify使用这个代码。<br>Stripe将此代码用于参数正确的失败支付，例如阻止欺诈支付。</p><h3 id="403-FORBIDDEN"><a href="#403-FORBIDDEN" class="headerlink" title="403 FORBIDDEN"></a>403 FORBIDDEN</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。<br>如果这不是一个<code>HEAD</code>请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个<code>404</code>响应，假如它不希望让客户端获得任何信息。</p><h3 id="404-NOT-FOUND"><a href="#404-NOT-FOUND" class="headerlink" title="404 NOT_FOUND"></a>404 NOT_FOUND</h3><p>请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。<br>假如服务器知道情况的话，应当使用<code>410</code>状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。<br>404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><h3 id="405-METHOD-NOT-ALLOWED"><a href="#405-METHOD-NOT-ALLOWED" class="headerlink" title="405 METHOD_NOT_ALLOWED"></a>405 METHOD_NOT_ALLOWED</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个<code>Allow</code>头信息用以表示出当前资源能够接受的请求方法的列表。<br>例如，需要通过<code>POST</code>呈现数据的表单上的<code>GET</code>请求，或只读资源上的<code>PUT</code>请求。<br>鉴于<code>PUT</code>，<code>DELETE</code>方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回<code>405</code>错误。</p><h3 id="406-NOT-ACCEPTABLE"><a href="#406-NOT-ACCEPTABLE" class="headerlink" title="406 NOT_ACCEPTABLE"></a>406 NOT_ACCEPTABLE</h3><p>内容协商 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个<code>HEAD</code>请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。<br>实体的格式由<code>Content-Type</code>头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p><h3 id="407-PROXY-AUTHENTICATION-REQUIRED"><a href="#407-PROXY-AUTHENTICATION-REQUIRED" class="headerlink" title="407 PROXY_AUTHENTICATION_REQUIRED"></a>407 PROXY_AUTHENTICATION_REQUIRED</h3><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个<code>Proxy-Authenticate</code>用以进行身份询问。<br>客户端可以返回一个<code>Proxy-Authorization</code>信息头用以验证。</p><h3 id="408-REQUEST-TIMEOUT"><a href="#408-REQUEST-TIMEOUT" class="headerlink" title="408 REQUEST_TIMEOUT"></a>408 REQUEST_TIMEOUT</h3><p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p><h3 id="409-CONFLICT"><a href="#409-CONFLICT" class="headerlink" title="409 CONFLICT"></a>409 CONFLICT</h3><p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p><h3 id="410-GONE"><a href="#410-GONE" class="headerlink" title="410 GONE"></a>410 GONE</h3><p>表示所请求的资源不再可用，以后也不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。<br>在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p><h3 id="411-LENGTH-REQUIRED"><a href="#411-LENGTH-REQUIRED" class="headerlink" title="411 LENGTH_REQUIRED"></a>411 LENGTH_REQUIRED</h3><p>服务器拒绝在没有定义<code>Content-Length</code>头的情况下接受请求。在添加了表明请求消息体长度的有效<code>Content-Length</code>头之后，客户端可以再次提交该请求。</p><h3 id="412-PRECONDITION-FAILED"><a href="#412-PRECONDITION-FAILED" class="headerlink" title="412 PRECONDITION_FAILED"></a>412 PRECONDITION_FAILED</h3><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。<br>这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p><h3 id="413-REQUEST-ENTITY-TOO-LARGE"><a href="#413-REQUEST-ENTITY-TOO-LARGE" class="headerlink" title="413 REQUEST_ENTITY_TOO_LARGE"></a>413 REQUEST_ENTITY_TOO_LARGE</h3><p>表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。<br>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个<code>Retry-After</code>的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-REQUEST-URI-TOO-LONG"><a href="#414-REQUEST-URI-TOO-LONG" class="headerlink" title="414 REQUEST_URI_TOO_LONG"></a>414 REQUEST_URI_TOO_LONG</h3><p>表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。<br>这比较少见，通常的情况包括： 本应使用<code>POST</code>方法的表单提交变成了<code>GET</code>方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。<br>这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p><h3 id="415-UNSUPPORTED-MEDIA-TYPE"><a href="#415-UNSUPPORTED-MEDIA-TYPE" class="headerlink" title="415 UNSUPPORTED_MEDIA_TYPE"></a>415 UNSUPPORTED_MEDIA_TYPE</h3><p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。<br>例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p><h3 id="416-REQUESTED-RANGE-NOT-SATISFIABLE"><a href="#416-REQUESTED-RANGE-NOT-SATISFIABLE" class="headerlink" title="416 REQUESTED_RANGE_NOT_SATISFIABLE"></a>416 REQUESTED_RANGE_NOT_SATISFIABLE</h3><p>客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p><h3 id="417-EXPECTATION-FAILED"><a href="#417-EXPECTATION-FAILED" class="headerlink" title="417 EXPECTATION_FAILED"></a>417 EXPECTATION_FAILED</h3><p>在请求头<code>Expect</code>中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，<code>Expect</code>的内容无法被满足。</p><h3 id="418-I-AM-A-TEAPOT"><a href="#418-I-AM-A-TEAPOT" class="headerlink" title="418 I_AM_A_TEAPOT"></a>418 I_AM_A_TEAPOT</h3><p>该状态码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。<br>当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p><h3 id="421-MISDIRECTED-REQUEST"><a href="#421-MISDIRECTED-REQUEST" class="headerlink" title="421 MISDIRECTED_REQUEST"></a>421 MISDIRECTED_REQUEST</h3><p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p><h3 id="422-UNPROCESSABLE-ENTITY"><a href="#422-UNPROCESSABLE-ENTITY" class="headerlink" title="422 UNPROCESSABLE_ENTITY"></a>422 UNPROCESSABLE_ENTITY</h3><p>请求格式正确，但是由于含有语义错误，无法响应。</p><h3 id="423-LOCKED"><a href="#423-LOCKED" class="headerlink" title="423 LOCKED"></a>423 LOCKED</h3><p>当前资源被锁定。</p><h3 id="424-FAILED-DEPENDENCY"><a href="#424-FAILED-DEPENDENCY" class="headerlink" title="424 FAILED_DEPENDENCY"></a>424 FAILED_DEPENDENCY</h3><p>请求失败是因为它依赖于另一个请求，而那个请求失败了，例如PROPPATCH。</p><h3 id="425-TOO-EARLY"><a href="#425-TOO-EARLY" class="headerlink" title="425 TOO_EARLY"></a>425 TOO_EARLY</h3><p>表示服务器不愿冒险处理可能重播的请求。</p><h3 id="426-UPGRADE-REQUIRED"><a href="#426-UPGRADE-REQUIRED" class="headerlink" title="426 UPGRADE_REQUIRED"></a>426 UPGRADE_REQUIRED</h3><p>客户端应当切换到TLS/1.0，并在HTTP/1.1 <code>Upgrade</code>头中给出。</p><h3 id="428-PRECONDITION-REQUIRED"><a href="#428-PRECONDITION-REQUIRED" class="headerlink" title="428 PRECONDITION_REQUIRED"></a>428 PRECONDITION_REQUIRED</h3><p>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，<br>但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。</p><h3 id="429-TOO-MANY-REQUESTS"><a href="#429-TOO-MANY-REQUESTS" class="headerlink" title="429 TOO_MANY_REQUESTS"></a>429 TOO_MANY_REQUESTS</h3><p>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p><h3 id="431-REQUEST-HEADER-FIELDS-TOO-LARGE"><a href="#431-REQUEST-HEADER-FIELDS-TOO-LARGE" class="headerlink" title="431 REQUEST_HEADER_FIELDS_TOO_LARGE"></a>431 REQUEST_HEADER_FIELDS_TOO_LARGE</h3><p>服务器不愿处理请求，因为一个或多个头字段过大。</p><h3 id="451-UNAVAILABLE-FOR-LEGAL-REASONS"><a href="#451-UNAVAILABLE-FOR-LEGAL-REASONS" class="headerlink" title="451 UNAVAILABLE_FOR_LEGAL_REASONS"></a>451 UNAVAILABLE_FOR_LEGAL_REASONS</h3><p>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p><h2 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。<br>除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。<br>浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p><h3 id="500-INTERNAL-SERVER-ERROR"><a href="#500-INTERNAL-SERVER-ERROR" class="headerlink" title="500 INTERNAL_SERVER_ERROR"></a>500 INTERNAL_SERVER_ERROR</h3><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p><h3 id="501-NOT-IMPLEMENTED"><a href="#501-NOT-IMPLEMENTED" class="headerlink" title="501 NOT_IMPLEMENTED"></a>501 NOT_IMPLEMENTED</h3><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p><h3 id="502-BAD-GATEWAY"><a href="#502-BAD-GATEWAY" class="headerlink" title="502 BAD_GATEWAY"></a>502 BAD_GATEWAY</h3><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p><h3 id="503-SERVICE-UNAVAILABLE"><a href="#503-SERVICE-UNAVAILABLE" class="headerlink" title="503 SERVICE_UNAVAILABLE"></a>503 SERVICE_UNAVAILABLE</h3><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。<br>如果能够预计延迟时间，那么响应中可以包含一个<code>Retry-After</code>头用以标明这个延迟时间。如果没有给出这个<code>Retry-After</code>信息，那么客户端应当以处理500响应的方式处理它。</p><h3 id="504-GATEWAY-TIMEOUT"><a href="#504-GATEWAY-TIMEOUT" class="headerlink" title="504 GATEWAY_TIMEOUT"></a>504 GATEWAY_TIMEOUT</h3><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p><h3 id="505-VERSION-NOT-SUPPORTED"><a href="#505-VERSION-NOT-SUPPORTED" class="headerlink" title="505 VERSION_NOT_SUPPORTED"></a>505 VERSION_NOT_SUPPORTED</h3><p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p><h3 id="506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL"><a href="#506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL" class="headerlink" title="506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL"></a>506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL</h3><p>请求的透明内容协商将产生一个循环引用。</p><h3 id="507-INSUFFICIENT-STORAGE"><a href="#507-INSUFFICIENT-STORAGE" class="headerlink" title="507 INSUFFICIENT_STORAGE"></a>507 INSUFFICIENT_STORAGE</h3><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p><h3 id="508-LOOP-DETECTED"><a href="#508-LOOP-DETECTED" class="headerlink" title="508 LOOP_DETECTED"></a>508 LOOP_DETECTED</h3><p>服务器在处理请求时陷入死循环。（可代替 208状态码）</p><h3 id="510-NOT-EXTENDED"><a href="#510-NOT-EXTENDED" class="headerlink" title="510 NOT_EXTENDED"></a>510 NOT_EXTENDED</h3><p>获取资源所需要的策略并没有被满足。服务器需要对请求进行进一步扩展来满足它。</p><h3 id="511-NETWORK-AUTHENTICATION-REQUIRED"><a href="#511-NETWORK-AUTHENTICATION-REQUIRED" class="headerlink" title="511 NETWORK_AUTHENTICATION_REQUIRED"></a>511 NETWORK_AUTHENTICATION_REQUIRED</h3><p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p><p>参考链接：</p><p><a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">维基百科</a></p><p><a href="https://www.flysnow.org/tools/table/http-status-codes/">飞雪无情的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件目录权限</title>
      <link href="2020/03/29/linux/file-permission.html"/>
      <url>2020/03/29/linux/file-permission.html</url>
      
        <content type="html"><![CDATA[<p>Linux一切皆文件</p><h2 id="权限解释"><a href="#权限解释" class="headerlink" title="权限解释"></a>权限解释</h2><p>首先我们执行 <code>ls -al /etc/passwd</code> 看一下 passwd文件的权限如下：</p><table><thead><tr><th>权限</th><th>连接</th><th>所有者</th><th>用户组</th><th>文件大小</th><th>修改日期</th><th>文件名</th></tr></thead><tbody><tr><td>-rw-r–r–</td><td>1</td><td>root</td><td>wheel</td><td>6393</td><td>Jul 31  2016</td><td>/etc/passwd</td></tr></tbody></table><p>第一个字符代表这个文件是目录(<code>d</code>)、文件(<code>-</code>)或者链接文件(<code>l</code>)等</p><p>接下来三组文件权限9个字符，均为<code>rwx</code>三个参数组合，代表读/写/执行权限，分别属于文件所有者、用户组、其他人的权限。</p><pre><code>一般记r权限为数字4，w为数字2，x为数字7所以上面passwd文件的权限也可以说为 644，4+2+0 4+0+0 4+0+0所有者拥有读写权限，用户组和其他人拥有读权限</code></pre><p><code>文件和目录的权限意义并不相同</code></p><h3 id="对文件而言"><a href="#对文件而言" class="headerlink" title="对文件而言"></a>对文件而言</h3><p><code>r</code>(read)权限代表可读取此文件内容</p><p><code>w</code>(write)可编辑文件内容（<strong>不包含删除该文件</strong>）</p><p><code>x</code>(execute)可被系统执行</p><h3 id="对目录而言"><a href="#对目录而言" class="headerlink" title="对目录而言"></a>对目录而言</h3><p><code>r</code>(read contents in directory)具有读取目录结构列表的权限，如使用<code>ls</code>命令读取文件夹下的文件列表</p><p><code>w</code>(modify contents in directory)这个权限对目录来说是很强大的，因为它表示你具有更改该目录结构列表的权限，具体如下：</p><ul><li>新建文件与目录，如<code>touch</code>，<code>mkdir</code>等命令</li><li>删除已存在的文件与目录（不论该文件的权限为何）如<code>rm</code>等命令</li><li>将已存在的文件重命名，如<code>mv</code>等命令</li><li>转移该目录内的文件，目录位置</li></ul><p><code>x</code>(access directory)代表用户能否进入该目录成为工作目录(work directory)，如<code>cd</code>等命令</p><h2 id="文件的默认权限：umask"><a href="#文件的默认权限：umask" class="headerlink" title="文件的默认权限：umask"></a>文件的默认权限：umask</h2><p>也就是新建文件或目录的默认权限，<code>umask</code> <code>umask -S</code>命令查看，一般为0022<br>若用户创建文件，默认没有执行权限，则总权限为<code>-rw-rw-rw-</code><br>若用户新建目录，则默认全部权限<code>drwxrwxrwx</code><br>umask的分数指的是，该默认值需要减到的权限，rwx为421</p><p>对上面的上umask来说<br>用户创建文件：(666 - 022) = 644 = -rw-r–r–<br>用户创建目录：(777 - 022) = 755 = drwxr-xr-x</p><h2 id="如何改变文件用户权限"><a href="#如何改变文件用户权限" class="headerlink" title="如何改变文件用户权限"></a>如何改变文件用户权限</h2><p>当我们需要改变文件(目录)权限时，有两个命令<code>chown</code>，<code>chmod</code></p><p>参考文献：</p><p>《鸟哥的Linux私房菜》</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令</title>
      <link href="2020/03/26/tools/git-command.html"/>
      <url>2020/03/26/tools/git-command.html</url>
      
        <content type="html"><![CDATA[<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化本地git仓库（创建新仓库）</p><p><code>git init</code> 创建普通库</p><p><code>git init --bare</code> 创建裸库</p><pre><code>当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库当你创建一个裸库时，在工作目录下，只有一个.git目录，而没有类似于本地库那样的文件结构可供你直接进行浏览和修改。一般来说，一个裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面push自己的本地修改。项目团队里面的每个人都可以clone这个库，然后完成本地修改之后，往这个库中push自己的代码。</code></pre><p>示例：在www用户的home目录创建裸仓库并clone，提交一次</p><p>服务器：</p><pre><code>mkdir git_test &amp;&amp; cd git_test &amp;&amp; git init --bare</code></pre><p>客户端：</p><pre><code>ssh-copy-id www@ipgit clone ssh://www@ip/~/git_testtouch readme.mdgit add .git commit -m &quot;first commit&quot;git push</code></pre><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置git的一些参数</p><p><code>git config user.name &quot;xxx&quot;</code> 配置用户名</p><p><code>git config user.email &quot;xxx@xxx.com&quot;</code> 配置邮箱</p><p><code>git config --global color.ui true</code> git status等命令自动着色</p><pre><code>git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;git config --global --unset http.proxygit config --global --unset https.proxy</code></pre><p>git对CRLF的处理配置</p><p><code>git config --global core.autocrlf true</code> 提交时转换为LF，检出时转换为CRLF</p><p><code>git config --global core.autocrlf input</code> 提交时转换为LF，检出时不转换</p><p><code>git config --global core.autocrlf false</code> 提交检出均不转换</p><p><code>git config --global core.safecrlf true</code> 拒绝提交包含混合换行符的文件</p><p><code>git config --global core.safecrlf false</code> 允许提交包含混合换行符的文件</p><p><code>git config --global core.safecrlf warn</code> 提交包含混合换行符的文件时给出警告</p><p>加上 <code>--global</code> 表示全局配置，不加表示仅该仓库配置</p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>clone远程仓库</p><p><code>git clone git+ssh://git@192.168.53.168/VT.git</code></p><h2 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h2><p>不加参数时查看子模块</p><p><code>git submodule add https://github.com/wenjy/maupassant-hugo.git themes/maupassant</code></p><p><code>git submodule update --remote</code> 更新子模块为远程项目的最新版本</p><pre><code>git Submodule 是一个很好的多项目使用共同类库的工具，他允许类库项目做为repository，子项目做为一个单独的git项目存在父项目中，子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，父项目中会的提交信息包含Submodule的信息，再clone父项目的时候可以把Submodule初始化。</code></pre><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看当前版本状态（是否修改）</p><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>添加文件至index（暂存区）</p><p><code>git add xyz </code> 添加xyz文件至index</p><p><code>git add .</code> 增加当前子目录下所有更改过的文件至index</p><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>把暂存区的文件提交到本地仓库</p><p><code>git commit -m &#39;xxx&#39;</code> 提交并备注信息</p><p><code>git commit --amend -m &#39;xxx&#39;</code> 合并上一次提交（用于反复修改）</p><p><code>git commit -am &#39;xxx&#39;</code> 将add和commit合为一步</p><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除index中的文件</p><p><code>git rm xxx</code> 删除index中的xxx文件</p><p><code>git rm -r *</code> 递归删除</p><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交日志</p><p><code>git log</code> 显示全部的</p><p><code>git log -1</code> 显示1行日志 -n为n行</p><p><code>git log --stat</code> 显示提交日志及相关变动文件</p><p><code>git log -p -m</code> 更加详细的文件改动 diff</p><p><code>git log v2.0</code> 显示tag v2.0的日志</p><p><code>git log --pretty=format:&#39;%h&#39; --graph</code> 图示提交日志</p><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><p>显示某个提交的详细内容</p><p><code>git show dfb02e6e4f2f7b573337763e5c0013802e392818</code> 显示某个提交的详细内容</p><p><code>git show dfb02</code> 可只用commitid的前几位，一般不会重复</p><p><code>git show HEAD</code> 显示HEAD提交日志</p><p><code>git show HEAD^</code> 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</p><p><code>git show v2.0</code> 显示tag v2.0的日志及详细内容</p><p><code>git show master@&#123;yesterday&#125;</code> 显示master分支昨天的状态</p><h2 id="git-ls-files"><a href="#git-ls-files" class="headerlink" title="git ls-files"></a>git ls-files</h2><p>列出git index包含的文件</p><h2 id="git-show-branch"><a href="#git-show-branch" class="headerlink" title="git show-branch"></a>git show-branch</h2><p>显示当前分支历史</p><p><code>git show-branch --all</code> 显示所有分支历史</p><h2 id="git-whatchanged"><a href="#git-whatchanged" class="headerlink" title="git whatchanged"></a>git whatchanged</h2><p>显示提交历史对应的文件修改</p><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><p>显示所有提交，包括孤立节点</p><pre><code>什么叫孤立节点，git commit id 组成的树是单向链表，当前commit只指向父级的commit，当HEAD指向头指针我们每次commit merge 等操作都有可能出现不能追踪的commit。</code></pre><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p><code>git tag</code> 显示已存在的tag</p><p><code>git tag -a v2.0 -m &#39;xxx&#39;</code> 增加v2.0的tag</p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>显示所有未添加至index的变更</p><p><code>git diff</code> 显示所有未添加至index的变更</p><p><code>git diff --cached</code> 显示所有已添加index但还未commit的变更</p><p><code>git diff HEAD^</code> 比较与上一个版本的差异</p><p><code>git diff HEAD -- ./lib</code> 比较与HEAD版本lib目录的差异</p><p><code>git diff origin/master..master</code> 比较远程分支master上有本地分支master上没有的</p><p><code>git diff origin/master..master --stat</code> 只显示差异的文件，不显示具体内容</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>关于远程分支操作</p><p><code>git remote add origin git+ssh://git@192.168.53.168/VT.git</code> 增加远程定义（用于push/pull/fetch）</p><p><code>git remote rename origin origin_new</code> 重命名</p><p><code>git remote remove origin_new</code> 删除远程追踪</p><p><code>git remote show</code> 查看远程追踪</p><p><code>git remote show origin</code> 查看远程追踪的详细信息</p><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>显示本地分支</p><p><code>git branch</code> 显示本地分支</p><p><code>git branch --contains 50089</code> 显示包含提交50089的分支</p><p><code>git branch -a</code> 显示所有分支</p><p><code>git branch -r</code> 显示所有原创分支</p><p><code>git branch --merged</code> 显示所有已合并到当前分支的分支</p><p><code>git branch --no-merged</code> 显示所有已合并到当前分支的分支</p><p><code>git branch -m master master_copy</code> 本地分支改名</p><p><code>git branch -d hotfixes/BJVEP933</code> 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</p><p><code>git branch -D hotfixes/BJVEP933</code> 强制删除分支hotfixes/BJVEP933</p><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>检出分支</p><p><code>git checkout -b master_copy</code> 从当前分支创建新分支master_copy并检出</p><p><code>git checkout -b master master_copy</code> 上面的完整版</p><p><code>git checkout features/performance</code> 检出已存在的features/performance分支</p><p><code>git checkout --track hotfixes/BJVEP933</code> 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</p><p><code>git checkout v2.0</code> 检出版本v2.0</p><p><code>git checkout -b develop origin/develop</code> 从远程分支develop创建新本地分支develop并检出</p><p><code>git checkout -- README</code> 检出head版本的README文件（可用于修改错误回退），可以简略<code>--</code>，加上是为了避免和分支 tag冲突</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>分支合并</p><p><code>git merge origin/master</code> 合并远程master分支至当前分支</p><pre><code>fast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit</code></pre><p><code>git merge --no-ff origin/master</code> 强行关闭fast-forward方式，不使用fast-forward方式合并，保留分支的commit历史</p><p><code>git merge --squash origin/master</code> 把一些不必要commit进行压缩，把多次分支commit历史压缩为一次</p><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>合并提交</p><p><code>git cherry-pick ff44785404a8e</code> 合并提交ff44785404a8e的修改</p><pre><code>可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交。</code></pre><p><code>git cherry-pick (--continue | --quit | --abort)</code> 解决冲突使用</p><p><code>git cherry-pick -x &lt;commit id&gt;</code> 保留原提交者信息</p><p><code>git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;</code> Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit</p><p><code>git cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;</code></p><pre><code>前者表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；后者有&quot;^&quot;标志的表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。其中，&lt;start-commit-id&gt;到&lt;end-commit-id&gt;只需要commit-id的前6位即可，并且&lt;start-commit-id&gt;在时间上必须早于&lt;end-commit-id&gt;</code></pre><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>提交分支修改到远程分支</p><p><code>git push origin master</code> 将当前分支push到远程master分支</p><p><code>git push origin :hotfixes/BJVEP933</code> 删除远程仓库的hotfixes/BJVEP933分支</p><p><code>git push --tags</code> 把所有tag推送到远程仓库</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>获取所有远程分支（不更新本地分支，另需merge）到FETCH_HEAD</p><p><code>git fetch --prune</code> 获取所有原创分支并清除服务器上已删掉的分支</p><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>获取所有远程分支并合并</p><p><code>git pull origin master</code> 获取远程分支master并merge到当前分支</p><p>与 <code>git fetch</code>相比，差了一个merge操作</p><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件</p><p><code>git mv README README2</code> 重命名文件README为README2</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>回滚操作</p><p><code>git reset --hard HEAD</code> 将当前版本重置为HEAD（通常用于merge失败回退），会导致工作区内容“丢失”</p><p><code>git reset HEAD &lt;file&gt;...</code> 取消暂存的文件</p><pre><code>在使用 hard 选项时，一定要确保知道自己在做什么，不要在迷糊的时候使用这条选项。如果真的误操作了，也不要慌，因为只要 git 一般不会主动删除本地仓库中的内容，根据你丢失的情况，可以进行找回，比如在丢失后可以使用 git reset --hard ORIG_HEAD 立即恢复，或者使用 git reflog 命令查看之前分支的引用。</code></pre><p><code>git reset --mixed HEAD</code> mixed 比 soft 的作用域多了一个 暂存区。实际上 mixed 选项与 soft 只差了一个 add 操作。</p><p><code>git reset --soft HEAD</code> 会仅仅修改分支指向。而不修改工作区与暂存区的内容，我们可以接着做一次提交，形成一个新的 commit。这在我们撤销临时提交的场景下显得比较有用</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><pre><code>rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。提交历史是一条线。rebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送（怕不怕被打？）。所以使用 rebase 最好不要在公共分支上进行操作。</code></pre><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>撤销提交</p><p><code>git revert dfb02e6</code> 撤销提交dfb02e6</p><pre><code>如果我们想要用一个反向提交恢复项目的某个版本，那就需要 revert 来协助我们完成了。什么是反向提交呢，就是旧版本添加了的内容，要在新版本中删除，旧版本中删除了的内容，要在新版本中添加。这在分支已经推送到远程仓库的情境下非常有用。revert 也不会修改历史提交记录，实际的操作相当于是检出目标提交的项目快照到工作区与暂存区，然后用一个新的提交完成版本的“回退”。</code></pre><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>暂存当前修改，将所有至为HEAD状态</p><p><code>git stash list</code> 查看所有暂存</p><p><code>git stash show -p stash@&#123;0&#125;</code> 参考第一次暂存</p><p><code>git stash apply stash@&#123;0&#125;</code> 应用第一次暂存</p><pre><code>有时，我们在一个分支上做了一些工作，修改了很多代码，而这时需要切换到另一个分支干点别的事。但又不想将只做了一半的工作提交。在曾经这样做过，将当前的修改做一次提交，message 填写 half of work，然后切换另一个分支去做工作，完成工作后，切换回来使用 reset —soft 或者是 commit amend。git 为了帮我们解决这种需求，提供了 stash 命令。stash 将工作区与暂存区中的内容做一个提交，保存起来，然后使用reset hard选项恢复工作区与暂存区内容。我们可以随时使用 stash apply 将修改应用回来。stash 实现思路将我们的修改提交到本地仓库，使用特殊的分支指针（.git/refs/stash）引用该提交，然后在恢复的时候，将该提交恢复即可。</code></pre><h2 id="git-grep"><a href="#git-grep" class="headerlink" title="git grep"></a>git grep</h2><p>搜索文本</p><p><code>git grep &quot;delete from&quot;</code> 文件中搜索文本“delete from”</p><p>参考链接：</p><p><a href="https://gist.github.com/guweigang/9848271">git 命令</a></p><p><a href="https://blog.coding.net/blog/principle-of-git">git 原理</a></p><p><a href="https://git-scm.com/docs">git官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="2020/03/26/tools/linux-command.html"/>
      <url>2020/03/26/tools/linux-command.html</url>
      
        <content type="html"><![CDATA[<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls -alh</code> </p><pre><code>-a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</code></pre><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p><code>cd /usr/local</code> 使用绝对路径</p><p><code>cd ../</code> 使用相对路径</p><p><code>cd ~</code> home目录</p><p><code>cd -</code> 返回进入此目录之前所在的目录</p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>查看“当前工作目录”的完整路径</p><p><code>pwd -P</code>  显示出实际路径，而非使用连接（link）路径</p><p><code>pwd -L</code> 目录连接链接时，输出连接路径</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。<br>对于链接文件，只是删除了链接，原有文件均保持不变。</p><p><code>rm -rf /a/b/c</code> 我是谁，我在哪里，我做了什么？</p><p><code>rm -i /a/b/*.log</code> 可以使用通配符</p><pre><code>-f, --force 忽略不存在的文件，从不给出提示。-i, --interactive 进行交互式删除-r, -R, --recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。</code></pre><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除空目录，一个目录被删除之前必须是空的。</p><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>mv命令是move的缩写，可以用来移动文件或者将文件改名。</p><p><code>mv test.log test1.txt</code> 把test.log重命名为test1.txt</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>复制文件或者目录</p><p><code>cp log1 log.bak</code> 复制log1为log.bak</p><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p><p><code>cat filename</code> 显示filename的内容</p><p><code>cat filename1 fielname2 &gt; filename3</code> 把filename1和2合并为filename3，只能创建新文件,不能编辑已有文件</p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>文件或其它输出进行分页显示，文件比较大时less不是加载整个文件</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>显示开头</p><p><code>head -n 10 filename</code> 显示前10行</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>显示结尾</p><p><code>tail -n 10 -f filename</code> 循环显示结尾10行，调试监控某日志文件时经常使用</p><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>查看可执行文件的位置。<br>在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>查看文件的位置。定位可执行文件、源代码文件、帮助文件在文件系统中的位置。</p><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>配合数据库查看文件位置。loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>实际搜寻硬盘查询文件名称。</p><p><code>find . -type f -exec ls -l &#123;&#125; \;</code> ls -l命令放在find命令的-exec选项中</p><p><code>find . -type f -print | xargs file</code> 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p><p><code>find . -name &quot;*.log&quot; -print</code> 在当前目录及子目录中查找所有的‘*.log’文件</p><h2 id="chomd"><a href="#chomd" class="headerlink" title="chomd"></a>chomd</h2><p>改变linux系统文件或目录的访问权限。</p><p><code>chomd -R 0644 /test</code> 递归修改目录权限</p><p><code>chomd +x /test/test.sh</code> 增加执行权限</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>压缩，解压缩，打包，解包等</p><p><code>tar xvf FileName.tar</code> 解包</p><p><code>tar cvf FileName.tar DirName</code> 打包</p><p><code>tar zxvf FileName.tar.gz</code> 解压</p><p><code>tar zcvf FileName.tar.gz DirName</code> 压缩</p><p><code>tar jxvf FileName.tar.bz2</code> 解压</p><p><code>tar jcvf FileName.tar.bz2 DirName</code> 压缩</p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；<br>文件是以空格分开的要改变权限的文件列表，支持通配符</p><p><code>chown mail:mail -R /test</code> 递归把<code>/test</code> 目录的用户和用户组改成mail</p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>检查linux服务器的文件系统的磁盘空间占用情况。</p><p><code>df -h</code> 方便阅读方式显示</p><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>文件和目录磁盘使用的空间的查看</p><p><code>du -h  --max-depth=1</code> 输出当前目录下各个子目录所使用的空间</p><h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，<br>我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，<br>然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间</p><p><code>ln -s log2013.log link2013</code> 给文件log2013.log创建软链接</p><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方</p><p><code>diff log2014.log log2013.log</code></p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>可以用来显示或设定系统的日期与时间</p><p><code>date &#39;+%Y-%m-%d %T&#39;</code> 2020-03-26 15:26:08</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>(Global Regular Expression Print)使用正则表达式搜索文本，并把匹 配的行打印出来。</p><p><code>ll /usr/local/bin |grep php</code></p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>(Word Count)统计指定文件中的字节数、字数、行数，并将统计结果显示输出</p><p><code>ps aux|grep php-fpm|wc -l</code> 统计php-fpm的进程数</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><code>ps aux|grep php-fpm</code></p><p>解释：</p><p>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</p><p>USER 进程用户 </p><p>PID 进程ID</p><p>%CPU 进程占用的CPU百分比</p><p>%MEM 占用内存的百分比 </p><p>VSZ 进程使用的虚拟内存量（KB） </p><p>RSS 进程占用的固定内存量（KB）</p><p>TTY 该进程在哪个终端上运行（登陆者的终端位置），若与终端无关，则显示（？）。若为pts/0等，则表示由网络连接主机进程</p><p>STAT 当前状态（D 无法中断的休眠状态、R 正在运行、S 处于休眠、T 停止或被追踪、Z 僵尸进程、&lt; 优先级高、N 优先级较低、s 进程的领导者、l 多进程、+ 位于后台的进程组）</p><p>START 进程被触发启动时间</p><p>TIME 进程实际使用CPU运行的时间</p><p>COMMAND 命令的名称和参数<br>`</p><p><code>ps -ef|grep php-fpm</code></p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>用来终止指定的进程</p><p><code>kill -9 12345</code> 强制杀死进程</p><p><code>kill -15 12345</code> 终止指定进程</p><h2 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h2><p>用于杀死指定名字的进程（kill processes by name）</p><p><code>killall php-fpm</code></p><h2 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h2><p>pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果想杀掉单个进程，请用kill来杀掉。</p><p><code>软件能用自己提供的命令来终止，重启最好</code></p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>实时显示系统中各个进程的资源占用状况</p><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>top中运行时间，负载值</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer</p><p><code>free -m</code></p><h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p>Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果</p><p><code>watch -n 1 -d netstat -ant</code> 每隔一秒高亮显示网络链接数的变化情况</p><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><p><code>crontab -u www -l</code> 查看</p><p><code>crontab -e</code> 编辑</p><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h2><p>命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置</p><p><code>ifconfig eth0 up</code> 启动网卡</p><p><code>ifconfig eth0 down</code> 关闭网卡</p><h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><p>用于显示和操作IP路由表（show / manipulate the IP routing table）</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>测试与目标主机的连通性</p><p><code>ping www.baidu.com</code></p><p><code>ping 112.112.112.112</code></p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。<br>输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p><p><code>traceroute www.baidu.com</code></p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<br>netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><p><code>netstat -anlp |grep :9999</code></p><p><code>netstat -s</code> 统计各网络信息</p><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p>Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。<br>但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><p><code>ss -anlp|grep :9999</code></p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>用来远程登录</p><p><code>telnet 127.0.0.1 9999</code></p><h2 id="rcp"><a href="#rcp" class="headerlink" title="rcp"></a>rcp</h2><p>用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p><p><code>rcp test1 webserver1:/home/root/test3</code> 将当前目录下的 test1 复制到名为 webserver1的远程系统</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。</p><p><code>scp local_file remote_username@remote_ip:remote_folder</code> 从本地服务器复制到远程服务器</p><p><code>scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code> 从远程服务器复制到本地服务器</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>一个下载文件的工具，它用在命令行下</p><p><code>wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 下载单个文件</p><p><code>wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080</code> 使用wget -O下载并以不同的文件名保存</p><p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -c断点续传</p><p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -b后台下载</p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>在调试网络通信程序是 tcpdump 是必备工具。tcpdump 很强大，可以看到网络通信的每个细节。<br>如 TCP，可以看到 3 次握手，PUSH/ACK 数据推送，close4 次挥手，全部细节。包括每一次网络收包的字节数，时间等。</p><p><code>tcpdump -i lo -Xnlps0 tcp port 9999</code> 抓lo网卡，tcp协议，端口9999 通信的数据内容</p><p><code>tcpdump host 127.0.0.1</code> 指定IP</p><p><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html">命令详解</a></p><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><p>可以跟踪系统调用的执行情况，在程序发生问题后，可以用 strace 分析和跟踪问题。</p><p><code>strace -o /tmp/strace.log -f -p $PID</code></p><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><p>GDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具，可以用来调试 C/C++ 开发的程序，PHP 和 Swoole 是使用 C 语言开发的，<br>所以可以用 GDB 来调试 PHP+Swoole 的程序。<br>gdb 调试是命令行交互式的，需要掌握常用的指令。</p><p><code>gdb -p 进程ID</code></p><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>可以查看某个进程打开的文件句柄。可以用于跟踪 swoole 的工作进程所有打开的 socket、file、资源。</p><p><code>lsof -i:9999</code></p><p><code>lsof -p [进程ID]</code></p><h2 id="pref"><a href="#pref" class="headerlink" title="pref"></a>pref</h2><p>非常强大的动态跟踪工具，perf top 指令可用于实时分析正在执行程序的性能问题。<br>与 callgrind、xdebug、xhprof 等工具不同，perf 无需修改代码导出 profile 结果文件。</p><p><code>perf top -p [进程ID]</code></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>一个数据处理工具</p><p><code>awk &#39;条件类型1&#39;&#123;动作1&#125; 条件类型2&#123;动作2&#125;... filename</code> </p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 变量名称</span><span class="token comment" spellcheck="true"># $0 代表一整行数据</span><span class="token comment" spellcheck="true"># $1-$n 代表第几列数据</span><span class="token comment" spellcheck="true"># NF 每一行拥有的字段总数（$0）</span><span class="token comment" spellcheck="true"># NR 目前 awk 处理的是 第几行 数据</span><span class="token comment" spellcheck="true"># FS 目前的分隔符，默认是空格键</span><span class="token comment" spellcheck="true"># 处理流程</span><span class="token comment" spellcheck="true"># 1、读入第一行，并将第一行数据填入$0,$1,$2..$n变量中</span><span class="token comment" spellcheck="true"># 2、依据条件类型的限制，判断是否要进行后面的动作</span><span class="token comment" spellcheck="true"># 3、做完所有的动作与条件类型</span><span class="token comment" spellcheck="true"># 4、若后面还有行数据，则重复1、2、3，直到所有的行读取完毕</span></code></pre><p><code>cat /etc/passwd |awk &#39;BEGIN &#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\t&quot; $3&#125;&#39;</code></p><h2 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h2><p>查看有效与支持的用户组</p><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p>新增用户</p><p><code>userass test_user</code></p><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>设置修改用户密码</p><p><code>passwd test_user</code></p><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>切换用户身份，需要输入切换用户的密码</p><p><code>su username</code> 切换成username用户，读取变量的设置方式为<code>non-login</code>shell的方式，这样方式下很多原本的环境变量不会被改变</p><p><code>su - username</code> 读取变量的设置方式为<code>login</code>shell的方式</p><p><code>su -c username &quot;cmd&quot;</code> 代表仅用此用户执行一次命令</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>切换用户，输入自己的密码，需要配置 <code>/ect/sudoers</code>，可用<code>visudo</code>命令编辑</p><p><code>sudo -u username pwd</code> 不加用户参数，默认root</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>基于网络协议，对指定URL进行网络传输<br>curl支持的通信协议有DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SBMS, SMTP, SMTPS, TELNET 和TFTP</p><p><code>curl --trace-time -v https://www.baidu.com</code> 可以调试请求时间和具体过程</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>SSH是一种网络协议，用于计算机之间的加密登录</p><p><code>ssh-keygen</code> 创建公钥</p><p><code>ssh-copy-id user@host</code> 复制本机公钥到服务器</p><p><code>ssh -p 2222 user@host</code> 登录服务器</p><h3 id="用来传输数据"><a href="#用来传输数据" class="headerlink" title="用来传输数据"></a>用来传输数据</h3><p><code>cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;</code> 将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录</p><p><code>ssh user@host &#39;tar cz src&#39; | tar xzv</code> 将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录</p><h3 id="绑定本地端口"><a href="#绑定本地端口" class="headerlink" title="绑定本地端口"></a>绑定本地端口</h3><p>可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性</p><p><code>ssh -D 8080 user@host</code> 让8080端口的数据，都通过SSH传向远程主机</p><p>SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。<br>可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口</p><h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。<br>为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。</p><p>假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。<br>因此，很自然的想法就是，通过host3，将host1连上host2</p><p><code>ssh -L 2121:host2:21 host3</code></p><p>命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。<br>这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）<br>这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口</p><p>“本地端口转发”使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”</p><h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。</p><p>还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？</p><p>解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了</p><p><code>ssh -R 2121:host2:21 host1</code></p><p>R参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。<br>这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”</p><p><code>ssh -NT -f -D 8080 host</code></p><p>N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作<br>f参数，表示SSH连接成功后，转入后台运行。这样一来，就可以在不中断SSH连接的情况下，在本地shell中执行其他操作</p><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p>调试tcp udp</p><p><code>netcat -u ip port</code> 调试udp</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>显示命令执行时间</p><p><code>time command</code></p><p>参考链接：</p><p><a href="https://www.cnblogs.com/peida/category/309012.html">每天一个Linux命令</a></p><p><a href="https://wiki.swoole.com/#/other/tools">Swoole文档 工具使用</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">阮一峰 SSH原理与运用（二）：远程操作与端口转发</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中遇到的问题+踩过的坑</title>
      <link href="2019/10/11/work-debug.html"/>
      <url>2019/10/11/work-debug.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装的虚拟机时间不同步"><a href="#安装的虚拟机时间不同步" class="headerlink" title="安装的虚拟机时间不同步"></a>安装的虚拟机时间不同步</h2><pre><code>ntpdate cn.pool.ntp.org</code></pre><h2 id="phpxdebug-运行失败，端口繁忙"><a href="#phpxdebug-运行失败，端口繁忙" class="headerlink" title="phpxdebug 运行失败，端口繁忙"></a>phpxdebug 运行失败，端口繁忙</h2><pre><code>因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001</code></pre><h2 id="本地测试环境curl，https时因为没有设置公钥而失败"><a href="#本地测试环境curl，https时因为没有设置公钥而失败" class="headerlink" title="本地测试环境curl，https时因为没有设置公钥而失败"></a>本地测试环境curl，https时因为没有设置公钥而失败</h2><p><a href="https://stackoverflow.com/questions/28858351/php-ssl-certificate-error-unable-to-get-local-issuer-certificate">设置公钥</a></p><h2 id="PHP函数long2ip溢出"><a href="#PHP函数long2ip溢出" class="headerlink" title="PHP函数long2ip溢出"></a>PHP函数long2ip溢出</h2><pre><code>phpstudy 的PHP默认是32位的，long2ip() 时会有问题，需要换装64位的reids 也是32位，溢出问题直接替换 phpstudy 的 php 为 64位版本的，但是 redis 在win上没有，最后使用虚拟机了</code></pre><h2 id="升级laravel框架"><a href="#升级laravel框架" class="headerlink" title="升级laravel框架"></a>升级laravel框架</h2><pre><code>升级框架，laravel/lumen 5.6.* -&gt; 5.8.* 按照5.8.*修改composer.json依赖一致，然后利用gitbug的文件对比功能，修改改变的文件。使用 github 版本文件对比，修改更改的文件和受影响的改动</code></pre><p><a href="https://github.com/laravel/lumen/compare/5.6...master">Comparing changes</a></p><h2 id="reids重启后rdb文件没有加载"><a href="#reids重启后rdb文件没有加载" class="headerlink" title="reids重启后rdb文件没有加载"></a>reids重启后rdb文件没有加载</h2><ul><li>原因 dir 设置的是 ./ 所以启动时没有到 rdb文件的目录导致没有加载，dir应设置为绝对目录 /usr/local/redis/</li></ul><h2 id="服务经常报502"><a href="#服务经常报502" class="headerlink" title="服务经常报502"></a>服务经常报502</h2><ul><li>ip服务经常报502，但fpm进程并没跑满，后面查看nginx的错误日志发现有connect() to unix:/tmp/php7-cgi.sock failed (11: Resource temporarily unavailable) while connecting to upstream错误</li></ul><p><a href="https://www.cnxct.com/something-about-phpfpm-s-backlog/">backlog</a></p><h2 id="git换行符问题"><a href="#git换行符问题" class="headerlink" title="git换行符问题"></a>git换行符问题</h2><ul><li>github clone 下一个项目，结果文件全是改动 eol unix expect windows</li></ul><p>git自动转换 CRLF<br><a href="https://github.com/cssmagic/blog/issues/22">CRLF 问题</a></p><ul><li>locate 在centos软件包叫 mlocate 首次安装需要 updatedb</li></ul><h2 id="检测ip的延迟"><a href="#检测ip的延迟" class="headerlink" title="检测ip的延迟"></a>检测ip的延迟</h2><ul><li>使用exce() 来ping 不安全，使用socket_create 构建ICMP ping 也需要特殊权限 suid</li></ul><p><a href="https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html">不需要 root 权限的 ICMP ping</a></p><p>使用SOCK_DGRAM<br><code>sudo sysctl -w net.ipv4.ping_group_range=&#39;0 10&#39;</code> 设置用户组<br><a href="https://www.jianshu.com/p/d77ede976bb3">不需要 root</a></p><p>最后还是使用 exce() 来ping，先验证IP合法性</p><h2 id="PHP-yar扩展报错"><a href="#PHP-yar扩展报错" class="headerlink" title="PHP yar扩展报错"></a>PHP yar扩展报错</h2><ul><li>本机yar 扩展打开了msgpack，服务器端没有支持</li></ul><p><a href="https://github.com/laruence/yar/issues/113">MSGPACK</a></p><ul><li>win上phpstudy php使用cgi，并且只有一个进程，代码里yar是循环调用</li></ul><p><a href="https://blessing.studio/phpstudy-prober-page-502-bad-gateway/">WSARecv() failed (10054: An existing connection was forcibly closed by the remote host)</a></p><h2 id="laravel-http-status-419"><a href="#laravel-http-status-419" class="headerlink" title="laravel http status 419"></a>laravel http status 419</h2><p><code>laravel 419 Sorry, your session has expired. Please refresh and try again.</code></p><p>问题是没有加 csrf</p><p><a href="https://stackoverflow.com/questions/52583886/post-request-in-laravel-5-7-laravel-5-8-error-419-sorry-your-session-has/53781657#53781657">419</a></p><h2 id="redis-内存出了问题-暂计"><a href="#redis-内存出了问题-暂计" class="headerlink" title="redis 内存出了问题(暂计)"></a>redis 内存出了问题(暂计)</h2><p><a href="https://blog.csdn.net/jiangshouzhuang/article/details/50864933">reids启动警告1</a></p><p><a href="https://www.jianshu.com/p/7ca4b74c92be">reids启动警告2</a></p><h2 id="laravel-迁移报错"><a href="#laravel-迁移报错" class="headerlink" title="laravel 迁移报错"></a>laravel 迁移报错</h2><p>mysql5.6 字符集 utf8_mb4 varchar(255)<br>767/4=191 意思只能 varchar(191)</p><pre><code>SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table `jobs` add index `jobs_queue_index`(`queue`))</code></pre><p><a href="https://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes">error 1071</a></p><h2 id="cookie无法删除"><a href="#cookie无法删除" class="headerlink" title="cookie无法删除"></a>cookie无法删除</h2><ul><li>使用 jquery.cookie removeCookie 无法删除cookie的问题</li></ul><p><a href="https://stackoverflow.com/questions/18486165/remove-cookie-using-jquery-not-working">需要指定path</a></p><h2 id="gerrit-提交远程被拒绝"><a href="#gerrit-提交远程被拒绝" class="headerlink" title="gerrit 提交远程被拒绝"></a>gerrit 提交远程被拒绝</h2><p>原因是 <code>git config --global user.email &quot;your_email@mail.com&quot;</code><br>我把全局的email修改了，phpstorm读取不到，commit 的时候自己填的email没有用，得选择phpstorm显示的才行</p><p>最后我修改回了公司的email，然后commit选择就能push了</p><h2 id="phpunit-异常断言"><a href="#phpunit-异常断言" class="headerlink" title="phpunit 异常断言"></a>phpunit 异常断言</h2><ul><li>phpunit @expectedExceptionMessage 比较时使用的是 strpos</li></ul><h2 id="composer-suggest"><a href="#composer-suggest" class="headerlink" title="composer suggest"></a>composer suggest</h2><ul><li>Psr\Http\Message\ResponseInterface 编辑器找不到</li></ul><p>看了一下安装laravel时貌似没有安装 composer.json 里的 suggest 包，安装时并没有指定 –no-suggest: 跳过扩展包建议，看来是默认不安装的</p><h2 id="laravel-s-redis"><a href="#laravel-s-redis" class="headerlink" title="laravel-s redis"></a>laravel-s redis</h2><ul><li>laravel-s Redis::connection() 返回redis单例连接，每个 worker 进程只能保持一个连接，只有在max_request达到时<br>worker 将自动退出，进程退出后会释放所有内存和资源。</li></ul><h2 id="swoole-yar-不兼容"><a href="#swoole-yar-不兼容" class="headerlink" title="swoole yar 不兼容"></a>swoole yar 不兼容</h2><h2 id="laravel-表单验证失败"><a href="#laravel-表单验证失败" class="headerlink" title="laravel 表单验证失败"></a>laravel 表单验证失败</h2><p>不是ajax请求会302，然后 redirect / 就会 404</p><ol><li>重写 App\Exceptions\Handler::render 同一验证失败json输出</li><li>也可以重写request header 因为是非ajax才会302</li></ol><h2 id="laravel-PhpRedisConnection-hscan-bug"><a href="#laravel-PhpRedisConnection-hscan-bug" class="headerlink" title="laravel PhpRedisConnection hscan bug"></a>laravel PhpRedisConnection hscan bug</h2><pre class=" language-php"><code class="language-php">    <span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setOption</span><span class="token punctuation">(</span>\<span class="token package">Redis</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OPT_SCAN</span><span class="token punctuation">,</span> \<span class="token package">Redis</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SCAN_RETRY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$device_fds</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hScan</span><span class="token punctuation">(</span>Link<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFdMapKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$it</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$device_fds</span> <span class="token keyword">as</span> <span class="token variable">$device_unique_mark</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$fd</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$device_unique_mark</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p>laravel框架封装的问题，需要调用$redis-&gt;client(),而不是直接使用phpredis，$it 需要引用，PhpRedisConnection 使用 __call 调用存在bug</p><h2 id="数组参数签名前，最好使用-ksort-排序"><a href="#数组参数签名前，最好使用-ksort-排序" class="headerlink" title="数组参数签名前，最好使用 ksort 排序"></a>数组参数签名前，最好使用 ksort 排序</h2><p>##laravel queue redis </p><p>因为设置了 –sleep=3 并且没有配置队列 block_for 导致队列延时执行<br>删除了 –sleep=3 并且配置 block_for =&gt; 3<br>block_for：将任务重新放入 Redis 数据库以及处理器轮询之前阻塞多久</p><h2 id="php-Trait"><a href="#php-Trait" class="headerlink" title="php Trait"></a>php Trait</h2><p>定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）<br>可以先定义一个父类使用 Trait，然后子类就能覆写父类的属性了</p><h2 id="PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定"><a href="#PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定" class="headerlink" title="PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定"></a>PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定</h2><pre class=" language-php"><code class="language-php"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">static</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="PHP-Mockery-mock"><a href="#PHP-Mockery-mock" class="headerlink" title="PHP Mockery::mock"></a>PHP Mockery::mock</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 需先赋值</span><span class="token variable">$request</span> <span class="token operator">=</span> Mockery<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mock</span><span class="token punctuation">(</span>CurlRequest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里不能连续调用，因为后面返回的不是 $request</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldReceive</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">-</span><span class="token operator">></span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string">'status'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">'msg'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'请求成功'</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2019-7-11-小数精度问题"><a href="#2019-7-11-小数精度问题" class="headerlink" title="2019.7.11 小数精度问题"></a>2019.7.11 小数精度问题</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1633</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1632</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1633</span><span class="token keyword">echo</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16.33</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1632</span></code></pre><h2 id="laravel-config-cache-的问题"><a href="#laravel-config-cache-的问题" class="headerlink" title="laravel config:cache 的问题"></a>laravel config:cache 的问题</h2><p>如果在部署过程中执行 config:cache 命令，那你应该确保只从配置文件内部调用 env 函数。一旦配置被缓存，.env 文件将不再被加载，所有对 env 函数的调用都将返回 null</p><h3 id="php-mb-strlen"><a href="#php-mb-strlen" class="headerlink" title="php mb_strlen"></a>php mb_strlen</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 默认编码UTF-8</span><span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">mb_strlen</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token string">'8bit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// 8bit是php独有解析的, 8bit并不是一个字符集, 只是php引擎可以解析它而已. 顾名思义, 一个字节等于八个位, 1byte=8bit</span></code></pre><p>PHP支持mbstring.func_overload, 用于解决原生substr无法有效应对多字节编码字符串问题<br>启用时php runtime状态是未知的， 所以在计算字符长度时， 用mb_strlen 8bit来保证计算字符串长度的正确性（按照1byte = 8bit）</p><p>##PHP 一个if判断变量的速度问题，类型转换</p><pre class=" language-php"><code class="language-php"><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$start</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token comment" spellcheck="true">//    if (count($array)) &amp;#123;&amp;#125; // 0.01805305480957</span><span class="token comment" spellcheck="true">//    if (is_null($array)) &amp;#123;&amp;#125; // 0.013534784317017</span><span class="token comment" spellcheck="true">//    if (empty($array)) &amp;#123;&amp;#125; // 0.014011859893799</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;&amp;#125; </span><span class="token comment" spellcheck="true">// 0.016890048980713</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$end</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"1: "</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$end</span> <span class="token operator">-</span> <span class="token variable">$start</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 389032</span></code></pre><h2 id="laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀"><a href="#laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀" class="headerlink" title="laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀"></a>laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀</h2><h2 id="php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15"><a href="#php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15" class="headerlink" title="php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15"></a>php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15</h2><h2 id="php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数"><a href="#php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数" class="headerlink" title="php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数"></a>php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数</h2><h2 id="php-composer-–ignore-platform-reqs"><a href="#php-composer-–ignore-platform-reqs" class="headerlink" title="php composer –ignore-platform-reqs"></a>php composer –ignore-platform-reqs</h2><p>可忽略平台约束 例如win下升级 而composer.json require 一些win没有的扩展</p><h2 id="http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口"><a href="#http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口" class="headerlink" title="http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口"></a>http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口</h2><h2 id="php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0"><a href="#php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0" class="headerlink" title="php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0"></a>php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// cli 下运行</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">apcu_store</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token variable">$bar</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">apcu_fetch</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// apc.use_request_time=1 不过期</span><span class="token comment" spellcheck="true">// 使用请求时间来淘汰缓存</span></code></pre><h2 id="reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大"><a href="#reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大" class="headerlink" title="reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大"></a>reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大</h2><p>可使用yield遍历整个数据集</p><pre class=" language-php"><code class="language-php"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'test_set_111222'</span><span class="token punctuation">;</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sAdd</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> int <span class="token variable">$count</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> Generator<span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setOption</span><span class="token punctuation">(</span>\<span class="token package">Redis</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OPT_SCAN</span><span class="token punctuation">,</span> \<span class="token package">Redis</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SCAN_RETRY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sScan</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$it</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">yield</span> <span class="token variable">$item</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO"><a href="#下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO" class="headerlink" title="下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO"></a>下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO</h2><h2 id="Wireshark卡死的原因居然是-有道词典的取词功能造成的"><a href="#Wireshark卡死的原因居然是-有道词典的取词功能造成的" class="headerlink" title="Wireshark卡死的原因居然是 有道词典的取词功能造成的"></a>Wireshark卡死的原因居然是 有道词典的取词功能造成的</h2><p><a href="https://segmentfault.com/a/1190000019913529">wireshark为什么会卡死？</a></p><h2 id="socket-set-option-参数顺序"><a href="#socket-set-option-参数顺序" class="headerlink" title="socket_set_option 参数顺序"></a>socket_set_option 参数顺序</h2><p>SO_REUSEPORT 必须在 bind() 函数之前设置</p><h2 id="linux-TCP连接失败-不回复SYN-ACK-问题"><a href="#linux-TCP连接失败-不回复SYN-ACK-问题" class="headerlink" title="linux TCP连接失败(不回复SYN,ACK)问题"></a>linux TCP连接失败(不回复SYN,ACK)问题</h2><p><a href="https://blog.csdn.net/ywq935/article/details/91384854">参考分析问题1</a></p><p><a href="https://www.cnblogs.com/cheyunhua/p/9082674.html">net.ipv4.tcp_tw_recycle参数</a></p><h2 id="php-socket-EVENT扩展-死循环的问题"><a href="#php-socket-EVENT扩展-死循环的问题" class="headerlink" title="php socket EVENT扩展 死循环的问题"></a>php socket EVENT扩展 死循环的问题</h2><p>代码中出现未捕获异常，导致死循环</p><p>go 模拟RST</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"net"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">var</span> host <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">"172.16.1.49"</span><span class="token punctuation">,</span> <span class="token string">"host"</span><span class="token punctuation">)</span><span class="token keyword">var</span> port <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token string">"9999"</span><span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token operator">*</span>host<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token operator">*</span>port<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>host<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token operator">*</span>port<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err1"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tcpConn<span class="token punctuation">,</span> ok <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>net<span class="token punctuation">.</span>TCPConn<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"err2"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    tcpConn<span class="token punctuation">.</span><span class="token function">SetLinger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>strace 调试日志</p><pre><code>39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 139070 accept(9, &#123;sa_family=AF_INET, sin_port=htons(35959), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 1039070 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 039070 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 039070 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)39070 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 039070 getpeername(10, 0x7fff585ad500, 0x7fff585ad4b4) = -1 ENOTCONN (Transport endpoint is not connected)39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 139070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 139070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 1...死循环</code></pre><p>正常的</p><pre><code>39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 139579 accept(9, &#123;sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 1039579 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 039579 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\36\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;, 16) = 039579 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)39579 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 039579 getpeername(10, &#123;sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) = 039579 epoll_ctl(6, EPOLL_CTL_ADD, 10, &#123;EPOLLIN, &#123;u32=10, u64=10&#125;&#125;) = 039579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=10, u64=10&#125;&#125;], 32, -1) = 139579 recvfrom(10, &quot;&quot;, 1, 0, NULL, NULL) = 039579 epoll_ctl(6, EPOLL_CTL_DEL, 10, 0x7fff585ad4a0) = 039579 close(10)                         = 039579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32=9, u64=9&#125;&#125;], 32, -1) = 1</code></pre><p>TCP握手成功之后，客户端直接发送RST包断开TCP连接(阿里云负载均衡服务TCP端口健康检查)，socket_getpeername()函数会抛出异常</p><h2 id="socket-read-非阻塞模式-EAGAIN处理不正确"><a href="#socket-read-非阻塞模式-EAGAIN处理不正确" class="headerlink" title="socket_read 非阻塞模式 EAGAIN处理不正确"></a>socket_read 非阻塞模式 EAGAIN处理不正确</h2><p>非阻塞模式下，我们对EAGAIN处理不正确造成（Resource temporarily unavailable）我们继续读时，造成段错误（SIGSEGV 段非法错误 (内存引用无效)​）worker exit，发送RST</p><p>由于我们实现的read 错误的返回了false thrift_protocol_read_binary_after_message_begin() 段错误，需改为空字符</p><h2 id="阿里云redis-lua-检查的问题"><a href="#阿里云redis-lua-检查的问题" class="headerlink" title="阿里云redis lua 检查的问题"></a>阿里云redis lua 检查的问题</h2><p>HMSET key field value [field value …]</p><p>因为直接使用table先组装好了field value<br>执行 script load 脚本时，会检查不成功，从而load失败，因为它判断这里少了一个参数</p><pre><code>redis.call(&#39;hmset&#39;, KEYS[1], unpack(data))</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引学习</title>
      <link href="2019/10/11/mysql/index-optimize.html"/>
      <url>2019/10/11/mysql/index-optimize.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h2><h3 id="索引的类型（数据结构）"><a href="#索引的类型（数据结构）" class="headerlink" title="索引的类型（数据结构）"></a>索引的类型（数据结构）</h3><h4 id="1-B-Tree"><a href="#1-B-Tree" class="headerlink" title="1. B-Tree"></a>1. B-Tree</h4><pre><code>所有引擎都支持InnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引和数据是不同的文件)</code></pre><ul><li><p>多列索引</p><pre><code>需要满足最左原则，where条件必须和索引的顺序一致，如果只用到单列则必须是最左列</code></pre></li><li><p>InnoDB使用聚簇索引（一种数据存储方式）</p><pre><code>聚簇索引的表现形式为，二级索引里包含了主键列（二级索引的行指针是指向行的主键值而不是行的物理地址），所以使用InnoDB时应该尽可能建一个递增的（顺序主键）如果没有则会隐式定义一个主键来作为聚簇索引</code></pre></li><li><p>覆盖索引</p><pre><code>如果一个索引包含所有需要查询的字段的值</code></pre></li><li><p>使用索引扫描来做排序</p><pre><code>只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。也需要满足索引的最左前缀要求（例外：前导列为常量的时候）。</code></pre></li><li><p>建如下表测试索引排序</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `test` (`id` int(11) NOT NULL AUTO_INCREMENT,`realname` varchar(10) NOT NULL DEFAULT '',`sex` tinyint(4) NOT NULL DEFAULT '0',`age` tinyint(4) NOT NULL DEFAULT '0',`job` varchar(10) NOT NULL DEFAULT '',PRIMARY KEY (`id`),KEY `test_realname_sex_age_index` (`realname`,`sex`,`age`),KEY `sex_index` (`sex`),KEY `age_index` (`age`)) ENGINE=InnoDB DEFAULT CHARSET=utf8</code></pre><h4 id="1-使用两种不同的排序方向排序"><a href="#1-使用两种不同的排序方向排序" class="headerlink" title="1. 使用两种不同的排序方向排序"></a>1. 使用两种不同的排序方向排序</h4></li><li><p>能使用索引排序</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age DESC;</code></pre></li><li><p>不能使用索引排序</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age ASC;</code></pre><h4 id="2-用了一个不在索引中的列"><a href="#2-用了一个不在索引中的列" class="headerlink" title="2. 用了一个不在索引中的列"></a>2. 用了一个不在索引中的列</h4></li><li><p>不能</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex,job;</code></pre><h4 id="3-where-order-by中的列无法组合成索引的最左前缀"><a href="#3-where-order-by中的列无法组合成索引的最左前缀" class="headerlink" title="3. where order by中的列无法组合成索引的最左前缀"></a>3. where order by中的列无法组合成索引的最左前缀</h4></li><li><p>不能</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY age;</code></pre></li><li><p>能</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex;</code></pre><h4 id="4-查询在索引第一列上是范围条件"><a href="#4-查询在索引第一列上是范围条件" class="headerlink" title="4. 查询在索引第一列上是范围条件"></a>4. 查询在索引第一列上是范围条件</h4></li><li><p>不能</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname > 'wen' ORDER BY sex,age;</code></pre></li></ul><p>EXPLAIN SELECT * FROM test WHERE realname BETWEEN ‘wen1’ AND ‘wen2’ ORDER BY sex,age;</p><pre><code>#### 5. 索引上有多个等于条件- 不能</code></pre><p>EXPLAIN SELECT * FROM test WHERE realname = ‘wen’ AND sex IN (1,2) ORDER BY  age;</p><pre><code>#### 6. 前导列不为常量，并且使用范围条件不能```mysqlEXPLAIN SELECT * FROM test WHERE realname &gt; &#39;qqq&#39; ORDER BY realname;</code></pre><p>能</p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE realname = 'qqq' ORDER BY realname;</code></pre><ul><li>选择合适的索引顺序</li></ul><p>一般来说：将选择性最高的列放到索引的最前列。计算方法</p><pre class=" language-mysql"><code class="language-mysql">SELECT count(DISTINCT realname)/COUNT(\*) realname_selectivity,count(DISTINCT sex)/COUNT(\*) sex_selectivity,count(DISTINCT age)/COUNT(\*) age_selectivity,count(\*) total FROM test;</code></pre><ul><li>单索引排序</li></ul><h4 id="1-where条件和排序的列不一致"><a href="#1-where条件和排序的列不一致" class="headerlink" title="1. where条件和排序的列不一致"></a>1. where条件和排序的列不一致</h4><p>不能使用索引排序 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY age;</code></pre><p>能 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY sex;</code></pre><p>能 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;</code></pre><h4 id="2-没有where条件直接排序"><a href="#2-没有where条件直接排序" class="headerlink" title="2. 没有where条件直接排序"></a>2. 没有where条件直接排序</h4><p>主键可以排序 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test ORDER BY id;</code></pre><p>不能 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test ORDER BY sex;</code></pre><h4 id="3-多where条件"><a href="#3-多where条件" class="headerlink" title="3. 多where条件"></a>3. 多where条件</h4><p>不能，不满足左前缀 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex = 1 AND age > 17 ORDER BY age;</code></pre><p>不能，不满足左前缀 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY age;</code></pre><p>不能，没有建多列索引 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 18 ORDER BY sex,age;</code></pre><p>能 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;</code></pre><p>能 </p><pre class=" language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY sex;</code></pre><ul><li>优化排序分页</li></ul><p>排序分页达到一定数量时（使用ORDER BY LIMIT），越往后面翻页越卡，可以通过使用覆盖索引查询返回需要的主键，再根据主键关联原表获得所需要的行</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10;SELECT * FROM test INNER JOIN (SELECT id FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10) t USING (id);</code></pre><h4 id="2-哈希索引"><a href="#2-哈希索引" class="headerlink" title="2. 哈希索引"></a>2. 哈希索引</h4><p>Memory引擎显式支持</p><h4 id="3-空间数据索引（R-Tree）"><a href="#3-空间数据索引（R-Tree）" class="headerlink" title="3. 空间数据索引（R-Tree）"></a>3. 空间数据索引（R-Tree）</h4><h4 id="4-全文索引-Full-text"><a href="#4-全文索引-Full-text" class="headerlink" title="4. 全文索引(Full-text)"></a>4. 全文索引(Full-text)</h4><p>同列可创建全文索引和B-Tree索引</p><h2 id="二、查询优化"><a href="#二、查询优化" class="headerlink" title="二、查询优化"></a>二、查询优化</h2>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Lock的原理</title>
      <link href="2019/10/11/linux/lock-principle.html"/>
      <url>2019/10/11/linux/lock-principle.html</url>
      
        <content type="html"><![CDATA[<p>《操作系统之哲学原理》-锁</p><h2 id="死锁的4个必要条件"><a href="#死锁的4个必要条件" class="headerlink" title="死锁的4个必要条件"></a>死锁的4个必要条件</h2><ol><li><p>死锁发生的必要条件是 资源有限</p></li><li><p>持有等待</p></li><li><p>不能抢占资源</p></li><li><p>循环等待条件</p></li></ol><h2 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h2><ul><li>哲学家每天只做两家事情：思考 吃饭</li></ul><pre><code>吃饭规矩：哲学家围在一张圆桌边，每个人的左右两边均放着一根筷子。如果要吃饭，需要获得左右的筷子（不能用一根筷子吃饭）</code></pre><p>运行的算法：</p><pre><code>1. 等待左边的筷子可用，然后拿起左边的筷子2. 等待右边的筷子可用，然后拿起右边的筷子3. 吃饭4. 放下两根筷子</code></pre><p>如果每个哲学家穿插执行，将出现每个哲学家都拿起左边筷子，而等待右边筷子的情况，死锁将发生。</p><h2 id="死锁的应对"><a href="#死锁的应对" class="headerlink" title="死锁的应对"></a>死锁的应对</h2><p>两种策略：</p><p>一、允许死锁发生</p><ul><li><p>假装没看见，不予理睬</p><pre><code>死锁发生的概率比较低，防止死锁的代价很高，还不如重启</code></pre></li><li><p>在死锁发生后，想办法予以解决(基本行不通，检测死锁不能肯定死锁发生、可能检测死锁的线程自己发生了死锁)</p><pre><code>首先需要检测死锁，利用资源分配矩阵、资源等待矩阵、系统总资源、当前系统可用资源死锁恢复，可用使用抢占、终止占用最多资源的线程、杀掉整个线程、rollback</code></pre></li><li><p>动态避免</p><pre><code>在每次进行资源分配时，必须经过仔细的计算，确保该资源请求批准后系统不会进入死锁或者潜在死锁状态</code></pre></li></ul><p>系统当前可用资源：3</p><table><thead><tr><th>线程</th><th>已持有</th><th>总需求</th></tr></thead><tbody><tr><td>A</td><td>3</td><td>9</td></tr><tr><td>B</td><td>2</td><td>4</td></tr><tr><td>C</td><td>2</td><td>7</td></tr></tbody></table><p>这个状态是否是安全状态？答案是 是安全状态</p><p>B先运行 取得2个系统资源运行结束，系统资源为 5<br>C运行，取5个系统资源运行结束，系统资源为 7<br>A运行，取6个系统资源运行结束</p><p>系统当前可用资源：2</p><table><thead><tr><th>线程</th><th>已持有</th><th>总需求</th></tr></thead><tbody><tr><td>A</td><td>4</td><td>9</td></tr><tr><td>B</td><td>2</td><td>4</td></tr><tr><td>C</td><td>2</td><td>7</td></tr></tbody></table><p>谁先执行都会发送死锁</p><p>难题所在：不能准确的预测线程的最大资源需求，只能粗略估算，如果计算超额会浪费资源，更为严重的是会<br>造成死锁误判，因为安全不安全的状态判断依据之一就是最大资源需求。如果估算过大，超过线程的实际资源需求<br>将造成在实际安全的情况下，系统被判为不安全，从而造成可以执行的任务也得不到执行</p><p>二、不允许死锁发生<br>    仔细检查，避免死锁发生<br>    通过将发生死锁的必要条件消除，避免死锁发生</p><h2 id="消除死锁的必要条件"><a href="#消除死锁的必要条件" class="headerlink" title="消除死锁的必要条件"></a>消除死锁的必要条件</h2><ol><li><p>将资源无限增加、把资源变为共享，无限是不现实的，资源共享适合部分资源，例如键盘输入就无法共享</p></li><li><p>一个线程必须一次请求其所需要的所有资源，而不是一般情况下的请求一点资源做一点事情，缺点是不利于资源的有效利用。</p></li></ol><p>一种变通的方法是，还像以前那样请求资源，不过如果请求的资源被拒绝，则该线程需要将其现在已经拥有的资源也释放。<br>这样的缺点是，本来完成了一半的工作，因为某个资源获取不到而放弃了以前的全部工作，也会造成浪费</p><ol start="3"><li><p>允许抢占资源，如CPU和内存，但也不是所有的资源都能抢占，例如锁就不能抢占</p></li><li><p>出现循环等待的原因就是因为线程请求资源的顺序是随机的，我们可以规定资源的请求顺序</p></li></ol><p>解决哲学家吃饭问题</p><ol><li>杜绝循环等待：对筷子编号123456，拿筷子的人必须按照这个顺序拿</li><li>杜绝保持并等待：要求要么同时拿起两根筷子，要么一根都不拿</li><li>动态避免：在拿起一根筷子时，判断他是否可以拿起这根筷子，有哲学家在吃饭或者这根筷子后还有多余的筷子</li></ol><h2 id="锁的实现"><a href="#锁的实现" class="headerlink" title="锁的实现"></a>锁的实现</h2><p>硬件实现的原子操作(指令)：</p><ol><li>中断禁止、启用(interrupt disable/enable)，这个操作由操作系统封装成锁</li><li>内存加载、存入(load/store)</li><li>测试与设置(test&amp;set)</li></ol><p>一、以中断启用与禁止来实现锁</p><pre><code>进程切换必须发生上下文切换，而发生上下文切换只能有两种可能：线程自愿(yield)放弃CPU而将控制权交个操作系统调度器，另一个是线程被强制（周期性的时钟中断）放弃CPU而失去控制权</code></pre><p>获得锁的伪代码：</p><pre class=" language-c"><code class="language-c"><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 先禁止中断</span>    disable interrupts<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查 value，如果是FREE表示这个资源没有被占用</span>    <span class="token comment" spellcheck="true">// 循环等待为 FREE</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> FREE<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启用中断让其它进程有将 value 设置为 FREE时间</span>        enable interrupts<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这中间是其它进程的时间</span>        disable interrupts<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置为 BUSY 开启中断</span>    value <span class="token operator">=</span> BUSY<span class="token punctuation">;</span>    enable interrupts<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>释放锁：</p><pre class=" language-c"><code class="language-c"><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value 赋值为 FREE 需要中断保护，因为赋值语句不是原子操作</span>    disable interrupts<span class="token punctuation">;</span>    value <span class="token operator">=</span> FREE<span class="token punctuation">;</span>    enable interrupts<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>缺点：频繁的中断可能造成对重要的事件处理不及时，在锁的实现中留给其它进程获得CPU的机会也不大</p><p>二、以测试与设置指令来实现锁</p><pre><code>原子操作：将内存指定位置的存储单元的内容读取到寄存器，将新的值写入到刚才的内存单元;test&amp;set 将值写入指定的内存单元，并返回内存单元原来的值</code></pre><pre class=" language-c"><code class="language-c"><span class="token function">test_and_set</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> X<span class="token punctuation">;</span>    X <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">test_and_set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用unlock的进程移动是已经获得锁的，所以不需要保护</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>三、以非繁忙等待、中断启用与禁止来实现锁</p><pre><code>一和二的两种锁的实现都有繁忙等待的问题，繁忙等待浪费资源，并且有可能造成优先级倒挂和死锁</code></pre><ol><li>使用中断禁止，但不进行繁忙等待。</li><li>如果拿不到锁，等待进程放弃CPU并进入睡眠状态，以便持有锁的进程可以更好的运行</li><li>当释放锁的时候将睡眠进程叫醒</li></ol><p>错误的方式:</p><pre class=" language-c"><code class="language-c"><span class="token function">lock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果别的线程没有执行中断，那么系统将进入死锁状态</span>    disable interrupts<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> FREE<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> BUSY<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入该锁的队列</span>        add thread to queue of threads waiting <span class="token keyword">for</span> this lock<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 切换进程</span>        <span class="token keyword">switch</span> to next runable thread<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    enable interrupts<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>只能要求所有的线程遵循下列约定：</p><ul><li><p>所有线程承诺在调用线程切换是将中断留在禁止状态</p></li><li><p>所有线程承诺在从切换返回是将中断重启启用</p></li></ul><p>但是依赖别人来遵循是很危险的</p><p>四、以最少繁忙等待、测试与设置来实现锁</p><pre><code>只用繁忙等待来执行闭锁操作，如果不能获得锁就得放弃CPU</code></pre><pre class=" language-c"><code class="language-c"><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">test_and_set</span><span class="token punctuation">(</span>guard<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> FREE<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> BUSY<span class="token punctuation">;</span>        guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加入该锁的队列</span>        add thread to queue of threads waiting <span class="token keyword">for</span> this lock<span class="token punctuation">;</span>        guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 切换进程</span>        <span class="token keyword">switch</span> to next runable thread<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">test_and_set</span><span class="token punctuation">(</span>guard<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> FREE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>any thread is waiting <span class="token keyword">for</span> this lock<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        move waiting thread from waiting queue to ready queue<span class="token punctuation">;</span>        value <span class="token operator">=</span> BUSY<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    guard <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP7数组的实现</title>
      <link href="2019/10/11/php/php7-array.html"/>
      <url>2019/10/11/php/php7-array.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP数组是一个有序的字典，它必须同时满足下面两个语义"><a href="#PHP数组是一个有序的字典，它必须同时满足下面两个语义" class="headerlink" title="PHP数组是一个有序的字典，它必须同时满足下面两个语义"></a>PHP数组是一个有序的字典，它必须同时满足下面两个语义</h2><ol><li><p>PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。</p></li><li><p>PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。</p></li></ol><p>为了实现语义1，PHP使用 HashTable 来存储 key-value ，但是 HashTable 只能保证语义1</p><ul><li>php使用了带h值的 HashTable</li></ul><p><code>key/value -&gt; hash1函数 -&gt; h值 -&gt; hash2函数 -&gt; slotN -&gt; bucket()</code></p><p>示意图：</p><p><img src="/images/hash_table_h.jpeg" alt="示意图"></p><ol><li><p>bucket里面增加了 h 字段</p></li><li><p>hash函数拆分成 hash1 和 hash2 函数，hash1 将 key 映射成 h值，hash2 将 h 值映射为 slot 的索引值</p></li><li><p>bucket 里的 key 作为字符串key</p><pre><code>HashTable 的key可能为数字，也可能是字符串，如果是数字那么 h值就代表数字key，如果是字符串，计算出h值，key1和key2比较时先比较它们的h值是否相等，如果相等在比较key1和key2是否相等，因为大部分场景，不同字符串的h值都不会相等，这样提高了 HashTable的插入、查找速度。</code></pre><h2 id="数组的基本结构"><a href="#数组的基本结构" class="headerlink" title="数组的基本结构"></a>数组的基本结构</h2></li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _zend_array zend_array<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _zend_array HashTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Bucket：散列表中存储的元素</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _Bucket <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zval              val<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储的具体value，这里嵌入了一个zval，而不是一个指针</span>    zend_ulong        h<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//key根据times 33计算得到的哈希值，或者是数值索引编号</span>    zend_string      <span class="token operator">*</span>key<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存储元素的key</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> Bucket<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HashTable结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _zend_array HashTable<span class="token punctuation">;</span><span class="token keyword">struct</span> _zend_array <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zend_refcounted_h gc<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 引用计数相关</span>    <span class="token keyword">union</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">ZEND_ENDIAN_LOHI_4</span><span class="token punctuation">(</span>                    zend_uchar    flags<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// </span>                    zend_uchar    nApplyCount<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 递归遍历计数，为了解决循环引用导致死循环的问题</span>                    zend_uchar    nIteratorsCount<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 迭代器计数器</span>                    zend_uchar    reserve<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> v<span class="token punctuation">;</span>        uint32_t flags<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> u<span class="token punctuation">;</span>    uint32_t          nTableMask<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span>    Bucket           <span class="token operator">*</span>arData<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//存储元素数组，指向第一个Bucket（连续的内存）</span>    uint32_t          nNumUsed<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//已用Bucket数</span>    uint32_t          nNumOfElements<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//哈希表有效元素数</span>    uint32_t          nTableSize<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//哈希表总大小，为2的n次方</span>    uint32_t          nInternalPointer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局游标 与 reset/key/current/next/prev函数有关</span>    zend_long         nNextFreeElement<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下一个可用的数值索引,如:arr[] = 1;arr["a"] = 2;arr[] = 3;  则nNextFreeElement = 2;</span>    dtor_func_t       pDestructor<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 析构函数</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>bucket结构分析</li></ul><ol><li><p>val 对应 HashTable 设计中的 value 始终是 zval类型（当zval是 IS_PTR类型时，可以通过 zval.value.ptr（指针）指向任何数据类型）</p></li><li><p>h 对应 HashTable 设计中的 h 表示数字key 或者字符串的 h值</p></li><li><p>key 对应 HashTable 设计中的 key</p></li></ol><ul><li>bucket按使用分类</li></ul><ol><li><p>未使用 初始化时都是未使用</p></li><li><p>有效 有数据的bucket</p></li><li><p>无效 被删除的bucket</p></li></ol><p>数组的示意图：</p><p><img src="https://github.com/pangudashu/php7-internal/raw/master/img/zend_hash_1.png" alt="示意图"></p><h2 id="为什么-nTableMask-为负数？"><a href="#为什么-nTableMask-为负数？" class="headerlink" title="为什么 nTableMask 为负数？"></a>为什么 nTableMask 为负数？</h2><pre><code>php7在分配bucket内存的时候，在bucket数组的前面额外多申请了一些内存，这段内存是一个索引数组（索引表），数组里面的没一个元素代表一个slot，存放着每个slot链表的第一个bucket在bucket数组中的下标。如果当前slot没有任何bucket元素，那么索引值为 -1 。这里一个巧妙的设计是索引数组仍然通过 HashTable.arData 来引用，由于索引数组和bucket数组是连续的内存，因此 arData[0...n-1]表示bucket数组元素，((uint32_t*)(arData))[-1...-n]表示索引数组元素，也就是对应的slot。</code></pre><ul><li>为了得到介于[-1…-n]之间的数组下标，hash2函数按照下面来计算的（nIndex 就是 slot 值）</li></ul><pre class=" language-c"><code class="language-c">nIndex <span class="token operator">=</span> h <span class="token operator">|</span> ht<span class="token operator">-></span>nTableMask<span class="token punctuation">;</span></code></pre><p>以 nTableSize=8 为例， nTableMask=-8 二进制表示为：</p><p>11111111 11111111 11111111 11111000   -8</p><p>任何整数和它进行按位或之后的结果只有以下8种，恰好满足 [-n, -1]的取值范围：</p><pre class=" language-c"><code class="language-c"><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111000</span>   <span class="token operator">-</span><span class="token number">8</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111001</span>   <span class="token operator">-</span><span class="token number">7</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111010</span>   <span class="token operator">-</span><span class="token number">6</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111011</span>   <span class="token operator">-</span><span class="token number">5</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111100</span>   <span class="token operator">-</span><span class="token number">4</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111101</span>   <span class="token operator">-</span><span class="token number">3</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111110</span>   <span class="token operator">-</span><span class="token number">2</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span>   <span class="token operator">-</span><span class="token number">1</span></code></pre><h2 id="packed-array-和-hash-array-的区别"><a href="#packed-array-和-hash-array-的区别" class="headerlink" title="packed array 和 hash array 的区别"></a>packed array 和 hash array 的区别</h2><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// packed array</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hash array</span></code></pre><ol><li>内存的本质区别</li></ol><p>脚本1：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$memory_start</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">20000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">echo</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$memory_start</span><span class="token punctuation">,</span> <span class="token string">"bytes\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1052728bytes</span></code></pre><p>脚本2：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$memory_start</span> <span class="token operator">=</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">echo</span> <span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$memory_start</span><span class="token punctuation">,</span> <span class="token string">"bytes\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1179704bytes</span></code></pre><ol start="2"><li>packed array</li></ol><ul><li><p>key全是数字</p></li><li><p>key按插入顺序排序，仍然是递增的</p></li><li><p>每个key-value 的存储位置都是确定的，都存在bucket数组的第key个元素上</p></li><li><p>不需要索引索引数组 key=NULL</p></li></ul><p>利用了bucket数组的连续的特点，对于某些只有数字的key的场景进行了优化，由于不在需要索引数组，<br>从内存空间上节省了 (nTableSize-2) * sizeof(uint32_t) 个字节，直接操作bucket数组，性能也有所提升。</p><h2 id="hash冲突解决"><a href="#hash冲突解决" class="headerlink" title="hash冲突解决"></a>hash冲突解决</h2><p>链地址法(php采用) 开放地址法，链地址法就是将同一个slot中的bucket通过链表连接起来</p><p>hash array 的做法是，不单独维护一个双链表，而是把每个冲突的 idx 存储在 bucket 的 zval.u2.next 中，<br>插入的时候把老的value存储的地址(idx)放到新的value的next中，再把新的value的存储地址更新到索引数组中。</p><p>假如 第1、2、3个bucket发生hash冲突</p><ol><li><p>插入第1个bucket，对应的 nIndex=-3 那么此时 nIndex=-3 的位置为1</p></li><li><p>插入第2个bucket，对应的 nIndex=-3，与第1个冲突，令 nIndex=-3 的位置为2，同时将第2个bucket中<br>zval 的 u2.next=1，这样在查找第1个bucket的key对应的 nIndex时，找到第2个bucket，校验 key值不同，<br>取 u2.next 的值 1，取第1个bucket中的内容，校验key一致，返回</p></li><li><p>插入第3个bucket，与第1 2 冲突，同样 令 nIndex=-3 的位置为3 同时将第3个bucket中zval 的 u2.next=2</p></li></ol><h2 id="扩容和-rehash-操作"><a href="#扩容和-rehash-操作" class="headerlink" title="扩容和 rehash 操作"></a>扩容和 rehash 操作</h2><p>数组再重置一个key时并不会真正触发删除操作，只是做一个标识，删除是在扩容和重进索引时触发</p><ol><li><p>hash array 的容量的分配是固定的，初始化的时每次申请的是 2^n 的容量，范围为 2^3 - 0x80000000</p></li><li><p>当容量足够时直接执行插入操作</p></li><li><p>当容量不够时(nNumUsed &gt;= nTableSize)，检查已删除元素所占的比例，假如达到阈值，则将已删除的元素从HashTable中移除<br>并重建索引，如果未达到阈值则进行扩容，扩容为当前大小的2倍，将当前的bucket复制到新的空间，然后重建索引。</p></li><li><p>重建索引后，有足够空余空间后再执行插入操作。</p></li></ol><h2 id="zval-的基本结构"><a href="#zval-的基本结构" class="headerlink" title="zval 的基本结构"></a>zval 的基本结构</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//zend_types.h</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _zval_struct     zval<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">union</span> _zend_value <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zend_long         lval<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int整形</span>    <span class="token keyword">double</span>            dval<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//浮点型</span>    zend_refcounted  <span class="token operator">*</span>counted<span class="token punctuation">;</span>    zend_string      <span class="token operator">*</span>str<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//string字符串</span>    zend_array       <span class="token operator">*</span>arr<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//array数组</span>    zend_object      <span class="token operator">*</span>obj<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//object对象</span>    zend_resource    <span class="token operator">*</span>res<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//resource资源类型</span>    zend_reference   <span class="token operator">*</span>ref<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//引用类型，通过&amp;$var_name定义的</span>    zend_ast_ref     <span class="token operator">*</span>ast<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//下面几个都是内核使用的value</span>    zval             <span class="token operator">*</span>zv<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// zval 类型</span>    <span class="token keyword">void</span>             <span class="token operator">*</span>ptr<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 指针类型，可以指向任何类型</span>    zend_class_entry <span class="token operator">*</span>ce<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// class 类型</span>    zend_function    <span class="token operator">*</span>func<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// function 类型</span>    <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        uint32_t w1<span class="token punctuation">;</span>        uint32_t w2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ww<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> zend_value<span class="token punctuation">;</span><span class="token keyword">struct</span> _zval_struct <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zend_value        value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量实际的value</span>    <span class="token keyword">union</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">ZEND_ENDIAN_LOHI_4</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">//这个是为了兼容大小字节序，小字节序就是下面的顺序，大字节序则下面4个顺序翻转</span>                zend_uchar    type<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//变量类型</span>                zend_uchar    type_flags<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//类型掩码，不同的类型会有不同的几种属性，内存管理会用到</span>                zend_uchar    const_flags<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 常量类型的标记</span>                zend_uchar    reserved<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//call info，zend执行流程会用到</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> v<span class="token punctuation">;</span>        uint32_t type_info<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上面4个值的组合值，可以直接根据type_info取到4个对应位置的值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> u1<span class="token punctuation">;</span>    <span class="token keyword">union</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        uint32_t     next<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//哈希表中解决哈希冲突时用到，记录冲突的下一个位置</span>        uint32_t     cache_slot<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* 运行时的缓存 */</span>        uint32_t     lineno<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* 对于zend_ast_zval存行号应用在AST节点上 */</span>        uint32_t     num_args<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* EX(This) 函数调用时传入的参数个数 */</span>        uint32_t     fe_pos<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">/* foreach 的位置 每执行一次 +1 再次调用 foreach 重置*/</span>        uint32_t     fe_iter_idx<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* foreach 游标的标记 针对的是对象 */</span>        uint32_t     access_flags<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 对象类的访问标记 public protected private */</span>        uint32_t     property_guard<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 单一属性保护 防止类中魔术方法的循环调用 */</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> u2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h2 id="String-的结构"><a href="#String-的结构" class="headerlink" title="String 的结构"></a>String 的结构</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> _zend_string <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zend_refcounted_h gc<span class="token punctuation">;</span>    zend_ulong        h<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 避免了在数组操作中hash值的重复计算 */</span>    size_t            len<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 已使用的内存字符串长度，可以保证二进制读取安全 '\0'</span>    <span class="token keyword">char</span>              val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 柔性数组</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-简易模拟熔断器</title>
      <link href="2019/04/01/algorithms/circuit-breaker.html"/>
      <url>2019/04/01/algorithms/circuit-breaker.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试，导致宕机的基础服务遭受到数倍的流量放大，更加无法恢复服务。这种恶劣的情况并不会就此结束，上游因为调用基础服务超时而变慢，导致上游的上游超时…异常向上蔓延，最终导致整个分布式系统”雪崩”。“熔断”就是为了避免”雪崩”而生的，它的思路是在调用方增加一种”避让”机制，当下游出现异常时能够停止（熔断）对下游的继续请求，当等待一段时间后缓慢放行部分的调用流量，并当这部分流量依旧正常的情况下，彻底解除”熔断”状态。</code></pre><h2 id="PHP代码实现"><a href="#PHP代码实现" class="headerlink" title="PHP代码实现"></a>PHP代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Class HealthStats * 熔断器健康状态 */</span><span class="token keyword">class</span> <span class="token class-name">HealthStats</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 时间窗口10个bucket，每个bucket 1秒     */</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">BUCKET_NUM</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 成功率大于该值为正常     */</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">HEALTHY_RATE</span> <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$service</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$buckets</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$current_time</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>string <span class="token variable">$service</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">service</span> <span class="token operator">=</span> <span class="token variable">$service</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shiftBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shiftBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shiftBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$success</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$fail</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span> <span class="token keyword">as</span> <span class="token variable">$bucket</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$success</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$bucket</span><span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$fail</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$bucket</span><span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$total</span> <span class="token operator">=</span> <span class="token variable">$success</span> <span class="token operator">+</span> <span class="token variable">$fail</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 少于10个请求的样本太少，不计算成功率</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$total</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$success</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token variable">$total</span><span class="token punctuation">)</span> <span class="token operator">>=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">HEALTHY_RATE</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">shiftBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$time_diff</span> <span class="token operator">=</span> <span class="token variable">$now</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current_time</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是当前时间，直接return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$time_diff</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token comment" spellcheck="true">// 重新赋值 buckets</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$time_diff</span> <span class="token operator">>=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BUCKET_NUM</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span> <span class="token operator">=</span> <span class="token function">array_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BUCKET_NUM</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'success'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'fail'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span>                <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buckets</span><span class="token punctuation">,</span> <span class="token variable">$time_diff</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BUCKET_NUM</span> <span class="token operator">-</span> <span class="token variable">$time_diff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">array_fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$time_diff</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'success'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'fail'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current_time</span> <span class="token operator">=</span> <span class="token variable">$now</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * Class CircuitBreaker * 熔断器 */</span><span class="token keyword">class</span> <span class="token class-name">CircuitBreaker</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 熔断后停止所有流量5秒     */</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">BREAK_PERIOD</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 完全恢复需要再花费3秒     */</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">RECOVER_PERIOD</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$health_stats</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1 关闭状态 熔断器的初始化状态，该状态下允许请求通过。当失败超过阀值，转入打开状态     * 2 打开状态 熔断状态，该状态下不允许请求通过，当进入该状态经过一段时间，进入半开状态     * 3 半开状态 在半开状态期间，允许部分请求通过，在半开期间，观察失败状态是否超过阀值。如果没有超过进入关闭状态，如果超过了进入打开状态。     * @var int     */</span>    <span class="token keyword">private</span> <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 熔断的时间点     * @var int     */</span>    <span class="token keyword">private</span> <span class="token variable">$break_time</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>HealthStats <span class="token variable">$health_stats</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">health_stats</span> <span class="token operator">=</span> <span class="token variable">$health_stats</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$is_healthy</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">health_stats</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$break_last_time</span> <span class="token operator">=</span> <span class="token variable">$now</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">break_time</span><span class="token punctuation">;</span>        <span class="token variable">$is_break</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$is_healthy</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">break_time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$is_break</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'触发熔断'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$break_last_time</span> <span class="token operator">&lt;</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BREAK_PERIOD</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$is_healthy</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token variable">$is_break</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'进入恢复'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$is_healthy</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">break_time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$is_break</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'恢复期间再次熔断'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$break_last_time</span> <span class="token operator">>=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BREAK_PERIOD</span> <span class="token operator">+</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RECOVER_PERIOD</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">status</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'恢复正常'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                        <span class="token variable">$pass_rate</span> <span class="token operator">=</span> <span class="token variable">$break_last_time</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BREAK_PERIOD</span> <span class="token operator">+</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RECOVER_PERIOD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">mt_getrandmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token variable">$pass_rate</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                            <span class="token variable">$is_break</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$is_break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$healthStats</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HealthStats</span><span class="token punctuation">(</span><span class="token string">'test_1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$circuitBreaker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">(</span><span class="token variable">$healthStats</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$healthStats</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>        <span class="token variable">$healthStats</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token variable">$circuitBreaker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p><a href="https://yuerblog.cc/2017/12/08/microservice-circuit-breaker/">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-一致性Hash</title>
      <link href="2019/04/01/algorithms/consistent-hash.html"/>
      <url>2019/04/01/algorithms/consistent-hash.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一致性哈希算法（Consistent Hashing）最早在论文<br><a href="https://dl.acm.org/doi/10.1145/258533.258660">《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》</a><br>中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形）</p><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">ConsistentHash</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 圆环 hash => node     * @var array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$ring</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 节点 node => hash     * @var array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$nodes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 每个节点的虚拟节点，当节点较少时使用虚拟节点使分布更均匀     * @var int     */</span>    <span class="token keyword">protected</span> <span class="token variable">$virtual</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 标识圆环是否排序过     * @var bool     */</span>    <span class="token keyword">protected</span> <span class="token variable">$ring_sorted</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$nodes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$nodes</span> <span class="token keyword">as</span> <span class="token variable">$node</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 添加一个节点     * @param string $node     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addNode</span><span class="token punctuation">(</span>string <span class="token variable">$node</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">key_exists</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nodes</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring_sorted</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token markup">&lt;= $this-></span>virtual<span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">time33</span><span class="token punctuation">(</span><span class="token variable">$node</span> <span class="token punctuation">.</span> <span class="token string">'-'</span> <span class="token punctuation">.</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$node</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nodes</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 获取字符串的HASH在圆环上面映射到的节点     * @param string $key     * @return string $node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNode</span><span class="token punctuation">(</span>string <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring_sorted</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring</span><span class="token punctuation">,</span> <span class="token constant">SORT_NUMERIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring_sorted</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$node</span> <span class="token operator">=</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">time33</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ring</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hash</span> <span class="token operator">&lt;=</span> <span class="token variable">$k</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$node</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$node</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * hash(i) = hash(i-1) * 33 + str[i]     * @param string $str     * @return int     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">time33</span><span class="token punctuation">(</span>string <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">:</span> int    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token number">5381</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        $hash = 0;</span>        <span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加密后长度32</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span>            <span class="token comment" spellcheck="true">//$hash = sprintf("%u", $hash * 33) + ord($s&amp;#123;$i&amp;#125;);</span>            <span class="token comment" spellcheck="true">//$hash = ($hash * 33 + ord($s&amp;#123;$i&amp;#125;)) &amp; 0x7FFFFFFF;</span>            <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$hash</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token variable">$seed</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$hash</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$i&amp;#125;);</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$hash</span> <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$ch_obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsistentHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ch_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ch_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ch_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ch_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rings</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$node</span> <span class="token operator">=</span> <span class="token variable">$ch_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">++</span><span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">//sort($rings);</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$rings</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$length</span> <span class="token operator">-</span> <span class="token variable">$len</span><span class="token punctuation">;</span>        <span class="token variable">$bytes</span> <span class="token operator">=</span> <span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$string</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p><a href="https://juejin.im/post/5ae1476ef265da0b8d419ef2">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-简单的概率算法</title>
      <link href="2019/04/01/algorithms/probability.html"/>
      <url>2019/04/01/algorithms/probability.html</url>
      
        <content type="html"><![CDATA[<h2 id="经典概率算法简介"><a href="#经典概率算法简介" class="headerlink" title="经典概率算法简介"></a>经典概率算法简介</h2><pre><code>假设数组为：array(100,200,300,400)，开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内，如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。这样 筛选到最终，总会有一个数满足要求。就相当于去一个箱子里摸东西，第一个不是，第二个不是，第三个还不是，那最后一个一定是。可用于中奖概率计算，权重等</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Prize</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$server_info</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$weight_arr</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$server_info</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server_info</span> <span class="token operator">=</span> <span class="token variable">$server_info</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getWeightArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">weight_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">weight_arr</span> <span class="token operator">=</span> <span class="token function">array_column</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server_info</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">,</span> <span class="token string">'server_mark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">weight_arr</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getServerMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 概率数组的总概率精度</span>        <span class="token variable">$weight_sum</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getWeightArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 概率数组循环</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getWeightArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$server_mark</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$weight</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$rand_num</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$weight_sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rand_num</span> <span class="token operator">&lt;=</span> <span class="token variable">$weight</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$server_mark</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                <span class="token variable">$weight_sum</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token variable">$weight</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$server_info</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'link-rs1'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'server_mark'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'link-rs1'</span><span class="token punctuation">,</span>        <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'link-rs2'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'server_mark'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'link-rs2'</span><span class="token punctuation">,</span>        <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'link-rs3'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'server_mark'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'link-rs3'</span><span class="token punctuation">,</span>        <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'link-rs4'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'server_mark'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'link-rs4'</span><span class="token punctuation">,</span>        <span class="token string">'weight'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$prize</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prize</span><span class="token punctuation">(</span><span class="token variable">$server_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rings</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">30000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$node</span> <span class="token operator">=</span> <span class="token variable">$prize</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getServerMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">++</span><span class="token variable">$rings</span><span class="token punctuation">[</span><span class="token variable">$node</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">//sort($rings);</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$rings</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$rings</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-排列组合</title>
      <link href="2019/03/01/algorithms/arrangement-combination.html"/>
      <url>2019/03/01/algorithms/arrangement-combination.html</url>
      
        <content type="html"><![CDATA[<h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><pre><code>数学上的阶乘、排列、组合的实现</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 阶乘 * @param int $n * @return int */</span><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>int <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">//array_product 计算并返回数组的乘积</span>    <span class="token comment" spellcheck="true">//range 创建一个包含指定范围的元素的数组</span>    <span class="token keyword">return</span> <span class="token function">array_product</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 排列数 * @param int $n * @param int $m * @return int */</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>int <span class="token variable">$n</span><span class="token punctuation">,</span> int <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 组合数 * @param int $n * @param int $m * @return int */</span><span class="token keyword">function</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">return</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 排列结果 * @param array $a 排列的数组 * @param int $m 排列的个数 * @return array */</span><span class="token keyword">function</span> <span class="token function">arrangement</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token markup">&lt;= 0 || $m ></span> <span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">arrangement</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 组合结果 * @param array $a 组合的数组 * @param int $m 组合的个数 * @return array */</span><span class="token keyword">function</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$a</span><span class="token punctuation">,</span> int <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token markup">&lt;= 0 || $m ></span> <span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">combination</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">arrangement</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分查找</title>
      <link href="2019/03/01/algorithms/binary-search.html"/>
      <url>2019/03/01/algorithms/binary-search.html</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找简介"><a href="#二分查找简介" class="headerlink" title="二分查找简介"></a>二分查找简介</h2><pre><code>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</code></pre><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><pre><code>因为二分查找每次排除掉一半的不适合值，所以对于n个元素的情况：一次二分剩下：n/2两次二分剩下：n/2/2 = n/4…m次二分剩下：n/(2^m)在最坏情况下是在排除到只剩下最后一个值之后得到结果，即n/(2^m)=1所以由上式可得 ： 2^m=n进而可求出时间复杂度为： log2(n)</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * @param array $data * @param $search * @return int|null 返回查询到的键名 */</span><span class="token keyword">function</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$search</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$low</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$high</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$low</span> <span class="token operator">&lt;=</span> <span class="token variable">$high</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$low</span> <span class="token operator">+</span> <span class="token variable">$high</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$guess</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$mid</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$guess</span> <span class="token operator">==</span> <span class="token variable">$search</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token variable">$mid</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; elseif ($guess > $search) &amp;#123;</span>            <span class="token variable">$high</span> <span class="token operator">=</span> <span class="token variable">$mid</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$low</span> <span class="token operator">=</span> <span class="token variable">$mid</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-冒泡排序</title>
      <link href="2019/03/01/algorithms/bubble-sort.html"/>
      <url>2019/03/01/algorithms/bubble-sort.html</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序简介"><a href="#冒泡排序简介" class="headerlink" title="冒泡排序简介"></a>冒泡排序简介</h2><pre><code>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名</code></pre><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><pre><code>最坏情况下的时间复杂度都是O(n^2)，最好情况下都是O(n)，空间复杂度是O(1)</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * @param array $arr * @return array */</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置一个空数组 用来接收冒出来的泡</span>    <span class="token comment" spellcheck="true">//该层循环控制 需要冒泡的轮数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//该层循环用来控制每轮 冒出一个数 需要比较的次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$k</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-插入排序</title>
      <link href="2019/03/01/algorithms/insertion-sort.html"/>
      <url>2019/03/01/algorithms/insertion-sort.html</url>
      
        <content type="html"><![CDATA[<h2 id="插入排序简介"><a href="#插入排序简介" class="headerlink" title="插入排序简介"></a>插入排序简介</h2><pre><code>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,算法适用于少量数据的排序，时间复杂度O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * @param array $arr * @param string $sort * @return array */</span><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$sort</span> <span class="token operator">=</span> <span class="token string">'ASC'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 前一位</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token variable">$j</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把 $key 依次和前面的数比较</span>        <span class="token comment" spellcheck="true">// 第一次比较，如果前一位数比 $key 大，就把前一位数代替 $key ，这样前一位就空出来了</span>        <span class="token comment" spellcheck="true">// 后面的比较，如果再比 $key 大，则向后移一位（因为前面的数已经是顺序的了）</span>        <span class="token comment" spellcheck="true">// 直到遇到不比 $key 大的，或者比完了</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$sort</span> <span class="token operator">===</span> <span class="token string">'ASC'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$sort</span> <span class="token operator">===</span> <span class="token string">'DESC'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token comment" spellcheck="true">// 最后把 $key 补上空位</span>        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var_dump(insertionSort($arr, 'DESC'));</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token string">'ASC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-归并排序</title>
      <link href="2019/03/01/algorithms/merge-sort.html"/>
      <url>2019/03/01/algorithms/merge-sort.html</url>
      
        <content type="html"><![CDATA[<h2 id="归并排序-快速排序"><a href="#归并排序-快速排序" class="headerlink" title="归并排序(快速排序)"></a>归并排序(快速排序)</h2><pre><code>分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解在最坏、最佳、平均情况下归并排序时间复杂度均为o(nlogn)</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * @param $arr * @param $p * @param $q * @param $r */</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$q</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两个起始点位置</span>    <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$q</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两个起始点都不能超过各自的终点，这里可能导致其中一个起始点没循环完</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$q</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$j</span> <span class="token operator">&lt;=</span> <span class="token variable">$r</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">// 这里把 $p - $q 未循环完的加入</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">// 这里把 $q + 1 - $r 未循环完的加入</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">&lt;=</span> <span class="token variable">$r</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">// 将排好序的插入原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$k</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * @param $arr * @param $p * @param $r */</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">//当子序列长度为1时，不用再分组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">&lt;</span> <span class="token variable">$r</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$q</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$r</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $arr $arr[$p - $q] $arr[$q+1 - $r]</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $arr[$p - $q]</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$q</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $arr[$q+1 - $r]</span>        <span class="token keyword">echo</span> <span class="token string">'p->'</span><span class="token punctuation">.</span><span class="token variable">$p</span><span class="token punctuation">.</span><span class="token string">' q->'</span><span class="token punctuation">.</span><span class="token variable">$q</span><span class="token punctuation">.</span><span class="token string">' r->'</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$q</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-选择排序</title>
      <link href="2019/03/01/algorithms/select-sort.html"/>
      <url>2019/03/01/algorithms/select-sort.html</url>
      
        <content type="html"><![CDATA[<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre><code>选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * @param array $arr * @return array */</span><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">// $i 当前最小值的位置， 需要参与比较的元素</span>    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//先假设最小的值的位置</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//$j 当前都需要和哪些元素比较，$i 后边的。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">//$arr[$p] 是 当前已知的最小值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token comment" spellcheck="true">//比较，发现更小的,记录下最小值的位置；并且在下次比较时，</span>                <span class="token comment" spellcheck="true">// 应该采用已知的最小值进行比较。</span>                <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$j</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token comment" spellcheck="true">// 已经确定了当前的最小值的位置，保存到$p中。</span>        <span class="token comment" spellcheck="true">// 如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">//返回最终结果</span>    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(23)-访问者模式</title>
      <link href="2018/10/23/design-patten/visitor.html"/>
      <url>2018/10/23/design-patten/visitor.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Visitor.php">访问者模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作访问者模式适用于数据结构相对稳定的系统它把数据结构和作用于结构上的操作之间的耦合脱开，使得操作合集可以相对自由地演化访问者模式的目的是要把处理从数据结构中分离出来如果系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，因为访问者模式使得算法操作的增加变得容易访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，访问者模式将有关的行为集中到一个访问者对象中访问者模式的缺点其实也就是使增加新的数据结构变得困难了</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 为该对象结构中的 ConcreteElement 的每一个类声明一个 Visit 操作 * Class Visitor */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">// 总的数据</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementA</span><span class="token punctuation">(</span>ConcreteElementA <span class="token variable">$concreteElementA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementB</span><span class="token punctuation">(</span>ConcreteElementB <span class="token variable">$concreteElementB</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体访问者，实现每个由 Visitor 声明的操作。 * 每个操作实现算法的一部分，而该算法片段乃是对应于结构中对象的类 * * Class ConcreteVisitor1 */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteVisitor1</span> <span class="token keyword">extends</span> <span class="token class-name">Visitor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementA</span><span class="token punctuation">(</span>ConcreteElementA <span class="token variable">$concreteElementA</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$concreteElementA</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'被'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'访问'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementB</span><span class="token punctuation">(</span>ConcreteElementB <span class="token variable">$concreteElementB</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$concreteElementB</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'被'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'访问'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteVisitor2</span> <span class="token keyword">extends</span> <span class="token class-name">Visitor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementA</span><span class="token punctuation">(</span>ConcreteElementA <span class="token variable">$concreteElementA</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$concreteElementA</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'被'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'访问'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">visitConcreteElementB</span><span class="token punctuation">(</span>ConcreteElementB <span class="token variable">$concreteElementB</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$concreteElementB</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'被'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'访问'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 定义一个 accept 操作，它以一个访问者为参数 * * Class Element */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Element</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor <span class="token variable">$visitor</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteElementA</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor <span class="token variable">$visitor</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$visitor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">visitConcreteElementA</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteElementB</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor <span class="token variable">$visitor</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$visitor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">visitConcreteElementB</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 能枚举它的元素，可以提供一个高层的接口以允许访问者访问它的元素 * * Class ObjectStructure */</span><span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Element[]     */</span>    <span class="token keyword">private</span> <span class="token variable">$elements</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">attach</span><span class="token punctuation">(</span>Element <span class="token variable">$element</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">elements</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$element</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detach</span><span class="token punctuation">(</span>Element <span class="token variable">$element</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">elements</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">elements</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor <span class="token variable">$visitor</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">elements</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$v</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token variable">$visitor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加要被访问的元素</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每个访问者循环访问元素</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteVisitor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteVisitor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(22)-模板方法模式</title>
      <link href="2018/10/22/design-patten/template-method.html"/>
      <url>2018/10/22/design-patten/template-method.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/TemplateMethod.php">模板方法模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑使用模板方法模式处理。模板方法模式是通过把不变的行为搬移到父类，去除子类中的重复代码来体现它的优势。模板方法模式提供了一个很好的代码复用平台当不变的和可变的行为在方法的子类实现中混合在一起时，不变的行为就会在子类中重复出现。我们通过模板方法模式把这些行为搬移到单一对多地方，这样就帮助子类摆脱重复的不变行为的纠缠。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 实现了一个模板方法，定义了算法的骨架，具体子类将重定义抽象方法以实现一个算法的步骤 * * Class AbstractClass */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 子类实现具体的算法 * * Class ClassA */</span><span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体类A 方法1 实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体类A 方法2 实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体类B 方法1 实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体类B 方法2 实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(21)-策略模式</title>
      <link href="2018/10/21/design-patten/strategy.html"/>
      <url>2018/10/21/design-patten/strategy.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Strategy.php">策略模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>它定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。策略模式是一种定义一系列算法的方法，从概念上来看，所有的这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。策略模式的 Strategy 类为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中公共的功能。策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy 类中，可以在使用这些行为的类中消除条件语句。策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析的过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 策略类，定义所有支持的算法的公共接口 * * Class Strategy */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Strategy</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 定义算法的接口     *     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体策略类，封装了具体的算法或行为 * Class StrategyA */</span><span class="token keyword">class</span> <span class="token class-name">StrategyA</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'算法A实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">StrategyB</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'算法B实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">StrategyC</span> <span class="token keyword">extends</span> <span class="token class-name">Strategy</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">AlgorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'算法C实现'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * Class Context * 用一个contextInterface来配置，维护一个对Strategy对象的引用 */</span><span class="token keyword">class</span> <span class="token class-name">Context</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 保存具体的算法对象     *     * @var Strategy     */</span>    <span class="token keyword">private</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Context constructor.     * @param $strategy     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$strategy</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 调用对应的子类方法     *     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 此处也算是依赖注入</span><span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$context</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 结合简单工厂模式 * */</span><span class="token keyword">class</span> <span class="token class-name">CashContext</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Strategy     */</span>    <span class="token keyword">public</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * CashContext constructor.     * 构造函数里通过参数实例化对应的算法类，把注入的类整合为一个工厂     * @param $type     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'类型错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 调用对应的子类方法     *     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$cashContext</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CashContext</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cashContext</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyContext</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Strategy     */</span>    <span class="token keyword">public</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 可以把所有类型配置到一个数组中     * @var array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'A'</span> <span class="token operator">=</span><span class="token operator">></span> StrategyA<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token string">'B'</span> <span class="token operator">=</span><span class="token operator">></span> StrategyB<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token string">'C'</span> <span class="token operator">=</span><span class="token operator">></span> StrategyC<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * MyContext constructor.     * @param $type     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'类型错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 调用对应的子类方法     *     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">strategy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">algorithmInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$cashContext</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyContext</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cashContext</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">contextInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(20)-状态模式</title>
      <link href="2018/10/20/design-patten/state.html"/>
      <url>2018/10/20/design-patten/state.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/State.php">状态模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化将与特定状态相关的行为局部化，并且将不同状态的行为分割开来将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个 State 子类中所有通过定义新的子类可以很容易地增加新的状态和转换，可以消除庞大的条件分支语句状态模式通过把各种状态转移逻辑分布到 State 子类之间，来减少相互依赖当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑状态模式了</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 抽象状态类，定义一个接口以封装与 Context 的一个特定状态相关的行为 * * Class State */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">State</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体状态，每一个子类实现一个与 Context 的一个状态相关的行为 * * Class ConcreteStateA */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStateA</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">// 设置下一状态</span>        <span class="token variable">$context</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteStateB</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$context</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 维护一个 State 子类的实例，这个实例定义当前的状态 * * Class Context */</span><span class="token keyword">class</span> <span class="token class-name">Context</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Context constructor.     * @param $state     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>State <span class="token variable">$state</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token operator">=</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $state     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token variable">$state</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token operator">=</span> <span class="token variable">$state</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'当前状态：'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">// 对请求做处理，并设置下一状态</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(20)-状态模式2</title>
      <link href="2018/10/20/design-patten/state-work.html"/>
      <url>2018/10/20/design-patten/state-work.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/StateWork.php">状态模式2</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>简单实现一个表示工作状态的类。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ForenoonState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，上午工作，精神百倍'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">NoonState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，午饭，午休'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AfternoonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">AfternoonState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，下午，继续工作'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EveningState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">EveningState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RestState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，加班，好累'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>                <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SleepingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SleepingState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，洗澡，睡觉'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">RestState</span> <span class="token keyword">extends</span> <span class="token class-name">StateWork</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span>Work <span class="token variable">$w</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'当前时间：'</span> <span class="token punctuation">.</span> <span class="token variable">$w</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'点，下班，下班'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">Work</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$current</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$hour</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$finish</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Work constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForenoonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $current     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setCurrent</span><span class="token punctuation">(</span><span class="token variable">$current</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span> <span class="token operator">=</span> <span class="token variable">$current</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hour</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $hour     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setHour</span><span class="token punctuation">(</span><span class="token variable">$hour</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hour</span> <span class="token operator">=</span> <span class="token variable">$hour</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">finish</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $finish     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setFinish</span><span class="token punctuation">(</span><span class="token variable">$finish</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">finish</span> <span class="token operator">=</span> <span class="token variable">$finish</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span>StateWork <span class="token variable">$s</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$work</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$work</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setHour</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$work</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(19)-单例模式</title>
      <link href="2018/10/19/design-patten/singleton.html"/>
      <url>2018/10/19/design-patten/singleton.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Singleton.php">单例模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>保证一个类仅有一个实例，并提供一个访问它的全局访问点通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$s1</span> <span class="token operator">=</span> Singleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s2</span> <span class="token operator">=</span> Singleton<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$s1</span> <span class="token operator">===</span> <span class="token variable">$s2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">'一样的'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(18)-代理模式</title>
      <link href="2018/10/18/design-patten/proxy.html"/>
      <url>2018/10/18/design-patten/proxy.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Proxy.php">代理模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>为其他对象提供一种代理以控制对这个对象的访问远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实虚拟代理：是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，如html里面的图片路径安全代理：用来控制真实对象访问时的权限智能指引：是指当调用真实对象时，代理处理另外一些事代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Subject 类，定义了 RealSubject 和 Proxy 的共同接口， * 这样就在任何使用 RealSubject 的地方都可以使用 Proxy * * Interface Subject */</span><span class="token keyword">interface</span> <span class="token class-name">Subject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 定义 Proxy 所代表的真实实体 * * Class RealSubject */</span><span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'真实的请求'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口， * 这样代理就可以用来代替实体 * * Class Proxy */</span><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Subject     */</span>    <span class="token keyword">public</span> <span class="token variable">$realSubject</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">realSubject</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">realSubject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">realSubject</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$proxy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$proxy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(17)-原型模式</title>
      <link href="2018/10/17/design-patten/prototype.html"/>
      <url>2018/10/17/design-patten/prototype.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Prototype.php">原型模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">cloneOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcretePrototype</span> <span class="token keyword">extends</span> <span class="token class-name">Prototype</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cloneOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> clone <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c1</span> <span class="token operator">=</span> <span class="token variable">$p1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cloneOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var_dump($p1 === $c1);</span><span class="token variable">$c1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">'c1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(16)-简单工厂模式</title>
      <link href="2018/10/16/design-patten/operation.html"/>
      <url>2018/10/16/design-patten/operation.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Operation.php">简单工厂模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 简单工厂模式 * * 用一个工厂来创建我们所需要的类 * * Class Operation */</span><span class="token keyword">class</span> <span class="token class-name">Operation</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var int     */</span>    <span class="token keyword">private</span> <span class="token variable">$numberA</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @var int     */</span>    <span class="token keyword">private</span> <span class="token variable">$numberB</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">numberA</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param int $numberA     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token variable">$numberA</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">numberA</span> <span class="token operator">=</span> <span class="token variable">$numberA</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">numberB</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param int $numberB     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token variable">$numberB</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">numberB</span> <span class="token operator">=</span> <span class="token variable">$numberB</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 这是要被子类覆写的方法     *     * @return int     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 加法实现 * * Class OperationAdd */</span><span class="token keyword">class</span> <span class="token class-name">OperationAdd</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 减法实现 * * Class OperationSub */</span><span class="token keyword">class</span> <span class="token class-name">OperationSub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 乘法实现 * * Class OperationMul */</span><span class="token keyword">class</span> <span class="token class-name">OperationMul</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 除法实现 * * Class OperationDiv * */</span><span class="token keyword">class</span> <span class="token class-name">OperationDiv</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'除数不能为0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 工厂类 * 根据相应的运算符new出想要的对象 * * Class OperationFactory */</span><span class="token keyword">class</span> <span class="token class-name">OperationFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @param $operate     * @return null|OperationAdd|OperationDiv|OperationMul|OperationSub     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">createOperate</span><span class="token punctuation">(</span><span class="token variable">$operate</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$operateObject</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$operate</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                <span class="token variable">$operateObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>                <span class="token variable">$operateObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                <span class="token variable">$operateObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationMul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>                <span class="token variable">$operateObject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$operateObject</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$oper</span> <span class="token operator">=</span> OperationFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createOperate</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$oper</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$oper</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$oper</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(15)-观察者模式</title>
      <link href="2018/10/15/design-patten/observer.html"/>
      <url>2018/10/15/design-patten/observer.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Observer.php">观察者模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。Subject 类，它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者，抽象主题提供一个接口，可以增加和删除观察对象将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。而我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用带来不便。当一个对象改变需要同时改变其他对象的时候，而且他不知道具体有多少对象有待改变时，应该考虑使用此模式。当一个抽象模型有两个方面，其中一方面依赖另一方面，这时用观察者模式可以将这两者封装在独立地对象中使它们各自独立地改变和复用。观察者模式所做得工作其实就是在解除耦合，让耦合的双方都能依赖于抽象。而不是依赖具体从而使得各自的变化都不会影响另一边的变化。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。 * 抽象主题提供一个接口，可以增加和删除观察者对象 * * Class MySubject */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MySubject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token variable">$observer</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$observer</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token variable">$observer</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token variable">$observer</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span> <span class="token keyword">as</span> <span class="token variable">$observer</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$observer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * Observer 类，抽象观察者，为所有的具体观察者对象定义一个接口，在得到主题的通知时更新自己 * * Class Observer */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体主题，将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知 * * Class ConcreteSubject */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">extends</span> <span class="token class-name">MySubject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 具体被观察者状态     */</span>    <span class="token keyword">private</span> <span class="token variable">$subjectState</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSubjectState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subjectState</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $subjectState     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSubjectState</span><span class="token punctuation">(</span><span class="token variable">$subjectState</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subjectState</span> <span class="token operator">=</span> <span class="token variable">$subjectState</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调 * * Class ConcreteObserver */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$observerState</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @var ConcreteSubject     */</span>    <span class="token keyword">private</span> <span class="token variable">$subject</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteObserver constructor.     * @param $name     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>ConcreteSubject <span class="token variable">$subject</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subject</span> <span class="token operator">=</span> <span class="token variable">$subject</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observerState</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subject</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSubjectState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'观察者'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">'的新状态是'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observerState</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subject</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $subject     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token variable">$subject</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subject</span> <span class="token operator">=</span> <span class="token variable">$subject</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 实例化主题</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给主题添加观察者</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置主题状态</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSubjectState</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通知所有观察者</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * PHP spl * Class MySplSubject */</span><span class="token keyword">class</span> <span class="token class-name">MySplSubject</span> <span class="token keyword">implements</span> <span class="token class-name">SplSubject</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$subjectState</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$observers</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observers</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplObjectStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">attach</span><span class="token punctuation">(</span>SplObserver <span class="token variable">$observer</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observers</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token variable">$observer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detach</span><span class="token punctuation">(</span>SplObserver <span class="token variable">$observer</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observers</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token variable">$observer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observers</span> <span class="token keyword">as</span> <span class="token variable">$observer</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$observer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSubjectState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subjectState</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSubjectState</span><span class="token punctuation">(</span><span class="token variable">$subjectState</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subjectState</span> <span class="token operator">=</span> <span class="token variable">$subjectState</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">MySplObserver</span> <span class="token keyword">implements</span> <span class="token class-name">SplObserver</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$observerState</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setObserverState</span><span class="token punctuation">(</span><span class="token variable">$observerState</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observerState</span> <span class="token operator">=</span> <span class="token variable">$observerState</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>SplSubject <span class="token variable">$subject</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observerState</span> <span class="token operator">=</span> <span class="token variable">$subject</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSubjectState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'观察者'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">'的新状态是'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">observerState</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 实例化主题</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySplSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给主题添加观察者</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySplObserver</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySplObserver</span><span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySplObserver</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置主题状态</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSubjectState</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通知所有观察者</span><span class="token variable">$s</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(14)-备忘录模式</title>
      <link href="2018/10/14/design-patten/memento.html"/>
      <url>2018/10/14/design-patten/memento.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Memento.php">备忘录模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复都原先保存的状态。备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时， Originator 可以根据保存的 Memento 信息还原到前一状态。如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储可撤销操作的状态。当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时储存起来的备忘录将状态复原</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 负责创建一个备忘录 Memento 用以记录当前时刻它的内部状态，并可以使用备忘录恢复内部状态 * * Class Originator */</span><span class="token keyword">class</span> <span class="token class-name">Originator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $state     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token variable">$state</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token operator">=</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setMemento</span><span class="token punctuation">(</span>Memento <span class="token variable">$memento</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token operator">=</span> <span class="token variable">$memento</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'State:'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 负责存储 Originator 对象的内部状态，并可以防止 Originator 以外的其他对象访问备忘录 Memento * * Class Memento */</span><span class="token keyword">class</span> <span class="token class-name">Memento</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Memento constructor.     * @param $state     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$state</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span> <span class="token operator">=</span> <span class="token variable">$state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">state</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 负责保存备忘录 Memento * * Class Caretaker */</span><span class="token keyword">class</span> <span class="token class-name">Caretaker</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$memento</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">memento</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $memento     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token variable">$memento</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">memento</span> <span class="token operator">=</span> <span class="token variable">$memento</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 初始状态</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存备忘录</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结束状态</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 还原状态</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(13)-中介者模式</title>
      <link href="2018/10/13/design-patten/mediator.html"/>
      <url>2018/10/13/design-patten/mediator.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Mediator.php">中介者模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了多对多交互复杂的对象群时，不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 抽象中介者，定义了同事对象到中介者对象的接口 * * Class Mediator */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 定义一个抽象方法，得到同事对象和发送消息     * @param $message     * @param Colleague $colleague     * @return mixed     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> Colleague <span class="token variable">$colleague</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 抽象同事类 * * Class Colleague */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Mediator     */</span>    <span class="token keyword">protected</span> <span class="token variable">$mediator</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Colleague constructor.     * @param $mediator     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Mediator <span class="token variable">$mediator</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mediator</span> <span class="token operator">=</span> <span class="token variable">$mediator</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类， * 并从具体同事接收消息，向具体同事对象发出命令 * * Class ConcreteMediator */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var ConcreteColleague1     */</span>    <span class="token keyword">private</span> <span class="token variable">$colleague1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @var ConcreteColleague2     */</span>    <span class="token keyword">private</span> <span class="token variable">$colleague2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $colleague1     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setColleague1</span><span class="token punctuation">(</span><span class="token variable">$colleague1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleague1</span> <span class="token operator">=</span> <span class="token variable">$colleague1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $colleague2     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setColleague2</span><span class="token punctuation">(</span><span class="token variable">$colleague2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleague2</span> <span class="token operator">=</span> <span class="token variable">$colleague2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> Colleague <span class="token variable">$colleague</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$colleague</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleague1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleague2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleague1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @var array 保存所有 Colleague 以对象类名为键     */</span>    <span class="token keyword">private</span> <span class="token variable">$colleagueList</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setColleague</span><span class="token punctuation">(</span>Colleague <span class="token variable">$colleague</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">colleagueList</span><span class="token punctuation">[</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$colleague</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$colleague</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">send1</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> Colleague <span class="token variable">$colleague</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//$this->colleagueList[get_class($colleague)]->notify($message);</span>        <span class="token variable">$colleague</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况 * 但他们却都认识中介者对象 * * Class ConcreteColleague1 */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteColleague1</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteColleague1 constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Mediator <span class="token variable">$mediator</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$mediator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mediator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send1</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'同事1得到消息：'</span> <span class="token punctuation">.</span> <span class="token variable">$message</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteColleague2</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteColleague2 constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Mediator <span class="token variable">$mediator</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$mediator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mediator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send1</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'同事2得到消息：'</span> <span class="token punctuation">.</span> <span class="token variable">$message</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$m</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让两个具体同事类认识中介者对象</span><span class="token variable">$c1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleague1</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleague2</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 让中介者认识各个具体同事类</span><span class="token comment" spellcheck="true">//$m->setColleague1($c1);</span><span class="token comment" spellcheck="true">//$m->setColleague2($c2);</span><span class="token variable">$m</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColleague</span><span class="token punctuation">(</span><span class="token variable">$c1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$m</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColleague</span><span class="token punctuation">(</span><span class="token variable">$c2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 具体同事类发送信息都是通过中介者转发</span><span class="token variable">$c1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'吃饭了没'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'没有，你要请客吗'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(12)-解释器模式</title>
      <link href="2018/10/12/design-patten/interperter.html"/>
      <url>2018/10/12/design-patten/interperter.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Interpreter.php">解释器模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 抽象表达式，声明一个抽象的解释操作，这个接口为抽象的语法树中所有的节点共享 * Class AbstractExpression */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExpression</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">TerminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'终端解释器'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">NonTerminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context <span class="token variable">$context</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'非终端解释器'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 包含解释器之外的一些全局信息 * * Class Context */</span><span class="token keyword">class</span> <span class="token class-name">Context</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$input</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $output     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setOutput</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span> <span class="token operator">=</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">input</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $input     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setInput</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">input</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonTerminalExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonTerminalExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TerminalExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* @var $v AbstractExpression */</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$v</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(11)-享元模式</title>
      <link href="2018/10/11/design-patten/flyweight.html"/>
      <url>2018/10/11/design-patten/flyweight.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Flyweight.php">享元模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>运用共享技术有效地支持大量细粒度的对象享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。如果发现这些实例除了几个参数外基本都是相同的，有时就能够大幅度地减少需要实例化的类的数量。如果能把那些参数移到类实例外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。如果一个应用程序使用了大量的对象，而大量的对象造成了很大的存储开销时，就应该考虑使用；还有就是对象大多数状态可以外部状态，如果删除对象的外部状态，那么可以使用相当较少的共享对象取代很多组对象。此时可以考虑使用享元模式。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * User constructor.     * @param $name     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 所有具体享元类的超类或接口 * * Class WebSite */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">use1</span><span class="token punctuation">(</span>User <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * WebSite constructor.     * @param string $name     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">use1</span><span class="token punctuation">(</span>User <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'网站分类：'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token string">'用户：'</span> <span class="token punctuation">.</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 一个享元工厂，用来创建并管理 WebSite 对象。它主要是用来确保合理的共享 WebSite * 当用户请求一个 WebSite 对象时，提供一个已创建的实例（不存在则创建） * * Class WebSiteFactory */</span><span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var array 保存所有的对象     */</span>    <span class="token keyword">private</span> <span class="token variable">$flyweights</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">flyweights</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">flyweights</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">flyweights</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">flyweights</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fx</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">'产品展示'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fx</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">use1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'小菜'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(10)-工厂方法模式</title>
      <link href="2018/10/10/design-patten/factory-method.html"/>
      <url>2018/10/10/design-patten/factory-method.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/FactoryMethod.php">工厂方法模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持了封装对象创建过程的优点。工厂方法模式是简单工厂的进一步抽象和推广</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">LeiFeng</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sweep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'扫地'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'洗衣'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buyRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'买米'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 雷锋的继承者 * 也可以有更多的方法 * * Class Undergraduate */</span><span class="token keyword">class</span> <span class="token class-name">Undergraduate</span> <span class="token keyword">extends</span> <span class="token class-name">LeiFeng</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sweep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sweep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'扫地后休息一会'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">Volunteer</span> <span class="token keyword">extends</span> <span class="token class-name">LeiFeng</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 创建雷锋的接口 * * Interface IFactory */</span><span class="token keyword">interface</span> <span class="token class-name">IFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createLeiFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 实现创建雷锋 * * Class UndergraduateFactory */</span><span class="token keyword">class</span> <span class="token class-name">UndergraduateFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createLeiFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Undergraduate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">VolunteerFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createLeiFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Volunteer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$factory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndergraduateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$student</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createLeiFeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$student</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buyRice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$student</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sweep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$student</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(9)-外观模式</title>
      <link href="2018/10/09/design-patten/facade.html"/>
      <url>2018/10/09/design-patten/facade.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Facade.php">外观模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用首先，在设计初期阶段，应该要有意识的将不同的两个层分离，比如经典的MVC三层架构层与层之间建立外观 Facade其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade可以提供一个简单的接口，减少它们之间的依赖。第三，在维护一个遗留的大型系统时，可能这个系统以及非常难以维护和扩展了，可以为新系统开发一个外观 Facade 类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与 Facade 对象交互，Facade 与遗留代码交互所有复杂的工作</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">SubSystemOne</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'子系统方法一'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SubSystemTwo</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'子系统方法二'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SubSystemThree</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'子系统方法三'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SubSystemFour</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'子系统方法四'</span> <span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统对象 * * Class Facade */</span><span class="token keyword">class</span> <span class="token class-name">Facade</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token variable">$one</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$two</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$three</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$four</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Facade constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">one</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">two</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">SubSystemTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">three</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">four</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'方法组A:'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">one</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">three</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'方法组B:'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">four</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">two</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$facade</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$facade</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$facade</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(8)-装饰模式</title>
      <link href="2018/10/08/design-patten/decorator.html"/>
      <url>2018/10/08/design-patten/decorator.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Decorator.php">装饰模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或者主要行为；在主类中加入了新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。为已有的功能动态地添加更多功能的一种方式把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效地把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 定义一个对象接口，可以给这些对象动态的添加职责 * * Class Component */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 定义了一个具体的对象，也可以给这个对象添加一些职责 * * 如果只有一个 ConcreteComponent 类而没有抽象的 Component 类，那么 Decorator 类 * 可以是 ConcreteComponent 的一个子类。同样的道理，如果只有一个 Decorator 类，那么就没有必要 * 建立一个单独的 Decorator 类，而可以把 Decorator 类和 ConcreteComponent 的责任合并成一个类。 * * Class ConcreteComponent */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体对象的操作'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 装饰抽象类，继承了 Component ，从外类来扩展 Component 类的功能，但对于 Component 来说， * 是无需知道 Decorator 的存在的 * 利用 setComponent 来对对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了， * 每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中 * * Class Decorator */</span><span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Component     */</span>    <span class="token keyword">protected</span> <span class="token variable">$component</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置要装饰的对象     *     * @param Component $component     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setComponent</span><span class="token punctuation">(</span>Component <span class="token variable">$component</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">component</span> <span class="token operator">=</span> <span class="token variable">$component</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">component</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">component</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体的装饰对象，起到给 Component 添加职责的功能 * * Class DecoratorA */</span><span class="token keyword">class</span> <span class="token class-name">DecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$addedState</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">addedState</span> <span class="token operator">=</span> <span class="token string">'New State'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'具体装饰对象A的操作'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">DecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'具体装饰对象B的操作'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">DecoratorC</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'具体装饰对象C的操作'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecoratorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecoratorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecoratorC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从最里面开始执行</span><span class="token comment" spellcheck="true">// d1装饰c</span><span class="token variable">$d1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// d2装饰d1</span><span class="token variable">$d2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token variable">$d1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// d3装饰d2</span><span class="token variable">$d3</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token variable">$d2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//var_dump($d3);</span><span class="token variable">$d3</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(7)-组合模式</title>
      <link href="2018/10/07/design-patten/composite.html"/>
      <url>2018/10/07/design-patten/composite.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Composite.php">组合模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。当你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去在客户代码中，任何用到基本对象的地方都可以使用组合对象了。用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义只而写一些选择判断语句了。组合模式让客户可以一致的使用组合结构和单个对象。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。 * 声明一个接口用于访问和管理 Component 的子部件 * * Class Component */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Component constructor.     * @param $name     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$depth</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 在组合中表示叶节点对象，叶节点没有子节点 * * Class Leaf */</span><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * Leaf constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'不能添加'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'不能删除'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$depth</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$depth</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作， * 比如增加、删除 * * Class Composite */</span><span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Component[]     */</span>    <span class="token keyword">private</span> <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Composite constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component <span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$depth</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$depth</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">list</span> <span class="token keyword">as</span> <span class="token variable">$children</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$children</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$depth</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$root</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'leaf a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'left b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'x a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'x b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$comp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">'xy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'xy a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comp2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'xy b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'leaf c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$leafd</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">'leaf d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$leafd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token variable">$leafd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$comp2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$root</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(6)-命令模式</title>
      <link href="2018/10/06/design-patten/command.html"/>
      <url>2018/10/06/design-patten/command.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Command.php">命令模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作第一，它能较容易地设计一个命令队列；第二，在需要的情况下，可以较容易的将命令计入日志；第三，允许接收请求的一方决定是否要否决请求；第四，可以容易的实现对请求的撤销和重做；第五，由于加进新的具体命令不能影响其他的类，因此增加新的具体命令很容易命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。如果不清楚一个系统是否需要命令模式，就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式并不困难，只有在真正需要如撤销/恢复操作等功能时，把原来的代码重构为命令模式才有意义。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 用来声明执行操作的接口 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Receiver     */</span>    <span class="token keyword">protected</span> <span class="token variable">$receiver</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Command constructor.     * @param $receiver     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Receiver <span class="token variable">$receiver</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">receiver</span> <span class="token operator">=</span> <span class="token variable">$receiver</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 抽象执行命令接口     *     * @return mixed     * @author jiangyi     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现 execute * * Class ConcreteCommand */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteCommand constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Receiver <span class="token variable">$receiver</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$receiver</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">receiver</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 要求该命令执行这个请求 * * Class Invoker */</span><span class="token keyword">class</span> <span class="token class-name">Invoker</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Command     */</span>    <span class="token keyword">private</span> <span class="token variable">$command</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param mixed $command     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">command</span> <span class="token operator">=</span> <span class="token variable">$command</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">command</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体的命令执行者，知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接受者 * 命令执行者知道所有的命令执行 * 或者这里可以定义一个抽象接口，实现不同的命令执行者执行不同的命令，这样更利于扩展 * * Class Receiver */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'执行请求'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">action1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'执行请求2'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function">absAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ReceiverA</span> <span class="token keyword">extends</span> <span class="token class-name">Receiver</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">function</span> <span class="token function">absAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'A执行请求'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ReceiverB</span> <span class="token keyword">extends</span> <span class="token class-name">Receiver</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">function</span> <span class="token function">absAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'B执行请求'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 实例化执行者</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReceiverA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定该命令的执行者</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteCommand</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要求指定的执行者执行命令</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Invoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(5)-职责链模式</title>
      <link href="2018/10/05/design-patten/chain-of-responsibility.html"/>
      <url>2018/10/05/design-patten/chain-of-responsibility.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/ChainOfResponsibility.php">职责链模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。当客户提交一个请求时，请求时沿链传递直至有一个 Handler 对象负责处理它。接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。结果是职责链可简化对象的相互连接，它们仅需要保证一个指向其后继者的引用，而不需要保持它所有的候选者的引用。可以随时地增加或修改处理一个请求的结构，增强了给对象指派职责的灵活性一个请求极有可能到了链末都得不到处理，或者因为没有正确配置而得不到处理。需要事先考虑清楚</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/**  * 定义一个处理请示的接口  *  * Class Handler  */</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token comment" spellcheck="true">/**      * @var static      */</span>     <span class="token keyword">protected</span> <span class="token variable">$successor</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span>Handler <span class="token variable">$successor</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">successor</span> <span class="token operator">=</span> <span class="token variable">$successor</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token comment" spellcheck="true">/**      * 抽象处理请求接口      *      * @param $request      * @return mixed      * @author jiangyi      */</span>     <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler1</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>             <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'处理请求'</span> <span class="token punctuation">.</span> <span class="token variable">$request</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; elseif ($this->successor != null) &amp;#123;</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">successor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>             <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'处理请求'</span> <span class="token punctuation">.</span> <span class="token variable">$request</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; elseif ($this->successor != null) &amp;#123;</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">successor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandler3</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span> <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>             <span class="token keyword">echo</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'处理请求'</span> <span class="token punctuation">.</span> <span class="token variable">$request</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; elseif ($this->successor != null) &amp;#123;</span>             <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">successor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> <span class="token variable">$h1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$h2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$h3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandler3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置下一级</span> <span class="token variable">$h1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token variable">$h2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$h2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token variable">$h3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 31 无人处理</span> <span class="token variable">$requests</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requests</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     <span class="token variable">$h1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(4)-建造者模式</title>
      <link href="2018/10/04/design-patten/builder.html"/>
      <url>2018/10/04/design-patten/builder.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Builder.php">建造者模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要定义一个具体的建造者就可以了。建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 产品类，由多个部件组成 * * Class Product */</span><span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var array 保存所有的部件     */</span>    <span class="token keyword">public</span> <span class="token variable">$parts</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$part</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">parts</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$part</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 循环创建产品的所有部件     *     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'产品创建'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">parts</span> <span class="token keyword">as</span> <span class="token variable">$part</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$part</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * Builder 是为了创建一个 Product 对象的各个部分指定的抽象接口。 * 也就是 Product 的各个部件组成，和返回 Product * * Class Builder */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这里不一定使用抽象方法，可以先实现     * @return mixed     * @author jiangyi     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体建造者，实现 Builder 接口，构造和装配各个部件 * * Class ConcreteBuilder1 */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder1</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 此属性可搬移至父类     * @var Product     */</span>    <span class="token keyword">private</span> <span class="token variable">$product</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteBuilder1 constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'部件A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'部件B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder2</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$product</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * ConcreteBuilder2 constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'部件X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'部件Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">product</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 指挥者，构建一个使用 Builder 的对象 * * Class Director */</span><span class="token keyword">class</span> <span class="token class-name">Director</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * 指挥者必须知道建造者的所有方法，然后调用具体的方法建造     *     * @param Builder $builder     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">construct</span><span class="token punctuation">(</span>Builder <span class="token variable">$builder</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 调用端不需要知道具体的建造过程</span><span class="token variable">$director</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$director</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token variable">$b1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token variable">$b1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$director</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token variable">$b2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token variable">$b2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(3)-桥接模式</title>
      <link href="2018/10/03/design-patten/bridge.html"/>
      <url>2018/10/03/design-patten/bridge.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Bridge.php">桥接模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>将抽象部分与它的实现部分分离，使它们都可以独立地变化什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义实现指的是抽象类和它的派生类用来实现自己的对象手机可以按品牌分类，也可以按照功能分类，这样可以把手机品牌和软件分别抽象出来，手机品牌聚合软件由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自的变化。这使得每种实现的变化不会影响其它的实现，从而达到应对变化的目的实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 定义具体实现类的抽象接口 * * Class Implementor */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Implementor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体实现类A，实现接口 * * Class ConcreteImplementorA */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteImplementorA</span> <span class="token keyword">extends</span> <span class="token class-name">Implementor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体实现A的方法执行'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体实现类B，实现接口 * * Class ConcreteImplementorB */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteImplementorB</span> <span class="token keyword">extends</span> <span class="token class-name">Implementor</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'具体实现B的方法执行'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 负责保存实现者，并调用实现者的实现接口 * * Class Abstraction */</span><span class="token keyword">class</span> <span class="token class-name">Abstraction</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Implementor     */</span>    <span class="token keyword">protected</span> <span class="token variable">$implementor</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setImplementor</span><span class="token punctuation">(</span>Implementor <span class="token variable">$implementor</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">implementor</span> <span class="token operator">=</span> <span class="token variable">$implementor</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 这里调用具体的实现者     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">implementor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 具体的抽象 * Class RefinedAbstraction */</span><span class="token keyword">class</span> <span class="token class-name">RefinedAbstraction</span> <span class="token keyword">extends</span> <span class="token class-name">Abstraction</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">implementor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$ab</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefinedAbstraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ab</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setImplementor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteImplementorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ab</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ab</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setImplementor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteImplementorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ab</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(2)-适配器模式</title>
      <link href="2018/10/02/design-patten/adapter.html"/>
      <url>2018/10/02/design-patten/adapter.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/Adapter.php">适配器模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。系统的数据和行为都正确，但是接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式。或者说两个类所做的事情相同或相似，但是具有 不同的接口时要使用它在双方都不太容易修改的时候再使用适配器模式</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * 这个是我们所需要的东西，但是它的接口和普通的接口不一致 * * Class Adaptee */</span><span class="token keyword">class</span> <span class="token class-name">Adaptee</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'特殊请求'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 这是一个普通的接口 * * Class Target */</span><span class="token keyword">class</span> <span class="token class-name">Target</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'普通请求'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/** * 我们定义一个新的类 Adapter 继承 Target * 并且复写 request() 方法，使之实际调用的是 Adaptee 的方法，这样就保持了接口的一致 * Class Adapter */</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Target</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * @var Adaptee     */</span>    <span class="token keyword">private</span> <span class="token variable">$adaptee</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">adaptee</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adaptee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">adaptee</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$target</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-学习《大话设计模式》的整理</title>
      <link href="2018/10/01/design-patten/readme.html"/>
      <url>2018/10/01/design-patten/readme.html</url>
      
        <content type="html"><![CDATA[<h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><ul><li><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></li></ul><pre><code>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化产生时，设计会遭到意想不到的破坏。软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。如果你能够想到多余一个的动机去改变一个类，那么这个类就具有多余一个的职责。</code></pre><h2 id="开放-封闭原则"><a href="#开放-封闭原则" class="headerlink" title="开放-封闭原则"></a>开放-封闭原则</h2><ul><li><strong>软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。</strong></li></ul><pre><code>对于扩展是开放的，对于更改是封闭的。怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？无论模块是多么的封闭，都会存在一些无法对之封闭的变化。即然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。他必须先猜测出最有可能发生变化的种类，然后构造抽象来隔离那些变化。我们可以在发生小变化时，就及早去想办法应对发生更大变化的可能。等到变化发生时立即采取行动。在我们最初编程写代码时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离以后发生的同类变化。面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码。我们希望的是在开发工作展开不久就可以知道能发生的变化。查明可能发生的变化所等待的时间越长，要创建正确的抽象就越难。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。</code></pre><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><ul><li><strong>高层模块不应该依赖低层模块，两个都应该依赖抽象。</strong></li><li><strong>抽象不应该依赖细节，细节应该依赖抽象。</strong></li></ul><pre><code>针对接口编程，不要对现实编程。依赖倒转其实可以说是面向对象设计的标志，用那种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那么就是面向对象的设计，反之那就是过程化的设计了。1. 依赖注入时，我们应该依赖接口，而不是某个具体的类，由高层直接绑定依赖关系。2. 测试驱动开发，先写好单元测试类，测试类依赖的是接口，具体的实现可以后面开发。</code></pre><h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><ul><li><strong>子类型必须能够替换掉它们的父类型。</strong></li></ul><pre><code>一个软件实体如果使用的是一个父类的话，那么一定适用于子类，而它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。正是由于子类型的可替换性才使得使用父类类型的模块在无修改的情况下就可以扩展。1. 子类必须完全实现父类的方法2. 子类可以有自己的个性</code></pre><h2 id="迪米特法则（最少知识原则）"><a href="#迪米特法则（最少知识原则）" class="headerlink" title="迪米特法则（最少知识原则）"></a>迪米特法则（最少知识原则）</h2><pre><code>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。在类的结构设计上，每一个类都应当尽量降低成员的访问权限。迪米特法则其根本思想，是强调了类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。</code></pre><h2 id="合成-聚合复用原则"><a href="#合成-聚合复用原则" class="headerlink" title="合成/聚合复用原则"></a>合成/聚合复用原则</h2><ul><li><strong>尽量使用合成/聚合，尽量不要使用类继承</strong></li></ul><pre><code>子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它更适合的类替换，这中依赖关系限制了灵活性并最终限制了复用性。聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承的层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(1)-抽象工厂模式</title>
      <link href="2018/10/01/design-patten/abstract-factory.html"/>
      <url>2018/10/01/design-patten/abstract-factory.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wenjy/design_patten_php/blob/master/src/AbstractFactory.php">抽象工厂模式</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">interface</span> <span class="token class-name">IDepartment</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>Department <span class="token variable">$department</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">MySqlDepartment</span> <span class="token keyword">implements</span> <span class="token class-name">IDepartment</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>Department <span class="token variable">$department</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'mysql 新增记录'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'mysql 查询一条记录'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SqlServerDepartment</span> <span class="token keyword">implements</span> <span class="token class-name">IDepartment</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>Department <span class="token variable">$department</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'sqlServer 新增记录'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'sqlServer 查询一条记录'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">interface</span> <span class="token class-name">InterfaceFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">SqlServerFactory</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlServerDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">MySqlFactory</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceFactory</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySqlDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">Department</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$department</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySqlFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$department</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$department</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iDepartment</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Spl Datastructures</title>
      <link href="2017/12/19/php/spl-datastructures.html"/>
      <url>2017/12/19/php/spl-datastructures.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.php.net/manual/zh/spl.datastructures.php">PHP文档</a></p><pre><code>这里主要学习，PHP SPL 提供了一套标准的数据结构。它们按底层实现进行分组, 通常定义了它们的一般应用领域</code></pre><h2 id="SplDoublyLinkedList"><a href="#SplDoublyLinkedList" class="headerlink" title="SplDoublyLinkedList"></a>SplDoublyLinkedList</h2><p>双向链表</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$dlist</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplDoublyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 末端压入</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hiramariam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'maaz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'zafar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 首端压入</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* the list now contains321hiramariammaazzafar*/</span><span class="token keyword">echo</span> <span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// zafar</span><span class="token keyword">echo</span> <span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$dlist</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$list</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplDoublyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'FIFO (First In First Out) :'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setIteratorMode</span><span class="token punctuation">(</span>SplDoublyLinkedList<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">IT_MODE_FIFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">echo</span> <span class="token string">"LIFO (Last In First Out) :"</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setIteratorMode</span><span class="token punctuation">(</span>SplDoublyLinkedList<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">IT_MODE_LIFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$list</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">echo</span> <span class="token string">'test While:'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token variable">$splDoubleLinkedList</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplDoublyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//First of all, we need rewind list</span><span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Use while, check if the list has valid node</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">//Print current node's value</span>    <span class="token keyword">echo</span> <span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Turn the cursor to next node</span>    <span class="token variable">$splDoubleLinkedList</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>解析文件用的，f*函数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">try</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">// iterate directly over the object</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/spl_file.log'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// and echo each line of the file</span>    <span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">try</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/spl_file.log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplFixedArray"><a href="#SplFixedArray" class="headerlink" title="SplFixedArray"></a>SplFixedArray</h2><p>一个固定长度的数组</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// Initialize the array with a fixed length</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplFixedArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NULL</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(2)</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string(3) "foo"</span><span class="token comment" spellcheck="true">// Increase the size of the array to 10</span><span class="token variable">$array</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"asdf"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Shrink the array to a size of 2</span><span class="token variable">$array</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The following lines throw a RuntimeException: Index invalid or out of range</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"non-numeric"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (RuntimeException $re) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">"RuntimeException: "</span> <span class="token punctuation">.</span> <span class="token variable">$re</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (RuntimeException $re) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">"RuntimeException: "</span> <span class="token punctuation">.</span> <span class="token variable">$re</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (RuntimeException $re) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">"RuntimeException: "</span> <span class="token punctuation">.</span> <span class="token variable">$re</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplHeap"><a href="#SplHeap" class="headerlink" title="SplHeap"></a>SplHeap</h2><p>堆的实现</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">JupilerLeague</span> <span class="token keyword">extends</span> <span class="token class-name">SplHeap</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/**     * We modify the abstract method compare so we can sort our     * rankings using the values of a given array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span> <span class="token variable">$array2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$values1</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$values2</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$array2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$values1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$values2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$values1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$values2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$heap</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JupilerLeague</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'AA Gent'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Anderlecht'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Cercle Brugge'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// For displaying the ranking we move up to the first node</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Then we iterate through each node for displaying the result</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$team</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$score</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$team</span> <span class="token punctuation">.</span> <span class="token string">': '</span> <span class="token punctuation">.</span> <span class="token variable">$score</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token variable">$heap</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplMaxHeap"><a href="#SplMaxHeap" class="headerlink" title="SplMaxHeap"></a>SplMaxHeap</h2><p>顶部最大堆</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">MySimpleHeap</span> <span class="token keyword">extends</span> <span class="token class-name">SplMaxHeap</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySimpleHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token keyword">as</span> <span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$number</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="MySimpleHeap"><a href="#MySimpleHeap" class="headerlink" title="MySimpleHeap"></a>MySimpleHeap</h2><p>顶部最小堆</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MySimpleHeap</span> <span class="token keyword">extends</span> <span class="token class-name">SplMinHeap</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySimpleHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token keyword">as</span> <span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$number</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplStack"><a href="#SplStack" class="headerlink" title="SplStack"></a>SplStack</h2><p>栈，通过使用一个双向链表来提供栈的主要功能</p><pre class=" language-php"><code class="language-php"><span class="token variable">$q</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token variable">$q</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$splstack</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>\<span class="token package">SplStack</span> <span class="token variable">$splstack</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span> <span class="token operator">=</span> <span class="token variable">$splstack</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">calculateSomme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$val1</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$val2</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token variable">$val1</span> <span class="token operator">+</span> <span class="token variable">$val2</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">calculateSomme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     *     * @return integer     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">displaySomme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$splstack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>SplStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$splstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token variable">$splstack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">calculateSomme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">displaySomme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 30</span><span class="token variable">$stack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># the last element has index zero</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token variable">$stack</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SplQueue"><a href="#SplQueue" class="headerlink" title="SplQueue"></a>SplQueue</h2><p>队列，通过使用一个双向链表来提供队列的主要功能</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">echo</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//remove first one</span></code></pre><h2 id="SplPriorityQueue"><a href="#SplPriorityQueue" class="headerlink" title="SplPriorityQueue"></a>SplPriorityQueue</h2><p>优先队列</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">PQtest</span> <span class="token keyword">extends</span> <span class="token class-name">SplPriorityQueue</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token variable">$priority1</span><span class="token punctuation">,</span> <span class="token variable">$priority2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$priority1</span> <span class="token operator">===</span> <span class="token variable">$priority2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$priority1</span> <span class="token operator">&lt;</span> <span class="token variable">$priority2</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$objPQ</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PQtest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"COUNT->"</span> <span class="token punctuation">.</span> <span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mode of extraction</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setExtractFlags</span><span class="token punctuation">(</span>PQtest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">EXTR_BOTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Go to TOP</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'data->'</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'==priority->'</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string">'priority'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token variable">$objPQ</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Spl Iterators</title>
      <link href="2017/12/19/php/spl-iterators.html"/>
      <url>2017/12/19/php/spl-iterators.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.php.net/manual/zh/spl.iterators.php">PHP文档</a></p><pre><code>PHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。</code></pre><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>实现一个最简单的迭代器接口</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$valid</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$array</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">array</span> <span class="token operator">=</span> <span class="token variable">$array</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 返回到迭代器的第一个元素     * @author jiangyi     */</span>    <span class="token keyword">function</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">valid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 返回当前元素     * @return mixed     * @author jiangyi     */</span>    <span class="token keyword">function</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 返回当前元素的键     * @return int     * @author jiangyi     */</span>    <span class="token keyword">function</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 向前移动到下一个元素     * @author jiangyi     */</span>    <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">valid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 检查当前位置是否有效     * @return bool     * @author jiangyi     */</span>    <span class="token keyword">function</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">valid</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"firstelement"</span><span class="token punctuation">,</span>    <span class="token string">"secondelement"</span><span class="token punctuation">,</span>    <span class="token string">"lastelement"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"&amp;#123;$key&amp;#125;=>&amp;#123;$value&amp;#125;\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$it</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$it</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"&amp;#123;$it->key()&amp;#125;=>&amp;#123;$it->current()&amp;#125;\n"</span><span class="token punctuation">;</span>    <span class="token variable">$it</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="Countable"><a href="#Countable" class="headerlink" title="Countable"></a>Countable</h2><p>实现统计接口</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyCountable</span> <span class="token keyword">implements</span> <span class="token class-name">Countable</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$myCount</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">myCount</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$countable</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCountable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$countable</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$countable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="AppendIterator"><a href="#AppendIterator" class="headerlink" title="AppendIterator"></a>AppendIterator</h2><p><code>这个迭代器可以遍历很多的迭代器</code></p><p>用在什么地方呢？暂时没想到</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$arrayIteratorOne</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arrayIteratorTwo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppendIterator</span><span class="token punctuation">;</span><span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$arrayIteratorOne</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$arrayIteratorTwo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$iterator</span> <span class="token keyword">as</span> <span class="token variable">$current</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$current</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">// 输出a b c d e f</span></code></pre><h2 id="ArrayAccess"><a href="#ArrayAccess" class="headerlink" title="ArrayAccess"></a>ArrayAccess</h2><p><code>提供像访问数组一样访问对象的能力的接口</code></p><p>大部分框架的model都实现它来达到上述的效果</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyArrayAccess</span> <span class="token keyword">implements</span> <span class="token class-name">ArrayAccess</span><span class="token punctuation">,</span> IteratorAggregate<span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">private</span> <span class="token variable">$container</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$title</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$author</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$category</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$author</span><span class="token punctuation">,</span> <span class="token variable">$category</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">"one"</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"two"</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"three"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$title</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">author</span> <span class="token operator">=</span> <span class="token variable">$author</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">category</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 设置一个偏移位置的值     * @param mixed $offset     * @param mixed $value     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetSet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$offset&amp;#125; = $value;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 检查一个偏移位置是否存在     * @param mixed $offset     * @return bool     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetExists</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$offset&amp;#125;);</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 复位一个偏移位置的值     * @param mixed $offset     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetUnset</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$offset&amp;#125;);</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 获取一个偏移位置的值     * @param mixed $offset     * @return mixed|null     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$offset&amp;#125;) ? $this->&amp;#123;$offset&amp;#125; : null;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">function</span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayAccess</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'wen'</span><span class="token punctuation">,</span> <span class="token string">'new'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A value"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Append 1'</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Append 2'</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Append 3'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token keyword">as</span> <span class="token variable">$field</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">"$field=>$value\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="ArrayIterator"><a href="#ArrayIterator" class="headerlink" title="ArrayIterator"></a>ArrayIterator</h2><p><code>这个迭代器允许在遍历数组和对象时删除和更新值与键</code></p><p>其实它实现了ArrayAccess , SeekableIterator , Countable , Serializable拥有更多的功能</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token string">' => '</span> <span class="token punctuation">.</span> <span class="token variable">$value</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (Exception $e) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="ArrayObject"><a href="#ArrayObject" class="headerlink" title="ArrayObject"></a>ArrayObject</h2><p>更像手动的foreach</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$arrayObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayObject</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">natcasesort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'count->'</span> <span class="token punctuation">.</span> <span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetUnset</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetExists</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token string">'Offset Exists'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$iterator</span> <span class="token operator">=</span> <span class="token variable">$arrayObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' => '</span> <span class="token punctuation">.</span> <span class="token variable">$iterator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="CachingIterator"><a href="#CachingIterator" class="headerlink" title="CachingIterator"></a>CachingIterator</h2><p>没用过。。。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingIterator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$value</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (Exception $e) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h2><p>用来遍历目录，获取文件的信息很方便</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ArrayObject.php'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token keyword">echo</span> <span class="token string">'getFilename()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isDot()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isDot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'__toString()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getPath()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getPathname()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPathname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getPerms()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getInode()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getSize()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getOwner()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getGroup()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getATime()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getATime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getMTime()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getCTime()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getCTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getType()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isWritable()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isReadable()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isExecutable()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isExecutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isFile()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isDir()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'isLink()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getFileInfo()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFileInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'getPathInfo()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPathInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'setFileClass()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setFileClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'setInfoClass()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setInfoClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'openFile()->'</span> <span class="token punctuation">.</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">openFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (Exception $e) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">'No files Found!'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="FilterIterator"><a href="#FilterIterator" class="headerlink" title="FilterIterator"></a>FilterIterator</h2><p>过滤指定条件的值，感觉效果和array_filter差不多，没用过</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$animals</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'koala'</span><span class="token punctuation">,</span> <span class="token string">'kangaroo'</span><span class="token punctuation">,</span> <span class="token string">'wombat'</span><span class="token punctuation">,</span> <span class="token string">'wallaby'</span><span class="token punctuation">,</span> <span class="token string">'emu'</span><span class="token punctuation">,</span> <span class="token string">'NZ'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'kiwi'</span><span class="token punctuation">,</span> <span class="token string">'kookaburra'</span><span class="token punctuation">,</span> <span class="token string">'platypus'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CullingIterator</span> <span class="token keyword">extends</span> <span class="token class-name">FilterIterator</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/*** The filteriterator takes  a iterator as param: ***/</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Iterator <span class="token variable">$it</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/*** check if key is numeric ***/</span>    <span class="token keyword">function</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">return</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token comment" spellcheck="true">/*** end of class ***/</span><span class="token variable">$cull</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CullingIterator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$animals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$cull</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token string">'=>'</span> <span class="token punctuation">.</span> <span class="token variable">$value</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="IteratorAggregate"><a href="#IteratorAggregate" class="headerlink" title="IteratorAggregate"></a>IteratorAggregate</h2><p>没使用过</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">MyIteratorAggregate</span> <span class="token keyword">implements</span> <span class="token class-name">IteratorAggregate</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">public</span> <span class="token variable">$property1</span> <span class="token operator">=</span> <span class="token string">"Public property one"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$property2</span> <span class="token operator">=</span> <span class="token string">"Public property two"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$property3</span> <span class="token operator">=</span> <span class="token string">"Public property three"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">property4</span> <span class="token operator">=</span> <span class="token string">"last property"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token comment" spellcheck="true">/**     * 聚合迭代器本身不实现迭代的5个方法接口(rewind valid key current next),     * 委托ArrayIterator实现     *     * @return ArrayIterator     * @author jiangyi     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//return new ArrayIterator($this);</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyIteratorAggregate</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="LimitIterator"><a href="#LimitIterator" class="headerlink" title="LimitIterator"></a>LimitIterator</h2><p>没啥用处</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*** the offset value ***/</span><span class="token variable">$offset</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** the limit of records to show ***/</span><span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'koala'</span><span class="token punctuation">,</span> <span class="token string">'kangaroo'</span><span class="token punctuation">,</span> <span class="token string">'wombat'</span><span class="token punctuation">,</span> <span class="token string">'wallaby'</span><span class="token punctuation">,</span> <span class="token string">'emu'</span><span class="token punctuation">,</span> <span class="token string">'kiwi'</span><span class="token punctuation">,</span> <span class="token string">'kookaburra'</span><span class="token punctuation">,</span> <span class="token string">'platypus'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitIterator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token variable">$limit</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">//echo $it->getPosition() . PHP_EOL;</span>    <span class="token keyword">echo</span> <span class="token variable">$k</span> <span class="token punctuation">.</span><span class="token string">'=>'</span><span class="token punctuation">.</span><span class="token variable">$v</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'koala'</span><span class="token punctuation">,</span> <span class="token string">'kangaroo'</span><span class="token punctuation">,</span> <span class="token string">'wombat'</span><span class="token punctuation">,</span> <span class="token string">'wallaby'</span><span class="token punctuation">,</span> <span class="token string">'emu'</span><span class="token punctuation">,</span> <span class="token string">'kiwi'</span><span class="token punctuation">,</span> <span class="token string">'kookaburra'</span><span class="token punctuation">,</span> <span class="token string">'platypus'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitIterator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$it</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$it</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (OutOfBoundsException $e) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="RecursiveIteratorIterator"><a href="#RecursiveIteratorIterator" class="headerlink" title="RecursiveIteratorIterator"></a>RecursiveIteratorIterator</h2><p>递归迭代器</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'butch'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'breed'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'boxer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'fido'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'breed'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'doberman'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'girly'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'breed'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'poodle'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecursiveIteratorIterator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecursiveArrayIterator</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token string">'->'</span> <span class="token punctuation">.</span> <span class="token variable">$value</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><h2 id="SimpleXMLIterator"><a href="#SimpleXMLIterator" class="headerlink" title="SimpleXMLIterator"></a>SimpleXMLIterator</h2><p>可以用来解析XML</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*** a simple xml tree ***/</span><span class="token variable">$xmlstring</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">XML</span><span class="token delimiter">&lt;?</span>xml version <span class="token operator">=</span> <span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> standalone<span class="token operator">=</span><span class="token string">"yes"</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>document</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animal</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>species</span><span class="token punctuation">></span></span></span>monotremes<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>species</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span></span>platypus<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span></span>Bruce<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>animal</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animal</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>species</span><span class="token punctuation">></span></span></span>arachnid<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>species</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span></span>funnel web<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span></span>Bruce<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span></span>      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legs</span><span class="token punctuation">></span></span></span><span class="token number">8</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legs</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>animal</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>document</span><span class="token punctuation">></span></span></span><span class="token constant">XML</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** a new simpleXML iterator object ***/</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/*** a new simple xml iterator ***/</span>    <span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleXMLIterator</span><span class="token punctuation">(</span><span class="token variable">$xmlstring</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*** a new limitIterator object ***/</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecursiveIteratorIterator</span><span class="token punctuation">(</span><span class="token variable">$it</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token comment" spellcheck="true">//echo $name . '=>' . $data . PHP_EOL;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string">'animal'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token comment" spellcheck="true">//var_dump($data);</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125; catch (Exception $e) &amp;#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token comment" spellcheck="true">/*** a new simpleXML iterator object ***/</span>    <span class="token variable">$sxi</span> <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">SimpleXMLIterator</span><span class="token punctuation">(</span><span class="token variable">$xmlstring</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*** set the xpath ***/</span>    <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token variable">$sxi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token string">'animal/category/species'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*** iterate over the xpath ***/</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$foo</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
