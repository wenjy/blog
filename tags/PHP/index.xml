<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on 江湖义气的博客</title><link>https://blog.wenjy.top/tags/PHP/</link><description>Recent content in PHP on 江湖义气的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 11 Oct 2019 22:31:57 +0800</lastBuildDate><atom:link href="https://blog.wenjy.top/tags/PHP/index.xml" rel="self" type="application/rss+xml"/><item><title>工作中遇到的问题+踩过的坑</title><link>https://blog.wenjy.top/2019/01/01/work-debug.html</link><pubDate>Fri, 11 Oct 2019 22:31:57 +0800</pubDate><guid>https://blog.wenjy.top/2019/01/01/work-debug.html</guid><description>安装的虚拟机时间不同步 ntpdate cn.pool.ntp.org phpxdebug 运行失败，端口繁忙 因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001 本地测试环境curl，https时因为没有设置公钥而失败 设置公钥 PHP函数long2ip溢出 phpstudy 的PHP默认是32位的，long2ip() 时会有问题，需</description></item><item><title>PHP7数组的实现</title><link>https://blog.wenjy.top/2019/10/11/php7-array.html</link><pubDate>Fri, 11 Oct 2019 22:29:21 +0800</pubDate><guid>https://blog.wenjy.top/2019/10/11/php7-array.html</guid><description>PHP数组是一个有序的字典，它必须同时满足下面两个语义 PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。 PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。 为了实现语义1，P</description></item><item><title>PHP Spl Datastructures</title><link>https://blog.wenjy.top/2017/12/20/php-spl-datastructures.html</link><pubDate>Wed, 20 Dec 2017 14:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2017/12/20/php-spl-datastructures.html</guid><description>PHP文档 SplDoublyLinkedList 双向链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 &amp;lt;?php $dlist = new SplDoublyLinkedList(); // 末端压入 $dlist-&amp;gt;push(&amp;#39;hiramariam&amp;#39;); $dlist-&amp;gt;push(&amp;#39;maaz&amp;#39;); $dlist-&amp;gt;push(&amp;#39;zafar&amp;#39;); // 首端压入 $dlist-&amp;gt;unshift(1); $dlist-&amp;gt;unshift(2); $dlist-&amp;gt;unshift(3); /* the list now contains 3 2 1 hiramariam maaz zafar */ echo $dlist-&amp;gt;pop() . PHP_EOL; // zafar echo $dlist-&amp;gt;shift() . PHP_EOL; // 3 $dlist-&amp;gt;add(3, 2.24); for ($dlist-&amp;gt;rewind(); $dlist-&amp;gt;valid(); $dlist-&amp;gt;next()) { echo $dlist-&amp;gt;current() . PHP_EOL; } $list = new SplDoublyLinkedList(); $list-&amp;gt;push(&amp;#39;a&amp;#39;); $list-&amp;gt;push(&amp;#39;b&amp;#39;); $list-&amp;gt;push(&amp;#39;c&amp;#39;); echo &amp;#39;FIFO (First</description></item><item><title>PHP Spl Iterators</title><link>https://blog.wenjy.top/2017/12/20/php-spl-iterators.html</link><pubDate>Wed, 20 Dec 2017 14:53:12 +0800</pubDate><guid>https://blog.wenjy.top/2017/12/20/php-spl-iterators.html</guid><description>PHP文档 Iterator 实现一个最简单的迭代器接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 &amp;lt;?php class MyIterator implements Iterator { private $array = []; private $valid = false; public function __construct(array $array) { $this-&amp;gt;array = $array; } /** * 返回到迭代器的第一个元素 * @author jiangyi */ function rewind() {</description></item></channel></rss>