{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1605187824738},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1605188984434},{"_id":"themes/jacman/README.md","hash":"098545637b0aeb27b14707c15e429470c603d78d","modified":1605188984435},{"_id":"themes/jacman/README_zh.md","hash":"9c73931bca4883de13eedd4be254da547d4ca52e","modified":1605188984436},{"_id":"themes/jacman/_config.yml","hash":"4e7a9a91e22c7805edb535781636f2203b963b15","modified":1605188984437},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1605188984438},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1605188984438},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1605188984446},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1605188984438},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1605188984446},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1605188984446},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1605188984446},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1605188984446},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1605188984446},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1605188984447},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1605188984447},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1605188984444},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"d49a8d609c5fbafa9e7ad328163565af03306519","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1605188984445},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1605188984446},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"3e1f1d8dc38b1e17c523d1176f7ee503fc648045","modified":1605188984439},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1605188984439},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1605188984440},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1605188984440},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1605188984440},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1605188984440},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1605188984444},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1605188984444},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1605188984444},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1605188984444},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1605188984444},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1605188984451},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1605188984452},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1605188984452},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1605188984453},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1605188984453},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1605188984453},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1605188984453},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1605188984456},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1605188984456},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1605188984457},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1605188984469},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605188984471},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605188984471},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605188984476},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605188984476},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605188984476},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605188984479},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1605188984487},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1605188984488},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605188984476},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1605188984487},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1605188984488},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1605188984461},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1605188984459},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1605188984458},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1605188984462},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1605188984462},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1605188984465},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1605188984466},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1605188984468},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1605188984468},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1605188984488},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1605188984489},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1605188984490},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1605188984442},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1605188984490},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1605188984441},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"548c69c570d5aac567bc6f088e9ee0c02223b088","modified":1605188984442},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1605188984442},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1605188984443},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1605188984443},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1605188984448},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1605188984448},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1605188984449},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1605188984449},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1605188984443},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1605188984443},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1605188984447},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1605188984449},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1605188984450},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1605188984451},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1605188984450},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1605188984450},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1605188984454},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1605188984454},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1605188984451},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1605188984451},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1605188984455},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1605188984455},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1605188984454},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1605188984455},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1605188984448},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1605188984434},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1605188984448},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1605188984487},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1605188984460},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1605188984465},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1605188984467},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1605188984489},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1605188984471},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1605188984464},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1605192443566},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"011ed6522859e600c27ea6dce9591fbc447db177","modified":1605192443568},{"_id":"themes/hexo-theme-matery/README.md","hash":"56299cf1fe60a11fef61b3948fe148f995df747e","modified":1605192443567},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"38a2fe4513a4bdb96ca24d6c43235833223218ce","modified":1605192443568},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1605192443567},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1605192443568},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1605192443568},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1605192443569},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1605192443583},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1605192443584},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1605192443584},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1605192443584},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1605192443584},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1605192443585},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1605192443585},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c7453d5b064d42529e8c9fdef52d0901d51acb9b","modified":1605192443585},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1605192443585},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1605192443586},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1605192443586},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1605192443588},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1605192443570},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1605192443570},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1605192443571},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1605192443572},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1605192443572},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1605192443572},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1605192443573},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1605192443573},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1605192443573},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1605192443573},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1605192443574},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1605192443574},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1605192443574},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1605192443575},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1605192443575},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1605192443575},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1605192443575},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"a0de13cde718c7951cbf8eff809e76538e32e8e2","modified":1605192443576},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"655ea63374186a1d5230648f70ab4d327bb663bb","modified":1605192443576},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1605192443576},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1605192443577},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1605192443577},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1605192443577},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"81eca110e533693a5369c0cc9106bf0f0432ee37","modified":1605192443578},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1605192443578},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1605192443578},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1605192443579},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1605192443579},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1605192443579},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1605192443579},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1605192443580},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1605192443580},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1605192443580},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1605192443580},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1605192443581},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1605192443582},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1605192443581},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1605192443582},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1605192443582},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1605192443583},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1605192443583},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1605192443586},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1605192443587},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1605192443587},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1605192443587},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1605192443588},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1605192443568},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1605192443691},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1605192443701},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1605192443724},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1605192443724},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1605192443589},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1605192443590},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1605192443591},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1605192443593},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1605192443631},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1605192443594},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1605192443632},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1605192443632},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1605192443631},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1605192443632},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1605192443634},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1605192443634},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1605192443635},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1605192443634},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1605192443636},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1605192443588},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1605192443643},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1605192443650},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1605192443651},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1605192443651},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1605192443651},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1605192443661},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1605192443671},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1605192443672},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1605192443672},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1605192443672},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1605192443688},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1605192443687},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1605192443704},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1605192443707},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1605192443709},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1605192443709},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1605192443716},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1605192443717},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1605192443718},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1605192443718},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1605192443719},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1605192443720},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1605192443722},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1605192443726},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1605192443726},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1605192443614},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1605192443617},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1605192443616},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1605192443617},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1605192443657},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1605192443657},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1605192443658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1605192443658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1605192443658},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1605192443659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1605192443659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1605192443659},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1605192443659},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1605192443674},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1605192443676},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1605192443660},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1605192443678},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1605192443679},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1605192443680},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1605192443682},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1605192443685},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1605192443721},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1605192443637},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1605192443650},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1605192443656},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1605192443689},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1605192443694},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1605192443695},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1605192443692},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1605192443704},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1605192443705},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1605192443706},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1605192443708},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1605192443703},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1605192443710},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1605192443714},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1605192443715},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1605192443717},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1605192443719},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1605192443723},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1605192443596},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1605192443612},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1605192443599},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1605192443613},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1605192443613},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1605192443630},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1605192443630},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1605192443721},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1605192443702},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1605192443668},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1605192443667},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1605192443690},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1605192443693},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1605192443699},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1605192443700},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1605192443649},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1605192443615},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1605192443619},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1605192443629},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1605192443698},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1605192443610},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1605192443643},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1605192443626},{"_id":"source/_posts/charset.md","hash":"913592e39a29c9d6f982c980932c98a8bc41a3d5","modified":1600785060000},{"_id":"source/_posts/work-debug.md","hash":"8cb539e1eb1b8526766556c7736fdb82abfabc0a","modified":1594903095000},{"_id":"source/_posts/algorithms/binary_search.md","hash":"d448bc241a422c24e25fe1538751bc4404b353cd","modified":1600785060000},{"_id":"source/_posts/algorithms/arrangement_combination.md","hash":"1aa4ef965bf18e156f1ddc31242eb18812c1a42e","modified":1600785060000},{"_id":"source/_posts/decimal.md","hash":"4186b0488770d120e4035a464604f5e488b5fea7","modified":1600785060000},{"_id":"source/_posts/algorithms/circuit_breaker.md","hash":"dc2c4cc4c241b0aa21df5378f8ed0372b4608712","modified":1600785060000},{"_id":"source/_posts/algorithms/bitmap.md","hash":"db7b2927d95cd35940ef99f2022b853ac06c0f46","modified":1600785060000},{"_id":"source/_posts/algorithms/consistent_hash.md","hash":"9462e8eb6f3eb75127b7d799595f5c34b78f3f6c","modified":1600785060000},{"_id":"source/_posts/algorithms/hyper_log_log.md","hash":"0c9ab4bb933051d3f635ddf75ecad0817997ee51","modified":1600785060000},{"_id":"source/_posts/algorithms/insertion_sort.md","hash":"e717285d8bb4daec864dec682e11a0f768257124","modified":1600785060000},{"_id":"source/_posts/algorithms/merge_sort.md","hash":"0dc31164d7c4bcb72d576d0c3afb528ce475d14a","modified":1600785060000},{"_id":"source/_posts/algorithms/probability.md","hash":"3893d7ca70037a3ef9985245863b4bbe8d87a96c","modified":1600785060000},{"_id":"source/_posts/algorithms/select_sort.md","hash":"6aa843219c84cb5c0d3721c714e6e3ec27b8ea49","modified":1600785060000},{"_id":"source/_posts/bug/redis-read_error_on_connection.md","hash":"46c8676e2f9a25e7380932e3f544fb7ece7c300d","modified":1594903095000},{"_id":"source/_posts/english/1.md","hash":"8bfedd4eb99be02a0c091199a383c8c4ba0a73dd","modified":1602401832000},{"_id":"source/_posts/english/2.md","hash":"2d92d1e17e108a9a3e1cfedd28c2a8d5c6ef57cb","modified":1602401832000},{"_id":"source/_posts/english/3.md","hash":"fed00a97e053416bdba33e454b1978c7dff0821c","modified":1602401832000},{"_id":"source/_posts/linux/file_permission.md","hash":"d8fd88c67b4a4043482842edb8d4c5cfb2707c55","modified":1585832685000},{"_id":"source/_posts/linux/lock.md","hash":"0785adee90d09a950d224b2760545ac530099dd4","modified":1594908238000},{"_id":"source/_posts/linux/lock-principle.md","hash":"288def2c1585c87170800918abf7f82f8a074984","modified":1594905706000},{"_id":"source/_posts/linux/stdin.md","hash":"77295cb35a6737e60cee72bf77ecc4ee96fbc789","modified":1594903095000},{"_id":"source/_posts/network/5g.md","hash":"8102fb92f96c1411b024b8a1fd703f48ec063b09","modified":1594903095000},{"_id":"source/_posts/network/nat.md","hash":"35587a5b7b49f7f91a34442b3c2a20248fbeffed","modified":1589641099000},{"_id":"source/_posts/network/tcp_connect_close.md","hash":"cb520b1f1df725c99431823b2c7127b0d11e2724","modified":1589641099000},{"_id":"source/_posts/我能唱的歌.md","hash":"d4d52c2868b94a1e8ae85e143c7897148633fc9a","modified":1604241471000},{"_id":"source/_posts/network/tls.md","hash":"81b7d72e8cf424319c8ba156e08ee89abc193020","modified":1589641099000},{"_id":"source/_posts/php/php7-array.md","hash":"b9933e8403e9b66632452f6aa73c83d26369343d","modified":1585832685000},{"_id":"source/_posts/php/spl-datastructures.md","hash":"9be52f65ec1bc445bd586747c0fdb822e77377da","modified":1585226002000},{"_id":"source/_posts/php/spl-iterators.md","hash":"05e638c2ce7e3ba3932d85a889c01e519a96d866","modified":1585226002000},{"_id":"source/_posts/tools/git_command.md","hash":"eb197f03db1acc29f3d6616ddaf8246e7e5d94a4","modified":1598622542000},{"_id":"source/_posts/tools/http_response_status_codes.md","hash":"2365074eb7bb35685c60fe911e713d326f683de8","modified":1585835403000},{"_id":"source/_posts/tools/linux_command.md","hash":"a86dc0dc9049f5ef0dd4fa152bd7d2ee2f95dcce","modified":1589641099000},{"_id":"source/_posts/tools/markdown.md","hash":"c3994eed566f6a4f12bd7998c6f7a4bfae82611f","modified":1587042620000},{"_id":"source/_posts/tools/phpstorm_keymap.md","hash":"311df9e040f6992c74c350e44d947d34fbf1d861","modified":1589641099000},{"_id":"source/_posts/tools/regexp.md","hash":"6ee0d243b5c5968742094e5a418d19308273dd0d","modified":1600785060000},{"_id":"source/_posts/国粹/道德经.md","hash":"9b062b0d924f0c8c19d6cfabdfdce82813ea8e3b","modified":1602400458000},{"_id":"source/_posts/mysql/common.md","hash":"229a162be90973489470dae222bc004bf5990b31","modified":1600785060000},{"_id":"source/_posts/国粹/最美古诗词.md","hash":"b4ba73d44f900adee7be610dff6b24a2ce7d4aca","modified":1603985621000},{"_id":"source/_posts/mysql/index-optimize.md","hash":"7b8d1b6b52806c4afa5631f33dc42a1bc56e7082","modified":1585832685000},{"_id":"source/_posts/mysql/lock_transaction.md","hash":"e56463a34227177fcc2f31edc061e51c8bf6394f","modified":1594908238000},{"_id":"source/_posts/design_patten/README.md","hash":"a79720f02d4abd1806ffe905836b59f52d0dd773","modified":1600785060000},{"_id":"source/_posts/design_patten/abstract_factory.md","hash":"2897e0c84ce3f8c6d65d988f7f08ab024bce5e12","modified":1600785060000},{"_id":"source/_posts/design_patten/adapter.md","hash":"24dd8606ad5edb67d441b45ffce68759148405da","modified":1600785060000},{"_id":"source/_posts/design_patten/bridge.md","hash":"b6fa861668fe0586758731f342c6c067796894c3","modified":1600785060000},{"_id":"source/_posts/design_patten/builder.md","hash":"87e4862cdaa7a70008a2a0cefb78421a591ae7a2","modified":1600785060000},{"_id":"source/_posts/design_patten/chain_of_responsibility.md","hash":"ab88d6f9a2603df1ffe6fca73f9e201f87b02149","modified":1600785060000},{"_id":"source/_posts/design_patten/command.md","hash":"b1c2ca48bede11bc551786f4c06cfbdfeea9b314","modified":1600785060000},{"_id":"source/_posts/design_patten/composite.md","hash":"d5207cb5c3f7f2ab7e250f7b0f4789048ebfdd10","modified":1600785060000},{"_id":"source/_posts/design_patten/decorator.md","hash":"c1010779c628590b9e1f81b3e2422378c2d714c6","modified":1600785060000},{"_id":"source/_posts/design_patten/facade.md","hash":"3c16c6e31204c4cbcf6f1600116547a0e9a6ad8e","modified":1600785060000},{"_id":"source/_posts/design_patten/factory_method.md","hash":"8a4a589101ef80c22ea8e34255bedd5dec70517b","modified":1600785060000},{"_id":"source/_posts/design_patten/interperter.md","hash":"218b65953f04e53018fe0ead84a1b90a055e27f2","modified":1600785060000},{"_id":"source/_posts/design_patten/mediator.md","hash":"480fde2d201404e83a7da336702af04e6082340b","modified":1600785060000},{"_id":"source/_posts/design_patten/flyweight.md","hash":"a35ed40bc9a589790ef6b689949cdd3e5f2aea21","modified":1600785060000},{"_id":"source/_posts/design_patten/memento.md","hash":"b114d919cc8a7aa64df1d17c7e8c1574397e5cf4","modified":1600785060000},{"_id":"source/_posts/design_patten/observer.md","hash":"8cd1d7d28208834d13c9570f332f3afb8eb747b9","modified":1600785060000},{"_id":"source/_posts/design_patten/operation.md","hash":"30aa215d50f9ae5ed1886258e7fab8e1507841f7","modified":1600785060000},{"_id":"source/_posts/design_patten/prototype.md","hash":"dae632da0f8b98d327c4bcc1c9dd569a43f37776","modified":1600785060000},{"_id":"source/_posts/design_patten/proxy.md","hash":"51452520401264520c64ccbcea9c0b3f6a1bcf0a","modified":1600785060000},{"_id":"source/_posts/design_patten/singleton.md","hash":"a166f3b1b31b13b08125c4bfac18cbdefc24dee1","modified":1600785060000},{"_id":"source/_posts/design_patten/state.md","hash":"70091bfb2c86a1f381316d6d0e4d7b3a8f63d048","modified":1600785060000},{"_id":"source/_posts/design_patten/state_work.md","hash":"f7584554a75118d464ad5d78670a0ed465477e2a","modified":1600785060000},{"_id":"source/_posts/design_patten/strategy.md","hash":"86b9558aef146c85e767c06eb14df1b34b5912bb","modified":1600785060000},{"_id":"source/_posts/design_patten/template_method.md","hash":"b9f230691d553c9f46dabee72e5f904a788022dd","modified":1600785060000},{"_id":"source/_posts/design_patten/visitor.md","hash":"3ec863fa3e6dcfe05413ca93d1b84d3af728f63b","modified":1600785060000},{"_id":"source/_posts/algorithms/tree/binary_tree.md","hash":"81a450a7161668208ac5e6f22f29e80e816d1d36","modified":1600785060000},{"_id":"source/_posts/algorithms/tree/balanced_binary_tree.md","hash":"681d4448ba283d9d6e425c9c5b63b21469ae3ba5","modified":1598366103000},{"_id":"source/_posts/algorithms/bubble_sort.md","hash":"1c86137c4f8df9c4af7794674a4b0bd2bb9a38e4","modified":1600785060000},{"_id":"source/_drafts/english/1.md","hash":"8bfedd4eb99be02a0c091199a383c8c4ba0a73dd","modified":1602401832000},{"_id":"source/_drafts/english/3.md","hash":"fed00a97e053416bdba33e454b1978c7dff0821c","modified":1602401832000},{"_id":"source/_drafts/english/2.md","hash":"2d92d1e17e108a9a3e1cfedd28c2a8d5c6ef57cb","modified":1602401832000},{"_id":"source/categories/index.md","hash":"abc3668f39b80c90a74f32d5888c3acf3f376b37","modified":1605271968935},{"_id":"source/contact/index.md","hash":"a95e30e238ed4ae9b4d478b372acfa0e98ec1560","modified":1605272045334},{"_id":"source/404.md","hash":"0dc985bca5a6cd6c57f9960fbf9371264708473b","modified":1605272301305},{"_id":"source/_data/friends.json","hash":"93061f196a60daf05aeb287a0fda7d399c5ccb67","modified":1605272349971},{"_id":"source/tags/index.md","hash":"0bbf6f2387c2f078b11d883dad06c75188ae7952","modified":1605272000989},{"_id":"source/friends/index.md","hash":"e2fbb86e7719541129f8df697ca883696bc4d750","modified":1605272215125},{"_id":"source/about/index.md","hash":"b0264dc1b0d44133644252af1af0e82f9c8990d5","modified":1605272022985},{"_id":"public/atom.xml","hash":"d552baed26b86ae424f8bc257f93bb47a5df5c64","modified":1605279811978},{"_id":"public/search.xml","hash":"b2b4c0ae0f6028d1d7d270906f863d75e7f71ffd","modified":1605279811978},{"_id":"public/404.html","hash":"40d25cf3656078391be71ac83a5f37ff1b321c07","modified":1605279811978},{"_id":"public/contact/index.html","hash":"7981cbd9335c1d5c37855940aa4a26337a16380c","modified":1605279811978},{"_id":"public/about/index.html","hash":"6572f3e1a1083122d2a8e833daf252d58eb4c0fb","modified":1605279811978},{"_id":"public/categories/index.html","hash":"15fb77263a7c5c86e4d801e1da4f33a8e8a99281","modified":1605279811978},{"_id":"public/friends/index.html","hash":"af45467f41dc881acf4d915f98d8ba21bd6a5e6a","modified":1605279811978},{"_id":"public/tags/index.html","hash":"a4dd3b1a49571c56e707e252ec3bc905493a43d0","modified":1605279811978},{"_id":"public/2020/11/12/hello-world.html","hash":"10d7ce0ed7a72c1ccc25dbd2fde70cb89e0519b1","modified":1605279811978},{"_id":"public/2020/11/01/wo-neng-chang-de-ge.html","hash":"fa1d983798a6d4192c1037698ff1b84cb529419c","modified":1605279811978},{"_id":"public/2020/10/11/guo-cui/zui-mei-gu-shi-ci.html","hash":"96296f56344571d52341157bc6b03ffb7737e5c9","modified":1605279811978},{"_id":"public/2020/08/25/algorithms/tree/balanced-binary-tree.html","hash":"a36b7a9bb09b474da4b65bc8292d3c11c9f65a10","modified":1605279811978},{"_id":"public/2020/08/21/guo-cui/dao-de-jing.html","hash":"41f9766f82d41965ba9185eb5e06362bd55c8dee","modified":1605279811978},{"_id":"public/2020/08/18/algorithms/tree/binary-tree.html","hash":"65e6089eb47b75e74439d361c9d156263e5d5631","modified":1605279811978},{"_id":"public/2020/08/02/mysql/common.html","hash":"10ac8d8a3fbcc1d3a121c26a61cfe03c185c45ef","modified":1605279811978},{"_id":"public/2020/07/16/linux/lock.html","hash":"805b4e9aae97222dfa0094a187c5db19aff57828","modified":1605279811978},{"_id":"public/2020/06/07/linux/stdin.html","hash":"2333873236eb03171a8ee66422a2d843e5ca5f4f","modified":1605279811978},{"_id":"public/2020/06/04/bug/redis-read-error-on-connection.html","hash":"dde5b598bf4413fa1c32da9da39277e0c9c64535","modified":1605279811978},{"_id":"public/2020/05/24/network/5g.html","hash":"6a4f9cabfb9d738dd91adb83a8e2a5fb5d2225c8","modified":1605279811978},{"_id":"public/2020/05/16/mysql/lock-transaction.html","hash":"018803392ef31f1c88cac129cc4e50d87976e3e6","modified":1605279811978},{"_id":"public/2020/05/12/charset.html","hash":"3cb3960e46ff4bf9bd17ac5f7da38165393cf355","modified":1605279811978},{"_id":"public/2020/05/12/algorithms/bitmap.html","hash":"09080b39acdf63e4f40d9a8e7367f2d5ec48d855","modified":1605279811978},{"_id":"public/2020/05/12/algorithms/hyper-log-log.html","hash":"4ce0fd3e52c7f8182607b1b62f0e8903f0e0116b","modified":1605279811978},{"_id":"public/2020/05/12/tools/phpstorm-keymap.html","hash":"716c1693650abdef9b91c650506fc7b781d9e853","modified":1605279811978},{"_id":"public/2020/05/12/decimal.html","hash":"b211b84678797f14aa8e1a454e6a2e8e9f908ac4","modified":1605279811978},{"_id":"public/2020/04/25/network/nat.html","hash":"be3527d4ca8d4095169c5e7f7687eed8dc897482","modified":1605279811978},{"_id":"public/2020/04/14/network/tls.html","hash":"d40a3ecd55b6dfbbb0c5bb7213e3b54484b9bcdc","modified":1605279811978},{"_id":"public/2020/04/14/tools/markdown.html","hash":"629f6e4c91a0078de736e8ac915953a5011d5bc5","modified":1605279811978},{"_id":"public/2020/04/14/tools/regexp.html","hash":"aa203a1dcb190f13b1ea69c083166752f4d229d1","modified":1605279811978},{"_id":"public/2020/04/02/network/tcp-connect-close.html","hash":"594504c77cdc1e43ece65f3ffdfd8c85b4eccbb9","modified":1605279811978},{"_id":"public/2020/04/01/tools/http-response-status-codes.html","hash":"6e8bb974b1fef400f7d7b219b0d08ff6a54df7b6","modified":1605279811978},{"_id":"public/2020/03/29/linux/file-permission.html","hash":"f4d29f89bf608c785839ebf6d333e20db56fae32","modified":1605279811978},{"_id":"public/2020/03/26/tools/git-command.html","hash":"73bd242470cb7a4a1d2fdccaa6bdbc95e6d17dbc","modified":1605279811978},{"_id":"public/2020/03/26/tools/linux-command.html","hash":"b1140a0e8c361d0fbc7838dd7dbac0368cad0846","modified":1605279811978},{"_id":"public/2019/10/11/work-debug.html","hash":"c32eaed629b2a9344077a3f5bf00504d87d43492","modified":1605279811978},{"_id":"public/2019/10/11/mysql/index-optimize.html","hash":"d6908787bb9f32e0d65231a8c55a11a6c006fde6","modified":1605279811978},{"_id":"public/2019/10/11/linux/lock-principle.html","hash":"6bbfc90024625b9ec12cdaff5f5dde655686247f","modified":1605279811978},{"_id":"public/2019/10/11/php/php7-array.html","hash":"1af171500f4632897d7ca1391027286c8286f19e","modified":1605279811978},{"_id":"public/2019/04/01/algorithms/circuit-breaker.html","hash":"ab10725688cc37b0b0abccee02d244e280ed13ac","modified":1605279811978},{"_id":"public/2019/04/01/algorithms/consistent-hash.html","hash":"6a7f22265746db6d8348a5d44f64f60e60d56210","modified":1605279811978},{"_id":"public/2019/04/01/algorithms/probability.html","hash":"95dbe66c12aba0fd50318de08c06bca38a66d71c","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/binary-search.html","hash":"6bd5a0ba1f9ad2fd09428dfe3903cd8d9afe26cc","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/arrangement-combination.html","hash":"50b5a2bbf798fbcdcee5f755af311725df8b77ba","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/bubble-sort.html","hash":"64546f98d683d7475087182e1363734a3e734a4e","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/insertion-sort.html","hash":"c5df7d2427dfc95a1937b0234870a288e37d3c2d","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/merge-sort.html","hash":"15e742a8efcf6844adf6a75f1d995bb64e98447a","modified":1605279811978},{"_id":"public/2019/03/01/algorithms/select-sort.html","hash":"1a5ce2d1662b8044837149015bc2740248b2e636","modified":1605279811978},{"_id":"public/2018/10/23/design-patten/visitor.html","hash":"60c980c96381ffc48dfa0b81a32513c2ad1af26e","modified":1605279811978},{"_id":"public/2018/10/22/design-patten/template-method.html","hash":"4848f6ef80ae55e315f6b441998042c1d5597c3d","modified":1605279811978},{"_id":"public/2018/10/21/design-patten/strategy.html","hash":"508805b4826540184bb307c9d7af28b00abff016","modified":1605279811978},{"_id":"public/2018/10/20/design-patten/state.html","hash":"8c6c9e2916c614b0285f8ce1a547b52c8332d2d6","modified":1605279811978},{"_id":"public/2018/10/20/design-patten/state-work.html","hash":"be66d9e9c78adb50df3fd30a614efc5167bdb290","modified":1605279811978},{"_id":"public/2018/10/19/design-patten/singleton.html","hash":"6f69f8eec5ea001e208466bad3b21ad5aca25992","modified":1605279811978},{"_id":"public/2018/10/18/design-patten/proxy.html","hash":"e3a9856fe1688bbb03a183245a5a59c8e3232db3","modified":1605279811978},{"_id":"public/2018/10/17/design-patten/prototype.html","hash":"3aec911ed6fb85f560a9d0c5aabc703539ca6397","modified":1605279811978},{"_id":"public/2018/10/16/design-patten/operation.html","hash":"0a657c4230db8e6fd9b72ee35bd891d7cfbf3820","modified":1605279811978},{"_id":"public/2018/10/15/design-patten/observer.html","hash":"eb04c7c844f8007895ccd81da5fabf0a52ce26a0","modified":1605279811978},{"_id":"public/2018/10/14/design-patten/memento.html","hash":"74ca46a7b21904a8b757262072f6266d4b008e9f","modified":1605279811978},{"_id":"public/2018/10/13/design-patten/mediator.html","hash":"56be625e5c8f2d87cc12166262effefacf8fc6c5","modified":1605279811978},{"_id":"public/2018/10/12/design-patten/interperter.html","hash":"5e7031c83f7b9f57dd130eaf39c2c2331fe7ba7b","modified":1605279811978},{"_id":"public/2018/10/11/design-patten/flyweight.html","hash":"ff9ae27358d8aa44d87df25f844c3d7b502547af","modified":1605279811978},{"_id":"public/2018/10/10/design-patten/factory-method.html","hash":"53a1089179b4d5ffff05941a091336cd5fb4360c","modified":1605279811978},{"_id":"public/2018/10/09/design-patten/facade.html","hash":"9ee5d0a3bfedb61efc33f775e9822df7b5f803e8","modified":1605279811978},{"_id":"public/2018/10/08/design-patten/decorator.html","hash":"a403a58e12a657c6483dfcb394c6bd5cb6e571ed","modified":1605279811978},{"_id":"public/2018/10/07/design-patten/composite.html","hash":"39639146415533ce6aa04898f8576c911acceaec","modified":1605279811978},{"_id":"public/2018/10/06/design-patten/command.html","hash":"6701f46fd427fd1ca94243dac72ad12afc7b2d9e","modified":1605279811978},{"_id":"public/2018/10/05/design-patten/chain-of-responsibility.html","hash":"d464f94c8190e408e33403a8bb79e7092a332ada","modified":1605279811978},{"_id":"public/2018/10/04/design-patten/builder.html","hash":"661842bc8cd1f5382549c9f7d9147951ece930d0","modified":1605279811978},{"_id":"public/2018/10/03/design-patten/bridge.html","hash":"d13888a229fdec19c626381317791557179dafca","modified":1605279811978},{"_id":"public/2018/10/02/design-patten/adapter.html","hash":"77bf345301d70aa836965c76cb8e971255766134","modified":1605279811978},{"_id":"public/2018/10/01/design-patten/readme.html","hash":"d0a667be414acefc88204ed004e93108e390eb0b","modified":1605279811978},{"_id":"public/2018/10/01/design-patten/abstract-factory.html","hash":"383638c64956a358f0a407e2ae2df47b534c8329","modified":1605279811978},{"_id":"public/2017/12/20/php/spl-datastructures.html","hash":"e0143642ec141425b8263164551fbb17b134d150","modified":1605279811978},{"_id":"public/2017/12/20/php/spl-iterators.html","hash":"751dbb62421d84fb29c19d31b05b42ba097add34","modified":1605279811978},{"_id":"public/categories/歌曲/index.html","hash":"17385e51caaa17623a2e8c1d64487d80f1b07415","modified":1605279811978},{"_id":"public/categories/字符集编码/index.html","hash":"00c6eb8dc0aca2f1d3d14c8b907d2ccea0ce4d22","modified":1605279811978},{"_id":"public/categories/PHP/index.html","hash":"ca6b8ad4a359ef8145968f68f19c024e08cab8eb","modified":1605279811978},{"_id":"public/categories/PHP/page/2/index.html","hash":"c5bd0963ffd07ec70a741cd1583e754377f37c8e","modified":1605279811978},{"_id":"public/categories/PHP/page/3/index.html","hash":"fc282e68e866badaf9dfcb076157a6792e0bafc1","modified":1605279811978},{"_id":"public/categories/PHP/page/4/index.html","hash":"25c5d51d1d19c12e00fb737a2dda6ca79f3eb7d8","modified":1605279811978},{"_id":"public/categories/PHP/算法/index.html","hash":"acd05da18bece4b80cd0c6338f135ccedcf96454","modified":1605279811978},{"_id":"public/categories/PHP/计算机杂项/index.html","hash":"c83f2be7be5d1c621edfbaccc753f49422980a04","modified":1605279811978},{"_id":"public/categories/算法/index.html","hash":"b743eef4e5f00c144f5b28b8073f0f240d0aaa22","modified":1605279811978},{"_id":"public/categories/Redis/index.html","hash":"31f43fcd995648dea4691ff72b0e43012a40adb3","modified":1605279811978},{"_id":"public/categories/Linux/index.html","hash":"171b375b3d75b037cf95b5b1cebb7b1e13d70001","modified":1605279811978},{"_id":"public/categories/5G/index.html","hash":"6ad0f629aa11721d86c713a1356dbcb7e7d3512b","modified":1605279811978},{"_id":"public/categories/NAT/index.html","hash":"62f00ba534d2a6ec8e4ef4648ce6f55a81d16daf","modified":1605279811978},{"_id":"public/categories/TCP/index.html","hash":"5f91d2ea1b9cf11abeae4958d299808ced50ed1f","modified":1605279811978},{"_id":"public/categories/TLS/index.html","hash":"3e4b277c34f80649931f473612488423bb7679d0","modified":1605279811978},{"_id":"public/categories/Git/index.html","hash":"9d01674c3a5fef6b1ddf05b6914202d8798790e2","modified":1605279811978},{"_id":"public/categories/Markdown/index.html","hash":"2bae208716ed9c823072236d39cf4c8dcd938666","modified":1605279811978},{"_id":"public/categories/Phpstorm/index.html","hash":"131ef30763840540fb2d6dd21ec9c346bc3ead03","modified":1605279811978},{"_id":"public/categories/正则表达式/index.html","hash":"db4b6c5361ed3760d4dd2ca2ce4f3ea35b684dab","modified":1605279811978},{"_id":"public/categories/MySQL/index.html","hash":"0bac369c56887aef401eea7be20b7869da37a02e","modified":1605279811978},{"_id":"public/categories/PHP/设计模式/index.html","hash":"63a31fb4554f2262a7bc9fb9b00f9203a4424116","modified":1605279811978},{"_id":"public/categories/PHP/设计模式/page/2/index.html","hash":"449cc578041c02985e610e8dad47c5e46d3a6225","modified":1605279811978},{"_id":"public/categories/PHP/设计模式/page/3/index.html","hash":"46d76106791d5f009b92753919acf286ad561326","modified":1605279811978},{"_id":"public/categories/Algorithms/index.html","hash":"ff37850b8422d67a7aae325d11a7b1e6fbc17399","modified":1605279811978},{"_id":"public/categories/Http/index.html","hash":"6a2301fab15d4ae278a005faec3e990cfa620535","modified":1605279811978},{"_id":"public/categories/国粹/index.html","hash":"8c6742e29f18e8cb49019a2aadbbd18be8281476","modified":1605279811978},{"_id":"public/index.html","hash":"3eb05e29910578e046854f622666ebff283989bd","modified":1605279811978},{"_id":"public/page/2/index.html","hash":"447cfc04959515e909deb16d89b0a3bb3a6715e8","modified":1605279811978},{"_id":"public/page/3/index.html","hash":"3365f12c9192cd9b17d16dabaa01ff2b9ad6b0cf","modified":1605279811978},{"_id":"public/page/4/index.html","hash":"3be6e69000e0f7c59e95fd68d700b136a4dd8b06","modified":1605279811978},{"_id":"public/archives/index.html","hash":"98f54100a74268ee9df3f5446584c72654739797","modified":1605279811978},{"_id":"public/archives/page/2/index.html","hash":"a9cb2326e825663dde93e7cbf4048274f02a2789","modified":1605279811978},{"_id":"public/archives/page/3/index.html","hash":"2cf42b48367c3d006994404e0cc2694d879326fe","modified":1605279811978},{"_id":"public/archives/page/4/index.html","hash":"a1b6f842cd05692decafaf11cf700c6a0655898c","modified":1605279811978},{"_id":"public/archives/page/5/index.html","hash":"7e288e4536c90d99c4d25463995e7de74224176e","modified":1605279811978},{"_id":"public/archives/page/6/index.html","hash":"e968dc5c08fe352a7509472a8d7d0364bd885244","modified":1605279811978},{"_id":"public/archives/2017/index.html","hash":"a2e1f013ad07ef6198f40ab7ae95c11a9dd46a8d","modified":1605279811978},{"_id":"public/archives/2017/12/index.html","hash":"9acf668dee2b97a1b4d77f18f8b5a2b2f11cedd8","modified":1605279811978},{"_id":"public/archives/2018/index.html","hash":"28a8b95c4f180d0c2c49d6e34db3c3eabce0da45","modified":1605279811978},{"_id":"public/archives/2018/page/2/index.html","hash":"7b973c426e76339982694d983c7fa4034caa56a4","modified":1605279811978},{"_id":"public/archives/2018/page/3/index.html","hash":"6534ce9b425369005d0282e1855655be4806ce5e","modified":1605279811978},{"_id":"public/archives/2018/10/index.html","hash":"465b376ce9c28e29adf606d1c864fd497b2630b3","modified":1605279811978},{"_id":"public/archives/2018/10/page/2/index.html","hash":"035b4171746b14ef8372e83a0b0824d25c3a1db8","modified":1605279811978},{"_id":"public/archives/2018/10/page/3/index.html","hash":"6916f658b834eaec258658f8519ba81155966aef","modified":1605279811978},{"_id":"public/archives/2019/index.html","hash":"86c6c09dc65ceceef6817caf432501c10bf43e5f","modified":1605279811978},{"_id":"public/archives/2019/page/2/index.html","hash":"93eab612fe647a430d011f3ccb6a98445cddea38","modified":1605279811978},{"_id":"public/archives/2019/03/index.html","hash":"a64ec4aade23fb2e6ad23e6ba252f07176cb0a63","modified":1605279811978},{"_id":"public/archives/2019/04/index.html","hash":"78a0ec32e96419d0a53aece1549d33b329b94a97","modified":1605279811978},{"_id":"public/archives/2019/10/index.html","hash":"de0c1a69ba1ac7717da5a716c699be7f0aaee3f8","modified":1605279811978},{"_id":"public/archives/2020/index.html","hash":"8a1c1e7f5c8e7954ea58662e30b65a4187c39ff9","modified":1605279811978},{"_id":"public/archives/2020/page/2/index.html","hash":"57c449a4420693c1cad585538aee2463bfe8a91c","modified":1605279811978},{"_id":"public/archives/2020/page/3/index.html","hash":"c2ab205969e801ce1111bfff0c48a30b5a499d89","modified":1605279811978},{"_id":"public/archives/2020/03/index.html","hash":"f0a5686288d175b39b3b383d4c2d0ca0dcd4f272","modified":1605279811978},{"_id":"public/archives/2020/04/index.html","hash":"b49ebf6e8540caa74208a4949c501e8d8d6740fe","modified":1605279811978},{"_id":"public/archives/2020/05/index.html","hash":"63b91f407a95afb3c7ce1e16cbd7a20ed60242c0","modified":1605279811978},{"_id":"public/archives/2020/06/index.html","hash":"9538adfa7c1cac3c1f056101790d363aaeeccf4b","modified":1605279811978},{"_id":"public/archives/2020/07/index.html","hash":"0eeeccf39fb5e60c3f6c3e65222e40f13935acb0","modified":1605279811978},{"_id":"public/archives/2020/08/index.html","hash":"f0847a08ba9e5ca59ddaf6733f0678d0d7f1ba03","modified":1605279811978},{"_id":"public/archives/2020/10/index.html","hash":"5cc119399db8f23fd798b1d53f753d28a255b32d","modified":1605279811978},{"_id":"public/archives/2020/11/index.html","hash":"843a17504447a14b52b197ccacf72567bf3c2e70","modified":1605279811978},{"_id":"public/tags/歌曲/index.html","hash":"0d2bf20f4194972220710c6faad7b5be2940ff5f","modified":1605279811978},{"_id":"public/tags/字符集编码/index.html","hash":"01303d3c5b7b2835153af1258641f99c70f44936","modified":1605279811978},{"_id":"public/tags/PHP/index.html","hash":"bdac59773e37944663deaeb1b3ef72ff371e4805","modified":1605279811978},{"_id":"public/tags/PHP/page/2/index.html","hash":"11cd18883141224dc8cbd290c33b704215ba16c3","modified":1605279811978},{"_id":"public/tags/PHP/page/3/index.html","hash":"c3086ef34084519e3b1d4f9e187fa3f53c45fa24","modified":1605279811978},{"_id":"public/tags/PHP/page/4/index.html","hash":"689f9bdb7abcd39d21eb3930543357d4e3b9396f","modified":1605279811978},{"_id":"public/tags/算法/index.html","hash":"331a8213d78366851aa23e869639d72645ff74f8","modified":1605279811978},{"_id":"public/tags/Redis/index.html","hash":"982cd60ae53036f8c6da45ab3042332482dc8f6b","modified":1605279811978},{"_id":"public/tags/Linux/index.html","hash":"0b497ef801232c445ef2666666e54e0659378e6d","modified":1605279811978},{"_id":"public/tags/5G/index.html","hash":"0edc865e037032288a33d096018ac2c712b19854","modified":1605279811978},{"_id":"public/tags/Network/index.html","hash":"c269504faf57f78bc7b4aa2194b7954bfebe3ce9","modified":1605279811978},{"_id":"public/tags/NAT/index.html","hash":"349274afb39ef3185c8316cc41bd05f5b7a5d176","modified":1605279811978},{"_id":"public/tags/TCP/index.html","hash":"5aacbc54cfae4682ec0910ca08cfc110812bcea1","modified":1605279811978},{"_id":"public/tags/TLS/index.html","hash":"d10fa263274f0b1fdb2364eb305fd245876a5c70","modified":1605279811978},{"_id":"public/tags/RSA/index.html","hash":"1e4bfd6f1e9ea5c9997f514cc44009021c27ff59","modified":1605279811978},{"_id":"public/tags/Git/index.html","hash":"a68a9c579310314b42cb3b6f6825d8ba29aa5575","modified":1605279811978},{"_id":"public/tags/Markdown/index.html","hash":"e0d5081d02cd835291ab14268d13e05b84b234f1","modified":1605279811978},{"_id":"public/tags/Phpstorm/index.html","hash":"20171630a169f8e1a9bfc9c815844c13e2ef1c07","modified":1605279811978},{"_id":"public/tags/正则表达式/index.html","hash":"6d6fe348891c11ca74dec0231bd8020ec83836c1","modified":1605279811978},{"_id":"public/tags/MySQL/index.html","hash":"354320c649ea2a89dd781c2634c677f5ffe86020","modified":1605279811978},{"_id":"public/tags/设计模式/index.html","hash":"8e1c73438d77e497b0304218018d722a54e989eb","modified":1605279811978},{"_id":"public/tags/设计模式/page/2/index.html","hash":"11ac661812e0a6226108201f9c7c80a61c507f31","modified":1605279811978},{"_id":"public/tags/设计模式/page/3/index.html","hash":"0d22e038a7bcb18ce9accce21aaf61580a88ca01","modified":1605279811978},{"_id":"public/tags/Algorithms/index.html","hash":"db8050a43e0d044254ea658c4412fdceb23b22ab","modified":1605279811978},{"_id":"public/tags/Http/index.html","hash":"5325abad14e5d8dda834982ba2a51da2e5305885","modified":1605279811978},{"_id":"public/tags/国粹/index.html","hash":"862856b9759cecc0897e36d1706c8833ded562a3","modified":1605279811978},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1605279811978},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1605279811978},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1605279811978},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1605279811978},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1605279811978},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1605279811978},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1605279811978},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1605279811978},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1605279811978},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1605279811978},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1605279811978},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1605279811978},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1605279811978},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1605279811978},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1605279811978},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1605279811978},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1605279811978},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1605279811978},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1605279811978},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1605279811978},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1605279811978},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1605279811978},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1605279811978},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1605279811978},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1605279811978},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1605279811978},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1605279811978},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1605279811978},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1605279811978},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1605279811978},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1605279811978},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1605279811978},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1605279811978},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1605279811978},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1605279811978},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1605279811978},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1605279811978},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1605279811978},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1605279811978},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1605279811978},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1605279811978},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1605279811978},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1605279811978},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1605279811978},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1605279811978},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1605279811978},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1605279811978},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1605279811978},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1605279811978},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1605279811978},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1605279811978},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1605279811978},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1605279811978},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1605279811978},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1605279811978},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1605279811978},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1605279811978},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1605279811978},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1605279811978},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1605279811978},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1605279811978},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1605279811978},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1605279811978},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1605279811978},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1605279811978},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1605279811978},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1605279811978},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1605279811978},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1605279811978},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1605279811978},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1605279811978},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1605279811978},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1605279811978},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1605279811978},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1605279811978},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1605279811978},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1605279811978},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1605279811978},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1605279811978},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1605279811978},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1605279811978},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1605279811978},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1605279811978},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1605279811978},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1605279811978},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1605279811978},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1605279811978},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1605279811978},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1605279811978},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1605279811978},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1605279811978},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1605279811978},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1605279811978},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1605279811978},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1605279811978},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1605279811978},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1605279811978},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1605279811978},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1605279811978},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1605279811978},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1605279811978}],"Category":[{"name":"歌曲","_id":"ckhg8rerf0001fw05498h316a"},{"name":"字符集编码","_id":"ckhg8tf260002mv0536637cq3"},{"name":"PHP","_id":"ckhg8tf2c0006mv05b75c60uq"},{"name":"算法","parent":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2n000mmv05a1lh12no"},{"name":"计算机杂项","parent":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2q000rmv05e90120g4"},{"name":"算法","_id":"ckhg8tf2t0010mv051m51c017"},{"name":"Redis","_id":"ckhg8tf3f002dmv054bh84h71"},{"name":"英语","_id":"ckhg8tf3i002mmv05fi0fb0j0"},{"name":"Linux","_id":"ckhg8tf3u003amv0594wf37v1"},{"name":"5G","_id":"ckhg8tf490047mv058j0p8qvo"},{"name":"NAT","_id":"ckhg8tf4d004fmv05g8dqetv9"},{"name":"TCP","_id":"ckhg8tf4g004lmv055o6a3iz7"},{"name":"TLS","_id":"ckhg8tf4j004smv051zvg0gon"},{"name":"Git","_id":"ckhg8tf4m004xmv054xsz0d69"},{"name":"Markdown","_id":"ckhg8tf4x0059mv05dfki4ue0"},{"name":"Phpstorm","_id":"ckhg8tf4z005hmv05gxf43s8t"},{"name":"正则表达式","_id":"ckhg8tf52005mmv051t2x8v8g"},{"name":"MySQL","_id":"ckhg8tf55005smv05ammt8qr4"},{"name":"设计模式","parent":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5a0067mv054vkvc983"},{"name":"Algorithms","_id":"ckhg8tf6600a5mv059xte870v"},{"name":"Http","_id":"ckhg8tf6g00atmv053028dzfn"},{"name":"国粹","_id":"ckhg8tf6g00avmv058r4d1jiz"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2020-11-13T12:53:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-11-13 20:53:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2020-11-13T12:58:21.305Z","path":"404.html","comments":1,"_id":"ckhgajfz3000032053v22c1w9","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-11-13T12:53:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-11-13 20:53:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-11-13T12:53:42.985Z","path":"about/index.html","comments":1,"_id":"ckhgajfz800013205hl35ft0h","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-11-13T12:52:12.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-13 20:52:12\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-11-13T12:52:48.935Z","path":"categories/index.html","comments":1,"_id":"ckhgajfz900023205d7bnbr7j","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-11-13T12:53:50.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-11-13 20:53:50\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-11-13T12:54:05.334Z","path":"contact/index.html","comments":1,"_id":"ckhgajfza00033205dzwtezos","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-11-13T12:56:39.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-11-13 20:56:39\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-11-13T12:56:55.125Z","path":"friends/index.html","comments":1,"_id":"ckhgajfza00043205fgo1as4w","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-11-13T12:53:05.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-11-13 20:53:05\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-11-13T12:53:20.989Z","path":"tags/index.html","comments":1,"_id":"ckhgajfzb0005320537cn3u78","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-11-12T13:30:24.738Z","updated":"2020-11-12T13:30:24.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhevhpp80000xk05hpq43n7z","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"url":"/2020/11/01/我能唱的歌.html","title":"我能唱的歌","keywords":"我能唱的歌","description":"我能唱的歌","date":"2020-11-01T04:29:21.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"# 我能唱的歌\n\n记录一些我能唱的歌、还有一直想唱确唱不好的歌，感觉好遗憾，不会唱粤语歌也遗憾。\n\n我还是喜欢那个老歌的人，伤感的歌曲，果然听音乐就知道是大叔级别了\n\n好吧，我承认我老了，唱歌没有以前那么有感觉了，可能是没有喜欢的人来听？\n\n记得高中时的音乐老师，拿着他的碟子给我们看，当时真的被惊艳到了，原来我也可以有偶像的！\n那是真的是喜欢他的歌，他的舞蹈，**Michael Jackson**，可惜不会唱他的歌，更遗憾的是没参加他演唱会。\n\n我不是麦霸哈~\n\n## 《流星雨》 F4\n\n看电视剧学会的？\n\n## 《秋天不回来》 王强\n\n初中经常听然后就会了吧\n\n## 《我的好兄弟》 高进、小沈阳\n\n兄弟们合唱不错\n\n## 《过火》 张信哲\n\n高三时超喜欢这首歌，唱了无数遍了\n\n## 《父亲》 筷子兄弟\n\n我能自己唱得流泪，鼻子好酸\n\n## 《小苹果》 筷子兄弟\n\n哈哈，这首要欢乐\n\n## 《朋友的酒》 李晓杰\n\n节奏蛮好的\n\n## 《再见》 张震岳\n\n有点伤感，也有情怀\n\n## 《等一分钟》 徐腾誉\n\n什么时候喜欢这首歌的呢？\n\n## 《天使的翅膀》 徐腾誉\n\n应该都是高中时的歌吧\n\n## 《分飞》 徐怀钰\n\n高中的一段时间经常唱\n\n## 《大海》 张雨生\n\n都是老歌咯\n\n## 《一千个伤心的理由》 张学友\n\n可以酝酿一下，感情来了\n\n## 《兄弟抱一下》 庞龙\n\n曾经的歌啊，真是让人伤感，再唱已是曲中人\n\n## 《拯救》 孙楠\n\n我要伴奏，一个人唱\n\n## 《你不是真正的快乐》 五月天\n\n这下是真的不快乐了\n\n## 《心太软》 任贤齐\n\n老歌老歌\n\n## 《挪威的森林》 伍佰\n\n没啥说的\n\n## 《冬天的秘密》 周传雄\n\n我会伤心吗？\n\n## 《关不上的窗》 周传雄\n\n不能多唱\n\n## 《黄昏》 周传雄\n\n伤感，感觉来了\n\n## 《我的心太乱》 周传雄\n\n这首歌我没怎么唱吧？\n\n## 《2002年的第一场雪》 刀郎\n\n初中时的歌，忘不了的吧！\n\n## 《冲动的惩罚》 刀郎\n\n也是喜欢唱的，现在还能一个人唱完吗？\n\n## 《冰雨》 刘德华\n\n会唱国语版的，还不错\n\n## 《谢谢你的爱》 刘德华\n\n哦豁，和舍友一起唱，不错不错\n\n## 《精忠报国》 屠洪刚\n\n这就有点激情了，请允许我站起来\n\n## 《听海》 张惠妹\n\n可能会伤心吧\n\n## 《天下》 张杰\n\n可以和我弟唱，非常不错的\n\n## 《剑心》 张杰\n\n可以和我弟唱，非常不错的\n\n## 《着魔》 张杰\n\n舍歌咯，一个人搞不定\n\n## 《逆战》 张杰\n\n一样一样，曾经的游戏生涯，高音真的唱不下去，不行了\n\n## 《画心》 张靓颖\n\n这个太低沉了，很少唱\n\n## 《相见恨晚》 彭佳慧\n\n我能唱出感情吗？\n\n## 《痴心绝对》 李圣杰\n\n好久没唱了。。。\n\n## 《窗外》\n\n小学会唱的歌？\n\n## 《小芳》\n\n小学会唱的歌？\n\n## 《单身情歌》 林志炫\n\n不想说了，这都单身二十几年，每次都说明年不要再唱了嘛，最后还是唱起这首歌\n\n## 《生日礼物》 江涛\n\n哦豁，可能代入感很强\n\n## 《你的承诺》 海明威\n\n应该也是高中时的歌\n\n## 《放生》 范逸臣\n\n我为啥会觉得伤心？！\n\n## 《水手》 郑智化\n\n有点辛酸的感觉\n\n## 《包容》 郑源\n\n伤感\n\n## 《别说我的眼泪你无所谓》 郑源\n\n伤感\n\n## 《死了都要爱》 阿信\n\n借我一副嗓子吧，我好想唱完，吃奶的力气\n\n## 《离歌》 阿信\n\n低沉+告辞把握节奏\n\n## 《天黑》 阿杜\n\n高中，买磁带听的\n\n## 《离别》 阿杜\n\n我还会唱吗？\n\n## 《一个人的冬天》 陈楚生\n\n还是伤感\n\n## 《有没有人曾告诉你》 陈楚生\n\n伤\n\n## 《西海情歌》 降央卓玛\n\n喜欢这个中性的声音\n\n## 《lydia》 飞儿乐团\n\n好像我听的都是音质不好的\n\n## 《该死的温柔》 马天宇\n\n。。。\n\n## 《千年等一回》 高胜美\n\n这是小学听过的歌，无疑\n\n## 《青青河边草》 高胜美\n\n这是小学听过的歌，无疑\n\n## 《没那么简单》 黄小琥\n\n感情真挚，唱出自己\n\n## 《白天不懂夜的黑》 黄小琥\n\n我有如此体会吗\n\n## 《相思》 毛阿敏\n\n曾经的《西游记后传》主题曲，现在听来，相当不错\n\n## 《问》 简弘亦\n\n曾经非常喜欢的一首歌，学了一段时间\n\n。。。忘咯\n\n","source":"_posts/我能唱的歌.md","raw":"---\nurl: /2020/11/01/我能唱的歌.html\ntitle: \"我能唱的歌\"\nkeywords: \"我能唱的歌\"\ndescription: \"我能唱的歌\"\ndate: 2020-11-01T20:29:21+08:00\ndraft: false\ntags: [\"歌曲\"]\ntags_weight: 100\ncategories: [\"歌曲\"]\ncategoryes_weight: 100\n\n---\n# 我能唱的歌\n\n记录一些我能唱的歌、还有一直想唱确唱不好的歌，感觉好遗憾，不会唱粤语歌也遗憾。\n\n我还是喜欢那个老歌的人，伤感的歌曲，果然听音乐就知道是大叔级别了\n\n好吧，我承认我老了，唱歌没有以前那么有感觉了，可能是没有喜欢的人来听？\n\n记得高中时的音乐老师，拿着他的碟子给我们看，当时真的被惊艳到了，原来我也可以有偶像的！\n那是真的是喜欢他的歌，他的舞蹈，**Michael Jackson**，可惜不会唱他的歌，更遗憾的是没参加他演唱会。\n\n我不是麦霸哈~\n\n## 《流星雨》 F4\n\n看电视剧学会的？\n\n## 《秋天不回来》 王强\n\n初中经常听然后就会了吧\n\n## 《我的好兄弟》 高进、小沈阳\n\n兄弟们合唱不错\n\n## 《过火》 张信哲\n\n高三时超喜欢这首歌，唱了无数遍了\n\n## 《父亲》 筷子兄弟\n\n我能自己唱得流泪，鼻子好酸\n\n## 《小苹果》 筷子兄弟\n\n哈哈，这首要欢乐\n\n## 《朋友的酒》 李晓杰\n\n节奏蛮好的\n\n## 《再见》 张震岳\n\n有点伤感，也有情怀\n\n## 《等一分钟》 徐腾誉\n\n什么时候喜欢这首歌的呢？\n\n## 《天使的翅膀》 徐腾誉\n\n应该都是高中时的歌吧\n\n## 《分飞》 徐怀钰\n\n高中的一段时间经常唱\n\n## 《大海》 张雨生\n\n都是老歌咯\n\n## 《一千个伤心的理由》 张学友\n\n可以酝酿一下，感情来了\n\n## 《兄弟抱一下》 庞龙\n\n曾经的歌啊，真是让人伤感，再唱已是曲中人\n\n## 《拯救》 孙楠\n\n我要伴奏，一个人唱\n\n## 《你不是真正的快乐》 五月天\n\n这下是真的不快乐了\n\n## 《心太软》 任贤齐\n\n老歌老歌\n\n## 《挪威的森林》 伍佰\n\n没啥说的\n\n## 《冬天的秘密》 周传雄\n\n我会伤心吗？\n\n## 《关不上的窗》 周传雄\n\n不能多唱\n\n## 《黄昏》 周传雄\n\n伤感，感觉来了\n\n## 《我的心太乱》 周传雄\n\n这首歌我没怎么唱吧？\n\n## 《2002年的第一场雪》 刀郎\n\n初中时的歌，忘不了的吧！\n\n## 《冲动的惩罚》 刀郎\n\n也是喜欢唱的，现在还能一个人唱完吗？\n\n## 《冰雨》 刘德华\n\n会唱国语版的，还不错\n\n## 《谢谢你的爱》 刘德华\n\n哦豁，和舍友一起唱，不错不错\n\n## 《精忠报国》 屠洪刚\n\n这就有点激情了，请允许我站起来\n\n## 《听海》 张惠妹\n\n可能会伤心吧\n\n## 《天下》 张杰\n\n可以和我弟唱，非常不错的\n\n## 《剑心》 张杰\n\n可以和我弟唱，非常不错的\n\n## 《着魔》 张杰\n\n舍歌咯，一个人搞不定\n\n## 《逆战》 张杰\n\n一样一样，曾经的游戏生涯，高音真的唱不下去，不行了\n\n## 《画心》 张靓颖\n\n这个太低沉了，很少唱\n\n## 《相见恨晚》 彭佳慧\n\n我能唱出感情吗？\n\n## 《痴心绝对》 李圣杰\n\n好久没唱了。。。\n\n## 《窗外》\n\n小学会唱的歌？\n\n## 《小芳》\n\n小学会唱的歌？\n\n## 《单身情歌》 林志炫\n\n不想说了，这都单身二十几年，每次都说明年不要再唱了嘛，最后还是唱起这首歌\n\n## 《生日礼物》 江涛\n\n哦豁，可能代入感很强\n\n## 《你的承诺》 海明威\n\n应该也是高中时的歌\n\n## 《放生》 范逸臣\n\n我为啥会觉得伤心？！\n\n## 《水手》 郑智化\n\n有点辛酸的感觉\n\n## 《包容》 郑源\n\n伤感\n\n## 《别说我的眼泪你无所谓》 郑源\n\n伤感\n\n## 《死了都要爱》 阿信\n\n借我一副嗓子吧，我好想唱完，吃奶的力气\n\n## 《离歌》 阿信\n\n低沉+告辞把握节奏\n\n## 《天黑》 阿杜\n\n高中，买磁带听的\n\n## 《离别》 阿杜\n\n我还会唱吗？\n\n## 《一个人的冬天》 陈楚生\n\n还是伤感\n\n## 《有没有人曾告诉你》 陈楚生\n\n伤\n\n## 《西海情歌》 降央卓玛\n\n喜欢这个中性的声音\n\n## 《lydia》 飞儿乐团\n\n好像我听的都是音质不好的\n\n## 《该死的温柔》 马天宇\n\n。。。\n\n## 《千年等一回》 高胜美\n\n这是小学听过的歌，无疑\n\n## 《青青河边草》 高胜美\n\n这是小学听过的歌，无疑\n\n## 《没那么简单》 黄小琥\n\n感情真挚，唱出自己\n\n## 《白天不懂夜的黑》 黄小琥\n\n我有如此体会吗\n\n## 《相思》 毛阿敏\n\n曾经的《西游记后传》主题曲，现在听来，相当不错\n\n## 《问》 简弘亦\n\n曾经非常喜欢的一首歌，学了一段时间\n\n。。。忘咯\n\n","slug":"我能唱的歌","published":1,"updated":"2020-11-01T14:37:51.000Z","_id":"ckhg8rer40000fw052gw344wn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"我能唱的歌\"><a href=\"#我能唱的歌\" class=\"headerlink\" title=\"我能唱的歌\"></a>我能唱的歌</h1><p>记录一些我能唱的歌、还有一直想唱确唱不好的歌，感觉好遗憾，不会唱粤语歌也遗憾。</p>\n<p>我还是喜欢那个老歌的人，伤感的歌曲，果然听音乐就知道是大叔级别了</p>\n<p>好吧，我承认我老了，唱歌没有以前那么有感觉了，可能是没有喜欢的人来听？</p>\n<p>记得高中时的音乐老师，拿着他的碟子给我们看，当时真的被惊艳到了，原来我也可以有偶像的！<br>那是真的是喜欢他的歌，他的舞蹈，<strong>Michael Jackson</strong>，可惜不会唱他的歌，更遗憾的是没参加他演唱会。</p>\n<p>我不是麦霸哈~</p>\n<h2 id=\"《流星雨》-F4\"><a href=\"#《流星雨》-F4\" class=\"headerlink\" title=\"《流星雨》 F4\"></a>《流星雨》 F4</h2><p>看电视剧学会的？</p>\n<h2 id=\"《秋天不回来》-王强\"><a href=\"#《秋天不回来》-王强\" class=\"headerlink\" title=\"《秋天不回来》 王强\"></a>《秋天不回来》 王强</h2><p>初中经常听然后就会了吧</p>\n<h2 id=\"《我的好兄弟》-高进、小沈阳\"><a href=\"#《我的好兄弟》-高进、小沈阳\" class=\"headerlink\" title=\"《我的好兄弟》 高进、小沈阳\"></a>《我的好兄弟》 高进、小沈阳</h2><p>兄弟们合唱不错</p>\n<h2 id=\"《过火》-张信哲\"><a href=\"#《过火》-张信哲\" class=\"headerlink\" title=\"《过火》 张信哲\"></a>《过火》 张信哲</h2><p>高三时超喜欢这首歌，唱了无数遍了</p>\n<h2 id=\"《父亲》-筷子兄弟\"><a href=\"#《父亲》-筷子兄弟\" class=\"headerlink\" title=\"《父亲》 筷子兄弟\"></a>《父亲》 筷子兄弟</h2><p>我能自己唱得流泪，鼻子好酸</p>\n<h2 id=\"《小苹果》-筷子兄弟\"><a href=\"#《小苹果》-筷子兄弟\" class=\"headerlink\" title=\"《小苹果》 筷子兄弟\"></a>《小苹果》 筷子兄弟</h2><p>哈哈，这首要欢乐</p>\n<h2 id=\"《朋友的酒》-李晓杰\"><a href=\"#《朋友的酒》-李晓杰\" class=\"headerlink\" title=\"《朋友的酒》 李晓杰\"></a>《朋友的酒》 李晓杰</h2><p>节奏蛮好的</p>\n<h2 id=\"《再见》-张震岳\"><a href=\"#《再见》-张震岳\" class=\"headerlink\" title=\"《再见》 张震岳\"></a>《再见》 张震岳</h2><p>有点伤感，也有情怀</p>\n<h2 id=\"《等一分钟》-徐腾誉\"><a href=\"#《等一分钟》-徐腾誉\" class=\"headerlink\" title=\"《等一分钟》 徐腾誉\"></a>《等一分钟》 徐腾誉</h2><p>什么时候喜欢这首歌的呢？</p>\n<h2 id=\"《天使的翅膀》-徐腾誉\"><a href=\"#《天使的翅膀》-徐腾誉\" class=\"headerlink\" title=\"《天使的翅膀》 徐腾誉\"></a>《天使的翅膀》 徐腾誉</h2><p>应该都是高中时的歌吧</p>\n<h2 id=\"《分飞》-徐怀钰\"><a href=\"#《分飞》-徐怀钰\" class=\"headerlink\" title=\"《分飞》 徐怀钰\"></a>《分飞》 徐怀钰</h2><p>高中的一段时间经常唱</p>\n<h2 id=\"《大海》-张雨生\"><a href=\"#《大海》-张雨生\" class=\"headerlink\" title=\"《大海》 张雨生\"></a>《大海》 张雨生</h2><p>都是老歌咯</p>\n<h2 id=\"《一千个伤心的理由》-张学友\"><a href=\"#《一千个伤心的理由》-张学友\" class=\"headerlink\" title=\"《一千个伤心的理由》 张学友\"></a>《一千个伤心的理由》 张学友</h2><p>可以酝酿一下，感情来了</p>\n<h2 id=\"《兄弟抱一下》-庞龙\"><a href=\"#《兄弟抱一下》-庞龙\" class=\"headerlink\" title=\"《兄弟抱一下》 庞龙\"></a>《兄弟抱一下》 庞龙</h2><p>曾经的歌啊，真是让人伤感，再唱已是曲中人</p>\n<h2 id=\"《拯救》-孙楠\"><a href=\"#《拯救》-孙楠\" class=\"headerlink\" title=\"《拯救》 孙楠\"></a>《拯救》 孙楠</h2><p>我要伴奏，一个人唱</p>\n<h2 id=\"《你不是真正的快乐》-五月天\"><a href=\"#《你不是真正的快乐》-五月天\" class=\"headerlink\" title=\"《你不是真正的快乐》 五月天\"></a>《你不是真正的快乐》 五月天</h2><p>这下是真的不快乐了</p>\n<h2 id=\"《心太软》-任贤齐\"><a href=\"#《心太软》-任贤齐\" class=\"headerlink\" title=\"《心太软》 任贤齐\"></a>《心太软》 任贤齐</h2><p>老歌老歌</p>\n<h2 id=\"《挪威的森林》-伍佰\"><a href=\"#《挪威的森林》-伍佰\" class=\"headerlink\" title=\"《挪威的森林》 伍佰\"></a>《挪威的森林》 伍佰</h2><p>没啥说的</p>\n<h2 id=\"《冬天的秘密》-周传雄\"><a href=\"#《冬天的秘密》-周传雄\" class=\"headerlink\" title=\"《冬天的秘密》 周传雄\"></a>《冬天的秘密》 周传雄</h2><p>我会伤心吗？</p>\n<h2 id=\"《关不上的窗》-周传雄\"><a href=\"#《关不上的窗》-周传雄\" class=\"headerlink\" title=\"《关不上的窗》 周传雄\"></a>《关不上的窗》 周传雄</h2><p>不能多唱</p>\n<h2 id=\"《黄昏》-周传雄\"><a href=\"#《黄昏》-周传雄\" class=\"headerlink\" title=\"《黄昏》 周传雄\"></a>《黄昏》 周传雄</h2><p>伤感，感觉来了</p>\n<h2 id=\"《我的心太乱》-周传雄\"><a href=\"#《我的心太乱》-周传雄\" class=\"headerlink\" title=\"《我的心太乱》 周传雄\"></a>《我的心太乱》 周传雄</h2><p>这首歌我没怎么唱吧？</p>\n<h2 id=\"《2002年的第一场雪》-刀郎\"><a href=\"#《2002年的第一场雪》-刀郎\" class=\"headerlink\" title=\"《2002年的第一场雪》 刀郎\"></a>《2002年的第一场雪》 刀郎</h2><p>初中时的歌，忘不了的吧！</p>\n<h2 id=\"《冲动的惩罚》-刀郎\"><a href=\"#《冲动的惩罚》-刀郎\" class=\"headerlink\" title=\"《冲动的惩罚》 刀郎\"></a>《冲动的惩罚》 刀郎</h2><p>也是喜欢唱的，现在还能一个人唱完吗？</p>\n<h2 id=\"《冰雨》-刘德华\"><a href=\"#《冰雨》-刘德华\" class=\"headerlink\" title=\"《冰雨》 刘德华\"></a>《冰雨》 刘德华</h2><p>会唱国语版的，还不错</p>\n<h2 id=\"《谢谢你的爱》-刘德华\"><a href=\"#《谢谢你的爱》-刘德华\" class=\"headerlink\" title=\"《谢谢你的爱》 刘德华\"></a>《谢谢你的爱》 刘德华</h2><p>哦豁，和舍友一起唱，不错不错</p>\n<h2 id=\"《精忠报国》-屠洪刚\"><a href=\"#《精忠报国》-屠洪刚\" class=\"headerlink\" title=\"《精忠报国》 屠洪刚\"></a>《精忠报国》 屠洪刚</h2><p>这就有点激情了，请允许我站起来</p>\n<h2 id=\"《听海》-张惠妹\"><a href=\"#《听海》-张惠妹\" class=\"headerlink\" title=\"《听海》 张惠妹\"></a>《听海》 张惠妹</h2><p>可能会伤心吧</p>\n<h2 id=\"《天下》-张杰\"><a href=\"#《天下》-张杰\" class=\"headerlink\" title=\"《天下》 张杰\"></a>《天下》 张杰</h2><p>可以和我弟唱，非常不错的</p>\n<h2 id=\"《剑心》-张杰\"><a href=\"#《剑心》-张杰\" class=\"headerlink\" title=\"《剑心》 张杰\"></a>《剑心》 张杰</h2><p>可以和我弟唱，非常不错的</p>\n<h2 id=\"《着魔》-张杰\"><a href=\"#《着魔》-张杰\" class=\"headerlink\" title=\"《着魔》 张杰\"></a>《着魔》 张杰</h2><p>舍歌咯，一个人搞不定</p>\n<h2 id=\"《逆战》-张杰\"><a href=\"#《逆战》-张杰\" class=\"headerlink\" title=\"《逆战》 张杰\"></a>《逆战》 张杰</h2><p>一样一样，曾经的游戏生涯，高音真的唱不下去，不行了</p>\n<h2 id=\"《画心》-张靓颖\"><a href=\"#《画心》-张靓颖\" class=\"headerlink\" title=\"《画心》 张靓颖\"></a>《画心》 张靓颖</h2><p>这个太低沉了，很少唱</p>\n<h2 id=\"《相见恨晚》-彭佳慧\"><a href=\"#《相见恨晚》-彭佳慧\" class=\"headerlink\" title=\"《相见恨晚》 彭佳慧\"></a>《相见恨晚》 彭佳慧</h2><p>我能唱出感情吗？</p>\n<h2 id=\"《痴心绝对》-李圣杰\"><a href=\"#《痴心绝对》-李圣杰\" class=\"headerlink\" title=\"《痴心绝对》 李圣杰\"></a>《痴心绝对》 李圣杰</h2><p>好久没唱了。。。</p>\n<h2 id=\"《窗外》\"><a href=\"#《窗外》\" class=\"headerlink\" title=\"《窗外》\"></a>《窗外》</h2><p>小学会唱的歌？</p>\n<h2 id=\"《小芳》\"><a href=\"#《小芳》\" class=\"headerlink\" title=\"《小芳》\"></a>《小芳》</h2><p>小学会唱的歌？</p>\n<h2 id=\"《单身情歌》-林志炫\"><a href=\"#《单身情歌》-林志炫\" class=\"headerlink\" title=\"《单身情歌》 林志炫\"></a>《单身情歌》 林志炫</h2><p>不想说了，这都单身二十几年，每次都说明年不要再唱了嘛，最后还是唱起这首歌</p>\n<h2 id=\"《生日礼物》-江涛\"><a href=\"#《生日礼物》-江涛\" class=\"headerlink\" title=\"《生日礼物》 江涛\"></a>《生日礼物》 江涛</h2><p>哦豁，可能代入感很强</p>\n<h2 id=\"《你的承诺》-海明威\"><a href=\"#《你的承诺》-海明威\" class=\"headerlink\" title=\"《你的承诺》 海明威\"></a>《你的承诺》 海明威</h2><p>应该也是高中时的歌</p>\n<h2 id=\"《放生》-范逸臣\"><a href=\"#《放生》-范逸臣\" class=\"headerlink\" title=\"《放生》 范逸臣\"></a>《放生》 范逸臣</h2><p>我为啥会觉得伤心？！</p>\n<h2 id=\"《水手》-郑智化\"><a href=\"#《水手》-郑智化\" class=\"headerlink\" title=\"《水手》 郑智化\"></a>《水手》 郑智化</h2><p>有点辛酸的感觉</p>\n<h2 id=\"《包容》-郑源\"><a href=\"#《包容》-郑源\" class=\"headerlink\" title=\"《包容》 郑源\"></a>《包容》 郑源</h2><p>伤感</p>\n<h2 id=\"《别说我的眼泪你无所谓》-郑源\"><a href=\"#《别说我的眼泪你无所谓》-郑源\" class=\"headerlink\" title=\"《别说我的眼泪你无所谓》 郑源\"></a>《别说我的眼泪你无所谓》 郑源</h2><p>伤感</p>\n<h2 id=\"《死了都要爱》-阿信\"><a href=\"#《死了都要爱》-阿信\" class=\"headerlink\" title=\"《死了都要爱》 阿信\"></a>《死了都要爱》 阿信</h2><p>借我一副嗓子吧，我好想唱完，吃奶的力气</p>\n<h2 id=\"《离歌》-阿信\"><a href=\"#《离歌》-阿信\" class=\"headerlink\" title=\"《离歌》 阿信\"></a>《离歌》 阿信</h2><p>低沉+告辞把握节奏</p>\n<h2 id=\"《天黑》-阿杜\"><a href=\"#《天黑》-阿杜\" class=\"headerlink\" title=\"《天黑》 阿杜\"></a>《天黑》 阿杜</h2><p>高中，买磁带听的</p>\n<h2 id=\"《离别》-阿杜\"><a href=\"#《离别》-阿杜\" class=\"headerlink\" title=\"《离别》 阿杜\"></a>《离别》 阿杜</h2><p>我还会唱吗？</p>\n<h2 id=\"《一个人的冬天》-陈楚生\"><a href=\"#《一个人的冬天》-陈楚生\" class=\"headerlink\" title=\"《一个人的冬天》 陈楚生\"></a>《一个人的冬天》 陈楚生</h2><p>还是伤感</p>\n<h2 id=\"《有没有人曾告诉你》-陈楚生\"><a href=\"#《有没有人曾告诉你》-陈楚生\" class=\"headerlink\" title=\"《有没有人曾告诉你》 陈楚生\"></a>《有没有人曾告诉你》 陈楚生</h2><p>伤</p>\n<h2 id=\"《西海情歌》-降央卓玛\"><a href=\"#《西海情歌》-降央卓玛\" class=\"headerlink\" title=\"《西海情歌》 降央卓玛\"></a>《西海情歌》 降央卓玛</h2><p>喜欢这个中性的声音</p>\n<h2 id=\"《lydia》-飞儿乐团\"><a href=\"#《lydia》-飞儿乐团\" class=\"headerlink\" title=\"《lydia》 飞儿乐团\"></a>《lydia》 飞儿乐团</h2><p>好像我听的都是音质不好的</p>\n<h2 id=\"《该死的温柔》-马天宇\"><a href=\"#《该死的温柔》-马天宇\" class=\"headerlink\" title=\"《该死的温柔》 马天宇\"></a>《该死的温柔》 马天宇</h2><p>。。。</p>\n<h2 id=\"《千年等一回》-高胜美\"><a href=\"#《千年等一回》-高胜美\" class=\"headerlink\" title=\"《千年等一回》 高胜美\"></a>《千年等一回》 高胜美</h2><p>这是小学听过的歌，无疑</p>\n<h2 id=\"《青青河边草》-高胜美\"><a href=\"#《青青河边草》-高胜美\" class=\"headerlink\" title=\"《青青河边草》 高胜美\"></a>《青青河边草》 高胜美</h2><p>这是小学听过的歌，无疑</p>\n<h2 id=\"《没那么简单》-黄小琥\"><a href=\"#《没那么简单》-黄小琥\" class=\"headerlink\" title=\"《没那么简单》 黄小琥\"></a>《没那么简单》 黄小琥</h2><p>感情真挚，唱出自己</p>\n<h2 id=\"《白天不懂夜的黑》-黄小琥\"><a href=\"#《白天不懂夜的黑》-黄小琥\" class=\"headerlink\" title=\"《白天不懂夜的黑》 黄小琥\"></a>《白天不懂夜的黑》 黄小琥</h2><p>我有如此体会吗</p>\n<h2 id=\"《相思》-毛阿敏\"><a href=\"#《相思》-毛阿敏\" class=\"headerlink\" title=\"《相思》 毛阿敏\"></a>《相思》 毛阿敏</h2><p>曾经的《西游记后传》主题曲，现在听来，相当不错</p>\n<h2 id=\"《问》-简弘亦\"><a href=\"#《问》-简弘亦\" class=\"headerlink\" title=\"《问》 简弘亦\"></a>《问》 简弘亦</h2><p>曾经非常喜欢的一首歌，学了一段时间</p>\n<p>。。。忘咯</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我能唱的歌\"><a href=\"#我能唱的歌\" class=\"headerlink\" title=\"我能唱的歌\"></a>我能唱的歌</h1><p>记录一些我能唱的歌、还有一直想唱确唱不好的歌，感觉好遗憾，不会唱粤语歌也遗憾。</p>\n<p>我还是喜欢那个老歌的人，伤感的歌曲，果然听音乐就知道是大叔级别了</p>\n<p>好吧，我承认我老了，唱歌没有以前那么有感觉了，可能是没有喜欢的人来听？</p>\n<p>记得高中时的音乐老师，拿着他的碟子给我们看，当时真的被惊艳到了，原来我也可以有偶像的！<br>那是真的是喜欢他的歌，他的舞蹈，<strong>Michael Jackson</strong>，可惜不会唱他的歌，更遗憾的是没参加他演唱会。</p>\n<p>我不是麦霸哈~</p>\n<h2 id=\"《流星雨》-F4\"><a href=\"#《流星雨》-F4\" class=\"headerlink\" title=\"《流星雨》 F4\"></a>《流星雨》 F4</h2><p>看电视剧学会的？</p>\n<h2 id=\"《秋天不回来》-王强\"><a href=\"#《秋天不回来》-王强\" class=\"headerlink\" title=\"《秋天不回来》 王强\"></a>《秋天不回来》 王强</h2><p>初中经常听然后就会了吧</p>\n<h2 id=\"《我的好兄弟》-高进、小沈阳\"><a href=\"#《我的好兄弟》-高进、小沈阳\" class=\"headerlink\" title=\"《我的好兄弟》 高进、小沈阳\"></a>《我的好兄弟》 高进、小沈阳</h2><p>兄弟们合唱不错</p>\n<h2 id=\"《过火》-张信哲\"><a href=\"#《过火》-张信哲\" class=\"headerlink\" title=\"《过火》 张信哲\"></a>《过火》 张信哲</h2><p>高三时超喜欢这首歌，唱了无数遍了</p>\n<h2 id=\"《父亲》-筷子兄弟\"><a href=\"#《父亲》-筷子兄弟\" class=\"headerlink\" title=\"《父亲》 筷子兄弟\"></a>《父亲》 筷子兄弟</h2><p>我能自己唱得流泪，鼻子好酸</p>\n<h2 id=\"《小苹果》-筷子兄弟\"><a href=\"#《小苹果》-筷子兄弟\" class=\"headerlink\" title=\"《小苹果》 筷子兄弟\"></a>《小苹果》 筷子兄弟</h2><p>哈哈，这首要欢乐</p>\n<h2 id=\"《朋友的酒》-李晓杰\"><a href=\"#《朋友的酒》-李晓杰\" class=\"headerlink\" title=\"《朋友的酒》 李晓杰\"></a>《朋友的酒》 李晓杰</h2><p>节奏蛮好的</p>\n<h2 id=\"《再见》-张震岳\"><a href=\"#《再见》-张震岳\" class=\"headerlink\" title=\"《再见》 张震岳\"></a>《再见》 张震岳</h2><p>有点伤感，也有情怀</p>\n<h2 id=\"《等一分钟》-徐腾誉\"><a href=\"#《等一分钟》-徐腾誉\" class=\"headerlink\" title=\"《等一分钟》 徐腾誉\"></a>《等一分钟》 徐腾誉</h2><p>什么时候喜欢这首歌的呢？</p>\n<h2 id=\"《天使的翅膀》-徐腾誉\"><a href=\"#《天使的翅膀》-徐腾誉\" class=\"headerlink\" title=\"《天使的翅膀》 徐腾誉\"></a>《天使的翅膀》 徐腾誉</h2><p>应该都是高中时的歌吧</p>\n<h2 id=\"《分飞》-徐怀钰\"><a href=\"#《分飞》-徐怀钰\" class=\"headerlink\" title=\"《分飞》 徐怀钰\"></a>《分飞》 徐怀钰</h2><p>高中的一段时间经常唱</p>\n<h2 id=\"《大海》-张雨生\"><a href=\"#《大海》-张雨生\" class=\"headerlink\" title=\"《大海》 张雨生\"></a>《大海》 张雨生</h2><p>都是老歌咯</p>\n<h2 id=\"《一千个伤心的理由》-张学友\"><a href=\"#《一千个伤心的理由》-张学友\" class=\"headerlink\" title=\"《一千个伤心的理由》 张学友\"></a>《一千个伤心的理由》 张学友</h2><p>可以酝酿一下，感情来了</p>\n<h2 id=\"《兄弟抱一下》-庞龙\"><a href=\"#《兄弟抱一下》-庞龙\" class=\"headerlink\" title=\"《兄弟抱一下》 庞龙\"></a>《兄弟抱一下》 庞龙</h2><p>曾经的歌啊，真是让人伤感，再唱已是曲中人</p>\n<h2 id=\"《拯救》-孙楠\"><a href=\"#《拯救》-孙楠\" class=\"headerlink\" title=\"《拯救》 孙楠\"></a>《拯救》 孙楠</h2><p>我要伴奏，一个人唱</p>\n<h2 id=\"《你不是真正的快乐》-五月天\"><a href=\"#《你不是真正的快乐》-五月天\" class=\"headerlink\" title=\"《你不是真正的快乐》 五月天\"></a>《你不是真正的快乐》 五月天</h2><p>这下是真的不快乐了</p>\n<h2 id=\"《心太软》-任贤齐\"><a href=\"#《心太软》-任贤齐\" class=\"headerlink\" title=\"《心太软》 任贤齐\"></a>《心太软》 任贤齐</h2><p>老歌老歌</p>\n<h2 id=\"《挪威的森林》-伍佰\"><a href=\"#《挪威的森林》-伍佰\" class=\"headerlink\" title=\"《挪威的森林》 伍佰\"></a>《挪威的森林》 伍佰</h2><p>没啥说的</p>\n<h2 id=\"《冬天的秘密》-周传雄\"><a href=\"#《冬天的秘密》-周传雄\" class=\"headerlink\" title=\"《冬天的秘密》 周传雄\"></a>《冬天的秘密》 周传雄</h2><p>我会伤心吗？</p>\n<h2 id=\"《关不上的窗》-周传雄\"><a href=\"#《关不上的窗》-周传雄\" class=\"headerlink\" title=\"《关不上的窗》 周传雄\"></a>《关不上的窗》 周传雄</h2><p>不能多唱</p>\n<h2 id=\"《黄昏》-周传雄\"><a href=\"#《黄昏》-周传雄\" class=\"headerlink\" title=\"《黄昏》 周传雄\"></a>《黄昏》 周传雄</h2><p>伤感，感觉来了</p>\n<h2 id=\"《我的心太乱》-周传雄\"><a href=\"#《我的心太乱》-周传雄\" class=\"headerlink\" title=\"《我的心太乱》 周传雄\"></a>《我的心太乱》 周传雄</h2><p>这首歌我没怎么唱吧？</p>\n<h2 id=\"《2002年的第一场雪》-刀郎\"><a href=\"#《2002年的第一场雪》-刀郎\" class=\"headerlink\" title=\"《2002年的第一场雪》 刀郎\"></a>《2002年的第一场雪》 刀郎</h2><p>初中时的歌，忘不了的吧！</p>\n<h2 id=\"《冲动的惩罚》-刀郎\"><a href=\"#《冲动的惩罚》-刀郎\" class=\"headerlink\" title=\"《冲动的惩罚》 刀郎\"></a>《冲动的惩罚》 刀郎</h2><p>也是喜欢唱的，现在还能一个人唱完吗？</p>\n<h2 id=\"《冰雨》-刘德华\"><a href=\"#《冰雨》-刘德华\" class=\"headerlink\" title=\"《冰雨》 刘德华\"></a>《冰雨》 刘德华</h2><p>会唱国语版的，还不错</p>\n<h2 id=\"《谢谢你的爱》-刘德华\"><a href=\"#《谢谢你的爱》-刘德华\" class=\"headerlink\" title=\"《谢谢你的爱》 刘德华\"></a>《谢谢你的爱》 刘德华</h2><p>哦豁，和舍友一起唱，不错不错</p>\n<h2 id=\"《精忠报国》-屠洪刚\"><a href=\"#《精忠报国》-屠洪刚\" class=\"headerlink\" title=\"《精忠报国》 屠洪刚\"></a>《精忠报国》 屠洪刚</h2><p>这就有点激情了，请允许我站起来</p>\n<h2 id=\"《听海》-张惠妹\"><a href=\"#《听海》-张惠妹\" class=\"headerlink\" title=\"《听海》 张惠妹\"></a>《听海》 张惠妹</h2><p>可能会伤心吧</p>\n<h2 id=\"《天下》-张杰\"><a href=\"#《天下》-张杰\" class=\"headerlink\" title=\"《天下》 张杰\"></a>《天下》 张杰</h2><p>可以和我弟唱，非常不错的</p>\n<h2 id=\"《剑心》-张杰\"><a href=\"#《剑心》-张杰\" class=\"headerlink\" title=\"《剑心》 张杰\"></a>《剑心》 张杰</h2><p>可以和我弟唱，非常不错的</p>\n<h2 id=\"《着魔》-张杰\"><a href=\"#《着魔》-张杰\" class=\"headerlink\" title=\"《着魔》 张杰\"></a>《着魔》 张杰</h2><p>舍歌咯，一个人搞不定</p>\n<h2 id=\"《逆战》-张杰\"><a href=\"#《逆战》-张杰\" class=\"headerlink\" title=\"《逆战》 张杰\"></a>《逆战》 张杰</h2><p>一样一样，曾经的游戏生涯，高音真的唱不下去，不行了</p>\n<h2 id=\"《画心》-张靓颖\"><a href=\"#《画心》-张靓颖\" class=\"headerlink\" title=\"《画心》 张靓颖\"></a>《画心》 张靓颖</h2><p>这个太低沉了，很少唱</p>\n<h2 id=\"《相见恨晚》-彭佳慧\"><a href=\"#《相见恨晚》-彭佳慧\" class=\"headerlink\" title=\"《相见恨晚》 彭佳慧\"></a>《相见恨晚》 彭佳慧</h2><p>我能唱出感情吗？</p>\n<h2 id=\"《痴心绝对》-李圣杰\"><a href=\"#《痴心绝对》-李圣杰\" class=\"headerlink\" title=\"《痴心绝对》 李圣杰\"></a>《痴心绝对》 李圣杰</h2><p>好久没唱了。。。</p>\n<h2 id=\"《窗外》\"><a href=\"#《窗外》\" class=\"headerlink\" title=\"《窗外》\"></a>《窗外》</h2><p>小学会唱的歌？</p>\n<h2 id=\"《小芳》\"><a href=\"#《小芳》\" class=\"headerlink\" title=\"《小芳》\"></a>《小芳》</h2><p>小学会唱的歌？</p>\n<h2 id=\"《单身情歌》-林志炫\"><a href=\"#《单身情歌》-林志炫\" class=\"headerlink\" title=\"《单身情歌》 林志炫\"></a>《单身情歌》 林志炫</h2><p>不想说了，这都单身二十几年，每次都说明年不要再唱了嘛，最后还是唱起这首歌</p>\n<h2 id=\"《生日礼物》-江涛\"><a href=\"#《生日礼物》-江涛\" class=\"headerlink\" title=\"《生日礼物》 江涛\"></a>《生日礼物》 江涛</h2><p>哦豁，可能代入感很强</p>\n<h2 id=\"《你的承诺》-海明威\"><a href=\"#《你的承诺》-海明威\" class=\"headerlink\" title=\"《你的承诺》 海明威\"></a>《你的承诺》 海明威</h2><p>应该也是高中时的歌</p>\n<h2 id=\"《放生》-范逸臣\"><a href=\"#《放生》-范逸臣\" class=\"headerlink\" title=\"《放生》 范逸臣\"></a>《放生》 范逸臣</h2><p>我为啥会觉得伤心？！</p>\n<h2 id=\"《水手》-郑智化\"><a href=\"#《水手》-郑智化\" class=\"headerlink\" title=\"《水手》 郑智化\"></a>《水手》 郑智化</h2><p>有点辛酸的感觉</p>\n<h2 id=\"《包容》-郑源\"><a href=\"#《包容》-郑源\" class=\"headerlink\" title=\"《包容》 郑源\"></a>《包容》 郑源</h2><p>伤感</p>\n<h2 id=\"《别说我的眼泪你无所谓》-郑源\"><a href=\"#《别说我的眼泪你无所谓》-郑源\" class=\"headerlink\" title=\"《别说我的眼泪你无所谓》 郑源\"></a>《别说我的眼泪你无所谓》 郑源</h2><p>伤感</p>\n<h2 id=\"《死了都要爱》-阿信\"><a href=\"#《死了都要爱》-阿信\" class=\"headerlink\" title=\"《死了都要爱》 阿信\"></a>《死了都要爱》 阿信</h2><p>借我一副嗓子吧，我好想唱完，吃奶的力气</p>\n<h2 id=\"《离歌》-阿信\"><a href=\"#《离歌》-阿信\" class=\"headerlink\" title=\"《离歌》 阿信\"></a>《离歌》 阿信</h2><p>低沉+告辞把握节奏</p>\n<h2 id=\"《天黑》-阿杜\"><a href=\"#《天黑》-阿杜\" class=\"headerlink\" title=\"《天黑》 阿杜\"></a>《天黑》 阿杜</h2><p>高中，买磁带听的</p>\n<h2 id=\"《离别》-阿杜\"><a href=\"#《离别》-阿杜\" class=\"headerlink\" title=\"《离别》 阿杜\"></a>《离别》 阿杜</h2><p>我还会唱吗？</p>\n<h2 id=\"《一个人的冬天》-陈楚生\"><a href=\"#《一个人的冬天》-陈楚生\" class=\"headerlink\" title=\"《一个人的冬天》 陈楚生\"></a>《一个人的冬天》 陈楚生</h2><p>还是伤感</p>\n<h2 id=\"《有没有人曾告诉你》-陈楚生\"><a href=\"#《有没有人曾告诉你》-陈楚生\" class=\"headerlink\" title=\"《有没有人曾告诉你》 陈楚生\"></a>《有没有人曾告诉你》 陈楚生</h2><p>伤</p>\n<h2 id=\"《西海情歌》-降央卓玛\"><a href=\"#《西海情歌》-降央卓玛\" class=\"headerlink\" title=\"《西海情歌》 降央卓玛\"></a>《西海情歌》 降央卓玛</h2><p>喜欢这个中性的声音</p>\n<h2 id=\"《lydia》-飞儿乐团\"><a href=\"#《lydia》-飞儿乐团\" class=\"headerlink\" title=\"《lydia》 飞儿乐团\"></a>《lydia》 飞儿乐团</h2><p>好像我听的都是音质不好的</p>\n<h2 id=\"《该死的温柔》-马天宇\"><a href=\"#《该死的温柔》-马天宇\" class=\"headerlink\" title=\"《该死的温柔》 马天宇\"></a>《该死的温柔》 马天宇</h2><p>。。。</p>\n<h2 id=\"《千年等一回》-高胜美\"><a href=\"#《千年等一回》-高胜美\" class=\"headerlink\" title=\"《千年等一回》 高胜美\"></a>《千年等一回》 高胜美</h2><p>这是小学听过的歌，无疑</p>\n<h2 id=\"《青青河边草》-高胜美\"><a href=\"#《青青河边草》-高胜美\" class=\"headerlink\" title=\"《青青河边草》 高胜美\"></a>《青青河边草》 高胜美</h2><p>这是小学听过的歌，无疑</p>\n<h2 id=\"《没那么简单》-黄小琥\"><a href=\"#《没那么简单》-黄小琥\" class=\"headerlink\" title=\"《没那么简单》 黄小琥\"></a>《没那么简单》 黄小琥</h2><p>感情真挚，唱出自己</p>\n<h2 id=\"《白天不懂夜的黑》-黄小琥\"><a href=\"#《白天不懂夜的黑》-黄小琥\" class=\"headerlink\" title=\"《白天不懂夜的黑》 黄小琥\"></a>《白天不懂夜的黑》 黄小琥</h2><p>我有如此体会吗</p>\n<h2 id=\"《相思》-毛阿敏\"><a href=\"#《相思》-毛阿敏\" class=\"headerlink\" title=\"《相思》 毛阿敏\"></a>《相思》 毛阿敏</h2><p>曾经的《西游记后传》主题曲，现在听来，相当不错</p>\n<h2 id=\"《问》-简弘亦\"><a href=\"#《问》-简弘亦\" class=\"headerlink\" title=\"《问》 简弘亦\"></a>《问》 简弘亦</h2><p>曾经非常喜欢的一首歌，学了一段时间</p>\n<p>。。。忘咯</p>\n"},{"url":"/2020/05/11/charset.html","title":"字符集和字符集编码","date":"2020-05-12T02:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"type":"reprinted","_content":"\n本文转载自 [cenalulu http://cenalulu.github.io/linux/character-encoding/](http://cenalulu.github.io/linux/character-encoding/)\n\n## 什么是字符集\n\n在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。\n那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老板的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。\n于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。 \n那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？\n很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。\n于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 \n\n说了那么多我们来看一个实际例子，下面就是`屌`这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？\n\n字符集|16进制编码|对应的二进制数据\n---|---|---\nUTF-8|0xE5B18C|1110 0101 1011 0001 1000 1100\nUTF-16|0x5C4C|1011 1000 1001 1000\nGBK|0x8CC5|1000 1100 1100 0101\n\n## 什么是字符编码\n\n字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。\n对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。\n\n其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。\n编码字符集，即用一个编码值`code point`来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。\n一般来说都会直接将`code point`的值作为编码后的值直接存储。例如在`ASCII`中`A`在表中排第65位，而编码后`A`的数值是`0100 0001`也即十进制的65的二进制转换结果。\n \n看到这里，可能很多读者都会有和我当初一样的疑问：`字库表`和`编码字符集`看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。\n为什么还要多此一举通过`字符编码`把序号转换成另外一种存储格式呢？\n\n其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。\n例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的`ASCII`字库表就能满足基本需求。\n而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。\n算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。\n虽然现在硬盘或者内存都很廉价，但是在网络传输中，这个问题就凸显出来了，你可以这样想想，本来1M的带宽在ANSI下可以代表1024*1024个字符，但是在Unicode下却只能代表1024*1024/2个字符。\n也就是1MB/s的带宽只能等价于512KB/s，这个很可怕啊。所以为了解决符号在网络中传输的浪费问题，于是就出现了UTF-8这样的变长编码`Unicode transfer format -8`，后面的8代表是以8位二进制为单位来传输符号的\n在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。\n\n## 字符编码发展史\n\n- 美国人首先对其英文字符进行了编码，也就是最早的`ASCII`码，用一个字节的低7位来表示英文的128个字符，高1位统一为0；\n\n- 后来欧洲人发现你这128位哪够用，比如法国人字母上面的还有注音符，这个怎么区分，得，把高1位编进来吧，这样欧洲普遍使用一个全字节进行编码，最多可表示256位。\n\n- 但是即使位数少，不同国家地区用不同的字符编码，虽然0--127表示的符号是一样的，但是128--255这一段的解释完全乱套了，即使2进制完全一样，表示的字符完全不一样，比如135在法语，希伯来语，俄语编码中完全是不同的符号；\n\n- 更麻烦的是，电脑传到中国后，我们发现我们有10万多个汉字，你们欧美这256字塞牙缝都不够。于是就发明了GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字，最多可以表示65536个汉字字符，这样就不难理解有些汉字你在新华字典里查得到，但是电脑上如果不处理一下你是显示不出来的了吧；\n\n- 这下各用各的字符集编码，这世界咋统一？俄国人发封email给中国人，两边字符集编码不同，显示都是乱码啊。为了统一，于是就发明了Unicode，将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，现在unicode可以容纳100多万个符号，每个符号的编码都不一样，这下可统一了，所有语言都可以互通，一个网页页面里可以同时显示各国文字。\n\n- 然而，unicode虽然统一了全世界字符的二进制编码，但没有规定如何存储啊，亲。x86和amd体系结构的电脑小端序和大端序都分不清，别提计算机如何识别到底是Unicode还是ASCII了。如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，文本文件的大小会因此大出二三倍，这对于存储来说是极大的浪费。这样导致一个后果：出现了Unicode的多种存储方式。\n\n- 互联网的兴起，网页上要显示各种字符，必须统一啊，UTF-8就是Unicode最重要的实现方式之一。另外还有UTF-16、UTF-32等。UTF-8不是固定字长编码的，而是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。\n\n## UTF-8和Unicode的关系\n\n看完上面的概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。\n随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。\n详见：[Unicode on Wikipedia](https://en.wikipedia.org/wiki/Unicode)。Unicode的编号从`0000`开始一直到`10FFFF`共分为17个Plane，每个Plane中有65536个字符。\n\n而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。\n\n## UTF-8编码简介\n\n为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 \n\nUTF-8编码为变长编码。最小编码单位（`code unit`）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。\n\n1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。\n\n2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头\n\n3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头\n\n4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。\n\n具体每个字节的特征可见下表，其中`x`代表序号部分，把各个字节中的所有`x`部分拼接在一起就组成了在Unicode字库中的序号\n\nByte 1|Byte 2|Byte 3\n---|---|---\n0xxx xxxx||\n110x xxxx|10xx xxxx|\n1110 xxxx|10xx xxxx|10xx xxxx\n\n我们分别看三个从一个字节到三个字节的UTF-8编码例子：\n\n实际字符|在Unicode字库序号的十六进制|在Unicode字库序号的二进制|UTF-8编码后的二进制|UTF-8编码后的十六进制\n---|---|---|---|---\n$|0024|010 0100|0010 0100|24\n¢|00A2|000 1010 0010|1100 0010 1010 0010|C2 A2\n€|20AC|0010 0000 1010 1100|1110 0010 1000 0010 1010 1100|E2 82 AC\n\n细心的读者不难从以上的简单介绍中得出以下规律：\n\n1. 3个字节的UTF-8十六进制编码一定是以`E`开头的\n\n2. 2个字节的UTF-8十六进制编码一定是以`C`或`D`开头的\n\n3. 1个字节的UTF-8十六进制编码一定是以比`8`小的数字开头的\n\n## 为什么会出现乱码\n\n`乱码`也就是英文常说的`mojibake`（由日语的`文字化け`音译）。 简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。\n对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了`bless`（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是`受伤`（解码过程）。\n这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。\n由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。\n \n我们来看一个例子：假设我们用UTF-8编码存储`很屌`两个字，会有如下转换：\n\n字符|UTF-8编码后的十六进制\n---|---\n很|E5BE88\n屌|E5B18C\n\n于是我们得到了`E5BE88E5B18C`这么一串数值。而显示时我们用GBK解码进行展示，通过查表我们获得以下信息：\n\n两个字节的十六进制数值|GBK解码后对应的字符\n---|---\nE5BE|寰\n88E5|堝\nB18C|睂\n\n解码后我们就得到了`寰堝睂`这么一个错误的结果，更要命的是连字符个数都变了。\n\n## 如何识别乱码的本来想要表达的文字\n\n要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。\n\n### 第1步 编码\n\n假设我们在页面上看到`寰堝睂`这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。\n当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：\n\n```mysql\nmysql [localhost] {msandbox} > select hex(convert('寰堝睂' using gbk));\n+-------------------------------------+\n| hex(convert('寰堝睂' using gbk))    |\n+-------------------------------------+\n| E5BE88E5B18C                        |\n+-------------------------------------+\n1 row in set (0.01 sec)\n```\n\n### 第2步 识别\n\n现在我们得到了解码后的二进制字符串`E5BE88E5B18C`。然后我们将它按字节拆开。\n\nByte1|Byte2|Byte3|Byte4|Byte5|Byte6\n---|---|---|---|---|---\nE5|BE|88|E5|B1|8C\n\n然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。\n如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8\n\n### 第3步 解码\n\n然后我们就能拿着`E5BE88E5B18C`用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：\n\n```mysql\nmysql [localhost] {msandbox} ((none)) > select convert(0xE5BE88E5B18C using utf8);\n+------------------------------------+\n| convert(0xE5BE88E5B18C using utf8) |\n+------------------------------------+\n| 很屌                               |\n+------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## 常见问题处理之Emoji\n\n所谓Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\nEmoji表情随着IOS的普及和微信的支持越来越常见。下面就是几个常见的Emoji: &#128524; &#128526; &#128525; 那么Emoji字符表情会对我们平时的开发运维带来什么影响呢？\n\n最常见的问题就在于将他存入MySQL数据库的时候。\n一般来说MySQL数据库的默认字符集都会配置成UTF-8（三字节），而utf8mb4在5.5以后才被支持，也很少会有DBA主动将系统默认字符集改成utf8mb4。\n那么问题就来了，当我们把一个需要4字节UTF-8编码才能表示的字符存入数据库的时候就会报错：\n`ERROR 1366: Incorrect string value: '\\xF0\\x9D\\x8C\\x86' for column` 。 \n\n如果认真阅读了上面的解释，那么这个报错也就不难看懂了。我们试图将一串Bytes插入到一列中，而这串Bytes的第一个字节是`\\xF0`意味着这是一个四字节的UTF-8编码。\n但是当MySQL表和列字符集配置为UTF-8的时候是无法存储这样的字符的，所以报了错。 \n那么遇到这种情况我们如何解决呢？\n\n有两种方式：\n第一种升级MySQL到5.6或更高版本，并且将表字符集切换至utf8mb4。\n第二种方法就是在把内容存入到数据库之前做一次过滤，将Emoji字符替换成一段特殊的文字编码，然后再存入数据库中。\n之后从数据库获取或者前端展示时再将这段特殊文字编码转换成Emoji显示。第二种方法我们假设用`-*-1F601-*-`来替代4字节的Emoji，那么具体实现python代码可以参见[Stackoverflow](https://stackoverflow.com/questions/3220031/how-to-filter-or-replace-unicode-characters-that-would-take-more-than-3-bytes)上的回答\n\n","source":"_posts/charset.md","raw":"---\nurl: /2020/05/11/charset.html\ntitle: \"字符集和字符集编码\"\ndate: 2020-05-12T18:31:57+08:00\ndraft: false\ntags: [\"字符集编码\"]\ntags_weight: 100\ncategories: [\"字符集编码\"]\ncategoryes_weight: 100\ntype: \"reprinted\"\n---\n\n本文转载自 [cenalulu http://cenalulu.github.io/linux/character-encoding/](http://cenalulu.github.io/linux/character-encoding/)\n\n## 什么是字符集\n\n在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。\n那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老板的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。\n于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。 \n那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？\n很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。\n于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 \n\n说了那么多我们来看一个实际例子，下面就是`屌`这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？\n\n字符集|16进制编码|对应的二进制数据\n---|---|---\nUTF-8|0xE5B18C|1110 0101 1011 0001 1000 1100\nUTF-16|0x5C4C|1011 1000 1001 1000\nGBK|0x8CC5|1000 1100 1100 0101\n\n## 什么是字符编码\n\n字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。\n对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。\n\n其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。\n编码字符集，即用一个编码值`code point`来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。\n一般来说都会直接将`code point`的值作为编码后的值直接存储。例如在`ASCII`中`A`在表中排第65位，而编码后`A`的数值是`0100 0001`也即十进制的65的二进制转换结果。\n \n看到这里，可能很多读者都会有和我当初一样的疑问：`字库表`和`编码字符集`看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。\n为什么还要多此一举通过`字符编码`把序号转换成另外一种存储格式呢？\n\n其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。\n例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的`ASCII`字库表就能满足基本需求。\n而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。\n算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。\n虽然现在硬盘或者内存都很廉价，但是在网络传输中，这个问题就凸显出来了，你可以这样想想，本来1M的带宽在ANSI下可以代表1024*1024个字符，但是在Unicode下却只能代表1024*1024/2个字符。\n也就是1MB/s的带宽只能等价于512KB/s，这个很可怕啊。所以为了解决符号在网络中传输的浪费问题，于是就出现了UTF-8这样的变长编码`Unicode transfer format -8`，后面的8代表是以8位二进制为单位来传输符号的\n在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。\n\n## 字符编码发展史\n\n- 美国人首先对其英文字符进行了编码，也就是最早的`ASCII`码，用一个字节的低7位来表示英文的128个字符，高1位统一为0；\n\n- 后来欧洲人发现你这128位哪够用，比如法国人字母上面的还有注音符，这个怎么区分，得，把高1位编进来吧，这样欧洲普遍使用一个全字节进行编码，最多可表示256位。\n\n- 但是即使位数少，不同国家地区用不同的字符编码，虽然0--127表示的符号是一样的，但是128--255这一段的解释完全乱套了，即使2进制完全一样，表示的字符完全不一样，比如135在法语，希伯来语，俄语编码中完全是不同的符号；\n\n- 更麻烦的是，电脑传到中国后，我们发现我们有10万多个汉字，你们欧美这256字塞牙缝都不够。于是就发明了GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字，最多可以表示65536个汉字字符，这样就不难理解有些汉字你在新华字典里查得到，但是电脑上如果不处理一下你是显示不出来的了吧；\n\n- 这下各用各的字符集编码，这世界咋统一？俄国人发封email给中国人，两边字符集编码不同，显示都是乱码啊。为了统一，于是就发明了Unicode，将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，现在unicode可以容纳100多万个符号，每个符号的编码都不一样，这下可统一了，所有语言都可以互通，一个网页页面里可以同时显示各国文字。\n\n- 然而，unicode虽然统一了全世界字符的二进制编码，但没有规定如何存储啊，亲。x86和amd体系结构的电脑小端序和大端序都分不清，别提计算机如何识别到底是Unicode还是ASCII了。如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，文本文件的大小会因此大出二三倍，这对于存储来说是极大的浪费。这样导致一个后果：出现了Unicode的多种存储方式。\n\n- 互联网的兴起，网页上要显示各种字符，必须统一啊，UTF-8就是Unicode最重要的实现方式之一。另外还有UTF-16、UTF-32等。UTF-8不是固定字长编码的，而是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。\n\n## UTF-8和Unicode的关系\n\n看完上面的概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。\n随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。\n详见：[Unicode on Wikipedia](https://en.wikipedia.org/wiki/Unicode)。Unicode的编号从`0000`开始一直到`10FFFF`共分为17个Plane，每个Plane中有65536个字符。\n\n而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。\n\n## UTF-8编码简介\n\n为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 \n\nUTF-8编码为变长编码。最小编码单位（`code unit`）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。\n\n1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。\n\n2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头\n\n3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头\n\n4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。\n\n具体每个字节的特征可见下表，其中`x`代表序号部分，把各个字节中的所有`x`部分拼接在一起就组成了在Unicode字库中的序号\n\nByte 1|Byte 2|Byte 3\n---|---|---\n0xxx xxxx||\n110x xxxx|10xx xxxx|\n1110 xxxx|10xx xxxx|10xx xxxx\n\n我们分别看三个从一个字节到三个字节的UTF-8编码例子：\n\n实际字符|在Unicode字库序号的十六进制|在Unicode字库序号的二进制|UTF-8编码后的二进制|UTF-8编码后的十六进制\n---|---|---|---|---\n$|0024|010 0100|0010 0100|24\n¢|00A2|000 1010 0010|1100 0010 1010 0010|C2 A2\n€|20AC|0010 0000 1010 1100|1110 0010 1000 0010 1010 1100|E2 82 AC\n\n细心的读者不难从以上的简单介绍中得出以下规律：\n\n1. 3个字节的UTF-8十六进制编码一定是以`E`开头的\n\n2. 2个字节的UTF-8十六进制编码一定是以`C`或`D`开头的\n\n3. 1个字节的UTF-8十六进制编码一定是以比`8`小的数字开头的\n\n## 为什么会出现乱码\n\n`乱码`也就是英文常说的`mojibake`（由日语的`文字化け`音译）。 简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。\n对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了`bless`（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是`受伤`（解码过程）。\n这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。\n由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。\n \n我们来看一个例子：假设我们用UTF-8编码存储`很屌`两个字，会有如下转换：\n\n字符|UTF-8编码后的十六进制\n---|---\n很|E5BE88\n屌|E5B18C\n\n于是我们得到了`E5BE88E5B18C`这么一串数值。而显示时我们用GBK解码进行展示，通过查表我们获得以下信息：\n\n两个字节的十六进制数值|GBK解码后对应的字符\n---|---\nE5BE|寰\n88E5|堝\nB18C|睂\n\n解码后我们就得到了`寰堝睂`这么一个错误的结果，更要命的是连字符个数都变了。\n\n## 如何识别乱码的本来想要表达的文字\n\n要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。\n\n### 第1步 编码\n\n假设我们在页面上看到`寰堝睂`这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。\n当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：\n\n```mysql\nmysql [localhost] {msandbox} > select hex(convert('寰堝睂' using gbk));\n+-------------------------------------+\n| hex(convert('寰堝睂' using gbk))    |\n+-------------------------------------+\n| E5BE88E5B18C                        |\n+-------------------------------------+\n1 row in set (0.01 sec)\n```\n\n### 第2步 识别\n\n现在我们得到了解码后的二进制字符串`E5BE88E5B18C`。然后我们将它按字节拆开。\n\nByte1|Byte2|Byte3|Byte4|Byte5|Byte6\n---|---|---|---|---|---\nE5|BE|88|E5|B1|8C\n\n然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。\n如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8\n\n### 第3步 解码\n\n然后我们就能拿着`E5BE88E5B18C`用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：\n\n```mysql\nmysql [localhost] {msandbox} ((none)) > select convert(0xE5BE88E5B18C using utf8);\n+------------------------------------+\n| convert(0xE5BE88E5B18C using utf8) |\n+------------------------------------+\n| 很屌                               |\n+------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## 常见问题处理之Emoji\n\n所谓Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\nEmoji表情随着IOS的普及和微信的支持越来越常见。下面就是几个常见的Emoji: &#128524; &#128526; &#128525; 那么Emoji字符表情会对我们平时的开发运维带来什么影响呢？\n\n最常见的问题就在于将他存入MySQL数据库的时候。\n一般来说MySQL数据库的默认字符集都会配置成UTF-8（三字节），而utf8mb4在5.5以后才被支持，也很少会有DBA主动将系统默认字符集改成utf8mb4。\n那么问题就来了，当我们把一个需要4字节UTF-8编码才能表示的字符存入数据库的时候就会报错：\n`ERROR 1366: Incorrect string value: '\\xF0\\x9D\\x8C\\x86' for column` 。 \n\n如果认真阅读了上面的解释，那么这个报错也就不难看懂了。我们试图将一串Bytes插入到一列中，而这串Bytes的第一个字节是`\\xF0`意味着这是一个四字节的UTF-8编码。\n但是当MySQL表和列字符集配置为UTF-8的时候是无法存储这样的字符的，所以报了错。 \n那么遇到这种情况我们如何解决呢？\n\n有两种方式：\n第一种升级MySQL到5.6或更高版本，并且将表字符集切换至utf8mb4。\n第二种方法就是在把内容存入到数据库之前做一次过滤，将Emoji字符替换成一段特殊的文字编码，然后再存入数据库中。\n之后从数据库获取或者前端展示时再将这段特殊文字编码转换成Emoji显示。第二种方法我们假设用`-*-1F601-*-`来替代4字节的Emoji，那么具体实现python代码可以参见[Stackoverflow](https://stackoverflow.com/questions/3220031/how-to-filter-or-replace-unicode-characters-that-would-take-more-than-3-bytes)上的回答\n\n","slug":"charset","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf1z0000mv05hd6q2i89","content":"<p>本文转载自 <a href=\"http://cenalulu.github.io/linux/character-encoding/\">cenalulu http://cenalulu.github.io/linux/character-encoding/</a></p>\n<h2 id=\"什么是字符集\"><a href=\"#什么是字符集\" class=\"headerlink\" title=\"什么是字符集\"></a>什么是字符集</h2><p>在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。<br>那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老板的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。<br>于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。<br>那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？<br>很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。<br>于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 </p>\n<p>说了那么多我们来看一个实际例子，下面就是<code>屌</code>这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？</p>\n<table>\n<thead>\n<tr>\n<th>字符集</th>\n<th>16进制编码</th>\n<th>对应的二进制数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UTF-8</td>\n<td>0xE5B18C</td>\n<td>1110 0101 1011 0001 1000 1100</td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td>0x5C4C</td>\n<td>1011 1000 1001 1000</td>\n</tr>\n<tr>\n<td>GBK</td>\n<td>0x8CC5</td>\n<td>1000 1100 1100 0101</td>\n</tr>\n</tbody></table>\n<h2 id=\"什么是字符编码\"><a href=\"#什么是字符编码\" class=\"headerlink\" title=\"什么是字符编码\"></a>什么是字符编码</h2><p>字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。<br>对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。</p>\n<p>其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。<br>编码字符集，即用一个编码值<code>code point</code>来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。<br>一般来说都会直接将<code>code point</code>的值作为编码后的值直接存储。例如在<code>ASCII</code>中<code>A</code>在表中排第65位，而编码后<code>A</code>的数值是<code>0100 0001</code>也即十进制的65的二进制转换结果。</p>\n<p>看到这里，可能很多读者都会有和我当初一样的疑问：<code>字库表</code>和<code>编码字符集</code>看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。<br>为什么还要多此一举通过<code>字符编码</code>把序号转换成另外一种存储格式呢？</p>\n<p>其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。<br>例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的<code>ASCII</code>字库表就能满足基本需求。<br>而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。<br>算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。<br>虽然现在硬盘或者内存都很廉价，但是在网络传输中，这个问题就凸显出来了，你可以这样想想，本来1M的带宽在ANSI下可以代表1024<em>1024个字符，但是在Unicode下却只能代表1024</em>1024/2个字符。<br>也就是1MB/s的带宽只能等价于512KB/s，这个很可怕啊。所以为了解决符号在网络中传输的浪费问题，于是就出现了UTF-8这样的变长编码<code>Unicode transfer format -8</code>，后面的8代表是以8位二进制为单位来传输符号的<br>在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。</p>\n<h2 id=\"字符编码发展史\"><a href=\"#字符编码发展史\" class=\"headerlink\" title=\"字符编码发展史\"></a>字符编码发展史</h2><ul>\n<li><p>美国人首先对其英文字符进行了编码，也就是最早的<code>ASCII</code>码，用一个字节的低7位来表示英文的128个字符，高1位统一为0；</p>\n</li>\n<li><p>后来欧洲人发现你这128位哪够用，比如法国人字母上面的还有注音符，这个怎么区分，得，把高1位编进来吧，这样欧洲普遍使用一个全字节进行编码，最多可表示256位。</p>\n</li>\n<li><p>但是即使位数少，不同国家地区用不同的字符编码，虽然0–127表示的符号是一样的，但是128–255这一段的解释完全乱套了，即使2进制完全一样，表示的字符完全不一样，比如135在法语，希伯来语，俄语编码中完全是不同的符号；</p>\n</li>\n<li><p>更麻烦的是，电脑传到中国后，我们发现我们有10万多个汉字，你们欧美这256字塞牙缝都不够。于是就发明了GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字，最多可以表示65536个汉字字符，这样就不难理解有些汉字你在新华字典里查得到，但是电脑上如果不处理一下你是显示不出来的了吧；</p>\n</li>\n<li><p>这下各用各的字符集编码，这世界咋统一？俄国人发封email给中国人，两边字符集编码不同，显示都是乱码啊。为了统一，于是就发明了Unicode，将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，现在unicode可以容纳100多万个符号，每个符号的编码都不一样，这下可统一了，所有语言都可以互通，一个网页页面里可以同时显示各国文字。</p>\n</li>\n<li><p>然而，unicode虽然统一了全世界字符的二进制编码，但没有规定如何存储啊，亲。x86和amd体系结构的电脑小端序和大端序都分不清，别提计算机如何识别到底是Unicode还是ASCII了。如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，文本文件的大小会因此大出二三倍，这对于存储来说是极大的浪费。这样导致一个后果：出现了Unicode的多种存储方式。</p>\n</li>\n<li><p>互联网的兴起，网页上要显示各种字符，必须统一啊，UTF-8就是Unicode最重要的实现方式之一。另外还有UTF-16、UTF-32等。UTF-8不是固定字长编码的，而是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n</li>\n</ul>\n<h2 id=\"UTF-8和Unicode的关系\"><a href=\"#UTF-8和Unicode的关系\" class=\"headerlink\" title=\"UTF-8和Unicode的关系\"></a>UTF-8和Unicode的关系</h2><p>看完上面的概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。<br>随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。<br>详见：<a href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode on Wikipedia</a>。Unicode的编号从<code>0000</code>开始一直到<code>10FFFF</code>共分为17个Plane，每个Plane中有65536个字符。</p>\n<p>而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。</p>\n<h2 id=\"UTF-8编码简介\"><a href=\"#UTF-8编码简介\" class=\"headerlink\" title=\"UTF-8编码简介\"></a>UTF-8编码简介</h2><p>为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 </p>\n<p>UTF-8编码为变长编码。最小编码单位（<code>code unit</code>）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</p>\n<ol>\n<li><p>如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</p>\n</li>\n<li><p>如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</p>\n</li>\n<li><p>如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</p>\n</li>\n<li><p>如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</p>\n</li>\n</ol>\n<p>具体每个字节的特征可见下表，其中<code>x</code>代表序号部分，把各个字节中的所有<code>x</code>部分拼接在一起就组成了在Unicode字库中的序号</p>\n<table>\n<thead>\n<tr>\n<th>Byte 1</th>\n<th>Byte 2</th>\n<th>Byte 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0xxx xxxx</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>110x xxxx</td>\n<td>10xx xxxx</td>\n<td></td>\n</tr>\n<tr>\n<td>1110 xxxx</td>\n<td>10xx xxxx</td>\n<td>10xx xxxx</td>\n</tr>\n</tbody></table>\n<p>我们分别看三个从一个字节到三个字节的UTF-8编码例子：</p>\n<table>\n<thead>\n<tr>\n<th>实际字符</th>\n<th>在Unicode字库序号的十六进制</th>\n<th>在Unicode字库序号的二进制</th>\n<th>UTF-8编码后的二进制</th>\n<th>UTF-8编码后的十六进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$</td>\n<td>0024</td>\n<td>010 0100</td>\n<td>0010 0100</td>\n<td>24</td>\n</tr>\n<tr>\n<td>¢</td>\n<td>00A2</td>\n<td>000 1010 0010</td>\n<td>1100 0010 1010 0010</td>\n<td>C2 A2</td>\n</tr>\n<tr>\n<td>€</td>\n<td>20AC</td>\n<td>0010 0000 1010 1100</td>\n<td>1110 0010 1000 0010 1010 1100</td>\n<td>E2 82 AC</td>\n</tr>\n</tbody></table>\n<p>细心的读者不难从以上的简单介绍中得出以下规律：</p>\n<ol>\n<li><p>3个字节的UTF-8十六进制编码一定是以<code>E</code>开头的</p>\n</li>\n<li><p>2个字节的UTF-8十六进制编码一定是以<code>C</code>或<code>D</code>开头的</p>\n</li>\n<li><p>1个字节的UTF-8十六进制编码一定是以比<code>8</code>小的数字开头的</p>\n</li>\n</ol>\n<h2 id=\"为什么会出现乱码\"><a href=\"#为什么会出现乱码\" class=\"headerlink\" title=\"为什么会出现乱码\"></a>为什么会出现乱码</h2><p><code>乱码</code>也就是英文常说的<code>mojibake</code>（由日语的<code>文字化け</code>音译）。 简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。<br>对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了<code>bless</code>（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是<code>受伤</code>（解码过程）。<br>这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。<br>由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。</p>\n<p>我们来看一个例子：假设我们用UTF-8编码存储<code>很屌</code>两个字，会有如下转换：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>UTF-8编码后的十六进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>很</td>\n<td>E5BE88</td>\n</tr>\n<tr>\n<td>屌</td>\n<td>E5B18C</td>\n</tr>\n</tbody></table>\n<p>于是我们得到了<code>E5BE88E5B18C</code>这么一串数值。而显示时我们用GBK解码进行展示，通过查表我们获得以下信息：</p>\n<table>\n<thead>\n<tr>\n<th>两个字节的十六进制数值</th>\n<th>GBK解码后对应的字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E5BE</td>\n<td>寰</td>\n</tr>\n<tr>\n<td>88E5</td>\n<td>堝</td>\n</tr>\n<tr>\n<td>B18C</td>\n<td>睂</td>\n</tr>\n</tbody></table>\n<p>解码后我们就得到了<code>寰堝睂</code>这么一个错误的结果，更要命的是连字符个数都变了。</p>\n<h2 id=\"如何识别乱码的本来想要表达的文字\"><a href=\"#如何识别乱码的本来想要表达的文字\" class=\"headerlink\" title=\"如何识别乱码的本来想要表达的文字\"></a>如何识别乱码的本来想要表达的文字</h2><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p>\n<h3 id=\"第1步-编码\"><a href=\"#第1步-编码\" class=\"headerlink\" title=\"第1步 编码\"></a>第1步 编码</h3><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。<br>当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; &gt; select hex(convert(&#39;寰堝睂&#39; using gbk));</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| hex(convert(&#39;寰堝睂&#39; using gbk))    |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| E5BE88E5B18C                        |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第2步-识别\"><a href=\"#第2步-识别\" class=\"headerlink\" title=\"第2步 识别\"></a>第2步 识别</h3><p>现在我们得到了解码后的二进制字符串<code>E5BE88E5B18C</code>。然后我们将它按字节拆开。</p>\n<table>\n<thead>\n<tr>\n<th>Byte1</th>\n<th>Byte2</th>\n<th>Byte3</th>\n<th>Byte4</th>\n<th>Byte5</th>\n<th>Byte6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E5</td>\n<td>BE</td>\n<td>88</td>\n<td>E5</td>\n<td>B1</td>\n<td>8C</td>\n</tr>\n</tbody></table>\n<p>然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。<br>如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8</p>\n<h3 id=\"第3步-解码\"><a href=\"#第3步-解码\" class=\"headerlink\" title=\"第3步 解码\"></a>第3步 解码</h3><p>然后我们就能拿着<code>E5BE88E5B18C</code>用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; select convert(0xE5BE88E5B18C using utf8);</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| convert(0xE5BE88E5B18C using utf8) |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| 很屌                               |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题处理之Emoji\"><a href=\"#常见问题处理之Emoji\" class=\"headerlink\" title=\"常见问题处理之Emoji\"></a>常见问题处理之Emoji</h2><p>所谓Emoji就是一种在Unicode位于<code>\\u1F601-\\u1F64F</code>区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围<code>\\u0000-\\uFFFF</code>。<br>Emoji表情随着IOS的普及和微信的支持越来越常见。下面就是几个常见的Emoji: &#128524; &#128526; &#128525; 那么Emoji字符表情会对我们平时的开发运维带来什么影响呢？</p>\n<p>最常见的问题就在于将他存入MySQL数据库的时候。<br>一般来说MySQL数据库的默认字符集都会配置成UTF-8（三字节），而utf8mb4在5.5以后才被支持，也很少会有DBA主动将系统默认字符集改成utf8mb4。<br>那么问题就来了，当我们把一个需要4字节UTF-8编码才能表示的字符存入数据库的时候就会报错：<br><code>ERROR 1366: Incorrect string value: &#39;\\xF0\\x9D\\x8C\\x86&#39; for column</code> 。 </p>\n<p>如果认真阅读了上面的解释，那么这个报错也就不难看懂了。我们试图将一串Bytes插入到一列中，而这串Bytes的第一个字节是<code>\\xF0</code>意味着这是一个四字节的UTF-8编码。<br>但是当MySQL表和列字符集配置为UTF-8的时候是无法存储这样的字符的，所以报了错。<br>那么遇到这种情况我们如何解决呢？</p>\n<p>有两种方式：<br>第一种升级MySQL到5.6或更高版本，并且将表字符集切换至utf8mb4。<br>第二种方法就是在把内容存入到数据库之前做一次过滤，将Emoji字符替换成一段特殊的文字编码，然后再存入数据库中。<br>之后从数据库获取或者前端展示时再将这段特殊文字编码转换成Emoji显示。第二种方法我们假设用<code>-*-1F601-*-</code>来替代4字节的Emoji，那么具体实现python代码可以参见<a href=\"https://stackoverflow.com/questions/3220031/how-to-filter-or-replace-unicode-characters-that-would-take-more-than-3-bytes\">Stackoverflow</a>上的回答</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文转载自 <a href=\"http://cenalulu.github.io/linux/character-encoding/\">cenalulu http://cenalulu.github.io/linux/character-encoding/</a></p>\n<h2 id=\"什么是字符集\"><a href=\"#什么是字符集\" class=\"headerlink\" title=\"什么是字符集\"></a>什么是字符集</h2><p>在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。<br>那么在这两者之间的转换规则就需要一个统一的标准，否则把我们的U盘插到老板的电脑上，文档就乱码了；小伙伴QQ上传过来的文件，在我们本地打开又乱码了。<br>于是为了实现转换标准，各种字符集标准就出现了。简单的说字符集就规定了某个文字对应的二进制数字存放方式（编码）和某串二进制数值代表了哪个文字（解码）的转换关系。<br>那么为什么会有那么多字符集标准呢？这个问题实际非常容易回答。问问自己为什么我们的插头拿到英国就不能用了呢？为什么显示器同时有DVI，VGA，HDMI，DP这么多接口呢？<br>很多规范和标准在最初制定时并不会意识到这将会是以后全球普适的准则，或者处于组织本身利益就想从本质上区别于现有标准。<br>于是，就产生了那么多具有相同效果但又不相互兼容的标准了。 </p>\n<p>说了那么多我们来看一个实际例子，下面就是<code>屌</code>这个字在各种编码下的十六进制和二进制编码结果，怎么样有没有一种很屌的感觉？</p>\n<table>\n<thead>\n<tr>\n<th>字符集</th>\n<th>16进制编码</th>\n<th>对应的二进制数据</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UTF-8</td>\n<td>0xE5B18C</td>\n<td>1110 0101 1011 0001 1000 1100</td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td>0x5C4C</td>\n<td>1011 1000 1001 1000</td>\n</tr>\n<tr>\n<td>GBK</td>\n<td>0x8CC5</td>\n<td>1000 1100 1100 0101</td>\n</tr>\n</tbody></table>\n<h2 id=\"什么是字符编码\"><a href=\"#什么是字符编码\" class=\"headerlink\" title=\"什么是字符编码\"></a>什么是字符编码</h2><p>字符集只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：英语，汉语，日语。<br>对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。</p>\n<p>其中字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。<br>编码字符集，即用一个编码值<code>code point</code>来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。<br>一般来说都会直接将<code>code point</code>的值作为编码后的值直接存储。例如在<code>ASCII</code>中<code>A</code>在表中排第65位，而编码后<code>A</code>的数值是<code>0100 0001</code>也即十进制的65的二进制转换结果。</p>\n<p>看到这里，可能很多读者都会有和我当初一样的疑问：<code>字库表</code>和<code>编码字符集</code>看来是必不可少的，那既然字库表中的每一个字符都有一个自己的序号，直接把序号作为存储内容就好了。<br>为什么还要多此一举通过<code>字符编码</code>把序号转换成另外一种存储格式呢？</p>\n<p>其实原因也比较容易理解：统一字库表的目的是为了能够涵盖世界上所有的字符，但实际使用过程中会发现真正用的上的字符相对整个字库表来说比例非常低。<br>例如中文地区的程序几乎不会需要日语字符，而一些英语国家甚至简单的<code>ASCII</code>字库表就能满足基本需求。<br>而如果把每个字符都用字库表中的序号来存储的话，每个字符就需要3个字节（这里以Unicode字库为例），这样对于原本用仅占一个字符的ASCII编码的英语地区国家显然是一个额外成本（存储体积是原来的三倍）。<br>算的直接一些，同样一块硬盘，用ASCII可以存1500篇文章，而用3字节Unicode序号存储只能存500篇。<br>虽然现在硬盘或者内存都很廉价，但是在网络传输中，这个问题就凸显出来了，你可以这样想想，本来1M的带宽在ANSI下可以代表1024<em>1024个字符，但是在Unicode下却只能代表1024</em>1024/2个字符。<br>也就是1MB/s的带宽只能等价于512KB/s，这个很可怕啊。所以为了解决符号在网络中传输的浪费问题，于是就出现了UTF-8这样的变长编码<code>Unicode transfer format -8</code>，后面的8代表是以8位二进制为单位来传输符号的<br>在UTF-8编码中原本只需要一个字节的ASCII字符，仍然只占一个字节。而像中文及日语这样的复杂字符就需要2个到3个字节来存储。</p>\n<h2 id=\"字符编码发展史\"><a href=\"#字符编码发展史\" class=\"headerlink\" title=\"字符编码发展史\"></a>字符编码发展史</h2><ul>\n<li><p>美国人首先对其英文字符进行了编码，也就是最早的<code>ASCII</code>码，用一个字节的低7位来表示英文的128个字符，高1位统一为0；</p>\n</li>\n<li><p>后来欧洲人发现你这128位哪够用，比如法国人字母上面的还有注音符，这个怎么区分，得，把高1位编进来吧，这样欧洲普遍使用一个全字节进行编码，最多可表示256位。</p>\n</li>\n<li><p>但是即使位数少，不同国家地区用不同的字符编码，虽然0–127表示的符号是一样的，但是128–255这一段的解释完全乱套了，即使2进制完全一样，表示的字符完全不一样，比如135在法语，希伯来语，俄语编码中完全是不同的符号；</p>\n</li>\n<li><p>更麻烦的是，电脑传到中国后，我们发现我们有10万多个汉字，你们欧美这256字塞牙缝都不够。于是就发明了GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字，最多可以表示65536个汉字字符，这样就不难理解有些汉字你在新华字典里查得到，但是电脑上如果不处理一下你是显示不出来的了吧；</p>\n</li>\n<li><p>这下各用各的字符集编码，这世界咋统一？俄国人发封email给中国人，两边字符集编码不同，显示都是乱码啊。为了统一，于是就发明了Unicode，将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，现在unicode可以容纳100多万个符号，每个符号的编码都不一样，这下可统一了，所有语言都可以互通，一个网页页面里可以同时显示各国文字。</p>\n</li>\n<li><p>然而，unicode虽然统一了全世界字符的二进制编码，但没有规定如何存储啊，亲。x86和amd体系结构的电脑小端序和大端序都分不清，别提计算机如何识别到底是Unicode还是ASCII了。如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，文本文件的大小会因此大出二三倍，这对于存储来说是极大的浪费。这样导致一个后果：出现了Unicode的多种存储方式。</p>\n</li>\n<li><p>互联网的兴起，网页上要显示各种字符，必须统一啊，UTF-8就是Unicode最重要的实现方式之一。另外还有UTF-16、UTF-32等。UTF-8不是固定字长编码的，而是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n</li>\n</ul>\n<h2 id=\"UTF-8和Unicode的关系\"><a href=\"#UTF-8和Unicode的关系\" class=\"headerlink\" title=\"UTF-8和Unicode的关系\"></a>UTF-8和Unicode的关系</h2><p>看完上面的概念解释，那么解释UTF-8和Unicode的关系就比较简单了。Unicode就是上文中提到的编码字符集，而UTF-8就是字符编码，即Unicode规则字库的一种实现形式。<br>随着互联网的发展，对同一字库集的要求越来越迫切，Unicode标准也就自然而然的出现。它几乎涵盖了各个国家语言可能出现的符号和文字，并将为他们编号。<br>详见：<a href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode on Wikipedia</a>。Unicode的编号从<code>0000</code>开始一直到<code>10FFFF</code>共分为17个Plane，每个Plane中有65536个字符。</p>\n<p>而UTF-8则只实现了第一个Plane，可见UTF-8虽然是一个当今接受度最广的字符集编码，但是它并没有涵盖整个Unicode的字库，这也造成了它在某些场景下对于特殊字符的处理困难（下文会有提到）。</p>\n<h2 id=\"UTF-8编码简介\"><a href=\"#UTF-8编码简介\" class=\"headerlink\" title=\"UTF-8编码简介\"></a>UTF-8编码简介</h2><p>为了更好的理解后面的实际应用，我们这里简单的介绍下UTF-8的编码实现方法。即UTF-8的物理存储和Unicode序号的转换关系。 </p>\n<p>UTF-8编码为变长编码。最小编码单位（<code>code unit</code>）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</p>\n<ol>\n<li><p>如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</p>\n</li>\n<li><p>如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</p>\n</li>\n<li><p>如果一个字节以1110开头，那么代表当前字符为三字节字符，占用3个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</p>\n</li>\n<li><p>如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</p>\n</li>\n</ol>\n<p>具体每个字节的特征可见下表，其中<code>x</code>代表序号部分，把各个字节中的所有<code>x</code>部分拼接在一起就组成了在Unicode字库中的序号</p>\n<table>\n<thead>\n<tr>\n<th>Byte 1</th>\n<th>Byte 2</th>\n<th>Byte 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0xxx xxxx</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>110x xxxx</td>\n<td>10xx xxxx</td>\n<td></td>\n</tr>\n<tr>\n<td>1110 xxxx</td>\n<td>10xx xxxx</td>\n<td>10xx xxxx</td>\n</tr>\n</tbody></table>\n<p>我们分别看三个从一个字节到三个字节的UTF-8编码例子：</p>\n<table>\n<thead>\n<tr>\n<th>实际字符</th>\n<th>在Unicode字库序号的十六进制</th>\n<th>在Unicode字库序号的二进制</th>\n<th>UTF-8编码后的二进制</th>\n<th>UTF-8编码后的十六进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$</td>\n<td>0024</td>\n<td>010 0100</td>\n<td>0010 0100</td>\n<td>24</td>\n</tr>\n<tr>\n<td>¢</td>\n<td>00A2</td>\n<td>000 1010 0010</td>\n<td>1100 0010 1010 0010</td>\n<td>C2 A2</td>\n</tr>\n<tr>\n<td>€</td>\n<td>20AC</td>\n<td>0010 0000 1010 1100</td>\n<td>1110 0010 1000 0010 1010 1100</td>\n<td>E2 82 AC</td>\n</tr>\n</tbody></table>\n<p>细心的读者不难从以上的简单介绍中得出以下规律：</p>\n<ol>\n<li><p>3个字节的UTF-8十六进制编码一定是以<code>E</code>开头的</p>\n</li>\n<li><p>2个字节的UTF-8十六进制编码一定是以<code>C</code>或<code>D</code>开头的</p>\n</li>\n<li><p>1个字节的UTF-8十六进制编码一定是以比<code>8</code>小的数字开头的</p>\n</li>\n</ol>\n<h2 id=\"为什么会出现乱码\"><a href=\"#为什么会出现乱码\" class=\"headerlink\" title=\"为什么会出现乱码\"></a>为什么会出现乱码</h2><p><code>乱码</code>也就是英文常说的<code>mojibake</code>（由日语的<code>文字化け</code>音译）。 简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。<br>对应到真实生活中，就好比是一个英国人为了表示祝福在纸上写了<code>bless</code>（编码过程）。而一个法国人拿到了这张纸，由于在法语中bless表示受伤的意思，所以认为他想表达的是<code>受伤</code>（解码过程）。<br>这个就是一个现实生活中的乱码情况。在计算机科学中一样，一个用UTF-8编码后的字符，用GBK去解码。<br>由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。</p>\n<p>我们来看一个例子：假设我们用UTF-8编码存储<code>很屌</code>两个字，会有如下转换：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>UTF-8编码后的十六进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>很</td>\n<td>E5BE88</td>\n</tr>\n<tr>\n<td>屌</td>\n<td>E5B18C</td>\n</tr>\n</tbody></table>\n<p>于是我们得到了<code>E5BE88E5B18C</code>这么一串数值。而显示时我们用GBK解码进行展示，通过查表我们获得以下信息：</p>\n<table>\n<thead>\n<tr>\n<th>两个字节的十六进制数值</th>\n<th>GBK解码后对应的字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E5BE</td>\n<td>寰</td>\n</tr>\n<tr>\n<td>88E5</td>\n<td>堝</td>\n</tr>\n<tr>\n<td>B18C</td>\n<td>睂</td>\n</tr>\n</tbody></table>\n<p>解码后我们就得到了<code>寰堝睂</code>这么一个错误的结果，更要命的是连字符个数都变了。</p>\n<h2 id=\"如何识别乱码的本来想要表达的文字\"><a href=\"#如何识别乱码的本来想要表达的文字\" class=\"headerlink\" title=\"如何识别乱码的本来想要表达的文字\"></a>如何识别乱码的本来想要表达的文字</h2><p>要从乱码字符中反解出原来的正确文字需要对各个字符集编码规则有较为深刻的掌握。但是原理很简单，这里用最常见的UTF-8被错误用GBK展示时的乱码为例，来说明具体反解和识别过程。</p>\n<h3 id=\"第1步-编码\"><a href=\"#第1步-编码\" class=\"headerlink\" title=\"第1步 编码\"></a>第1步 编码</h3><p>假设我们在页面上看到<code>寰堝睂</code>这样的乱码，而又得知我们的浏览器当前使用GBK编码。那么第一步我们就能先通过GBK把乱码编码成二进制表达式。<br>当然查表编码效率很低，我们也可以用以下SQL语句直接通过MySQL客户端来做编码工作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; &gt; select hex(convert(&#39;寰堝睂&#39; using gbk));</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| hex(convert(&#39;寰堝睂&#39; using gbk))    |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| E5BE88E5B18C                        |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第2步-识别\"><a href=\"#第2步-识别\" class=\"headerlink\" title=\"第2步 识别\"></a>第2步 识别</h3><p>现在我们得到了解码后的二进制字符串<code>E5BE88E5B18C</code>。然后我们将它按字节拆开。</p>\n<table>\n<thead>\n<tr>\n<th>Byte1</th>\n<th>Byte2</th>\n<th>Byte3</th>\n<th>Byte4</th>\n<th>Byte5</th>\n<th>Byte6</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E5</td>\n<td>BE</td>\n<td>88</td>\n<td>E5</td>\n<td>B1</td>\n<td>8C</td>\n</tr>\n</tbody></table>\n<p>然后套用之前UTF-8编码介绍章节中总结出的规律，就不难发现这6个字节的数据符合UTF-8编码规则。<br>如果整个数据流都符合这个规则的话，我们就能大胆假设乱码之前的编码字符集是UTF-8</p>\n<h3 id=\"第3步-解码\"><a href=\"#第3步-解码\" class=\"headerlink\" title=\"第3步 解码\"></a>第3步 解码</h3><p>然后我们就能拿着<code>E5BE88E5B18C</code>用UTF-8解码，查看乱码前的文字了。当然我们可以不查表直接通过SQL获得结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; select convert(0xE5BE88E5B18C using utf8);</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| convert(0xE5BE88E5B18C using utf8) |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| 很屌                               |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题处理之Emoji\"><a href=\"#常见问题处理之Emoji\" class=\"headerlink\" title=\"常见问题处理之Emoji\"></a>常见问题处理之Emoji</h2><p>所谓Emoji就是一种在Unicode位于<code>\\u1F601-\\u1F64F</code>区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围<code>\\u0000-\\uFFFF</code>。<br>Emoji表情随着IOS的普及和微信的支持越来越常见。下面就是几个常见的Emoji: &#128524; &#128526; &#128525; 那么Emoji字符表情会对我们平时的开发运维带来什么影响呢？</p>\n<p>最常见的问题就在于将他存入MySQL数据库的时候。<br>一般来说MySQL数据库的默认字符集都会配置成UTF-8（三字节），而utf8mb4在5.5以后才被支持，也很少会有DBA主动将系统默认字符集改成utf8mb4。<br>那么问题就来了，当我们把一个需要4字节UTF-8编码才能表示的字符存入数据库的时候就会报错：<br><code>ERROR 1366: Incorrect string value: &#39;\\xF0\\x9D\\x8C\\x86&#39; for column</code> 。 </p>\n<p>如果认真阅读了上面的解释，那么这个报错也就不难看懂了。我们试图将一串Bytes插入到一列中，而这串Bytes的第一个字节是<code>\\xF0</code>意味着这是一个四字节的UTF-8编码。<br>但是当MySQL表和列字符集配置为UTF-8的时候是无法存储这样的字符的，所以报了错。<br>那么遇到这种情况我们如何解决呢？</p>\n<p>有两种方式：<br>第一种升级MySQL到5.6或更高版本，并且将表字符集切换至utf8mb4。<br>第二种方法就是在把内容存入到数据库之前做一次过滤，将Emoji字符替换成一段特殊的文字编码，然后再存入数据库中。<br>之后从数据库获取或者前端展示时再将这段特殊文字编码转换成Emoji显示。第二种方法我们假设用<code>-*-1F601-*-</code>来替代4字节的Emoji，那么具体实现python代码可以参见<a href=\"https://stackoverflow.com/questions/3220031/how-to-filter-or-replace-unicode-characters-that-would-take-more-than-3-bytes\">Stackoverflow</a>上的回答</p>\n"},{"url":"/2020/05/11/decimal.html","title":"浮点数精度问题","date":"2020-05-11T20:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 写PHP遇到问题\n\n开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分）\n\n通常我的做法是 乘100 然后保存，原本以为这样写是没有问题的，结果却是写了一个bug，我把浮点型转换为整形的时候\n\n```php\n<?php\necho 16.33 * 100; // 1633 float\necho intval(16.33 * 100); // 1632 int\necho intval(strval(16.33 * 100)); // 1633\necho (int)(16.33 * 100); // 1632\n```\n\n然后去复习了一遍计算机中的浮点数（该打）\n\n## 浮点数在计算机如何保存\n\n之所以产生这样的问题，其根本原因是：计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。\n\n计算机如何保存浮点数？\n\n1. 整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称`除2取余法`。\n\n2. 小数部分：十进制小数转换为二进制小数，采用`乘2取整，顺序排列`法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，\n然后再将积的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。\n然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的高位，后取出的整数部分作为低位有效位。简称`乘2取整法`。\n\n3. 含有小数的十进制数转换成二进制，整数、小数部分分别进行转换，然后相加\n\n例如将十进制 29.75 转换为二进制，步骤如下\n\n整数部分\n\n```\n29/2 = 14...1\n14/2 = 7...0\n7/2 = 3...1\n3/2 = 1...1\n1/2 = 0...1\n```\n\n29(10) = 11101(2)\n\n小数部分\n\n```\n0.75*2 = 1.5...1\n0.5*2 = 1...1\n```\n0.75(10) = 0.11(2)\n\n29.75(10) = 11101.11(2)\n\n按照上面的算法，我们来计算 16.33，我们只需要验证小数部分就行\n\n```\n0.33*2 = 0.66...0\n0.66*2 = 1.32...1\n0.32*2 = 0.64...0\n0.64*2 = 1.28...1\n0.28*2 = 0.56...0\n0.56*2 = 1.12...1\n0.12*2 = 0.24...0\n0.24*2 = 0.48...0\n0.48*2 = 0.96...0\n0.96*2 = 1.92...1\n0.92*2 = 1.84...1\n.... \n```\n\n发现是算不完的\n\n目前计算机上存储浮点数值是按照[IEEE（电气和电子工程师协会）754](https://zh.wikipedia.org/zh-hans/IEEE_754)浮点存储格式标准来存储的\n\nIEEE单精度浮点格式共32位，包含三个构成字段：\n23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f；23:30位包含8位指数e；第31位包含符号s\n\n也就是说上面将0.33转换出的二进制代码，我们只能存储23位，即使数据类型为double，也只能存储52位，这样大家便能看出问题出现的原因了。\n\n截取的二进制代码已无法正确表示0.33，根据这个二进制代码肯定无法正确得到结果\n\n## 如何解决\n\n1. 因为二进制数值可以准确表示整数（可以使用整数转换为二进制方法验证下），所以可以将小数乘以10或100等变成整数，然后做运算，最后再通过除以10或100等获得结果。\n\n2. 通过截取结果的有效小数位数等，来取得最好的近似结果，然后在做处理。\n\n3. 对于可以用有限长度的二进制数值表示的十进制数值，可以使用存储位数大于其长度的数据类型。\n\n","source":"_posts/decimal.md","raw":"---\nurl: /2020/05/11/decimal.html\ntitle: \"浮点数精度问题\"\ndate: 2020-05-12T12:31:57+08:00\ndraft: false\ntags: [\"PHP\"]\ntags_weight: 100\ncategories: [\"PHP\", \"计算机杂项\"]\ncategoryes_weight: 100\n---\n\n## 写PHP遇到问题\n\n开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分）\n\n通常我的做法是 乘100 然后保存，原本以为这样写是没有问题的，结果却是写了一个bug，我把浮点型转换为整形的时候\n\n```php\n<?php\necho 16.33 * 100; // 1633 float\necho intval(16.33 * 100); // 1632 int\necho intval(strval(16.33 * 100)); // 1633\necho (int)(16.33 * 100); // 1632\n```\n\n然后去复习了一遍计算机中的浮点数（该打）\n\n## 浮点数在计算机如何保存\n\n之所以产生这样的问题，其根本原因是：计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。\n\n计算机如何保存浮点数？\n\n1. 整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称`除2取余法`。\n\n2. 小数部分：十进制小数转换为二进制小数，采用`乘2取整，顺序排列`法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，\n然后再将积的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。\n然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的高位，后取出的整数部分作为低位有效位。简称`乘2取整法`。\n\n3. 含有小数的十进制数转换成二进制，整数、小数部分分别进行转换，然后相加\n\n例如将十进制 29.75 转换为二进制，步骤如下\n\n整数部分\n\n```\n29/2 = 14...1\n14/2 = 7...0\n7/2 = 3...1\n3/2 = 1...1\n1/2 = 0...1\n```\n\n29(10) = 11101(2)\n\n小数部分\n\n```\n0.75*2 = 1.5...1\n0.5*2 = 1...1\n```\n0.75(10) = 0.11(2)\n\n29.75(10) = 11101.11(2)\n\n按照上面的算法，我们来计算 16.33，我们只需要验证小数部分就行\n\n```\n0.33*2 = 0.66...0\n0.66*2 = 1.32...1\n0.32*2 = 0.64...0\n0.64*2 = 1.28...1\n0.28*2 = 0.56...0\n0.56*2 = 1.12...1\n0.12*2 = 0.24...0\n0.24*2 = 0.48...0\n0.48*2 = 0.96...0\n0.96*2 = 1.92...1\n0.92*2 = 1.84...1\n.... \n```\n\n发现是算不完的\n\n目前计算机上存储浮点数值是按照[IEEE（电气和电子工程师协会）754](https://zh.wikipedia.org/zh-hans/IEEE_754)浮点存储格式标准来存储的\n\nIEEE单精度浮点格式共32位，包含三个构成字段：\n23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f；23:30位包含8位指数e；第31位包含符号s\n\n也就是说上面将0.33转换出的二进制代码，我们只能存储23位，即使数据类型为double，也只能存储52位，这样大家便能看出问题出现的原因了。\n\n截取的二进制代码已无法正确表示0.33，根据这个二进制代码肯定无法正确得到结果\n\n## 如何解决\n\n1. 因为二进制数值可以准确表示整数（可以使用整数转换为二进制方法验证下），所以可以将小数乘以10或100等变成整数，然后做运算，最后再通过除以10或100等获得结果。\n\n2. 通过截取结果的有效小数位数等，来取得最好的近似结果，然后在做处理。\n\n3. 对于可以用有限长度的二进制数值表示的十进制数值，可以使用存储位数大于其长度的数据类型。\n\n","slug":"decimal","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf240001mv054gewgqn8","content":"<h2 id=\"写PHP遇到问题\"><a href=\"#写PHP遇到问题\" class=\"headerlink\" title=\"写PHP遇到问题\"></a>写PHP遇到问题</h2><p>开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分）</p>\n<p>通常我的做法是 乘100 然后保存，原本以为这样写是没有问题的，结果却是写了一个bug，我把浮点型转换为整形的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">16.33</span> * <span class=\"number\">100</span>; <span class=\"comment\">// 1633 float</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632 int</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(strval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>)); <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br></pre></td></tr></table></figure>\n\n<p>然后去复习了一遍计算机中的浮点数（该打）</p>\n<h2 id=\"浮点数在计算机如何保存\"><a href=\"#浮点数在计算机如何保存\" class=\"headerlink\" title=\"浮点数在计算机如何保存\"></a>浮点数在计算机如何保存</h2><p>之所以产生这样的问题，其根本原因是：计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。</p>\n<p>计算机如何保存浮点数？</p>\n<ol>\n<li><p>整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称<code>除2取余法</code>。</p>\n</li>\n<li><p>小数部分：十进制小数转换为二进制小数，采用<code>乘2取整，顺序排列</code>法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，<br>然后再将积的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。<br>然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的高位，后取出的整数部分作为低位有效位。简称<code>乘2取整法</code>。</p>\n</li>\n<li><p>含有小数的十进制数转换成二进制，整数、小数部分分别进行转换，然后相加</p>\n</li>\n</ol>\n<p>例如将十进制 29.75 转换为二进制，步骤如下</p>\n<p>整数部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">29&#x2F;2 &#x3D; 14...1</span><br><span class=\"line\">14&#x2F;2 &#x3D; 7...0</span><br><span class=\"line\">7&#x2F;2 &#x3D; 3...1</span><br><span class=\"line\">3&#x2F;2 &#x3D; 1...1</span><br><span class=\"line\">1&#x2F;2 &#x3D; 0...1</span><br></pre></td></tr></table></figure>\n\n<p>29(10) = 11101(2)</p>\n<p>小数部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.75*2 &#x3D; 1.5...1</span><br><span class=\"line\">0.5*2 &#x3D; 1...1</span><br></pre></td></tr></table></figure>\n<p>0.75(10) = 0.11(2)</p>\n<p>29.75(10) = 11101.11(2)</p>\n<p>按照上面的算法，我们来计算 16.33，我们只需要验证小数部分就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.33*2 &#x3D; 0.66...0</span><br><span class=\"line\">0.66*2 &#x3D; 1.32...1</span><br><span class=\"line\">0.32*2 &#x3D; 0.64...0</span><br><span class=\"line\">0.64*2 &#x3D; 1.28...1</span><br><span class=\"line\">0.28*2 &#x3D; 0.56...0</span><br><span class=\"line\">0.56*2 &#x3D; 1.12...1</span><br><span class=\"line\">0.12*2 &#x3D; 0.24...0</span><br><span class=\"line\">0.24*2 &#x3D; 0.48...0</span><br><span class=\"line\">0.48*2 &#x3D; 0.96...0</span><br><span class=\"line\">0.96*2 &#x3D; 1.92...1</span><br><span class=\"line\">0.92*2 &#x3D; 1.84...1</span><br><span class=\"line\">.... </span><br></pre></td></tr></table></figure>\n\n<p>发现是算不完的</p>\n<p>目前计算机上存储浮点数值是按照<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\">IEEE（电气和电子工程师协会）754</a>浮点存储格式标准来存储的</p>\n<p>IEEE单精度浮点格式共32位，包含三个构成字段：<br>23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f；23:30位包含8位指数e；第31位包含符号s</p>\n<p>也就是说上面将0.33转换出的二进制代码，我们只能存储23位，即使数据类型为double，也只能存储52位，这样大家便能看出问题出现的原因了。</p>\n<p>截取的二进制代码已无法正确表示0.33，根据这个二进制代码肯定无法正确得到结果</p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><ol>\n<li><p>因为二进制数值可以准确表示整数（可以使用整数转换为二进制方法验证下），所以可以将小数乘以10或100等变成整数，然后做运算，最后再通过除以10或100等获得结果。</p>\n</li>\n<li><p>通过截取结果的有效小数位数等，来取得最好的近似结果，然后在做处理。</p>\n</li>\n<li><p>对于可以用有限长度的二进制数值表示的十进制数值，可以使用存储位数大于其长度的数据类型。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写PHP遇到问题\"><a href=\"#写PHP遇到问题\" class=\"headerlink\" title=\"写PHP遇到问题\"></a>写PHP遇到问题</h2><p>开始在计算金额的时候，我一般都使用分来计算，数据库保存也已分为单位（微信支付、支付宝支付 业务只精确到分）</p>\n<p>通常我的做法是 乘100 然后保存，原本以为这样写是没有问题的，结果却是写了一个bug，我把浮点型转换为整形的时候</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">16.33</span> * <span class=\"number\">100</span>; <span class=\"comment\">// 1633 float</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632 int</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(strval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>)); <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br></pre></td></tr></table></figure>\n\n<p>然后去复习了一遍计算机中的浮点数（该打）</p>\n<h2 id=\"浮点数在计算机如何保存\"><a href=\"#浮点数在计算机如何保存\" class=\"headerlink\" title=\"浮点数在计算机如何保存\"></a>浮点数在计算机如何保存</h2><p>之所以产生这样的问题，其根本原因是：计算机所使用二进制01代码无法准确表示某些带小数位的十进制数据。</p>\n<p>计算机如何保存浮点数？</p>\n<ol>\n<li><p>整数部分：连续用该整数除以2，取余数，然后商再除以2，直到商等于0为止。然后把得到的各个余数按相反的顺序排列。简称<code>除2取余法</code>。</p>\n</li>\n<li><p>小数部分：十进制小数转换为二进制小数，采用<code>乘2取整，顺序排列</code>法。用2乘以十进制小数，将得到的整数部分取出，再用2乘余下的小数部分，<br>然后再将积的整数部分取出，如此进行，直到积中的小数部分为0或者达到所要求的精度为止。<br>然后把取出的整数部分按顺序排列起来，即先取出的整数部分作为二进制小数的高位，后取出的整数部分作为低位有效位。简称<code>乘2取整法</code>。</p>\n</li>\n<li><p>含有小数的十进制数转换成二进制，整数、小数部分分别进行转换，然后相加</p>\n</li>\n</ol>\n<p>例如将十进制 29.75 转换为二进制，步骤如下</p>\n<p>整数部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">29&#x2F;2 &#x3D; 14...1</span><br><span class=\"line\">14&#x2F;2 &#x3D; 7...0</span><br><span class=\"line\">7&#x2F;2 &#x3D; 3...1</span><br><span class=\"line\">3&#x2F;2 &#x3D; 1...1</span><br><span class=\"line\">1&#x2F;2 &#x3D; 0...1</span><br></pre></td></tr></table></figure>\n\n<p>29(10) = 11101(2)</p>\n<p>小数部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.75*2 &#x3D; 1.5...1</span><br><span class=\"line\">0.5*2 &#x3D; 1...1</span><br></pre></td></tr></table></figure>\n<p>0.75(10) = 0.11(2)</p>\n<p>29.75(10) = 11101.11(2)</p>\n<p>按照上面的算法，我们来计算 16.33，我们只需要验证小数部分就行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.33*2 &#x3D; 0.66...0</span><br><span class=\"line\">0.66*2 &#x3D; 1.32...1</span><br><span class=\"line\">0.32*2 &#x3D; 0.64...0</span><br><span class=\"line\">0.64*2 &#x3D; 1.28...1</span><br><span class=\"line\">0.28*2 &#x3D; 0.56...0</span><br><span class=\"line\">0.56*2 &#x3D; 1.12...1</span><br><span class=\"line\">0.12*2 &#x3D; 0.24...0</span><br><span class=\"line\">0.24*2 &#x3D; 0.48...0</span><br><span class=\"line\">0.48*2 &#x3D; 0.96...0</span><br><span class=\"line\">0.96*2 &#x3D; 1.92...1</span><br><span class=\"line\">0.92*2 &#x3D; 1.84...1</span><br><span class=\"line\">.... </span><br></pre></td></tr></table></figure>\n\n<p>发现是算不完的</p>\n<p>目前计算机上存储浮点数值是按照<a href=\"https://zh.wikipedia.org/zh-hans/IEEE_754\">IEEE（电气和电子工程师协会）754</a>浮点存储格式标准来存储的</p>\n<p>IEEE单精度浮点格式共32位，包含三个构成字段：<br>23位小数f，8位偏置指数e，1位符号s。将这些字段连续存放在一个32位字里，并对其进行编码。其中0:22位包含23位的小数f；23:30位包含8位指数e；第31位包含符号s</p>\n<p>也就是说上面将0.33转换出的二进制代码，我们只能存储23位，即使数据类型为double，也只能存储52位，这样大家便能看出问题出现的原因了。</p>\n<p>截取的二进制代码已无法正确表示0.33，根据这个二进制代码肯定无法正确得到结果</p>\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><ol>\n<li><p>因为二进制数值可以准确表示整数（可以使用整数转换为二进制方法验证下），所以可以将小数乘以10或100等变成整数，然后做运算，最后再通过除以10或100等获得结果。</p>\n</li>\n<li><p>通过截取结果的有效小数位数等，来取得最好的近似结果，然后在做处理。</p>\n</li>\n<li><p>对于可以用有限长度的二进制数值表示的十进制数值，可以使用存储位数大于其长度的数据类型。</p>\n</li>\n</ol>\n"},{"url":"/2019/01/01/work-debug.html","title":"工作中遇到的问题+踩过的坑","date":"2019-10-11T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n##  安装的虚拟机时间不同步\n\n```\nntpdate cn.pool.ntp.org\n```\n\n\n## phpxdebug 运行失败，端口繁忙\n\n```\n因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001\n```\n\n## 本地测试环境curl，https时因为没有设置公钥而失败\n[设置公钥](https://stackoverflow.com/questions/28858351/php-ssl-certificate-error-unable-to-get-local-issuer-certificate)\n\n\n## PHP函数long2ip溢出\n\n```\nphpstudy 的PHP默认是32位的，long2ip() 时会有问题，需要换装64位的\nreids 也是32位，溢出问题\n直接替换 phpstudy 的 php 为 64位版本的，但是 redis 在win上没有，最后使用虚拟机了\n```\n\n\n\n## 升级laravel框架\n\n```\n升级框架，laravel/lumen 5.6.* -> 5.8.* 按照5.8.*修改composer.json依赖一致，然后利用gitbug的文件对比功能，修改改变的文件。\n使用 github 版本文件对比，修改更改的文件和受影响的改动\n```\n[Comparing changes](https://github.com/laravel/lumen/compare/5.6...master)\n\n\n## reids重启后rdb文件没有加载\n\n- 原因 dir 设置的是 ./ 所以启动时没有到 rdb文件的目录导致没有加载，dir应设置为绝对目录 /usr/local/redis/\n\n## 服务经常报502\n- ip服务经常报502，但fpm进程并没跑满，后面查看nginx的错误日志发现有connect() to unix:/tmp/php7-cgi.sock failed (11: Resource temporarily unavailable) while connecting to upstream错误\n\n[backlog](https://www.cnxct.com/something-about-phpfpm-s-backlog/)\n\n## git换行符问题\n\n- github clone 下一个项目，结果文件全是改动 eol unix expect windows\n\ngit自动转换 CRLF\n[CRLF 问题](https://github.com/cssmagic/blog/issues/22)\n\n- locate 在centos软件包叫 mlocate 首次安装需要 updatedb\n\n## 检测ip的延迟\n\n- 使用exce() 来ping 不安全，使用socket_create 构建ICMP ping 也需要特殊权限 suid\n\n[不需要 root 权限的 ICMP ping](https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html)\n\n使用SOCK_DGRAM \n`sudo sysctl -w net.ipv4.ping_group_range='0 10'` 设置用户组\n[不需要 root](https://www.jianshu.com/p/d77ede976bb3)\n\n最后还是使用 exce() 来ping，先验证IP合法性\n\n## PHP yar扩展报错\n\n- 本机yar 扩展打开了msgpack，服务器端没有支持\n\n[MSGPACK](https://github.com/laruence/yar/issues/113)\n\n- win上phpstudy php使用cgi，并且只有一个进程，代码里yar是循环调用\n\n[WSARecv() failed (10054: An existing connection was forcibly closed by the remote host)](https://blessing.studio/phpstudy-prober-page-502-bad-gateway/)\n\n## laravel http status 419\n\n`laravel 419 Sorry, your session has expired. Please refresh and try again.`\n\n问题是没有加 csrf\n\n[419](https://stackoverflow.com/questions/52583886/post-request-in-laravel-5-7-laravel-5-8-error-419-sorry-your-session-has/53781657#53781657)\n\n## redis 内存出了问题(暂计)\n\n[reids启动警告1](https://blog.csdn.net/jiangshouzhuang/article/details/50864933)\n\n[reids启动警告2](https://www.jianshu.com/p/7ca4b74c92be)\n\n## laravel 迁移报错\n\nmysql5.6 字符集 utf8_mb4 varchar(255)\n767/4=191 意思只能 varchar(191)\n```\nSQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; \nmax key length is 767 bytes (SQL: alter table `jobs` add index `jobs_queue_index`(`queue`))\n```\n[error 1071](https://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes)\n\n## cookie无法删除\n\n- 使用 jquery.cookie removeCookie 无法删除cookie的问题\n\n[需要指定path](https://stackoverflow.com/questions/18486165/remove-cookie-using-jquery-not-working)\n\n## gerrit 提交远程被拒绝\n\n原因是 `git config --global user.email \"your_email@mail.com\"`\n我把全局的email修改了，phpstorm读取不到，commit 的时候自己填的email没有用，得选择phpstorm显示的才行\n\n最后我修改回了公司的email，然后commit选择就能push了\n\n## phpunit 异常断言\n\n- phpunit @expectedExceptionMessage 比较时使用的是 strpos\n\n## composer suggest\n\n- Psr\\Http\\Message\\ResponseInterface 编辑器找不到\n\n看了一下安装laravel时貌似没有安装 composer.json 里的 suggest 包，安装时并没有指定 --no-suggest: 跳过扩展包建议，看来是默认不安装的\n\n## laravel-s redis\n\n- laravel-s Redis::connection() 返回redis单例连接，每个 worker 进程只能保持一个连接，只有在max_request达到时\nworker 将自动退出，进程退出后会释放所有内存和资源。\n\n## swoole yar 不兼容\n\n## laravel 表单验证失败\n\n不是ajax请求会302，然后 redirect / 就会 404\n1. 重写 App\\Exceptions\\Handler::render 同一验证失败json输出\n2. 也可以重写request header 因为是非ajax才会302\n\n## laravel PhpRedisConnection hscan bug\n\n```php\n    $it = null;\n    $redis->setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);\n    while($device_fds = $redis->client()->hScan(Link::getFdMapKey(), $it, '', 1000)) {\n        foreach($device_fds as $device_unique_mark => $fd) {\n             echo $device_unique_mark . PHP_EOL;\n        }\n    }\n```\nlaravel框架封装的问题，需要调用$redis->client(),而不是直接使用phpredis，$it 需要引用，PhpRedisConnection 使用 __call 调用存在bug\n\n## 数组参数签名前，最好使用 ksort 排序\n\n##laravel queue redis \n\n因为设置了 --sleep=3 并且没有配置队列 block_for 导致队列延时执行\n删除了 --sleep=3 并且配置 block_for => 3\nblock_for：将任务重新放入 Redis 数据库以及处理器轮询之前阻塞多久\n\n## php Trait \n\n定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）\n可以先定义一个父类使用 Trait，然后子类就能覆写父类的属性了\n\n## PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\n```php\n public static function make($items = [])\n {\n     return new static($items);\n }\n```\n## PHP Mockery::mock\n```php\n// 需先赋值\n$request = Mockery::mock(CurlRequest::class);\n// 这里不能连续调用，因为后面返回的不是 $request\n$request->shouldReceive('post')\n        ->once()\n        ->andReturn([\n            'status' => 1,\n            'msg'    => '请求成功'\n        ]);\n```\n\n## 2019.7.11 小数精度问题\n```php\necho 16.33 * 100; // 1633\necho intval(16.33 * 100); // 1632\necho intval(strval(16.33 * 100)); // 1633\necho (int)(16.33 * 100); // 1632\n```\n\n## laravel config:cache 的问题\n\n如果在部署过程中执行 config:cache 命令，那你应该确保只从配置文件内部调用 env 函数。一旦配置被缓存，.env 文件将不再被加载，所有对 env 函数的调用都将返回 null\n\n### php mb_strlen\n\n```php\necho mb_strlen('测试'); // 2 默认编码UTF-8\nmb_strlen('测试', 'UTF-8'); // 2\nmb_strlen('测试', '8bit'); // 6\nstrlen('测试'); // 6\n// 8bit是php独有解析的, 8bit并不是一个字符集, 只是php引擎可以解析它而已. 顾名思义, 一个字节等于八个位, 1byte=8bit\n```\n\nPHP支持mbstring.func_overload, 用于解决原生substr无法有效应对多字节编码字符串问题\n启用时php runtime状态是未知的， 所以在计算字符长度时， 用mb_strlen 8bit来保证计算字符串长度的正确性（按照1byte = 8bit）\n\n\n##PHP 一个if判断变量的速度问题，类型转换\n\n```php\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n$start = microtime(true);\nfor ($i = 0; $i < 1000000; $i++) {\n//    if (count($array)) {} // 0.01805305480957\n//    if (is_null($array)) {} // 0.013534784317017\n//    if (empty($array)) {} // 0.014011859893799\n    if (!$array) {} // 0.016890048980713\n}\n$end = microtime(true);\necho \"1: \" . ($end - $start) . \"\\n\";\necho memory_get_usage() . \"\\n\"; // 389032\n```\n\n## laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀\n\n## php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15\n\n## php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数\n\n## php composer --ignore-platform-reqs \n\n可忽略平台约束 例如win下升级 而composer.json require 一些win没有的扩展\n\n## http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口 \n\n## php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0\n\n```php\n// cli 下运行\n$bar = date('Y-m-d H:i:s');\nvar_dump(apcu_store('foo', $bar, 3));\nsleep(4);\nvar_dump(apcu_fetch('foo'));\n// apc.use_request_time=1 不过期\n// 使用请求时间来淘汰缓存\n```\n\n## reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\n\n可使用yield遍历整个数据集\n\n```php\n$key = 'test_set_111222';\n$items = [];\nfor ($i = 0; $i < 1000; $i++) {\n    $items[] = $i;\n}\n$this->redis->sAdd($key, ...$items);\nforeach ($this->get($key, 20) as $item) {\n    var_dump($item);\n}\nfunction get($key, int $count) : Generator\n{\n    $this->redis->setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);\n    $it = null;\n    while ($item = $this->redis->client()->sScan($key, $it, '*', $count)) {\n        yield $item;\n    }\n}\n```\n\n## 下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO\n\n## Wireshark卡死的原因居然是 有道词典的取词功能造成的\n\n[wireshark为什么会卡死？](https://segmentfault.com/a/1190000019913529)\n\n## socket_set_option 参数顺序\n\nSO_REUSEPORT 必须在 bind() 函数之前设置\n\n\n## linux TCP连接失败(不回复SYN,ACK)问题\n\n[参考分析问题1](https://blog.csdn.net/ywq935/article/details/91384854)\n\n[net.ipv4.tcp_tw_recycle参数](https://www.cnblogs.com/cheyunhua/p/9082674.html)\n\n## php socket EVENT扩展 死循环的问题\n\n代码中出现未捕获异常，导致死循环\n\ngo 模拟RST\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nvar host = flag.String(\"host\", \"172.16.1.49\", \"host\")\nvar port = flag.String(\"port\", \"9999\", \"port\")\n\nfunc main()  {\n\tconn, err := net.Dial(\"tcp\", *host+\":\"+*port)\n\tfmt.Println(*host+\":\"+*port)\n\tif err != nil {\n\t\tfmt.Println(\"err1\")\n\t\tos.Exit(1)\n\t}\n\n\tdefer conn.Close()\n\n\ttcpConn, ok := conn.(*net.TCPConn)\n\tif !ok {\n\t\tfmt.Println(\"err2\")\n\t\tos.Exit(1)\n\t}\n\ttcpConn.SetLinger(0)\n}\n```\n\nstrace 调试日志\n```\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 accept(9, {sa_family=AF_INET, sin_port=htons(35959), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 10\n39070 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39070 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39070 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)\n39070 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n39070 getpeername(10, 0x7fff585ad500, 0x7fff585ad4b4) = -1 ENOTCONN (Transport endpoint is not connected)\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n...死循环\n```\n\n正常的\n```\n39579 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39579 accept(9, {sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 10\n39579 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39579 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39579 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)\n39579 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n39579 getpeername(10, {sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 0\n39579 epoll_ctl(6, EPOLL_CTL_ADD, 10, {EPOLLIN, {u32=10, u64=10}}) = 0\n39579 epoll_wait(6, [{EPOLLIN, {u32=10, u64=10}}], 32, -1) = 1\n39579 recvfrom(10, \"\", 1, 0, NULL, NULL) = 0\n39579 epoll_ctl(6, EPOLL_CTL_DEL, 10, 0x7fff585ad4a0) = 0\n39579 close(10)                         = 0\n39579 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n```\n\nTCP握手成功之后，客户端直接发送RST包断开TCP连接(阿里云负载均衡服务TCP端口健康检查)，socket_getpeername()函数会抛出异常\n\n## socket_read 非阻塞模式 EAGAIN处理不正确\n\n非阻塞模式下，我们对EAGAIN处理不正确造成（Resource temporarily unavailable）我们继续读时，造成段错误（SIGSEGV 段非法错误 (内存引用无效)​）worker exit，发送RST\n\n由于我们实现的read 错误的返回了false thrift_protocol_read_binary_after_message_begin() 段错误，需改为空字符\n\n## 阿里云redis lua 检查的问题\n\nHMSET key field value [field value …]\n\n因为直接使用table先组装好了field value\n执行 script load 脚本时，会检查不成功，从而load失败，因为它判断这里少了一个参数\n```\nredis.call('hmset', KEYS[1], unpack(data))\n```\n","source":"_posts/work-debug.md","raw":"---\nurl: /2019/01/01/work-debug.html\ntitle: \"工作中遇到的问题+踩过的坑\"\ndate: 2019-10-11T22:31:57+08:00\ndraft: false\ntags: [\"PHP\"]\ntags_weight: 100\ncategories: [\"PHP\"]\ncategoryes_weight: 100\n---\n\n##  安装的虚拟机时间不同步\n\n```\nntpdate cn.pool.ntp.org\n```\n\n\n## phpxdebug 运行失败，端口繁忙\n\n```\n因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001\n```\n\n## 本地测试环境curl，https时因为没有设置公钥而失败\n[设置公钥](https://stackoverflow.com/questions/28858351/php-ssl-certificate-error-unable-to-get-local-issuer-certificate)\n\n\n## PHP函数long2ip溢出\n\n```\nphpstudy 的PHP默认是32位的，long2ip() 时会有问题，需要换装64位的\nreids 也是32位，溢出问题\n直接替换 phpstudy 的 php 为 64位版本的，但是 redis 在win上没有，最后使用虚拟机了\n```\n\n\n\n## 升级laravel框架\n\n```\n升级框架，laravel/lumen 5.6.* -> 5.8.* 按照5.8.*修改composer.json依赖一致，然后利用gitbug的文件对比功能，修改改变的文件。\n使用 github 版本文件对比，修改更改的文件和受影响的改动\n```\n[Comparing changes](https://github.com/laravel/lumen/compare/5.6...master)\n\n\n## reids重启后rdb文件没有加载\n\n- 原因 dir 设置的是 ./ 所以启动时没有到 rdb文件的目录导致没有加载，dir应设置为绝对目录 /usr/local/redis/\n\n## 服务经常报502\n- ip服务经常报502，但fpm进程并没跑满，后面查看nginx的错误日志发现有connect() to unix:/tmp/php7-cgi.sock failed (11: Resource temporarily unavailable) while connecting to upstream错误\n\n[backlog](https://www.cnxct.com/something-about-phpfpm-s-backlog/)\n\n## git换行符问题\n\n- github clone 下一个项目，结果文件全是改动 eol unix expect windows\n\ngit自动转换 CRLF\n[CRLF 问题](https://github.com/cssmagic/blog/issues/22)\n\n- locate 在centos软件包叫 mlocate 首次安装需要 updatedb\n\n## 检测ip的延迟\n\n- 使用exce() 来ping 不安全，使用socket_create 构建ICMP ping 也需要特殊权限 suid\n\n[不需要 root 权限的 ICMP ping](https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html)\n\n使用SOCK_DGRAM \n`sudo sysctl -w net.ipv4.ping_group_range='0 10'` 设置用户组\n[不需要 root](https://www.jianshu.com/p/d77ede976bb3)\n\n最后还是使用 exce() 来ping，先验证IP合法性\n\n## PHP yar扩展报错\n\n- 本机yar 扩展打开了msgpack，服务器端没有支持\n\n[MSGPACK](https://github.com/laruence/yar/issues/113)\n\n- win上phpstudy php使用cgi，并且只有一个进程，代码里yar是循环调用\n\n[WSARecv() failed (10054: An existing connection was forcibly closed by the remote host)](https://blessing.studio/phpstudy-prober-page-502-bad-gateway/)\n\n## laravel http status 419\n\n`laravel 419 Sorry, your session has expired. Please refresh and try again.`\n\n问题是没有加 csrf\n\n[419](https://stackoverflow.com/questions/52583886/post-request-in-laravel-5-7-laravel-5-8-error-419-sorry-your-session-has/53781657#53781657)\n\n## redis 内存出了问题(暂计)\n\n[reids启动警告1](https://blog.csdn.net/jiangshouzhuang/article/details/50864933)\n\n[reids启动警告2](https://www.jianshu.com/p/7ca4b74c92be)\n\n## laravel 迁移报错\n\nmysql5.6 字符集 utf8_mb4 varchar(255)\n767/4=191 意思只能 varchar(191)\n```\nSQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; \nmax key length is 767 bytes (SQL: alter table `jobs` add index `jobs_queue_index`(`queue`))\n```\n[error 1071](https://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes)\n\n## cookie无法删除\n\n- 使用 jquery.cookie removeCookie 无法删除cookie的问题\n\n[需要指定path](https://stackoverflow.com/questions/18486165/remove-cookie-using-jquery-not-working)\n\n## gerrit 提交远程被拒绝\n\n原因是 `git config --global user.email \"your_email@mail.com\"`\n我把全局的email修改了，phpstorm读取不到，commit 的时候自己填的email没有用，得选择phpstorm显示的才行\n\n最后我修改回了公司的email，然后commit选择就能push了\n\n## phpunit 异常断言\n\n- phpunit @expectedExceptionMessage 比较时使用的是 strpos\n\n## composer suggest\n\n- Psr\\Http\\Message\\ResponseInterface 编辑器找不到\n\n看了一下安装laravel时貌似没有安装 composer.json 里的 suggest 包，安装时并没有指定 --no-suggest: 跳过扩展包建议，看来是默认不安装的\n\n## laravel-s redis\n\n- laravel-s Redis::connection() 返回redis单例连接，每个 worker 进程只能保持一个连接，只有在max_request达到时\nworker 将自动退出，进程退出后会释放所有内存和资源。\n\n## swoole yar 不兼容\n\n## laravel 表单验证失败\n\n不是ajax请求会302，然后 redirect / 就会 404\n1. 重写 App\\Exceptions\\Handler::render 同一验证失败json输出\n2. 也可以重写request header 因为是非ajax才会302\n\n## laravel PhpRedisConnection hscan bug\n\n```php\n    $it = null;\n    $redis->setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);\n    while($device_fds = $redis->client()->hScan(Link::getFdMapKey(), $it, '', 1000)) {\n        foreach($device_fds as $device_unique_mark => $fd) {\n             echo $device_unique_mark . PHP_EOL;\n        }\n    }\n```\nlaravel框架封装的问题，需要调用$redis->client(),而不是直接使用phpredis，$it 需要引用，PhpRedisConnection 使用 __call 调用存在bug\n\n## 数组参数签名前，最好使用 ksort 排序\n\n##laravel queue redis \n\n因为设置了 --sleep=3 并且没有配置队列 block_for 导致队列延时执行\n删除了 --sleep=3 并且配置 block_for => 3\nblock_for：将任务重新放入 Redis 数据库以及处理器轮询之前阻塞多久\n\n## php Trait \n\n定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）\n可以先定义一个父类使用 Trait，然后子类就能覆写父类的属性了\n\n## PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\n```php\n public static function make($items = [])\n {\n     return new static($items);\n }\n```\n## PHP Mockery::mock\n```php\n// 需先赋值\n$request = Mockery::mock(CurlRequest::class);\n// 这里不能连续调用，因为后面返回的不是 $request\n$request->shouldReceive('post')\n        ->once()\n        ->andReturn([\n            'status' => 1,\n            'msg'    => '请求成功'\n        ]);\n```\n\n## 2019.7.11 小数精度问题\n```php\necho 16.33 * 100; // 1633\necho intval(16.33 * 100); // 1632\necho intval(strval(16.33 * 100)); // 1633\necho (int)(16.33 * 100); // 1632\n```\n\n## laravel config:cache 的问题\n\n如果在部署过程中执行 config:cache 命令，那你应该确保只从配置文件内部调用 env 函数。一旦配置被缓存，.env 文件将不再被加载，所有对 env 函数的调用都将返回 null\n\n### php mb_strlen\n\n```php\necho mb_strlen('测试'); // 2 默认编码UTF-8\nmb_strlen('测试', 'UTF-8'); // 2\nmb_strlen('测试', '8bit'); // 6\nstrlen('测试'); // 6\n// 8bit是php独有解析的, 8bit并不是一个字符集, 只是php引擎可以解析它而已. 顾名思义, 一个字节等于八个位, 1byte=8bit\n```\n\nPHP支持mbstring.func_overload, 用于解决原生substr无法有效应对多字节编码字符串问题\n启用时php runtime状态是未知的， 所以在计算字符长度时， 用mb_strlen 8bit来保证计算字符串长度的正确性（按照1byte = 8bit）\n\n\n##PHP 一个if判断变量的速度问题，类型转换\n\n```php\n$array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n$start = microtime(true);\nfor ($i = 0; $i < 1000000; $i++) {\n//    if (count($array)) {} // 0.01805305480957\n//    if (is_null($array)) {} // 0.013534784317017\n//    if (empty($array)) {} // 0.014011859893799\n    if (!$array) {} // 0.016890048980713\n}\n$end = microtime(true);\necho \"1: \" . ($end - $start) . \"\\n\";\necho memory_get_usage() . \"\\n\"; // 389032\n```\n\n## laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀\n\n## php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15\n\n## php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数\n\n## php composer --ignore-platform-reqs \n\n可忽略平台约束 例如win下升级 而composer.json require 一些win没有的扩展\n\n## http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口 \n\n## php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0\n\n```php\n// cli 下运行\n$bar = date('Y-m-d H:i:s');\nvar_dump(apcu_store('foo', $bar, 3));\nsleep(4);\nvar_dump(apcu_fetch('foo'));\n// apc.use_request_time=1 不过期\n// 使用请求时间来淘汰缓存\n```\n\n## reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\n\n可使用yield遍历整个数据集\n\n```php\n$key = 'test_set_111222';\n$items = [];\nfor ($i = 0; $i < 1000; $i++) {\n    $items[] = $i;\n}\n$this->redis->sAdd($key, ...$items);\nforeach ($this->get($key, 20) as $item) {\n    var_dump($item);\n}\nfunction get($key, int $count) : Generator\n{\n    $this->redis->setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);\n    $it = null;\n    while ($item = $this->redis->client()->sScan($key, $it, '*', $count)) {\n        yield $item;\n    }\n}\n```\n\n## 下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO\n\n## Wireshark卡死的原因居然是 有道词典的取词功能造成的\n\n[wireshark为什么会卡死？](https://segmentfault.com/a/1190000019913529)\n\n## socket_set_option 参数顺序\n\nSO_REUSEPORT 必须在 bind() 函数之前设置\n\n\n## linux TCP连接失败(不回复SYN,ACK)问题\n\n[参考分析问题1](https://blog.csdn.net/ywq935/article/details/91384854)\n\n[net.ipv4.tcp_tw_recycle参数](https://www.cnblogs.com/cheyunhua/p/9082674.html)\n\n## php socket EVENT扩展 死循环的问题\n\n代码中出现未捕获异常，导致死循环\n\ngo 模拟RST\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nvar host = flag.String(\"host\", \"172.16.1.49\", \"host\")\nvar port = flag.String(\"port\", \"9999\", \"port\")\n\nfunc main()  {\n\tconn, err := net.Dial(\"tcp\", *host+\":\"+*port)\n\tfmt.Println(*host+\":\"+*port)\n\tif err != nil {\n\t\tfmt.Println(\"err1\")\n\t\tos.Exit(1)\n\t}\n\n\tdefer conn.Close()\n\n\ttcpConn, ok := conn.(*net.TCPConn)\n\tif !ok {\n\t\tfmt.Println(\"err2\")\n\t\tos.Exit(1)\n\t}\n\ttcpConn.SetLinger(0)\n}\n```\n\nstrace 调试日志\n```\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 accept(9, {sa_family=AF_INET, sin_port=htons(35959), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 10\n39070 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39070 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39070 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)\n39070 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n39070 getpeername(10, 0x7fff585ad500, 0x7fff585ad4b4) = -1 ENOTCONN (Transport endpoint is not connected)\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39070 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n...死循环\n```\n\n正常的\n```\n39579 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n39579 accept(9, {sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 10\n39579 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39579 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, \"\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n39579 fcntl(10, F_GETFL)                = 0x2 (flags O_RDWR)\n39579 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n39579 getpeername(10, {sa_family=AF_INET, sin_port=htons(26949), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 0\n39579 epoll_ctl(6, EPOLL_CTL_ADD, 10, {EPOLLIN, {u32=10, u64=10}}) = 0\n39579 epoll_wait(6, [{EPOLLIN, {u32=10, u64=10}}], 32, -1) = 1\n39579 recvfrom(10, \"\", 1, 0, NULL, NULL) = 0\n39579 epoll_ctl(6, EPOLL_CTL_DEL, 10, 0x7fff585ad4a0) = 0\n39579 close(10)                         = 0\n39579 epoll_wait(6, [{EPOLLIN, {u32=9, u64=9}}], 32, -1) = 1\n```\n\nTCP握手成功之后，客户端直接发送RST包断开TCP连接(阿里云负载均衡服务TCP端口健康检查)，socket_getpeername()函数会抛出异常\n\n## socket_read 非阻塞模式 EAGAIN处理不正确\n\n非阻塞模式下，我们对EAGAIN处理不正确造成（Resource temporarily unavailable）我们继续读时，造成段错误（SIGSEGV 段非法错误 (内存引用无效)​）worker exit，发送RST\n\n由于我们实现的read 错误的返回了false thrift_protocol_read_binary_after_message_begin() 段错误，需改为空字符\n\n## 阿里云redis lua 检查的问题\n\nHMSET key field value [field value …]\n\n因为直接使用table先组装好了field value\n执行 script load 脚本时，会检查不成功，从而load失败，因为它判断这里少了一个参数\n```\nredis.call('hmset', KEYS[1], unpack(data))\n```\n","slug":"work-debug","published":1,"updated":"2020-07-16T12:38:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf280004mv0547qu7yb4","content":"<h2 id=\"安装的虚拟机时间不同步\"><a href=\"#安装的虚拟机时间不同步\" class=\"headerlink\" title=\"安装的虚拟机时间不同步\"></a>安装的虚拟机时间不同步</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"phpxdebug-运行失败，端口繁忙\"><a href=\"#phpxdebug-运行失败，端口繁忙\" class=\"headerlink\" title=\"phpxdebug 运行失败，端口繁忙\"></a>phpxdebug 运行失败，端口繁忙</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地测试环境curl，https时因为没有设置公钥而失败\"><a href=\"#本地测试环境curl，https时因为没有设置公钥而失败\" class=\"headerlink\" title=\"本地测试环境curl，https时因为没有设置公钥而失败\"></a>本地测试环境curl，https时因为没有设置公钥而失败</h2><p><a href=\"https://stackoverflow.com/questions/28858351/php-ssl-certificate-error-unable-to-get-local-issuer-certificate\">设置公钥</a></p>\n<h2 id=\"PHP函数long2ip溢出\"><a href=\"#PHP函数long2ip溢出\" class=\"headerlink\" title=\"PHP函数long2ip溢出\"></a>PHP函数long2ip溢出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpstudy 的PHP默认是32位的，long2ip() 时会有问题，需要换装64位的</span><br><span class=\"line\">reids 也是32位，溢出问题</span><br><span class=\"line\">直接替换 phpstudy 的 php 为 64位版本的，但是 redis 在win上没有，最后使用虚拟机了</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"升级laravel框架\"><a href=\"#升级laravel框架\" class=\"headerlink\" title=\"升级laravel框架\"></a>升级laravel框架</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">升级框架，laravel&#x2F;lumen 5.6.* -&gt; 5.8.* 按照5.8.*修改composer.json依赖一致，然后利用gitbug的文件对比功能，修改改变的文件。</span><br><span class=\"line\">使用 github 版本文件对比，修改更改的文件和受影响的改动</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/laravel/lumen/compare/5.6...master\">Comparing changes</a></p>\n<h2 id=\"reids重启后rdb文件没有加载\"><a href=\"#reids重启后rdb文件没有加载\" class=\"headerlink\" title=\"reids重启后rdb文件没有加载\"></a>reids重启后rdb文件没有加载</h2><ul>\n<li>原因 dir 设置的是 ./ 所以启动时没有到 rdb文件的目录导致没有加载，dir应设置为绝对目录 /usr/local/redis/</li>\n</ul>\n<h2 id=\"服务经常报502\"><a href=\"#服务经常报502\" class=\"headerlink\" title=\"服务经常报502\"></a>服务经常报502</h2><ul>\n<li>ip服务经常报502，但fpm进程并没跑满，后面查看nginx的错误日志发现有connect() to unix:/tmp/php7-cgi.sock failed (11: Resource temporarily unavailable) while connecting to upstream错误</li>\n</ul>\n<p><a href=\"https://www.cnxct.com/something-about-phpfpm-s-backlog/\">backlog</a></p>\n<h2 id=\"git换行符问题\"><a href=\"#git换行符问题\" class=\"headerlink\" title=\"git换行符问题\"></a>git换行符问题</h2><ul>\n<li>github clone 下一个项目，结果文件全是改动 eol unix expect windows</li>\n</ul>\n<p>git自动转换 CRLF<br><a href=\"https://github.com/cssmagic/blog/issues/22\">CRLF 问题</a></p>\n<ul>\n<li>locate 在centos软件包叫 mlocate 首次安装需要 updatedb</li>\n</ul>\n<h2 id=\"检测ip的延迟\"><a href=\"#检测ip的延迟\" class=\"headerlink\" title=\"检测ip的延迟\"></a>检测ip的延迟</h2><ul>\n<li>使用exce() 来ping 不安全，使用socket_create 构建ICMP ping 也需要特殊权限 suid</li>\n</ul>\n<p><a href=\"https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html\">不需要 root 权限的 ICMP ping</a></p>\n<p>使用SOCK_DGRAM<br><code>sudo sysctl -w net.ipv4.ping_group_range=&#39;0 10&#39;</code> 设置用户组<br><a href=\"https://www.jianshu.com/p/d77ede976bb3\">不需要 root</a></p>\n<p>最后还是使用 exce() 来ping，先验证IP合法性</p>\n<h2 id=\"PHP-yar扩展报错\"><a href=\"#PHP-yar扩展报错\" class=\"headerlink\" title=\"PHP yar扩展报错\"></a>PHP yar扩展报错</h2><ul>\n<li>本机yar 扩展打开了msgpack，服务器端没有支持</li>\n</ul>\n<p><a href=\"https://github.com/laruence/yar/issues/113\">MSGPACK</a></p>\n<ul>\n<li>win上phpstudy php使用cgi，并且只有一个进程，代码里yar是循环调用</li>\n</ul>\n<p><a href=\"https://blessing.studio/phpstudy-prober-page-502-bad-gateway/\">WSARecv() failed (10054: An existing connection was forcibly closed by the remote host)</a></p>\n<h2 id=\"laravel-http-status-419\"><a href=\"#laravel-http-status-419\" class=\"headerlink\" title=\"laravel http status 419\"></a>laravel http status 419</h2><p><code>laravel 419 Sorry, your session has expired. Please refresh and try again.</code></p>\n<p>问题是没有加 csrf</p>\n<p><a href=\"https://stackoverflow.com/questions/52583886/post-request-in-laravel-5-7-laravel-5-8-error-419-sorry-your-session-has/53781657#53781657\">419</a></p>\n<h2 id=\"redis-内存出了问题-暂计\"><a href=\"#redis-内存出了问题-暂计\" class=\"headerlink\" title=\"redis 内存出了问题(暂计)\"></a>redis 内存出了问题(暂计)</h2><p><a href=\"https://blog.csdn.net/jiangshouzhuang/article/details/50864933\">reids启动警告1</a></p>\n<p><a href=\"https://www.jianshu.com/p/7ca4b74c92be\">reids启动警告2</a></p>\n<h2 id=\"laravel-迁移报错\"><a href=\"#laravel-迁移报错\" class=\"headerlink\" title=\"laravel 迁移报错\"></a>laravel 迁移报错</h2><p>mysql5.6 字符集 utf8_mb4 varchar(255)<br>767/4=191 意思只能 varchar(191)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; </span><br><span class=\"line\">max key length is 767 bytes (SQL: alter table &#96;jobs&#96; add index &#96;jobs_queue_index&#96;(&#96;queue&#96;))</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes\">error 1071</a></p>\n<h2 id=\"cookie无法删除\"><a href=\"#cookie无法删除\" class=\"headerlink\" title=\"cookie无法删除\"></a>cookie无法删除</h2><ul>\n<li>使用 jquery.cookie removeCookie 无法删除cookie的问题</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/18486165/remove-cookie-using-jquery-not-working\">需要指定path</a></p>\n<h2 id=\"gerrit-提交远程被拒绝\"><a href=\"#gerrit-提交远程被拒绝\" class=\"headerlink\" title=\"gerrit 提交远程被拒绝\"></a>gerrit 提交远程被拒绝</h2><p>原因是 <code>git config --global user.email &quot;your_email@mail.com&quot;</code><br>我把全局的email修改了，phpstorm读取不到，commit 的时候自己填的email没有用，得选择phpstorm显示的才行</p>\n<p>最后我修改回了公司的email，然后commit选择就能push了</p>\n<h2 id=\"phpunit-异常断言\"><a href=\"#phpunit-异常断言\" class=\"headerlink\" title=\"phpunit 异常断言\"></a>phpunit 异常断言</h2><ul>\n<li>phpunit @expectedExceptionMessage 比较时使用的是 strpos</li>\n</ul>\n<h2 id=\"composer-suggest\"><a href=\"#composer-suggest\" class=\"headerlink\" title=\"composer suggest\"></a>composer suggest</h2><ul>\n<li>Psr\\Http\\Message\\ResponseInterface 编辑器找不到</li>\n</ul>\n<p>看了一下安装laravel时貌似没有安装 composer.json 里的 suggest 包，安装时并没有指定 –no-suggest: 跳过扩展包建议，看来是默认不安装的</p>\n<h2 id=\"laravel-s-redis\"><a href=\"#laravel-s-redis\" class=\"headerlink\" title=\"laravel-s redis\"></a>laravel-s redis</h2><ul>\n<li>laravel-s Redis::connection() 返回redis单例连接，每个 worker 进程只能保持一个连接，只有在max_request达到时<br>worker 将自动退出，进程退出后会释放所有内存和资源。</li>\n</ul>\n<h2 id=\"swoole-yar-不兼容\"><a href=\"#swoole-yar-不兼容\" class=\"headerlink\" title=\"swoole yar 不兼容\"></a>swoole yar 不兼容</h2><h2 id=\"laravel-表单验证失败\"><a href=\"#laravel-表单验证失败\" class=\"headerlink\" title=\"laravel 表单验证失败\"></a>laravel 表单验证失败</h2><p>不是ajax请求会302，然后 redirect / 就会 404</p>\n<ol>\n<li>重写 App\\Exceptions\\Handler::render 同一验证失败json输出</li>\n<li>也可以重写request header 因为是非ajax才会302</li>\n</ol>\n<h2 id=\"laravel-PhpRedisConnection-hscan-bug\"><a href=\"#laravel-PhpRedisConnection-hscan-bug\" class=\"headerlink\" title=\"laravel PhpRedisConnection hscan bug\"></a>laravel PhpRedisConnection hscan bug</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$it = <span class=\"literal\">null</span>;</span><br><span class=\"line\">$redis-&gt;setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);</span><br><span class=\"line\"><span class=\"keyword\">while</span>($device_fds = $redis-&gt;client()-&gt;hScan(Link::getFdMapKey(), $it, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($device_fds <span class=\"keyword\">as</span> $device_unique_mark =&gt; $fd) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">echo</span> $device_unique_mark . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>laravel框架封装的问题，需要调用$redis-&gt;client(),而不是直接使用phpredis，$it 需要引用，PhpRedisConnection 使用 __call 调用存在bug</p>\n<h2 id=\"数组参数签名前，最好使用-ksort-排序\"><a href=\"#数组参数签名前，最好使用-ksort-排序\" class=\"headerlink\" title=\"数组参数签名前，最好使用 ksort 排序\"></a>数组参数签名前，最好使用 ksort 排序</h2><p>##laravel queue redis </p>\n<p>因为设置了 –sleep=3 并且没有配置队列 block_for 导致队列延时执行<br>删除了 –sleep=3 并且配置 block_for =&gt; 3<br>block_for：将任务重新放入 Redis 数据库以及处理器轮询之前阻塞多久</p>\n<h2 id=\"php-Trait\"><a href=\"#php-Trait\" class=\"headerlink\" title=\"php Trait\"></a>php Trait</h2><p>定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）<br>可以先定义一个父类使用 Trait，然后子类就能覆写父类的属性了</p>\n<h2 id=\"PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\"><a href=\"#PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\" class=\"headerlink\" title=\"PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\"></a>PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make</span>(<span class=\"params\">$items = []</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">static</span>($items);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"PHP-Mockery-mock\"><a href=\"#PHP-Mockery-mock\" class=\"headerlink\" title=\"PHP Mockery::mock\"></a>PHP Mockery::mock</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需先赋值</span></span><br><span class=\"line\">$request = Mockery::mock(CurlRequest::class);</span><br><span class=\"line\"><span class=\"comment\">// 这里不能连续调用，因为后面返回的不是 $request</span></span><br><span class=\"line\">$request-&gt;shouldReceive(<span class=\"string\">&#x27;post&#x27;</span>)</span><br><span class=\"line\">        -&gt;once()</span><br><span class=\"line\">        -&gt;andReturn([</span><br><span class=\"line\">            <span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;msg&#x27;</span>    =&gt; <span class=\"string\">&#x27;请求成功&#x27;</span></span><br><span class=\"line\">        ]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2019-7-11-小数精度问题\"><a href=\"#2019-7-11-小数精度问题\" class=\"headerlink\" title=\"2019.7.11 小数精度问题\"></a>2019.7.11 小数精度问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">16.33</span> * <span class=\"number\">100</span>; <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(strval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>)); <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"laravel-config-cache-的问题\"><a href=\"#laravel-config-cache-的问题\" class=\"headerlink\" title=\"laravel config:cache 的问题\"></a>laravel config:cache 的问题</h2><p>如果在部署过程中执行 config:cache 命令，那你应该确保只从配置文件内部调用 env 函数。一旦配置被缓存，.env 文件将不再被加载，所有对 env 函数的调用都将返回 null</p>\n<h3 id=\"php-mb-strlen\"><a href=\"#php-mb-strlen\" class=\"headerlink\" title=\"php mb_strlen\"></a>php mb_strlen</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>); <span class=\"comment\">// 2 默认编码UTF-8</span></span><br><span class=\"line\">mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>, <span class=\"string\">&#x27;UTF-8&#x27;</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>, <span class=\"string\">&#x27;8bit&#x27;</span>); <span class=\"comment\">// 6</span></span><br><span class=\"line\">strlen(<span class=\"string\">&#x27;测试&#x27;</span>); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"comment\">// 8bit是php独有解析的, 8bit并不是一个字符集, 只是php引擎可以解析它而已. 顾名思义, 一个字节等于八个位, 1byte=8bit</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP支持mbstring.func_overload, 用于解决原生substr无法有效应对多字节编码字符串问题<br>启用时php runtime状态是未知的， 所以在计算字符长度时， 用mb_strlen 8bit来保证计算字符串长度的正确性（按照1byte = 8bit）</p>\n<p>##PHP 一个if判断变量的速度问题，类型转换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$start = microtime(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">1000000</span>; $i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//    if (count($array)) &#123;&#125; // 0.01805305480957</span></span><br><span class=\"line\"><span class=\"comment\">//    if (is_null($array)) &#123;&#125; // 0.013534784317017</span></span><br><span class=\"line\"><span class=\"comment\">//    if (empty($array)) &#123;&#125; // 0.014011859893799</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$array) &#123;&#125; <span class=\"comment\">// 0.016890048980713</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$end = microtime(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;1: &quot;</span> . ($end - $start) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() . <span class=\"string\">&quot;\\n&quot;</span>; <span class=\"comment\">// 389032</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀\"><a href=\"#laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀\" class=\"headerlink\" title=\"laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀\"></a>laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀</h2><h2 id=\"php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15\"><a href=\"#php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15\" class=\"headerlink\" title=\"php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15\"></a>php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15</h2><h2 id=\"php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数\"><a href=\"#php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数\" class=\"headerlink\" title=\"php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数\"></a>php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数</h2><h2 id=\"php-composer-–ignore-platform-reqs\"><a href=\"#php-composer-–ignore-platform-reqs\" class=\"headerlink\" title=\"php composer –ignore-platform-reqs\"></a>php composer –ignore-platform-reqs</h2><p>可忽略平台约束 例如win下升级 而composer.json require 一些win没有的扩展</p>\n<h2 id=\"http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口\"><a href=\"#http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口\" class=\"headerlink\" title=\"http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口\"></a>http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口</h2><h2 id=\"php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0\"><a href=\"#php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0\" class=\"headerlink\" title=\"php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0\"></a>php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli 下运行</span></span><br><span class=\"line\">$bar = date(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class=\"line\">var_dump(apcu_store(<span class=\"string\">&#x27;foo&#x27;</span>, $bar, <span class=\"number\">3</span>));</span><br><span class=\"line\">sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">var_dump(apcu_fetch(<span class=\"string\">&#x27;foo&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// apc.use_request_time=1 不过期</span></span><br><span class=\"line\"><span class=\"comment\">// 使用请求时间来淘汰缓存</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\"><a href=\"#reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\" class=\"headerlink\" title=\"reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\"></a>reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大</h2><p>可使用yield遍历整个数据集</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$key = <span class=\"string\">&#x27;test_set_111222&#x27;</span>;</span><br><span class=\"line\">$items = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">1000</span>; $i++) &#123;</span><br><span class=\"line\">    $items[] = $i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;redis-&gt;sAdd($key, ...$items);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;get($key, <span class=\"number\">20</span>) <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">    var_dump($item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">$key, <span class=\"keyword\">int</span> $count</span>) : <span class=\"title\">Generator</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;redis-&gt;setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);</span><br><span class=\"line\">    $it = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($item = <span class=\"keyword\">$this</span>-&gt;redis-&gt;client()-&gt;sScan($key, $it, <span class=\"string\">&#x27;*&#x27;</span>, $count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> $item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO\"><a href=\"#下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO\" class=\"headerlink\" title=\"下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO\"></a>下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO</h2><h2 id=\"Wireshark卡死的原因居然是-有道词典的取词功能造成的\"><a href=\"#Wireshark卡死的原因居然是-有道词典的取词功能造成的\" class=\"headerlink\" title=\"Wireshark卡死的原因居然是 有道词典的取词功能造成的\"></a>Wireshark卡死的原因居然是 有道词典的取词功能造成的</h2><p><a href=\"https://segmentfault.com/a/1190000019913529\">wireshark为什么会卡死？</a></p>\n<h2 id=\"socket-set-option-参数顺序\"><a href=\"#socket-set-option-参数顺序\" class=\"headerlink\" title=\"socket_set_option 参数顺序\"></a>socket_set_option 参数顺序</h2><p>SO_REUSEPORT 必须在 bind() 函数之前设置</p>\n<h2 id=\"linux-TCP连接失败-不回复SYN-ACK-问题\"><a href=\"#linux-TCP连接失败-不回复SYN-ACK-问题\" class=\"headerlink\" title=\"linux TCP连接失败(不回复SYN,ACK)问题\"></a>linux TCP连接失败(不回复SYN,ACK)问题</h2><p><a href=\"https://blog.csdn.net/ywq935/article/details/91384854\">参考分析问题1</a></p>\n<p><a href=\"https://www.cnblogs.com/cheyunhua/p/9082674.html\">net.ipv4.tcp_tw_recycle参数</a></p>\n<h2 id=\"php-socket-EVENT扩展-死循环的问题\"><a href=\"#php-socket-EVENT扩展-死循环的问题\" class=\"headerlink\" title=\"php socket EVENT扩展 死循环的问题\"></a>php socket EVENT扩展 死循环的问题</h2><p>代码中出现未捕获异常，导致死循环</p>\n<p>go 模拟RST</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> host = flag.String(<span class=\"string\">&quot;host&quot;</span>, <span class=\"string\">&quot;172.16.1.49&quot;</span>, <span class=\"string\">&quot;host&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = flag.String(<span class=\"string\">&quot;port&quot;</span>, <span class=\"string\">&quot;9999&quot;</span>, <span class=\"string\">&quot;port&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>, *host+<span class=\"string\">&quot;:&quot;</span>+*port)</span><br><span class=\"line\">\tfmt.Println(*host+<span class=\"string\">&quot;:&quot;</span>+*port)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err1&quot;</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttcpConn, ok := conn.(*net.TCPConn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err2&quot;</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttcpConn.SetLinger(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>strace 调试日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 accept(9, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(35959), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 10</span><br><span class=\"line\">39070 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39070 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39070 fcntl(10, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">39070 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">39070 getpeername(10, 0x7fff585ad500, 0x7fff585ad4b4) &#x3D; -1 ENOTCONN (Transport endpoint is not connected)</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">...死循环</span><br></pre></td></tr></table></figure>\n\n<p>正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39579 accept(9, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(26949), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 10</span><br><span class=\"line\">39579 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39579 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39579 fcntl(10, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">39579 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">39579 getpeername(10, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(26949), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 0</span><br><span class=\"line\">39579 epoll_ctl(6, EPOLL_CTL_ADD, 10, &#123;EPOLLIN, &#123;u32&#x3D;10, u64&#x3D;10&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;10, u64&#x3D;10&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39579 recvfrom(10, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">39579 epoll_ctl(6, EPOLL_CTL_DEL, 10, 0x7fff585ad4a0) &#x3D; 0</span><br><span class=\"line\">39579 close(10)                         &#x3D; 0</span><br><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<p>TCP握手成功之后，客户端直接发送RST包断开TCP连接(阿里云负载均衡服务TCP端口健康检查)，socket_getpeername()函数会抛出异常</p>\n<h2 id=\"socket-read-非阻塞模式-EAGAIN处理不正确\"><a href=\"#socket-read-非阻塞模式-EAGAIN处理不正确\" class=\"headerlink\" title=\"socket_read 非阻塞模式 EAGAIN处理不正确\"></a>socket_read 非阻塞模式 EAGAIN处理不正确</h2><p>非阻塞模式下，我们对EAGAIN处理不正确造成（Resource temporarily unavailable）我们继续读时，造成段错误（SIGSEGV 段非法错误 (内存引用无效)​）worker exit，发送RST</p>\n<p>由于我们实现的read 错误的返回了false thrift_protocol_read_binary_after_message_begin() 段错误，需改为空字符</p>\n<h2 id=\"阿里云redis-lua-检查的问题\"><a href=\"#阿里云redis-lua-检查的问题\" class=\"headerlink\" title=\"阿里云redis lua 检查的问题\"></a>阿里云redis lua 检查的问题</h2><p>HMSET key field value [field value …]</p>\n<p>因为直接使用table先组装好了field value<br>执行 script load 脚本时，会检查不成功，从而load失败，因为它判断这里少了一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.call(&#39;hmset&#39;, KEYS[1], unpack(data))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装的虚拟机时间不同步\"><a href=\"#安装的虚拟机时间不同步\" class=\"headerlink\" title=\"安装的虚拟机时间不同步\"></a>安装的虚拟机时间不同步</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"phpxdebug-运行失败，端口繁忙\"><a href=\"#phpxdebug-运行失败，端口繁忙\" class=\"headerlink\" title=\"phpxdebug 运行失败，端口繁忙\"></a>phpxdebug 运行失败，端口繁忙</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为 phpxdebug 端口和 php 默认监听的端口冲突，都是默认9000，把 phpxdebug port 设置为其它端口，如9001</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地测试环境curl，https时因为没有设置公钥而失败\"><a href=\"#本地测试环境curl，https时因为没有设置公钥而失败\" class=\"headerlink\" title=\"本地测试环境curl，https时因为没有设置公钥而失败\"></a>本地测试环境curl，https时因为没有设置公钥而失败</h2><p><a href=\"https://stackoverflow.com/questions/28858351/php-ssl-certificate-error-unable-to-get-local-issuer-certificate\">设置公钥</a></p>\n<h2 id=\"PHP函数long2ip溢出\"><a href=\"#PHP函数long2ip溢出\" class=\"headerlink\" title=\"PHP函数long2ip溢出\"></a>PHP函数long2ip溢出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpstudy 的PHP默认是32位的，long2ip() 时会有问题，需要换装64位的</span><br><span class=\"line\">reids 也是32位，溢出问题</span><br><span class=\"line\">直接替换 phpstudy 的 php 为 64位版本的，但是 redis 在win上没有，最后使用虚拟机了</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"升级laravel框架\"><a href=\"#升级laravel框架\" class=\"headerlink\" title=\"升级laravel框架\"></a>升级laravel框架</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">升级框架，laravel&#x2F;lumen 5.6.* -&gt; 5.8.* 按照5.8.*修改composer.json依赖一致，然后利用gitbug的文件对比功能，修改改变的文件。</span><br><span class=\"line\">使用 github 版本文件对比，修改更改的文件和受影响的改动</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/laravel/lumen/compare/5.6...master\">Comparing changes</a></p>\n<h2 id=\"reids重启后rdb文件没有加载\"><a href=\"#reids重启后rdb文件没有加载\" class=\"headerlink\" title=\"reids重启后rdb文件没有加载\"></a>reids重启后rdb文件没有加载</h2><ul>\n<li>原因 dir 设置的是 ./ 所以启动时没有到 rdb文件的目录导致没有加载，dir应设置为绝对目录 /usr/local/redis/</li>\n</ul>\n<h2 id=\"服务经常报502\"><a href=\"#服务经常报502\" class=\"headerlink\" title=\"服务经常报502\"></a>服务经常报502</h2><ul>\n<li>ip服务经常报502，但fpm进程并没跑满，后面查看nginx的错误日志发现有connect() to unix:/tmp/php7-cgi.sock failed (11: Resource temporarily unavailable) while connecting to upstream错误</li>\n</ul>\n<p><a href=\"https://www.cnxct.com/something-about-phpfpm-s-backlog/\">backlog</a></p>\n<h2 id=\"git换行符问题\"><a href=\"#git换行符问题\" class=\"headerlink\" title=\"git换行符问题\"></a>git换行符问题</h2><ul>\n<li>github clone 下一个项目，结果文件全是改动 eol unix expect windows</li>\n</ul>\n<p>git自动转换 CRLF<br><a href=\"https://github.com/cssmagic/blog/issues/22\">CRLF 问题</a></p>\n<ul>\n<li>locate 在centos软件包叫 mlocate 首次安装需要 updatedb</li>\n</ul>\n<h2 id=\"检测ip的延迟\"><a href=\"#检测ip的延迟\" class=\"headerlink\" title=\"检测ip的延迟\"></a>检测ip的延迟</h2><ul>\n<li>使用exce() 来ping 不安全，使用socket_create 构建ICMP ping 也需要特殊权限 suid</li>\n</ul>\n<p><a href=\"https://blog.lilydjwg.me/2013/10/29/non-privileged-icmp-ping.41390.html\">不需要 root 权限的 ICMP ping</a></p>\n<p>使用SOCK_DGRAM<br><code>sudo sysctl -w net.ipv4.ping_group_range=&#39;0 10&#39;</code> 设置用户组<br><a href=\"https://www.jianshu.com/p/d77ede976bb3\">不需要 root</a></p>\n<p>最后还是使用 exce() 来ping，先验证IP合法性</p>\n<h2 id=\"PHP-yar扩展报错\"><a href=\"#PHP-yar扩展报错\" class=\"headerlink\" title=\"PHP yar扩展报错\"></a>PHP yar扩展报错</h2><ul>\n<li>本机yar 扩展打开了msgpack，服务器端没有支持</li>\n</ul>\n<p><a href=\"https://github.com/laruence/yar/issues/113\">MSGPACK</a></p>\n<ul>\n<li>win上phpstudy php使用cgi，并且只有一个进程，代码里yar是循环调用</li>\n</ul>\n<p><a href=\"https://blessing.studio/phpstudy-prober-page-502-bad-gateway/\">WSARecv() failed (10054: An existing connection was forcibly closed by the remote host)</a></p>\n<h2 id=\"laravel-http-status-419\"><a href=\"#laravel-http-status-419\" class=\"headerlink\" title=\"laravel http status 419\"></a>laravel http status 419</h2><p><code>laravel 419 Sorry, your session has expired. Please refresh and try again.</code></p>\n<p>问题是没有加 csrf</p>\n<p><a href=\"https://stackoverflow.com/questions/52583886/post-request-in-laravel-5-7-laravel-5-8-error-419-sorry-your-session-has/53781657#53781657\">419</a></p>\n<h2 id=\"redis-内存出了问题-暂计\"><a href=\"#redis-内存出了问题-暂计\" class=\"headerlink\" title=\"redis 内存出了问题(暂计)\"></a>redis 内存出了问题(暂计)</h2><p><a href=\"https://blog.csdn.net/jiangshouzhuang/article/details/50864933\">reids启动警告1</a></p>\n<p><a href=\"https://www.jianshu.com/p/7ca4b74c92be\">reids启动警告2</a></p>\n<h2 id=\"laravel-迁移报错\"><a href=\"#laravel-迁移报错\" class=\"headerlink\" title=\"laravel 迁移报错\"></a>laravel 迁移报错</h2><p>mysql5.6 字符集 utf8_mb4 varchar(255)<br>767/4=191 意思只能 varchar(191)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; </span><br><span class=\"line\">max key length is 767 bytes (SQL: alter table &#96;jobs&#96; add index &#96;jobs_queue_index&#96;(&#96;queue&#96;))</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes\">error 1071</a></p>\n<h2 id=\"cookie无法删除\"><a href=\"#cookie无法删除\" class=\"headerlink\" title=\"cookie无法删除\"></a>cookie无法删除</h2><ul>\n<li>使用 jquery.cookie removeCookie 无法删除cookie的问题</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/18486165/remove-cookie-using-jquery-not-working\">需要指定path</a></p>\n<h2 id=\"gerrit-提交远程被拒绝\"><a href=\"#gerrit-提交远程被拒绝\" class=\"headerlink\" title=\"gerrit 提交远程被拒绝\"></a>gerrit 提交远程被拒绝</h2><p>原因是 <code>git config --global user.email &quot;your_email@mail.com&quot;</code><br>我把全局的email修改了，phpstorm读取不到，commit 的时候自己填的email没有用，得选择phpstorm显示的才行</p>\n<p>最后我修改回了公司的email，然后commit选择就能push了</p>\n<h2 id=\"phpunit-异常断言\"><a href=\"#phpunit-异常断言\" class=\"headerlink\" title=\"phpunit 异常断言\"></a>phpunit 异常断言</h2><ul>\n<li>phpunit @expectedExceptionMessage 比较时使用的是 strpos</li>\n</ul>\n<h2 id=\"composer-suggest\"><a href=\"#composer-suggest\" class=\"headerlink\" title=\"composer suggest\"></a>composer suggest</h2><ul>\n<li>Psr\\Http\\Message\\ResponseInterface 编辑器找不到</li>\n</ul>\n<p>看了一下安装laravel时貌似没有安装 composer.json 里的 suggest 包，安装时并没有指定 –no-suggest: 跳过扩展包建议，看来是默认不安装的</p>\n<h2 id=\"laravel-s-redis\"><a href=\"#laravel-s-redis\" class=\"headerlink\" title=\"laravel-s redis\"></a>laravel-s redis</h2><ul>\n<li>laravel-s Redis::connection() 返回redis单例连接，每个 worker 进程只能保持一个连接，只有在max_request达到时<br>worker 将自动退出，进程退出后会释放所有内存和资源。</li>\n</ul>\n<h2 id=\"swoole-yar-不兼容\"><a href=\"#swoole-yar-不兼容\" class=\"headerlink\" title=\"swoole yar 不兼容\"></a>swoole yar 不兼容</h2><h2 id=\"laravel-表单验证失败\"><a href=\"#laravel-表单验证失败\" class=\"headerlink\" title=\"laravel 表单验证失败\"></a>laravel 表单验证失败</h2><p>不是ajax请求会302，然后 redirect / 就会 404</p>\n<ol>\n<li>重写 App\\Exceptions\\Handler::render 同一验证失败json输出</li>\n<li>也可以重写request header 因为是非ajax才会302</li>\n</ol>\n<h2 id=\"laravel-PhpRedisConnection-hscan-bug\"><a href=\"#laravel-PhpRedisConnection-hscan-bug\" class=\"headerlink\" title=\"laravel PhpRedisConnection hscan bug\"></a>laravel PhpRedisConnection hscan bug</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$it = <span class=\"literal\">null</span>;</span><br><span class=\"line\">$redis-&gt;setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);</span><br><span class=\"line\"><span class=\"keyword\">while</span>($device_fds = $redis-&gt;client()-&gt;hScan(Link::getFdMapKey(), $it, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($device_fds <span class=\"keyword\">as</span> $device_unique_mark =&gt; $fd) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">echo</span> $device_unique_mark . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>laravel框架封装的问题，需要调用$redis-&gt;client(),而不是直接使用phpredis，$it 需要引用，PhpRedisConnection 使用 __call 调用存在bug</p>\n<h2 id=\"数组参数签名前，最好使用-ksort-排序\"><a href=\"#数组参数签名前，最好使用-ksort-排序\" class=\"headerlink\" title=\"数组参数签名前，最好使用 ksort 排序\"></a>数组参数签名前，最好使用 ksort 排序</h2><p>##laravel queue redis </p>\n<p>因为设置了 –sleep=3 并且没有配置队列 block_for 导致队列延时执行<br>删除了 –sleep=3 并且配置 block_for =&gt; 3<br>block_for：将任务重新放入 Redis 数据库以及处理器轮询之前阻塞多久</p>\n<h2 id=\"php-Trait\"><a href=\"#php-Trait\" class=\"headerlink\" title=\"php Trait\"></a>php Trait</h2><p>定义了一个属性后，类就不能定义同样名称的属性，否则会产生 fatal error。 有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）<br>可以先定义一个父类使用 Trait，然后子类就能覆写父类的属性了</p>\n<h2 id=\"PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\"><a href=\"#PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\" class=\"headerlink\" title=\"PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定\"></a>PHP可以为一个类提供一个静态方法，实例化自己，延迟绑定</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make</span>(<span class=\"params\">$items = []</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">static</span>($items);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"PHP-Mockery-mock\"><a href=\"#PHP-Mockery-mock\" class=\"headerlink\" title=\"PHP Mockery::mock\"></a>PHP Mockery::mock</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需先赋值</span></span><br><span class=\"line\">$request = Mockery::mock(CurlRequest::class);</span><br><span class=\"line\"><span class=\"comment\">// 这里不能连续调用，因为后面返回的不是 $request</span></span><br><span class=\"line\">$request-&gt;shouldReceive(<span class=\"string\">&#x27;post&#x27;</span>)</span><br><span class=\"line\">        -&gt;once()</span><br><span class=\"line\">        -&gt;andReturn([</span><br><span class=\"line\">            <span class=\"string\">&#x27;status&#x27;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;msg&#x27;</span>    =&gt; <span class=\"string\">&#x27;请求成功&#x27;</span></span><br><span class=\"line\">        ]);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2019-7-11-小数精度问题\"><a href=\"#2019-7-11-小数精度问题\" class=\"headerlink\" title=\"2019.7.11 小数精度问题\"></a>2019.7.11 小数精度问题</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">16.33</span> * <span class=\"number\">100</span>; <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> intval(strval(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>)); <span class=\"comment\">// 1633</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"keyword\">int</span>)(<span class=\"number\">16.33</span> * <span class=\"number\">100</span>); <span class=\"comment\">// 1632</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"laravel-config-cache-的问题\"><a href=\"#laravel-config-cache-的问题\" class=\"headerlink\" title=\"laravel config:cache 的问题\"></a>laravel config:cache 的问题</h2><p>如果在部署过程中执行 config:cache 命令，那你应该确保只从配置文件内部调用 env 函数。一旦配置被缓存，.env 文件将不再被加载，所有对 env 函数的调用都将返回 null</p>\n<h3 id=\"php-mb-strlen\"><a href=\"#php-mb-strlen\" class=\"headerlink\" title=\"php mb_strlen\"></a>php mb_strlen</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>); <span class=\"comment\">// 2 默认编码UTF-8</span></span><br><span class=\"line\">mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>, <span class=\"string\">&#x27;UTF-8&#x27;</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">mb_strlen(<span class=\"string\">&#x27;测试&#x27;</span>, <span class=\"string\">&#x27;8bit&#x27;</span>); <span class=\"comment\">// 6</span></span><br><span class=\"line\">strlen(<span class=\"string\">&#x27;测试&#x27;</span>); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"comment\">// 8bit是php独有解析的, 8bit并不是一个字符集, 只是php引擎可以解析它而已. 顾名思义, 一个字节等于八个位, 1byte=8bit</span></span><br></pre></td></tr></table></figure>\n\n<p>PHP支持mbstring.func_overload, 用于解决原生substr无法有效应对多字节编码字符串问题<br>启用时php runtime状态是未知的， 所以在计算字符长度时， 用mb_strlen 8bit来保证计算字符串长度的正确性（按照1byte = 8bit）</p>\n<p>##PHP 一个if判断变量的速度问题，类型转换</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$start = microtime(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">1000000</span>; $i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//    if (count($array)) &#123;&#125; // 0.01805305480957</span></span><br><span class=\"line\"><span class=\"comment\">//    if (is_null($array)) &#123;&#125; // 0.013534784317017</span></span><br><span class=\"line\"><span class=\"comment\">//    if (empty($array)) &#123;&#125; // 0.014011859893799</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$array) &#123;&#125; <span class=\"comment\">// 0.016890048980713</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$end = microtime(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;1: &quot;</span> . ($end - $start) . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() . <span class=\"string\">&quot;\\n&quot;</span>; <span class=\"comment\">// 389032</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀\"><a href=\"#laravel-phpredis-subscribe-因为使用了redis前缀-channel-返回时需要去掉前缀\" class=\"headerlink\" title=\"laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀\"></a>laravel phpredis subscribe 因为使用了redis前缀 channel 返回时需要去掉前缀</h2><h2 id=\"php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15\"><a href=\"#php多进程编程，pcntl-posix-event，发现grpc扩展会导致进程无法-kill-15\" class=\"headerlink\" title=\"php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15\"></a>php多进程编程，pcntl posix event，发现grpc扩展会导致进程无法 kill -15</h2><h2 id=\"php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数\"><a href=\"#php-apcu扩展需要开启-apc-enable-cli-才能使用apcu-fetch之类的函数\" class=\"headerlink\" title=\"php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数\"></a>php apcu扩展需要开启 apc.enable_cli 才能使用apcu_fetch之类的函数</h2><h2 id=\"php-composer-–ignore-platform-reqs\"><a href=\"#php-composer-–ignore-platform-reqs\" class=\"headerlink\" title=\"php composer –ignore-platform-reqs\"></a>php composer –ignore-platform-reqs</h2><p>可忽略平台约束 例如win下升级 而composer.json require 一些win没有的扩展</p>\n<h2 id=\"http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口\"><a href=\"#http-https-代理解析协议端口时-需要解析-CONNECT-HOST-的端口\" class=\"headerlink\" title=\"http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口\"></a>http https 代理解析协议端口时 需要解析 CONNECT HOST 的端口</h2><h2 id=\"php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0\"><a href=\"#php-apcu-ttl-在cli下不过期的问题，需要设置apc-use-request-time-0\" class=\"headerlink\" title=\"php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0\"></a>php apcu ttl 在cli下不过期的问题，需要设置apc.use_request_time=0</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cli 下运行</span></span><br><span class=\"line\">$bar = date(<span class=\"string\">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class=\"line\">var_dump(apcu_store(<span class=\"string\">&#x27;foo&#x27;</span>, $bar, <span class=\"number\">3</span>));</span><br><span class=\"line\">sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">var_dump(apcu_fetch(<span class=\"string\">&#x27;foo&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// apc.use_request_time=1 不过期</span></span><br><span class=\"line\"><span class=\"comment\">// 使用请求时间来淘汰缓存</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\"><a href=\"#reids-scan-命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\" class=\"headerlink\" title=\"reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大\"></a>reids scan 命令在数据量比较少时例如count指定的返回偏差较大，大数据集时count相差不大</h2><p>可使用yield遍历整个数据集</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$key = <span class=\"string\">&#x27;test_set_111222&#x27;</span>;</span><br><span class=\"line\">$items = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">1000</span>; $i++) &#123;</span><br><span class=\"line\">    $items[] = $i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;redis-&gt;sAdd($key, ...$items);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;get($key, <span class=\"number\">20</span>) <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">    var_dump($item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">$key, <span class=\"keyword\">int</span> $count</span>) : <span class=\"title\">Generator</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;redis-&gt;setOption(\\Redis::OPT_SCAN, \\Redis::SCAN_RETRY);</span><br><span class=\"line\">    $it = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($item = <span class=\"keyword\">$this</span>-&gt;redis-&gt;client()-&gt;sScan($key, $it, <span class=\"string\">&#x27;*&#x27;</span>, $count)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> $item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO\"><a href=\"#下载文件可以使用-header-X-Accel-Redirect-来实现nginx层下载，控制速度，减少IO\" class=\"headerlink\" title=\"下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO\"></a>下载文件可以使用 header X-Accel-Redirect 来实现nginx层下载，控制速度，减少IO</h2><h2 id=\"Wireshark卡死的原因居然是-有道词典的取词功能造成的\"><a href=\"#Wireshark卡死的原因居然是-有道词典的取词功能造成的\" class=\"headerlink\" title=\"Wireshark卡死的原因居然是 有道词典的取词功能造成的\"></a>Wireshark卡死的原因居然是 有道词典的取词功能造成的</h2><p><a href=\"https://segmentfault.com/a/1190000019913529\">wireshark为什么会卡死？</a></p>\n<h2 id=\"socket-set-option-参数顺序\"><a href=\"#socket-set-option-参数顺序\" class=\"headerlink\" title=\"socket_set_option 参数顺序\"></a>socket_set_option 参数顺序</h2><p>SO_REUSEPORT 必须在 bind() 函数之前设置</p>\n<h2 id=\"linux-TCP连接失败-不回复SYN-ACK-问题\"><a href=\"#linux-TCP连接失败-不回复SYN-ACK-问题\" class=\"headerlink\" title=\"linux TCP连接失败(不回复SYN,ACK)问题\"></a>linux TCP连接失败(不回复SYN,ACK)问题</h2><p><a href=\"https://blog.csdn.net/ywq935/article/details/91384854\">参考分析问题1</a></p>\n<p><a href=\"https://www.cnblogs.com/cheyunhua/p/9082674.html\">net.ipv4.tcp_tw_recycle参数</a></p>\n<h2 id=\"php-socket-EVENT扩展-死循环的问题\"><a href=\"#php-socket-EVENT扩展-死循环的问题\" class=\"headerlink\" title=\"php socket EVENT扩展 死循环的问题\"></a>php socket EVENT扩展 死循环的问题</h2><p>代码中出现未捕获异常，导致死循环</p>\n<p>go 模拟RST</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;flag&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> host = flag.String(<span class=\"string\">&quot;host&quot;</span>, <span class=\"string\">&quot;172.16.1.49&quot;</span>, <span class=\"string\">&quot;host&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> port = flag.String(<span class=\"string\">&quot;port&quot;</span>, <span class=\"string\">&quot;9999&quot;</span>, <span class=\"string\">&quot;port&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>, *host+<span class=\"string\">&quot;:&quot;</span>+*port)</span><br><span class=\"line\">\tfmt.Println(*host+<span class=\"string\">&quot;:&quot;</span>+*port)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err1&quot;</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttcpConn, ok := conn.(*net.TCPConn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err2&quot;</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttcpConn.SetLinger(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>strace 调试日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 accept(9, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(35959), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 10</span><br><span class=\"line\">39070 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39070 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39070 fcntl(10, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">39070 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">39070 getpeername(10, 0x7fff585ad500, 0x7fff585ad4b4) &#x3D; -1 ENOTCONN (Transport endpoint is not connected)</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39070 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">...死循环</span><br></pre></td></tr></table></figure>\n\n<p>正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39579 accept(9, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(26949), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 10</span><br><span class=\"line\">39579 setsockopt(10, SOL_SOCKET, SO_RCVTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39579 setsockopt(10, SOL_SOCKET, SO_SNDTIMEO, &quot;\\36\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">39579 fcntl(10, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">39579 fcntl(10, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">39579 getpeername(10, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(26949), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 0</span><br><span class=\"line\">39579 epoll_ctl(6, EPOLL_CTL_ADD, 10, &#123;EPOLLIN, &#123;u32&#x3D;10, u64&#x3D;10&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;10, u64&#x3D;10&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">39579 recvfrom(10, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">39579 epoll_ctl(6, EPOLL_CTL_DEL, 10, 0x7fff585ad4a0) &#x3D; 0</span><br><span class=\"line\">39579 close(10)                         &#x3D; 0</span><br><span class=\"line\">39579 epoll_wait(6, [&#123;EPOLLIN, &#123;u32&#x3D;9, u64&#x3D;9&#125;&#125;], 32, -1) &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<p>TCP握手成功之后，客户端直接发送RST包断开TCP连接(阿里云负载均衡服务TCP端口健康检查)，socket_getpeername()函数会抛出异常</p>\n<h2 id=\"socket-read-非阻塞模式-EAGAIN处理不正确\"><a href=\"#socket-read-非阻塞模式-EAGAIN处理不正确\" class=\"headerlink\" title=\"socket_read 非阻塞模式 EAGAIN处理不正确\"></a>socket_read 非阻塞模式 EAGAIN处理不正确</h2><p>非阻塞模式下，我们对EAGAIN处理不正确造成（Resource temporarily unavailable）我们继续读时，造成段错误（SIGSEGV 段非法错误 (内存引用无效)​）worker exit，发送RST</p>\n<p>由于我们实现的read 错误的返回了false thrift_protocol_read_binary_after_message_begin() 段错误，需改为空字符</p>\n<h2 id=\"阿里云redis-lua-检查的问题\"><a href=\"#阿里云redis-lua-检查的问题\" class=\"headerlink\" title=\"阿里云redis lua 检查的问题\"></a>阿里云redis lua 检查的问题</h2><p>HMSET key field value [field value …]</p>\n<p>因为直接使用table先组装好了field value<br>执行 script load 脚本时，会检查不成功，从而load失败，因为它判断这里少了一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.call(&#39;hmset&#39;, KEYS[1], unpack(data))</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/03/01/algorithms-binary_search.html","title":"算法-二分查找","keywords":"算法,二分查找","description":"算法二分查找","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 二分查找简介\n\n```\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。\n因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；\n否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。\n重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n\n```\n\n## 复杂度\n\n```\n因为二分查找每次排除掉一半的不适合值，所以对于n个元素的情况：\n\n一次二分剩下：n/2\n两次二分剩下：n/2/2 = n/4\n…\nm次二分剩下：n/(2^m)\n\n在最坏情况下是在排除到只剩下最后一个值之后得到结果，即\n\nn/(2^m)=1\n\n所以由上式可得 ： 2^m=n\n\n进而可求出时间复杂度为： log2(n)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $data\n * @param $search\n * @return int|null 返回查询到的键名\n */\nfunction binary_search(array $data, $search)\n{\n    $low = 0;\n    $high = count($data) - 1;\n\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n\n        $guess = $data[$mid];\n\n        if ($guess == $search) {\n            return $mid;\n        } elseif ($guess > $search) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return null;\n}\n\n$array = [1, 3, 5, 6, 8, 9, 14, 15];\n\nvar_dump(binary_search($array, 0));\n```\n","source":"_posts/algorithms/binary_search.md","raw":"---\nurl: /2019/03/01/algorithms-binary_search.html\ntitle: \"算法-二分查找\"\nkeywords: \"算法,二分查找\"\ndescription: \"算法二分查找\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 二分查找简介\n\n```\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。\n因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；\n否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。\n重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n\n```\n\n## 复杂度\n\n```\n因为二分查找每次排除掉一半的不适合值，所以对于n个元素的情况：\n\n一次二分剩下：n/2\n两次二分剩下：n/2/2 = n/4\n…\nm次二分剩下：n/(2^m)\n\n在最坏情况下是在排除到只剩下最后一个值之后得到结果，即\n\nn/(2^m)=1\n\n所以由上式可得 ： 2^m=n\n\n进而可求出时间复杂度为： log2(n)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $data\n * @param $search\n * @return int|null 返回查询到的键名\n */\nfunction binary_search(array $data, $search)\n{\n    $low = 0;\n    $high = count($data) - 1;\n\n    while ($low <= $high) {\n        $mid = (int)(($low + $high) / 2);\n\n        $guess = $data[$mid];\n\n        if ($guess == $search) {\n            return $mid;\n        } elseif ($guess > $search) {\n            $high = $mid - 1;\n        } else {\n            $low = $mid + 1;\n        }\n    }\n    return null;\n}\n\n$array = [1, 3, 5, 6, 8, 9, 14, 15];\n\nvar_dump(binary_search($array, 0));\n```\n","slug":"algorithms/binary_search","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2b0005mv05fdk26zvr","content":"<h2 id=\"二分查找简介\"><a href=\"#二分查找简介\" class=\"headerlink\" title=\"二分查找简介\"></a>二分查找简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。</span><br><span class=\"line\">因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</span><br><span class=\"line\">首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；</span><br><span class=\"line\">否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。</span><br><span class=\"line\">重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为二分查找每次排除掉一半的不适合值，所以对于n个元素的情况：</span><br><span class=\"line\"></span><br><span class=\"line\">一次二分剩下：n&#x2F;2</span><br><span class=\"line\">两次二分剩下：n&#x2F;2&#x2F;2 &#x3D; n&#x2F;4</span><br><span class=\"line\">…</span><br><span class=\"line\">m次二分剩下：n&#x2F;(2^m)</span><br><span class=\"line\"></span><br><span class=\"line\">在最坏情况下是在排除到只剩下最后一个值之后得到结果，即</span><br><span class=\"line\"></span><br><span class=\"line\">n&#x2F;(2^m)&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">所以由上式可得 ： 2^m&#x3D;n</span><br><span class=\"line\"></span><br><span class=\"line\">进而可求出时间复杂度为： log2(n)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $search</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int|null 返回查询到的键名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\"><span class=\"keyword\">array</span> $data, $search</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $high = count($data) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($low &lt;= $high) &#123;</span><br><span class=\"line\">        $mid = (<span class=\"keyword\">int</span>)(($low + $high) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        $guess = $data[$mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($guess == $search) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> ($guess &gt; $search) &#123;</span><br><span class=\"line\">            $high = $mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $low = $mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(binary_search($array, <span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二分查找简介\"><a href=\"#二分查找简介\" class=\"headerlink\" title=\"二分查找简介\"></a>二分查找简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。</span><br><span class=\"line\">因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</span><br><span class=\"line\">首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；</span><br><span class=\"line\">否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。</span><br><span class=\"line\">重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为二分查找每次排除掉一半的不适合值，所以对于n个元素的情况：</span><br><span class=\"line\"></span><br><span class=\"line\">一次二分剩下：n&#x2F;2</span><br><span class=\"line\">两次二分剩下：n&#x2F;2&#x2F;2 &#x3D; n&#x2F;4</span><br><span class=\"line\">…</span><br><span class=\"line\">m次二分剩下：n&#x2F;(2^m)</span><br><span class=\"line\"></span><br><span class=\"line\">在最坏情况下是在排除到只剩下最后一个值之后得到结果，即</span><br><span class=\"line\"></span><br><span class=\"line\">n&#x2F;(2^m)&#x3D;1</span><br><span class=\"line\"></span><br><span class=\"line\">所以由上式可得 ： 2^m&#x3D;n</span><br><span class=\"line\"></span><br><span class=\"line\">进而可求出时间复杂度为： log2(n)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $data</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $search</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int|null 返回查询到的键名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\"><span class=\"keyword\">array</span> $data, $search</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $high = count($data) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($low &lt;= $high) &#123;</span><br><span class=\"line\">        $mid = (<span class=\"keyword\">int</span>)(($low + $high) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        $guess = $data[$mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($guess == $search) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> $mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> ($guess &gt; $search) &#123;</span><br><span class=\"line\">            $high = $mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $low = $mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(binary_search($array, <span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/03/01/algorithms-arrangement-combination.html","title":"算法-排列组合","keywords":"算法,排列组合","description":"算法排列组合","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 排列组合\n\n```\n数学上的阶乘、排列、组合的实现\n```\n## 代码实现\n\n```php\n<?php\n/**\n * 阶乘\n * @param int $n\n * @return int\n */\nfunction factorial(int $n)\n{\n    //array_product 计算并返回数组的乘积\n    //range 创建一个包含指定范围的元素的数组\n    return array_product(range(1, $n));\n}\n\n/**\n * 排列数\n * @param int $n\n * @param int $m\n * @return int\n */\nfunction A(int $n, int $m)\n{\n    return factorial($n) / factorial($n - $m);\n}\n\n/**\n * 组合数\n * @param int $n\n * @param int $m\n * @return int\n */\nfunction C($n, $m)\n{\n    return A($n, $m) / factorial($m);\n}\n\n/**\n * 排列结果\n * @param array $a 排列的数组\n * @param int $m 排列的个数\n * @return array\n */\nfunction arrangement($a, $m)\n{\n    $r = [];\n    $n = count($a);\n    if ($m <= 0 || $m > $n) {\n        return $r;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $b = $a;\n        $t = array_splice($b, $i, 1);\n        if ($m == 1) {\n            $r[] = $t;\n        } else {\n            $c = arrangement($b, $m - 1);\n            foreach ($c as $v) {\n                $r[] = array_merge($t, $v);\n            }\n        }\n    }\n\n    return $r;\n}\n\n/**\n * 组合结果\n * @param array $a 组合的数组\n * @param int $m 组合的个数\n * @return array\n */\nfunction combination(array $a, int $m)\n{\n    $r = [];\n    $n = count($a);\n    if ($m <= 0 || $m > $n) {\n        return $r;\n    }\n\n    for ($i = 0; $i < $n; $i++) {\n        $t = [$a[$i]];\n        if ($m == 1) {\n            $r[] = $t;\n        } else {\n            $b = array_slice($a, $i + 1);\n            $c = combination($b, $m - 1);\n            foreach ($c as $v) {\n                $r[] = array_merge($t, $v);\n            }\n        }\n    }\n    return $r;\n}\n\nvar_dump(C(5, 3));\nvar_dump(combination(range(1, 3), 2));\nvar_dump(arrangement(range(1, 3), 2));\n```\n","source":"_posts/algorithms/arrangement_combination.md","raw":"---\nurl: /2019/03/01/algorithms-arrangement-combination.html\ntitle: \"算法-排列组合\"\nkeywords: \"算法,排列组合\"\ndescription: \"算法排列组合\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 排列组合\n\n```\n数学上的阶乘、排列、组合的实现\n```\n## 代码实现\n\n```php\n<?php\n/**\n * 阶乘\n * @param int $n\n * @return int\n */\nfunction factorial(int $n)\n{\n    //array_product 计算并返回数组的乘积\n    //range 创建一个包含指定范围的元素的数组\n    return array_product(range(1, $n));\n}\n\n/**\n * 排列数\n * @param int $n\n * @param int $m\n * @return int\n */\nfunction A(int $n, int $m)\n{\n    return factorial($n) / factorial($n - $m);\n}\n\n/**\n * 组合数\n * @param int $n\n * @param int $m\n * @return int\n */\nfunction C($n, $m)\n{\n    return A($n, $m) / factorial($m);\n}\n\n/**\n * 排列结果\n * @param array $a 排列的数组\n * @param int $m 排列的个数\n * @return array\n */\nfunction arrangement($a, $m)\n{\n    $r = [];\n    $n = count($a);\n    if ($m <= 0 || $m > $n) {\n        return $r;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $b = $a;\n        $t = array_splice($b, $i, 1);\n        if ($m == 1) {\n            $r[] = $t;\n        } else {\n            $c = arrangement($b, $m - 1);\n            foreach ($c as $v) {\n                $r[] = array_merge($t, $v);\n            }\n        }\n    }\n\n    return $r;\n}\n\n/**\n * 组合结果\n * @param array $a 组合的数组\n * @param int $m 组合的个数\n * @return array\n */\nfunction combination(array $a, int $m)\n{\n    $r = [];\n    $n = count($a);\n    if ($m <= 0 || $m > $n) {\n        return $r;\n    }\n\n    for ($i = 0; $i < $n; $i++) {\n        $t = [$a[$i]];\n        if ($m == 1) {\n            $r[] = $t;\n        } else {\n            $b = array_slice($a, $i + 1);\n            $c = combination($b, $m - 1);\n            foreach ($c as $v) {\n                $r[] = array_merge($t, $v);\n            }\n        }\n    }\n    return $r;\n}\n\nvar_dump(C(5, 3));\nvar_dump(combination(range(1, 3), 2));\nvar_dump(arrangement(range(1, 3), 2));\n```\n","slug":"algorithms/arrangement_combination","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2d0009mv054hn17x1x","content":"<h2 id=\"排列组合\"><a href=\"#排列组合\" class=\"headerlink\" title=\"排列组合\"></a>排列组合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数学上的阶乘、排列、组合的实现</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阶乘</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\"><span class=\"keyword\">int</span> $n</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//array_product 计算并返回数组的乘积</span></span><br><span class=\"line\">    <span class=\"comment\">//range 创建一个包含指定范围的元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_product(range(<span class=\"number\">1</span>, $n));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排列数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"><span class=\"keyword\">int</span> $n, <span class=\"keyword\">int</span> $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factorial($n) / factorial($n - $m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">$n, $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A($n, $m) / factorial($m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排列结果</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $a 排列的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m 排列的个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrangement</span>(<span class=\"params\">$a, $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $r = [];</span><br><span class=\"line\">    $n = count($a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m &lt;= <span class=\"number\">0</span> || $m &gt; $n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">        $b = $a;</span><br><span class=\"line\">        $t = array_splice($b, $i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($m == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $r[] = $t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $c = arrangement($b, $m - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($c <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">                $r[] = array_merge($t, $v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合结果</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $a 组合的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m 组合的个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\"><span class=\"keyword\">array</span> $a, <span class=\"keyword\">int</span> $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $r = [];</span><br><span class=\"line\">    $n = count($a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m &lt;= <span class=\"number\">0</span> || $m &gt; $n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">        $t = [$a[$i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($m == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $r[] = $t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $b = array_slice($a, $i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            $c = combination($b, $m - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($c <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">                $r[] = array_merge($t, $v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(C(<span class=\"number\">5</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">var_dump(combination(range(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"number\">2</span>));</span><br><span class=\"line\">var_dump(arrangement(range(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"排列组合\"><a href=\"#排列组合\" class=\"headerlink\" title=\"排列组合\"></a>排列组合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数学上的阶乘、排列、组合的实现</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阶乘</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\"><span class=\"keyword\">int</span> $n</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//array_product 计算并返回数组的乘积</span></span><br><span class=\"line\">    <span class=\"comment\">//range 创建一个包含指定范围的元素的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array_product(range(<span class=\"number\">1</span>, $n));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排列数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"><span class=\"keyword\">int</span> $n, <span class=\"keyword\">int</span> $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factorial($n) / factorial($n - $m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">$n, $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A($n, $m) / factorial($m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 排列结果</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $a 排列的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m 排列的个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrangement</span>(<span class=\"params\">$a, $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $r = [];</span><br><span class=\"line\">    $n = count($a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m &lt;= <span class=\"number\">0</span> || $m &gt; $n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">        $b = $a;</span><br><span class=\"line\">        $t = array_splice($b, $i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($m == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $r[] = $t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $c = arrangement($b, $m - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($c <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">                $r[] = array_merge($t, $v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合结果</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $a 组合的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $m 组合的个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combination</span>(<span class=\"params\"><span class=\"keyword\">array</span> $a, <span class=\"keyword\">int</span> $m</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $r = [];</span><br><span class=\"line\">    $n = count($a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($m &lt;= <span class=\"number\">0</span> || $m &gt; $n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class=\"line\">        $t = [$a[$i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($m == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $r[] = $t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $b = array_slice($a, $i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            $c = combination($b, $m - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> ($c <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">                $r[] = array_merge($t, $v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(C(<span class=\"number\">5</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">var_dump(combination(range(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"number\">2</span>));</span><br><span class=\"line\">var_dump(arrangement(range(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/05/12/bitmap.html","title":"精确算法bitmap","date":"2020-05-12T02:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n本文参考：[陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX](https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX)\n\n## Bitmap的原理\n\n定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。\n\n例如有一个集合`[2,3,5,8]`对应的 Bitmap 数组是`[001101001]`，集合中的 2 对应到数组 index 为 2 的位置，3 对应到 index 为 3 的位置，\n得到的这样一个数组，我们就称之为 Bitmap。\n\n数组中 1 的数量就是集合的基数。\n\n我们可以把 Bitmap 想象成一个容器，我们知道一个 Integer 是 32 位的，如果一个 Bitmap 可以存放最多 Integer.MAX_VALUE 个值，那么这个 Bitmap 最少需要 32 的长度。\n一个 32 位长度的 Bitmap 占用的空间是 512 M （2^32/8/1024/1024）字节。\n\n这种 Bitmap 存在着非常明显的问题：这种 Bitmap 中不论只有 1 个元素或者有 40 亿个元素，它都需要占据 512 M 的空间。\n\n## Roaring Bitmap\n\nRoaring Bitmap 把一个 32 位的 Integer 划分为高 16 位和低 16 位，取高 16 位找到该条数据所对应的 key，每个 key 都有自己的一个 Container。\n我们把剩余的低 16 位放入该 Container 中。\n依据不同的场景，有 3 种不同的 Container，分别是 Array Container、Bitmap Container 和 Run Container\n\n### Array Container\n\nArray Container 适合存放稀疏的数据，Array Container 内部的数据结构是一个 short array，这个 array 是有序的，方便查找。\n数组初始容量为 4，数组最大容量为 4096。超过最大容量 4096 时，会转换为 Bitmap Container。\n\n这边举例来说明数据放入一个 Array Container 的过程：\n有 0xFFFF0000 和 0xFFFF0001 两个数需要放到 Bitmap 中, 它们的前 16 位都是 FFFF，所以他们是同一个 key，它们的后 16 位存放在同一个 Container 中 ; \n它们的后 16 位分别是 0 和 1, 在 Array Container 的数组中分别保存 0 和 1 就可以了，\n相较于原始的 Bitmap 需要占用 512M 内存来存储这两个数，这种存放实际只占用了 2+4=6 个字节（key 占 2 Bytes，两个 value 占 4 Bytes，不考虑数组的初始容量）。\n\n### Bitmap Container\n\nBitmap Container，其原理就是上文说的 Bitmap。它的数据结构是一个 long 的数组，数组容量固定为 1024，和上文的 Array Container 不同，Array Container 是一个动态扩容的数组。\n\n这边推导下 1024 这个值：\n由于每个 Container 还需处理剩余的后 16 位数据，使用 Bitmap 来存储需要 8192 Bytes（2^16/8）, 而一个 long 值占 8 个 Bytes，所以一共需要 1024（8192/8）个 long 值。\n所以一个 Bitmap container 固定占用内存 8 KB（1024 * 8 Byte）。\n\n当 Array Container 中元素到 4096 个时，也恰好占用 8 k（4096*2Bytes）的空间，正好等于 Bitmap 所占用的 8 KB。\n而当你存放的元素个数超过 4096 的时候，Array Container 的大小占用还是会线性的增长，但是 Bitmap Container 的内存空间并不会增长，始终还是占用 8 K，\n所以当 Array Container 超过最大容量（DEFAULT_MAX_SIZE）会转换为 Bitmap Container。\n\n### Run Container\n\nRun Container，这种 Container 适用于存放连续的数据。\n比如说 1 到 100，一共 100 个数，这种类型的数据称为连续的数据。这边的 Run 指的是 Run Length Encoding（RLE），它对连续数据有比较好的压缩效果。\n原理是对于连续出现的数字, 只记录初始数字和后续数量。\n例如: 对于 `[11, 12, 13, 14, 15, 21, 22]`，会被记录为 `11, 4, 21, 1`。\n很显然，该 Container 的存储占用与数据的分布紧密相关。最好情况是如果数据是连续分布的，就算是存放 65536 个元素，也只会占用 2 个 short。\n而最坏的情况就是当数据全部不连续的时候，会占用 128 KB 内存（每个元素都多了一个表示长度的数）。\n\nRedis 实现了位图\n","source":"_posts/algorithms/bitmap.md","raw":"---\nurl: /2020/05/12/bitmap.html\ntitle: \"精确算法bitmap\"\ndate: 2020-05-12T18:31:57+08:00\ndraft: false\ntags: [\"算法\"]\ntags_weight: 100\ncategories: [\"算法\"]\ncategoryes_weight: 100\n---\n\n本文参考：[陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX](https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX)\n\n## Bitmap的原理\n\n定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。\n\n例如有一个集合`[2,3,5,8]`对应的 Bitmap 数组是`[001101001]`，集合中的 2 对应到数组 index 为 2 的位置，3 对应到 index 为 3 的位置，\n得到的这样一个数组，我们就称之为 Bitmap。\n\n数组中 1 的数量就是集合的基数。\n\n我们可以把 Bitmap 想象成一个容器，我们知道一个 Integer 是 32 位的，如果一个 Bitmap 可以存放最多 Integer.MAX_VALUE 个值，那么这个 Bitmap 最少需要 32 的长度。\n一个 32 位长度的 Bitmap 占用的空间是 512 M （2^32/8/1024/1024）字节。\n\n这种 Bitmap 存在着非常明显的问题：这种 Bitmap 中不论只有 1 个元素或者有 40 亿个元素，它都需要占据 512 M 的空间。\n\n## Roaring Bitmap\n\nRoaring Bitmap 把一个 32 位的 Integer 划分为高 16 位和低 16 位，取高 16 位找到该条数据所对应的 key，每个 key 都有自己的一个 Container。\n我们把剩余的低 16 位放入该 Container 中。\n依据不同的场景，有 3 种不同的 Container，分别是 Array Container、Bitmap Container 和 Run Container\n\n### Array Container\n\nArray Container 适合存放稀疏的数据，Array Container 内部的数据结构是一个 short array，这个 array 是有序的，方便查找。\n数组初始容量为 4，数组最大容量为 4096。超过最大容量 4096 时，会转换为 Bitmap Container。\n\n这边举例来说明数据放入一个 Array Container 的过程：\n有 0xFFFF0000 和 0xFFFF0001 两个数需要放到 Bitmap 中, 它们的前 16 位都是 FFFF，所以他们是同一个 key，它们的后 16 位存放在同一个 Container 中 ; \n它们的后 16 位分别是 0 和 1, 在 Array Container 的数组中分别保存 0 和 1 就可以了，\n相较于原始的 Bitmap 需要占用 512M 内存来存储这两个数，这种存放实际只占用了 2+4=6 个字节（key 占 2 Bytes，两个 value 占 4 Bytes，不考虑数组的初始容量）。\n\n### Bitmap Container\n\nBitmap Container，其原理就是上文说的 Bitmap。它的数据结构是一个 long 的数组，数组容量固定为 1024，和上文的 Array Container 不同，Array Container 是一个动态扩容的数组。\n\n这边推导下 1024 这个值：\n由于每个 Container 还需处理剩余的后 16 位数据，使用 Bitmap 来存储需要 8192 Bytes（2^16/8）, 而一个 long 值占 8 个 Bytes，所以一共需要 1024（8192/8）个 long 值。\n所以一个 Bitmap container 固定占用内存 8 KB（1024 * 8 Byte）。\n\n当 Array Container 中元素到 4096 个时，也恰好占用 8 k（4096*2Bytes）的空间，正好等于 Bitmap 所占用的 8 KB。\n而当你存放的元素个数超过 4096 的时候，Array Container 的大小占用还是会线性的增长，但是 Bitmap Container 的内存空间并不会增长，始终还是占用 8 K，\n所以当 Array Container 超过最大容量（DEFAULT_MAX_SIZE）会转换为 Bitmap Container。\n\n### Run Container\n\nRun Container，这种 Container 适用于存放连续的数据。\n比如说 1 到 100，一共 100 个数，这种类型的数据称为连续的数据。这边的 Run 指的是 Run Length Encoding（RLE），它对连续数据有比较好的压缩效果。\n原理是对于连续出现的数字, 只记录初始数字和后续数量。\n例如: 对于 `[11, 12, 13, 14, 15, 21, 22]`，会被记录为 `11, 4, 21, 1`。\n很显然，该 Container 的存储占用与数据的分布紧密相关。最好情况是如果数据是连续分布的，就算是存放 65536 个元素，也只会占用 2 个 short。\n而最坏的情况就是当数据全部不连续的时候，会占用 128 KB 内存（每个元素都多了一个表示长度的数）。\n\nRedis 实现了位图\n","slug":"algorithms/bitmap","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2f000amv05epcm1qeu","content":"<p>本文参考：<a href=\"https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX\">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p>\n<h2 id=\"Bitmap的原理\"><a href=\"#Bitmap的原理\" class=\"headerlink\" title=\"Bitmap的原理\"></a>Bitmap的原理</h2><p>定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。</p>\n<p>例如有一个集合<code>[2,3,5,8]</code>对应的 Bitmap 数组是<code>[001101001]</code>，集合中的 2 对应到数组 index 为 2 的位置，3 对应到 index 为 3 的位置，<br>得到的这样一个数组，我们就称之为 Bitmap。</p>\n<p>数组中 1 的数量就是集合的基数。</p>\n<p>我们可以把 Bitmap 想象成一个容器，我们知道一个 Integer 是 32 位的，如果一个 Bitmap 可以存放最多 Integer.MAX_VALUE 个值，那么这个 Bitmap 最少需要 32 的长度。<br>一个 32 位长度的 Bitmap 占用的空间是 512 M （2^32/8/1024/1024）字节。</p>\n<p>这种 Bitmap 存在着非常明显的问题：这种 Bitmap 中不论只有 1 个元素或者有 40 亿个元素，它都需要占据 512 M 的空间。</p>\n<h2 id=\"Roaring-Bitmap\"><a href=\"#Roaring-Bitmap\" class=\"headerlink\" title=\"Roaring Bitmap\"></a>Roaring Bitmap</h2><p>Roaring Bitmap 把一个 32 位的 Integer 划分为高 16 位和低 16 位，取高 16 位找到该条数据所对应的 key，每个 key 都有自己的一个 Container。<br>我们把剩余的低 16 位放入该 Container 中。<br>依据不同的场景，有 3 种不同的 Container，分别是 Array Container、Bitmap Container 和 Run Container</p>\n<h3 id=\"Array-Container\"><a href=\"#Array-Container\" class=\"headerlink\" title=\"Array Container\"></a>Array Container</h3><p>Array Container 适合存放稀疏的数据，Array Container 内部的数据结构是一个 short array，这个 array 是有序的，方便查找。<br>数组初始容量为 4，数组最大容量为 4096。超过最大容量 4096 时，会转换为 Bitmap Container。</p>\n<p>这边举例来说明数据放入一个 Array Container 的过程：<br>有 0xFFFF0000 和 0xFFFF0001 两个数需要放到 Bitmap 中, 它们的前 16 位都是 FFFF，所以他们是同一个 key，它们的后 16 位存放在同一个 Container 中 ;<br>它们的后 16 位分别是 0 和 1, 在 Array Container 的数组中分别保存 0 和 1 就可以了，<br>相较于原始的 Bitmap 需要占用 512M 内存来存储这两个数，这种存放实际只占用了 2+4=6 个字节（key 占 2 Bytes，两个 value 占 4 Bytes，不考虑数组的初始容量）。</p>\n<h3 id=\"Bitmap-Container\"><a href=\"#Bitmap-Container\" class=\"headerlink\" title=\"Bitmap Container\"></a>Bitmap Container</h3><p>Bitmap Container，其原理就是上文说的 Bitmap。它的数据结构是一个 long 的数组，数组容量固定为 1024，和上文的 Array Container 不同，Array Container 是一个动态扩容的数组。</p>\n<p>这边推导下 1024 这个值：<br>由于每个 Container 还需处理剩余的后 16 位数据，使用 Bitmap 来存储需要 8192 Bytes（2^16/8）, 而一个 long 值占 8 个 Bytes，所以一共需要 1024（8192/8）个 long 值。<br>所以一个 Bitmap container 固定占用内存 8 KB（1024 * 8 Byte）。</p>\n<p>当 Array Container 中元素到 4096 个时，也恰好占用 8 k（4096*2Bytes）的空间，正好等于 Bitmap 所占用的 8 KB。<br>而当你存放的元素个数超过 4096 的时候，Array Container 的大小占用还是会线性的增长，但是 Bitmap Container 的内存空间并不会增长，始终还是占用 8 K，<br>所以当 Array Container 超过最大容量（DEFAULT_MAX_SIZE）会转换为 Bitmap Container。</p>\n<h3 id=\"Run-Container\"><a href=\"#Run-Container\" class=\"headerlink\" title=\"Run Container\"></a>Run Container</h3><p>Run Container，这种 Container 适用于存放连续的数据。<br>比如说 1 到 100，一共 100 个数，这种类型的数据称为连续的数据。这边的 Run 指的是 Run Length Encoding（RLE），它对连续数据有比较好的压缩效果。<br>原理是对于连续出现的数字, 只记录初始数字和后续数量。<br>例如: 对于 <code>[11, 12, 13, 14, 15, 21, 22]</code>，会被记录为 <code>11, 4, 21, 1</code>。<br>很显然，该 Container 的存储占用与数据的分布紧密相关。最好情况是如果数据是连续分布的，就算是存放 65536 个元素，也只会占用 2 个 short。<br>而最坏的情况就是当数据全部不连续的时候，会占用 128 KB 内存（每个元素都多了一个表示长度的数）。</p>\n<p>Redis 实现了位图</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文参考：<a href=\"https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX\">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p>\n<h2 id=\"Bitmap的原理\"><a href=\"#Bitmap的原理\" class=\"headerlink\" title=\"Bitmap的原理\"></a>Bitmap的原理</h2><p>定义了一个很大的 bit 数组，每个元素对应到 bit 数组的其中一位。</p>\n<p>例如有一个集合<code>[2,3,5,8]</code>对应的 Bitmap 数组是<code>[001101001]</code>，集合中的 2 对应到数组 index 为 2 的位置，3 对应到 index 为 3 的位置，<br>得到的这样一个数组，我们就称之为 Bitmap。</p>\n<p>数组中 1 的数量就是集合的基数。</p>\n<p>我们可以把 Bitmap 想象成一个容器，我们知道一个 Integer 是 32 位的，如果一个 Bitmap 可以存放最多 Integer.MAX_VALUE 个值，那么这个 Bitmap 最少需要 32 的长度。<br>一个 32 位长度的 Bitmap 占用的空间是 512 M （2^32/8/1024/1024）字节。</p>\n<p>这种 Bitmap 存在着非常明显的问题：这种 Bitmap 中不论只有 1 个元素或者有 40 亿个元素，它都需要占据 512 M 的空间。</p>\n<h2 id=\"Roaring-Bitmap\"><a href=\"#Roaring-Bitmap\" class=\"headerlink\" title=\"Roaring Bitmap\"></a>Roaring Bitmap</h2><p>Roaring Bitmap 把一个 32 位的 Integer 划分为高 16 位和低 16 位，取高 16 位找到该条数据所对应的 key，每个 key 都有自己的一个 Container。<br>我们把剩余的低 16 位放入该 Container 中。<br>依据不同的场景，有 3 种不同的 Container，分别是 Array Container、Bitmap Container 和 Run Container</p>\n<h3 id=\"Array-Container\"><a href=\"#Array-Container\" class=\"headerlink\" title=\"Array Container\"></a>Array Container</h3><p>Array Container 适合存放稀疏的数据，Array Container 内部的数据结构是一个 short array，这个 array 是有序的，方便查找。<br>数组初始容量为 4，数组最大容量为 4096。超过最大容量 4096 时，会转换为 Bitmap Container。</p>\n<p>这边举例来说明数据放入一个 Array Container 的过程：<br>有 0xFFFF0000 和 0xFFFF0001 两个数需要放到 Bitmap 中, 它们的前 16 位都是 FFFF，所以他们是同一个 key，它们的后 16 位存放在同一个 Container 中 ;<br>它们的后 16 位分别是 0 和 1, 在 Array Container 的数组中分别保存 0 和 1 就可以了，<br>相较于原始的 Bitmap 需要占用 512M 内存来存储这两个数，这种存放实际只占用了 2+4=6 个字节（key 占 2 Bytes，两个 value 占 4 Bytes，不考虑数组的初始容量）。</p>\n<h3 id=\"Bitmap-Container\"><a href=\"#Bitmap-Container\" class=\"headerlink\" title=\"Bitmap Container\"></a>Bitmap Container</h3><p>Bitmap Container，其原理就是上文说的 Bitmap。它的数据结构是一个 long 的数组，数组容量固定为 1024，和上文的 Array Container 不同，Array Container 是一个动态扩容的数组。</p>\n<p>这边推导下 1024 这个值：<br>由于每个 Container 还需处理剩余的后 16 位数据，使用 Bitmap 来存储需要 8192 Bytes（2^16/8）, 而一个 long 值占 8 个 Bytes，所以一共需要 1024（8192/8）个 long 值。<br>所以一个 Bitmap container 固定占用内存 8 KB（1024 * 8 Byte）。</p>\n<p>当 Array Container 中元素到 4096 个时，也恰好占用 8 k（4096*2Bytes）的空间，正好等于 Bitmap 所占用的 8 KB。<br>而当你存放的元素个数超过 4096 的时候，Array Container 的大小占用还是会线性的增长，但是 Bitmap Container 的内存空间并不会增长，始终还是占用 8 K，<br>所以当 Array Container 超过最大容量（DEFAULT_MAX_SIZE）会转换为 Bitmap Container。</p>\n<h3 id=\"Run-Container\"><a href=\"#Run-Container\" class=\"headerlink\" title=\"Run Container\"></a>Run Container</h3><p>Run Container，这种 Container 适用于存放连续的数据。<br>比如说 1 到 100，一共 100 个数，这种类型的数据称为连续的数据。这边的 Run 指的是 Run Length Encoding（RLE），它对连续数据有比较好的压缩效果。<br>原理是对于连续出现的数字, 只记录初始数字和后续数量。<br>例如: 对于 <code>[11, 12, 13, 14, 15, 21, 22]</code>，会被记录为 <code>11, 4, 21, 1</code>。<br>很显然，该 Container 的存储占用与数据的分布紧密相关。最好情况是如果数据是连续分布的，就算是存放 65536 个元素，也只会占用 2 个 short。<br>而最坏的情况就是当数据全部不连续的时候，会占用 128 KB 内存（每个元素都多了一个表示长度的数）。</p>\n<p>Redis 实现了位图</p>\n"},{"url":"/2019/04/01/algorithms-circuit-breaker.html","title":"算法-简易模拟熔断器","keywords":"算法,熔断器","description":"算法熔断器","date":"2019-04-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 简介\n\n```\n一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试，\n导致宕机的基础服务遭受到数倍的流量放大，更加无法恢复服务。\n\n这种恶劣的情况并不会就此结束，上游因为调用基础服务超时而变慢，导致上游的上游超时…异常向上蔓延，最终导致整个分布式系统”雪崩”。\n\n“熔断”就是为了避免”雪崩”而生的，它的思路是在调用方增加一种”避让”机制，当下游出现异常时能够停止（熔断）对下游的继续请求，\n当等待一段时间后缓慢放行部分的调用流量，并当这部分流量依旧正常的情况下，彻底解除”熔断”状态。\n\n```\n\n## PHP代码实现\n\n```php\n<?php\n/**\n * Class HealthStats\n * 熔断器健康状态\n */\nclass HealthStats\n{\n    /**\n     * 时间窗口10个bucket，每个bucket 1秒\n     */\n    private const BUCKET_NUM = 10;\n\n    /**\n     * 成功率大于该值为正常\n     */\n    private const HEALTHY_RATE = 0.9;\n\n    private $service = '';\n    private $buckets = [];\n    private $current_time = 0;\n\n    public function __construct(string $service)\n    {\n        $this->service = $service;\n    }\n\n    public function success()\n    {\n        $this->shiftBuckets();\n\n        $this->buckets[count($this->buckets) - 1]['success']++;\n    }\n\n    public function fail()\n    {\n        $this->shiftBuckets();\n\n        $this->buckets[count($this->buckets) - 1]['fail']++;\n    }\n\n    public function isHealthy()\n    {\n        $this->shiftBuckets();\n\n        $success = 0;\n        $fail = 0;\n        foreach ($this->buckets as $bucket) {\n            $success += $bucket['success'];\n            $fail += $bucket['fail'];\n        }\n\n        $total = $success + $fail;\n\n        // 少于10个请求的样本太少，不计算成功率\n        if ($total < 10) {\n            return true;\n        }\n\n        return ($success * 1.0 / $total) >= self::HEALTHY_RATE;\n    }\n\n    protected function shiftBuckets()\n    {\n        $now = time();\n\n        $time_diff = $now - $this->current_time;\n        // 是当前时间，直接return\n        if (!$time_diff) {\n            return;\n        }\n\n        // 重新赋值 buckets\n        if ($time_diff >= self::BUCKET_NUM) {\n            $this->buckets = array_fill(0, self::BUCKET_NUM, ['success' => 0, 'fail' => 0]);\n        } else {\n            $this->buckets = array_merge(\n                array_slice($this->buckets, $time_diff, self::BUCKET_NUM - $time_diff),\n                array_fill(0, $time_diff, ['success' => 0, 'fail' => 0])\n            );\n        }\n        $this->current_time = $now;\n    }\n}\n\n/**\n * Class CircuitBreaker\n * 熔断器\n */\nclass CircuitBreaker\n{\n    /**\n     * 熔断后停止所有流量5秒\n     */\n    private const BREAK_PERIOD = 1;\n\n    /**\n     * 完全恢复需要再花费3秒\n     */\n    private const RECOVER_PERIOD = 2;\n\n    private $health_stats;\n    /**\n     * 1 关闭状态 熔断器的初始化状态，该状态下允许请求通过。当失败超过阀值，转入打开状态\n     * 2 打开状态 熔断状态，该状态下不允许请求通过，当进入该状态经过一段时间，进入半开状态\n     * 3 半开状态 在半开状态期间，允许部分请求通过，在半开期间，观察失败状态是否超过阀值。如果没有超过进入关闭状态，如果超过了进入打开状态。\n     * @var int\n     */\n    private $status = 1;\n\n    /**\n     * 熔断的时间点\n     * @var int\n     */\n    private $break_time = 0;\n\n    public function __construct(HealthStats $health_stats)\n    {\n        $this->health_stats = $health_stats;\n    }\n\n    public function isBreak()\n    {\n        $now = time();\n        $is_healthy = $this->health_stats->isHealthy();\n        $break_last_time = $now - $this->break_time;\n\n        $is_break = false;\n\n        switch ($this->status) {\n            case 1:\n                if (!$is_healthy) {\n                    $this->status = 2;\n                    $this->break_time = time();\n                    $is_break = true;\n                    echo '触发熔断' . PHP_EOL;\n                    sleep(3);\n                }\n                break;\n            case 2:\n                if ($break_last_time < self::BREAK_PERIOD || !$is_healthy) {\n                    $is_break = true;\n                } else {\n                    $this->status = 3;\n                    echo '进入恢复' . PHP_EOL;\n                }\n                break;\n            case 3:\n                if (!$is_healthy) {\n                    $this->status = 2;\n                    $this->break_time = time();\n                    $is_break = true;\n                    echo '恢复期间再次熔断' . PHP_EOL;\n                    sleep(3);\n                } else {\n                    if ($break_last_time >= self::BREAK_PERIOD + self::RECOVER_PERIOD) {\n                        $this->status = 1;\n                        echo '恢复正常' . PHP_EOL;\n                    } else {\n                        $pass_rate = $break_last_time * 1.0 / (self::BREAK_PERIOD + self::RECOVER_PERIOD);\n                        if (mt_rand() / mt_getrandmax() > $pass_rate) {\n                            $is_break = true;\n                        }\n                    }\n                }\n                break;\n        }\n        return $is_break;\n    }\n}\n\n$healthStats = new HealthStats('test_1');\n$circuitBreaker = new CircuitBreaker($healthStats);\n\nfor ($i = 0; $i < 40; $i++) {\n    if (in_array($i, [9 , 10, 20])) {\n        $healthStats->fail();\n    } else {\n        $healthStats->success();\n    }\n    $circuitBreaker->isBreak();\n    echo $i;\n}\n```\n\n[参考链接](https://yuerblog.cc/2017/12/08/microservice-circuit-breaker/)\n","source":"_posts/algorithms/circuit_breaker.md","raw":"---\nurl: /2019/04/01/algorithms-circuit-breaker.html\ntitle: \"算法-简易模拟熔断器\"\nkeywords: \"算法,熔断器\"\ndescription: \"算法熔断器\"\ndate: 2019-04-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 简介\n\n```\n一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试，\n导致宕机的基础服务遭受到数倍的流量放大，更加无法恢复服务。\n\n这种恶劣的情况并不会就此结束，上游因为调用基础服务超时而变慢，导致上游的上游超时…异常向上蔓延，最终导致整个分布式系统”雪崩”。\n\n“熔断”就是为了避免”雪崩”而生的，它的思路是在调用方增加一种”避让”机制，当下游出现异常时能够停止（熔断）对下游的继续请求，\n当等待一段时间后缓慢放行部分的调用流量，并当这部分流量依旧正常的情况下，彻底解除”熔断”状态。\n\n```\n\n## PHP代码实现\n\n```php\n<?php\n/**\n * Class HealthStats\n * 熔断器健康状态\n */\nclass HealthStats\n{\n    /**\n     * 时间窗口10个bucket，每个bucket 1秒\n     */\n    private const BUCKET_NUM = 10;\n\n    /**\n     * 成功率大于该值为正常\n     */\n    private const HEALTHY_RATE = 0.9;\n\n    private $service = '';\n    private $buckets = [];\n    private $current_time = 0;\n\n    public function __construct(string $service)\n    {\n        $this->service = $service;\n    }\n\n    public function success()\n    {\n        $this->shiftBuckets();\n\n        $this->buckets[count($this->buckets) - 1]['success']++;\n    }\n\n    public function fail()\n    {\n        $this->shiftBuckets();\n\n        $this->buckets[count($this->buckets) - 1]['fail']++;\n    }\n\n    public function isHealthy()\n    {\n        $this->shiftBuckets();\n\n        $success = 0;\n        $fail = 0;\n        foreach ($this->buckets as $bucket) {\n            $success += $bucket['success'];\n            $fail += $bucket['fail'];\n        }\n\n        $total = $success + $fail;\n\n        // 少于10个请求的样本太少，不计算成功率\n        if ($total < 10) {\n            return true;\n        }\n\n        return ($success * 1.0 / $total) >= self::HEALTHY_RATE;\n    }\n\n    protected function shiftBuckets()\n    {\n        $now = time();\n\n        $time_diff = $now - $this->current_time;\n        // 是当前时间，直接return\n        if (!$time_diff) {\n            return;\n        }\n\n        // 重新赋值 buckets\n        if ($time_diff >= self::BUCKET_NUM) {\n            $this->buckets = array_fill(0, self::BUCKET_NUM, ['success' => 0, 'fail' => 0]);\n        } else {\n            $this->buckets = array_merge(\n                array_slice($this->buckets, $time_diff, self::BUCKET_NUM - $time_diff),\n                array_fill(0, $time_diff, ['success' => 0, 'fail' => 0])\n            );\n        }\n        $this->current_time = $now;\n    }\n}\n\n/**\n * Class CircuitBreaker\n * 熔断器\n */\nclass CircuitBreaker\n{\n    /**\n     * 熔断后停止所有流量5秒\n     */\n    private const BREAK_PERIOD = 1;\n\n    /**\n     * 完全恢复需要再花费3秒\n     */\n    private const RECOVER_PERIOD = 2;\n\n    private $health_stats;\n    /**\n     * 1 关闭状态 熔断器的初始化状态，该状态下允许请求通过。当失败超过阀值，转入打开状态\n     * 2 打开状态 熔断状态，该状态下不允许请求通过，当进入该状态经过一段时间，进入半开状态\n     * 3 半开状态 在半开状态期间，允许部分请求通过，在半开期间，观察失败状态是否超过阀值。如果没有超过进入关闭状态，如果超过了进入打开状态。\n     * @var int\n     */\n    private $status = 1;\n\n    /**\n     * 熔断的时间点\n     * @var int\n     */\n    private $break_time = 0;\n\n    public function __construct(HealthStats $health_stats)\n    {\n        $this->health_stats = $health_stats;\n    }\n\n    public function isBreak()\n    {\n        $now = time();\n        $is_healthy = $this->health_stats->isHealthy();\n        $break_last_time = $now - $this->break_time;\n\n        $is_break = false;\n\n        switch ($this->status) {\n            case 1:\n                if (!$is_healthy) {\n                    $this->status = 2;\n                    $this->break_time = time();\n                    $is_break = true;\n                    echo '触发熔断' . PHP_EOL;\n                    sleep(3);\n                }\n                break;\n            case 2:\n                if ($break_last_time < self::BREAK_PERIOD || !$is_healthy) {\n                    $is_break = true;\n                } else {\n                    $this->status = 3;\n                    echo '进入恢复' . PHP_EOL;\n                }\n                break;\n            case 3:\n                if (!$is_healthy) {\n                    $this->status = 2;\n                    $this->break_time = time();\n                    $is_break = true;\n                    echo '恢复期间再次熔断' . PHP_EOL;\n                    sleep(3);\n                } else {\n                    if ($break_last_time >= self::BREAK_PERIOD + self::RECOVER_PERIOD) {\n                        $this->status = 1;\n                        echo '恢复正常' . PHP_EOL;\n                    } else {\n                        $pass_rate = $break_last_time * 1.0 / (self::BREAK_PERIOD + self::RECOVER_PERIOD);\n                        if (mt_rand() / mt_getrandmax() > $pass_rate) {\n                            $is_break = true;\n                        }\n                    }\n                }\n                break;\n        }\n        return $is_break;\n    }\n}\n\n$healthStats = new HealthStats('test_1');\n$circuitBreaker = new CircuitBreaker($healthStats);\n\nfor ($i = 0; $i < 40; $i++) {\n    if (in_array($i, [9 , 10, 20])) {\n        $healthStats->fail();\n    } else {\n        $healthStats->success();\n    }\n    $circuitBreaker->isBreak();\n    echo $i;\n}\n```\n\n[参考链接](https://yuerblog.cc/2017/12/08/microservice-circuit-breaker/)\n","slug":"algorithms/circuit_breaker","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2i000emv059xnbde3d","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试，</span><br><span class=\"line\">导致宕机的基础服务遭受到数倍的流量放大，更加无法恢复服务。</span><br><span class=\"line\"></span><br><span class=\"line\">这种恶劣的情况并不会就此结束，上游因为调用基础服务超时而变慢，导致上游的上游超时…异常向上蔓延，最终导致整个分布式系统”雪崩”。</span><br><span class=\"line\"></span><br><span class=\"line\">“熔断”就是为了避免”雪崩”而生的，它的思路是在调用方增加一种”避让”机制，当下游出现异常时能够停止（熔断）对下游的继续请求，</span><br><span class=\"line\">当等待一段时间后缓慢放行部分的调用流量，并当这部分流量依旧正常的情况下，彻底解除”熔断”状态。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP代码实现\"><a href=\"#PHP代码实现\" class=\"headerlink\" title=\"PHP代码实现\"></a>PHP代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class HealthStats</span></span><br><span class=\"line\"><span class=\"comment\"> * 熔断器健康状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HealthStats</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间窗口10个bucket，每个bucket 1秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> BUCKET_NUM = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 成功率大于该值为正常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> HEALTHY_RATE = <span class=\"number\">0.9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $service = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $buckets = [];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $current_time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">string</span> $service</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;service = $service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buckets[count(<span class=\"keyword\">$this</span>-&gt;buckets) - <span class=\"number\">1</span>][<span class=\"string\">&#x27;success&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buckets[count(<span class=\"keyword\">$this</span>-&gt;buckets) - <span class=\"number\">1</span>][<span class=\"string\">&#x27;fail&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isHealthy</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        $success = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $fail = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;buckets <span class=\"keyword\">as</span> $bucket) &#123;</span><br><span class=\"line\">            $success += $bucket[<span class=\"string\">&#x27;success&#x27;</span>];</span><br><span class=\"line\">            $fail += $bucket[<span class=\"string\">&#x27;fail&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $total = $success + $fail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 少于10个请求的样本太少，不计算成功率</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($total &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ($success * <span class=\"number\">1.0</span> / $total) &gt;= <span class=\"built_in\">self</span>::HEALTHY_RATE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shiftBuckets</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        $time_diff = $now - <span class=\"keyword\">$this</span>-&gt;current_time;</span><br><span class=\"line\">        <span class=\"comment\">// 是当前时间，直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$time_diff) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重新赋值 buckets</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($time_diff &gt;= <span class=\"built_in\">self</span>::BUCKET_NUM) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;buckets = array_fill(<span class=\"number\">0</span>, <span class=\"built_in\">self</span>::BUCKET_NUM, [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span> =&gt; <span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;buckets = array_merge(</span><br><span class=\"line\">                array_slice(<span class=\"keyword\">$this</span>-&gt;buckets, $time_diff, <span class=\"built_in\">self</span>::BUCKET_NUM - $time_diff),</span><br><span class=\"line\">                array_fill(<span class=\"number\">0</span>, $time_diff, [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span> =&gt; <span class=\"number\">0</span>])</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current_time = $now;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class CircuitBreaker</span></span><br><span class=\"line\"><span class=\"comment\"> * 熔断器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircuitBreaker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 熔断后停止所有流量5秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> BREAK_PERIOD = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完全恢复需要再花费3秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> RECOVER_PERIOD = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $health_stats;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 关闭状态 熔断器的初始化状态，该状态下允许请求通过。当失败超过阀值，转入打开状态</span></span><br><span class=\"line\"><span class=\"comment\">     * 2 打开状态 熔断状态，该状态下不允许请求通过，当进入该状态经过一段时间，进入半开状态</span></span><br><span class=\"line\"><span class=\"comment\">     * 3 半开状态 在半开状态期间，允许部分请求通过，在半开期间，观察失败状态是否超过阀值。如果没有超过进入关闭状态，如果超过了进入打开状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $status = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 熔断的时间点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $break_time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">HealthStats $health_stats</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;health_stats = $health_stats;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBreak</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\">        $is_healthy = <span class=\"keyword\">$this</span>-&gt;health_stats-&gt;isHealthy();</span><br><span class=\"line\">        $break_last_time = $now - <span class=\"keyword\">$this</span>-&gt;break_time;</span><br><span class=\"line\"></span><br><span class=\"line\">        $is_break = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!$is_healthy) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;break_time = time();</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;触发熔断&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($break_last_time &lt; <span class=\"built_in\">self</span>::BREAK_PERIOD || !$is_healthy) &#123;</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;进入恢复&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!$is_healthy) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;break_time = time();</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;恢复期间再次熔断&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ($break_last_time &gt;= <span class=\"built_in\">self</span>::BREAK_PERIOD + <span class=\"built_in\">self</span>::RECOVER_PERIOD) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;恢复正常&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        $pass_rate = $break_last_time * <span class=\"number\">1.0</span> / (<span class=\"built_in\">self</span>::BREAK_PERIOD + <span class=\"built_in\">self</span>::RECOVER_PERIOD);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (mt_rand() / mt_getrandmax() &gt; $pass_rate) &#123;</span><br><span class=\"line\">                            $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $is_break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$healthStats = <span class=\"keyword\">new</span> HealthStats(<span class=\"string\">&#x27;test_1&#x27;</span>);</span><br><span class=\"line\">$circuitBreaker = <span class=\"keyword\">new</span> CircuitBreaker($healthStats);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">40</span>; $i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (in_array($i, [<span class=\"number\">9</span> , <span class=\"number\">10</span>, <span class=\"number\">20</span>])) &#123;</span><br><span class=\"line\">        $healthStats-&gt;fail();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $healthStats-&gt;success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $circuitBreaker-&gt;isBreak();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://yuerblog.cc/2017/12/08/microservice-circuit-breaker/\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个分布式系统中，服务间互相调用错综复杂，假设某个基础服务宕机，那么就会导致若干上游调用方出现访问超时，进而引起上游重试，</span><br><span class=\"line\">导致宕机的基础服务遭受到数倍的流量放大，更加无法恢复服务。</span><br><span class=\"line\"></span><br><span class=\"line\">这种恶劣的情况并不会就此结束，上游因为调用基础服务超时而变慢，导致上游的上游超时…异常向上蔓延，最终导致整个分布式系统”雪崩”。</span><br><span class=\"line\"></span><br><span class=\"line\">“熔断”就是为了避免”雪崩”而生的，它的思路是在调用方增加一种”避让”机制，当下游出现异常时能够停止（熔断）对下游的继续请求，</span><br><span class=\"line\">当等待一段时间后缓慢放行部分的调用流量，并当这部分流量依旧正常的情况下，彻底解除”熔断”状态。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP代码实现\"><a href=\"#PHP代码实现\" class=\"headerlink\" title=\"PHP代码实现\"></a>PHP代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class HealthStats</span></span><br><span class=\"line\"><span class=\"comment\"> * 熔断器健康状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HealthStats</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间窗口10个bucket，每个bucket 1秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> BUCKET_NUM = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 成功率大于该值为正常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> HEALTHY_RATE = <span class=\"number\">0.9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $service = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $buckets = [];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $current_time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">string</span> $service</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;service = $service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">success</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buckets[count(<span class=\"keyword\">$this</span>-&gt;buckets) - <span class=\"number\">1</span>][<span class=\"string\">&#x27;success&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;buckets[count(<span class=\"keyword\">$this</span>-&gt;buckets) - <span class=\"number\">1</span>][<span class=\"string\">&#x27;fail&#x27;</span>]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isHealthy</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;shiftBuckets();</span><br><span class=\"line\"></span><br><span class=\"line\">        $success = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $fail = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;buckets <span class=\"keyword\">as</span> $bucket) &#123;</span><br><span class=\"line\">            $success += $bucket[<span class=\"string\">&#x27;success&#x27;</span>];</span><br><span class=\"line\">            $fail += $bucket[<span class=\"string\">&#x27;fail&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $total = $success + $fail;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 少于10个请求的样本太少，不计算成功率</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($total &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ($success * <span class=\"number\">1.0</span> / $total) &gt;= <span class=\"built_in\">self</span>::HEALTHY_RATE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shiftBuckets</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\"></span><br><span class=\"line\">        $time_diff = $now - <span class=\"keyword\">$this</span>-&gt;current_time;</span><br><span class=\"line\">        <span class=\"comment\">// 是当前时间，直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$time_diff) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 重新赋值 buckets</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($time_diff &gt;= <span class=\"built_in\">self</span>::BUCKET_NUM) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;buckets = array_fill(<span class=\"number\">0</span>, <span class=\"built_in\">self</span>::BUCKET_NUM, [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span> =&gt; <span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;buckets = array_merge(</span><br><span class=\"line\">                array_slice(<span class=\"keyword\">$this</span>-&gt;buckets, $time_diff, <span class=\"built_in\">self</span>::BUCKET_NUM - $time_diff),</span><br><span class=\"line\">                array_fill(<span class=\"number\">0</span>, $time_diff, [<span class=\"string\">&#x27;success&#x27;</span> =&gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span> =&gt; <span class=\"number\">0</span>])</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current_time = $now;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class CircuitBreaker</span></span><br><span class=\"line\"><span class=\"comment\"> * 熔断器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircuitBreaker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 熔断后停止所有流量5秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> BREAK_PERIOD = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 完全恢复需要再花费3秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> RECOVER_PERIOD = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $health_stats;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1 关闭状态 熔断器的初始化状态，该状态下允许请求通过。当失败超过阀值，转入打开状态</span></span><br><span class=\"line\"><span class=\"comment\">     * 2 打开状态 熔断状态，该状态下不允许请求通过，当进入该状态经过一段时间，进入半开状态</span></span><br><span class=\"line\"><span class=\"comment\">     * 3 半开状态 在半开状态期间，允许部分请求通过，在半开期间，观察失败状态是否超过阀值。如果没有超过进入关闭状态，如果超过了进入打开状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $status = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 熔断的时间点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $break_time = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">HealthStats $health_stats</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;health_stats = $health_stats;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBreak</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $now = time();</span><br><span class=\"line\">        $is_healthy = <span class=\"keyword\">$this</span>-&gt;health_stats-&gt;isHealthy();</span><br><span class=\"line\">        $break_last_time = $now - <span class=\"keyword\">$this</span>-&gt;break_time;</span><br><span class=\"line\"></span><br><span class=\"line\">        $is_break = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">$this</span>-&gt;status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!$is_healthy) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;break_time = time();</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;触发熔断&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($break_last_time &lt; <span class=\"built_in\">self</span>::BREAK_PERIOD || !$is_healthy) &#123;</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;进入恢复&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!$is_healthy) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;break_time = time();</span><br><span class=\"line\">                    $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;恢复期间再次熔断&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ($break_last_time &gt;= <span class=\"built_in\">self</span>::BREAK_PERIOD + <span class=\"built_in\">self</span>::RECOVER_PERIOD) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">$this</span>-&gt;status = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;恢复正常&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        $pass_rate = $break_last_time * <span class=\"number\">1.0</span> / (<span class=\"built_in\">self</span>::BREAK_PERIOD + <span class=\"built_in\">self</span>::RECOVER_PERIOD);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (mt_rand() / mt_getrandmax() &gt; $pass_rate) &#123;</span><br><span class=\"line\">                            $is_break = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $is_break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$healthStats = <span class=\"keyword\">new</span> HealthStats(<span class=\"string\">&#x27;test_1&#x27;</span>);</span><br><span class=\"line\">$circuitBreaker = <span class=\"keyword\">new</span> CircuitBreaker($healthStats);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; <span class=\"number\">40</span>; $i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (in_array($i, [<span class=\"number\">9</span> , <span class=\"number\">10</span>, <span class=\"number\">20</span>])) &#123;</span><br><span class=\"line\">        $healthStats-&gt;fail();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $healthStats-&gt;success();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $circuitBreaker-&gt;isBreak();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://yuerblog.cc/2017/12/08/microservice-circuit-breaker/\">参考链接</a></p>\n"},{"url":"/2019/03/01/algorithms-bubble-sort.html","title":"算法-冒泡排序","keywords":"算法,冒泡排序","description":"算法冒泡排序","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 冒泡排序简介\n\n```\n冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。\n它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。\n走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名\n```\n\n## 复杂度\n\n```\n最坏情况下的时间复杂度都是O(n^2)，最好情况下都是O(n)，空间复杂度是O(1)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @return array\n */\nfunction bubbleSort(array $arr)\n{\n    $len = count($arr);\n    //设置一个空数组 用来接收冒出来的泡\n    //该层循环控制 需要冒泡的轮数\n    for ($i = 1; $i < $len; $i++) {\n        //该层循环用来控制每轮 冒出一个数 需要比较的次数\n        for ($k = 0; $k < $len - $i; $k++) {\n            if ($arr[$k] > $arr[$k + 1]) {\n                $tmp = $arr[$k + 1];\n                $arr[$k + 1] = $arr[$k];\n                $arr[$k] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\nvar_dump(bubbleSort($arr));\n```\n","source":"_posts/algorithms/bubble_sort.md","raw":"---\nurl: /2019/03/01/algorithms-bubble-sort.html\ntitle: \"算法-冒泡排序\"\nkeywords: \"算法,冒泡排序\"\ndescription: \"算法冒泡排序\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 冒泡排序简介\n\n```\n冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。\n它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。\n走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名\n```\n\n## 复杂度\n\n```\n最坏情况下的时间复杂度都是O(n^2)，最好情况下都是O(n)，空间复杂度是O(1)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @return array\n */\nfunction bubbleSort(array $arr)\n{\n    $len = count($arr);\n    //设置一个空数组 用来接收冒出来的泡\n    //该层循环控制 需要冒泡的轮数\n    for ($i = 1; $i < $len; $i++) {\n        //该层循环用来控制每轮 冒出一个数 需要比较的次数\n        for ($k = 0; $k < $len - $i; $k++) {\n            if ($arr[$k] > $arr[$k + 1]) {\n                $tmp = $arr[$k + 1];\n                $arr[$k + 1] = $arr[$k];\n                $arr[$k] = $tmp;\n            }\n        }\n    }\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\nvar_dump(bubbleSort($arr));\n```\n","slug":"algorithms/bubble_sort","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2k000gmv05gca9birg","content":"<h2 id=\"冒泡排序简介\"><a href=\"#冒泡排序简介\" class=\"headerlink\" title=\"冒泡排序简介\"></a>冒泡排序简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</span><br><span class=\"line\">它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</span><br><span class=\"line\">走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</span><br><span class=\"line\">这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最坏情况下的时间复杂度都是O(n^2)，最好情况下都是O(n)，空间复杂度是O(1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"comment\">//设置一个空数组 用来接收冒出来的泡</span></span><br><span class=\"line\">    <span class=\"comment\">//该层循环控制 需要冒泡的轮数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//该层循环用来控制每轮 冒出一个数 需要比较的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = <span class=\"number\">0</span>; $k &lt; $len - $i; $k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$k] &gt; $arr[$k + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                $tmp = $arr[$k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                $arr[$k + <span class=\"number\">1</span>] = $arr[$k];</span><br><span class=\"line\">                $arr[$k] = $tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">var_dump(bubbleSort($arr));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序简介\"><a href=\"#冒泡排序简介\" class=\"headerlink\" title=\"冒泡排序简介\"></a>冒泡排序简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</span><br><span class=\"line\">它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</span><br><span class=\"line\">走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</span><br><span class=\"line\">这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，故名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最坏情况下的时间复杂度都是O(n^2)，最好情况下都是O(n)，空间复杂度是O(1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"comment\">//设置一个空数组 用来接收冒出来的泡</span></span><br><span class=\"line\">    <span class=\"comment\">//该层循环控制 需要冒泡的轮数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//该层循环用来控制每轮 冒出一个数 需要比较的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($k = <span class=\"number\">0</span>; $k &lt; $len - $i; $k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$k] &gt; $arr[$k + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                $tmp = $arr[$k + <span class=\"number\">1</span>];</span><br><span class=\"line\">                $arr[$k + <span class=\"number\">1</span>] = $arr[$k];</span><br><span class=\"line\">                $arr[$k] = $tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">var_dump(bubbleSort($arr));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/04/01/algorithms-consistent-hash.html","title":"算法-一致性Hash","keywords":"算法,一致性Hash","description":"一致性Hash","date":"2019-04-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 简介\n\n\n一致性哈希算法（Consistent Hashing）最早在论文\n[《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》](https://dl.acm.org/doi/10.1145/258533.258660)\n中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形）\n\n\n## PHP实现\n\n```php\nclass ConsistentHash\n{\n    /**\n     * 圆环 hash => node\n     * @var array\n     */\n    protected $ring = [];\n\n    /**\n     * 节点 node => hash\n     * @var array\n     */\n    protected $nodes = [];\n\n    /**\n     * 每个节点的虚拟节点，当节点较少时使用虚拟节点使分布更均匀\n     * @var int\n     */\n    protected $virtual = 40;\n\n    /**\n     * 标识圆环是否排序过\n     * @var bool\n     */\n    protected $ring_sorted = false;\n\n    public function __construct(array $nodes = [])\n    {\n        foreach ($nodes as $node) {\n            $this->addNode($node);\n        }\n    }\n\n    /**\n     * 添加一个节点\n     * @param string $node\n     * @return bool\n     */\n    public function addNode(string $node): bool\n    {\n        if (key_exists($node, $this->nodes)) {\n            return true;\n        }\n        $this->ring_sorted = false;\n\n        for ($i = 1; $i <= $this->virtual; $i++) {\n            $key = $this->time33($node . '-' . $i);\n            $this->ring[$key] = $node;\n            $this->nodes[$node][] = $key;\n        }\n\n        return true;\n    }\n\n    /**\n     * 获取字符串的HASH在圆环上面映射到的节点\n     * @param string $key\n     * @return string $node\n     */\n    public function getNode(string $key): string\n    {\n        if (!$this->ring_sorted) {\n            ksort($this->ring, SORT_NUMERIC);\n            $this->ring_sorted = true;\n        }\n\n        $node = current($this->ring);\n        $hash = $this->time33($key);\n        foreach ($this->ring as $k => $v) {\n            if ($hash <= $k) {\n                $node = $v;\n                break;\n            }\n        }\n        return $node;\n    }\n\n\n    /**\n     * hash(i) = hash(i-1) * 33 + str[i]\n     * @param string $str\n     * @return int\n     */\n    protected function time33(string $str): int\n    {\n        $str = md5($str);\n        $hash = 5381;\n//        $hash = 0;\n        $seed = 5;\n        $len = 32; // 加密后长度32\n        for ($i = 0; $i < $len; $i++) {\n            // (hash << 5) + hash 相当于 hash * 33\n            //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n            //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n            $hash = ($hash << $seed) + $hash + ord($str{$i});\n        }\n        return $hash & 0x7FFFFFFF;\n    }\n}\n\n$ch_obj = new ConsistentHash();\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n\n$rings = [];\nfor ($i = 1; $i <= 10000; $i++) {\n    $key = md5(random());\n    $node = $ch_obj->getNode($key);\n    $rings[$node] = isset($rings[$node]) ? ++$rings[$node] : 1;\n}\n\n//sort($rings);\nvar_dump($rings);\n\nfunction random($length = 16)\n{\n    $string = '';\n\n    while (($len = strlen($string)) < $length) {\n        $size = $length - $len;\n\n        $bytes = random_bytes($size);\n\n        $string .= substr(str_replace(['/', '+', '='], '', base64_encode($bytes)), 0, $size);\n    }\n\n    return $string;\n}\n```\n\n[参考链接](https://juejin.im/post/5ae1476ef265da0b8d419ef2)\n","source":"_posts/algorithms/consistent_hash.md","raw":"---\nurl: /2019/04/01/algorithms-consistent-hash.html\ntitle: \"算法-一致性Hash\"\nkeywords: \"算法,一致性Hash\"\ndescription: \"一致性Hash\"\ndate: 2019-04-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 简介\n\n\n一致性哈希算法（Consistent Hashing）最早在论文\n[《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》](https://dl.acm.org/doi/10.1145/258533.258660)\n中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形）\n\n\n## PHP实现\n\n```php\nclass ConsistentHash\n{\n    /**\n     * 圆环 hash => node\n     * @var array\n     */\n    protected $ring = [];\n\n    /**\n     * 节点 node => hash\n     * @var array\n     */\n    protected $nodes = [];\n\n    /**\n     * 每个节点的虚拟节点，当节点较少时使用虚拟节点使分布更均匀\n     * @var int\n     */\n    protected $virtual = 40;\n\n    /**\n     * 标识圆环是否排序过\n     * @var bool\n     */\n    protected $ring_sorted = false;\n\n    public function __construct(array $nodes = [])\n    {\n        foreach ($nodes as $node) {\n            $this->addNode($node);\n        }\n    }\n\n    /**\n     * 添加一个节点\n     * @param string $node\n     * @return bool\n     */\n    public function addNode(string $node): bool\n    {\n        if (key_exists($node, $this->nodes)) {\n            return true;\n        }\n        $this->ring_sorted = false;\n\n        for ($i = 1; $i <= $this->virtual; $i++) {\n            $key = $this->time33($node . '-' . $i);\n            $this->ring[$key] = $node;\n            $this->nodes[$node][] = $key;\n        }\n\n        return true;\n    }\n\n    /**\n     * 获取字符串的HASH在圆环上面映射到的节点\n     * @param string $key\n     * @return string $node\n     */\n    public function getNode(string $key): string\n    {\n        if (!$this->ring_sorted) {\n            ksort($this->ring, SORT_NUMERIC);\n            $this->ring_sorted = true;\n        }\n\n        $node = current($this->ring);\n        $hash = $this->time33($key);\n        foreach ($this->ring as $k => $v) {\n            if ($hash <= $k) {\n                $node = $v;\n                break;\n            }\n        }\n        return $node;\n    }\n\n\n    /**\n     * hash(i) = hash(i-1) * 33 + str[i]\n     * @param string $str\n     * @return int\n     */\n    protected function time33(string $str): int\n    {\n        $str = md5($str);\n        $hash = 5381;\n//        $hash = 0;\n        $seed = 5;\n        $len = 32; // 加密后长度32\n        for ($i = 0; $i < $len; $i++) {\n            // (hash << 5) + hash 相当于 hash * 33\n            //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n            //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n            $hash = ($hash << $seed) + $hash + ord($str{$i});\n        }\n        return $hash & 0x7FFFFFFF;\n    }\n}\n\n$ch_obj = new ConsistentHash();\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n$ch_obj->addNode(random());\n\n$rings = [];\nfor ($i = 1; $i <= 10000; $i++) {\n    $key = md5(random());\n    $node = $ch_obj->getNode($key);\n    $rings[$node] = isset($rings[$node]) ? ++$rings[$node] : 1;\n}\n\n//sort($rings);\nvar_dump($rings);\n\nfunction random($length = 16)\n{\n    $string = '';\n\n    while (($len = strlen($string)) < $length) {\n        $size = $length - $len;\n\n        $bytes = random_bytes($size);\n\n        $string .= substr(str_replace(['/', '+', '='], '', base64_encode($bytes)), 0, $size);\n    }\n\n    return $string;\n}\n```\n\n[参考链接](https://juejin.im/post/5ae1476ef265da0b8d419ef2)\n","slug":"algorithms/consistent_hash","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2m000jmv05hu3748lf","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>一致性哈希算法（Consistent Hashing）最早在论文<br><a href=\"https://dl.acm.org/doi/10.1145/258533.258660\">《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》</a><br>中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形）</p>\n<h2 id=\"PHP实现\"><a href=\"#PHP实现\" class=\"headerlink\" title=\"PHP实现\"></a>PHP实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHash</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 圆环 hash =&gt; node</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $ring = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 节点 node =&gt; hash</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个节点的虚拟节点，当节点较少时使用虚拟节点使分布更均匀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $virtual = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标识圆环是否排序过</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $ring_sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $nodes = []</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($nodes <span class=\"keyword\">as</span> $node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addNode($node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $node</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNode</span>(<span class=\"params\"><span class=\"keyword\">string</span> $node</span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key_exists($node, <span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ring_sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"keyword\">$this</span>-&gt;virtual; $i++) &#123;</span><br><span class=\"line\">            $key = <span class=\"keyword\">$this</span>-&gt;time33($node . <span class=\"string\">&#x27;-&#x27;</span> . $i);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ring[$key] = $node;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;nodes[$node][] = $key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字符串的HASH在圆环上面映射到的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNode</span>(<span class=\"params\"><span class=\"keyword\">string</span> $key</span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;ring_sorted) &#123;</span><br><span class=\"line\">            ksort(<span class=\"keyword\">$this</span>-&gt;ring, SORT_NUMERIC);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ring_sorted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $node = current(<span class=\"keyword\">$this</span>-&gt;ring);</span><br><span class=\"line\">        $hash = <span class=\"keyword\">$this</span>-&gt;time33($key);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;ring <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($hash &lt;= $k) &#123;</span><br><span class=\"line\">                $node = $v;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash(i) = hash(i-1) * 33 + str[i]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">time33</span>(<span class=\"params\"><span class=\"keyword\">string</span> $str</span>): <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $str = md5($str);</span><br><span class=\"line\">        $hash = <span class=\"number\">5381</span>;</span><br><span class=\"line\"><span class=\"comment\">//        $hash = 0;</span></span><br><span class=\"line\">        $seed = <span class=\"number\">5</span>;</span><br><span class=\"line\">        $len = <span class=\"number\">32</span>; <span class=\"comment\">// 加密后长度32</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></span><br><span class=\"line\">            <span class=\"comment\">//$hash = sprintf(&quot;%u&quot;, $hash * 33) + ord($s&#123;$i&#125;);</span></span><br><span class=\"line\">            <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></span><br><span class=\"line\">            $hash = ($hash &lt;&lt; $seed) + $hash + ord($str&#123;$i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ch_obj = <span class=\"keyword\">new</span> ConsistentHash();</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\"></span><br><span class=\"line\">$rings = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"number\">10000</span>; $i++) &#123;</span><br><span class=\"line\">    $key = md5(random());</span><br><span class=\"line\">    $node = $ch_obj-&gt;getNode($key);</span><br><span class=\"line\">    $rings[$node] = <span class=\"keyword\">isset</span>($rings[$node]) ? ++$rings[$node] : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sort($rings);</span></span><br><span class=\"line\">var_dump($rings);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random</span>(<span class=\"params\">$length = <span class=\"number\">16</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $string = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (($len = strlen($string)) &lt; $length) &#123;</span><br><span class=\"line\">        $size = $length - $len;</span><br><span class=\"line\"></span><br><span class=\"line\">        $bytes = random_bytes($size);</span><br><span class=\"line\"></span><br><span class=\"line\">        $string .= substr(str_replace([<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;=&#x27;</span>], <span class=\"string\">&#x27;&#x27;</span>, base64_encode($bytes)), <span class=\"number\">0</span>, $size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.im/post/5ae1476ef265da0b8d419ef2\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>一致性哈希算法（Consistent Hashing）最早在论文<br><a href=\"https://dl.acm.org/doi/10.1145/258533.258660\">《Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web》</a><br>中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形）</p>\n<h2 id=\"PHP实现\"><a href=\"#PHP实现\" class=\"headerlink\" title=\"PHP实现\"></a>PHP实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHash</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 圆环 hash =&gt; node</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $ring = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 节点 node =&gt; hash</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个节点的虚拟节点，当节点较少时使用虚拟节点使分布更均匀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $virtual = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标识圆环是否排序过</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $ring_sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $nodes = []</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($nodes <span class=\"keyword\">as</span> $node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;addNode($node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加一个节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $node</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNode</span>(<span class=\"params\"><span class=\"keyword\">string</span> $node</span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key_exists($node, <span class=\"keyword\">$this</span>-&gt;nodes)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;ring_sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"keyword\">$this</span>-&gt;virtual; $i++) &#123;</span><br><span class=\"line\">            $key = <span class=\"keyword\">$this</span>-&gt;time33($node . <span class=\"string\">&#x27;-&#x27;</span> . $i);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ring[$key] = $node;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;nodes[$node][] = $key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取字符串的HASH在圆环上面映射到的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string $node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNode</span>(<span class=\"params\"><span class=\"keyword\">string</span> $key</span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;ring_sorted) &#123;</span><br><span class=\"line\">            ksort(<span class=\"keyword\">$this</span>-&gt;ring, SORT_NUMERIC);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ring_sorted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $node = current(<span class=\"keyword\">$this</span>-&gt;ring);</span><br><span class=\"line\">        $hash = <span class=\"keyword\">$this</span>-&gt;time33($key);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;ring <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($hash &lt;= $k) &#123;</span><br><span class=\"line\">                $node = $v;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash(i) = hash(i-1) * 33 + str[i]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">time33</span>(<span class=\"params\"><span class=\"keyword\">string</span> $str</span>): <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $str = md5($str);</span><br><span class=\"line\">        $hash = <span class=\"number\">5381</span>;</span><br><span class=\"line\"><span class=\"comment\">//        $hash = 0;</span></span><br><span class=\"line\">        $seed = <span class=\"number\">5</span>;</span><br><span class=\"line\">        $len = <span class=\"number\">32</span>; <span class=\"comment\">// 加密后长度32</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></span><br><span class=\"line\">            <span class=\"comment\">//$hash = sprintf(&quot;%u&quot;, $hash * 33) + ord($s&#123;$i&#125;);</span></span><br><span class=\"line\">            <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></span><br><span class=\"line\">            $hash = ($hash &lt;&lt; $seed) + $hash + ord($str&#123;$i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ch_obj = <span class=\"keyword\">new</span> ConsistentHash();</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\">$ch_obj-&gt;addNode(random());</span><br><span class=\"line\"></span><br><span class=\"line\">$rings = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"number\">10000</span>; $i++) &#123;</span><br><span class=\"line\">    $key = md5(random());</span><br><span class=\"line\">    $node = $ch_obj-&gt;getNode($key);</span><br><span class=\"line\">    $rings[$node] = <span class=\"keyword\">isset</span>($rings[$node]) ? ++$rings[$node] : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sort($rings);</span></span><br><span class=\"line\">var_dump($rings);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random</span>(<span class=\"params\">$length = <span class=\"number\">16</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $string = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (($len = strlen($string)) &lt; $length) &#123;</span><br><span class=\"line\">        $size = $length - $len;</span><br><span class=\"line\"></span><br><span class=\"line\">        $bytes = random_bytes($size);</span><br><span class=\"line\"></span><br><span class=\"line\">        $string .= substr(str_replace([<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;=&#x27;</span>], <span class=\"string\">&#x27;&#x27;</span>, base64_encode($bytes)), <span class=\"number\">0</span>, $size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://juejin.im/post/5ae1476ef265da0b8d419ef2\">参考链接</a></p>\n"},{"url":"/2020/05/12/hyper-log-log.html","title":"非精确算法HyperLogLog","date":"2020-05-12T02:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n本文参考：\n\n[陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX](https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX)\n\n[rainybowe 神奇的HyperLogLog算法](http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html)\n\n## 算法简介\n\n是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数\n\nHLL 算法需要完整遍历所有元素一次，而非多次或采样；\n\n该算法只能计算集合中有多少个不重复的元素，不能给出每个元素的出现次数或是判断一个元素是否之前出现过；\n\n多个使用 HLL 统计出的基数值可以融合。\n\n\n在牺牲一定准确性的前提下，存储空间可以被大量节省\n\n算法|存储空间(10^6)|误差\n---|---|---\nBitmap|120KB|0%\nHLL(10)|1KB|9.75%\nHLL(12)|4KB|4.88%\nHLL(14)|16KB|2.44%\nHLL(16)|64KB|1.22%\n\n空间复杂度：Bitmap（O(N)），HLL（O(log2log2N)）\n\nHLL 算法有着非常优异的空间复杂度，可以看到它的空间占用随着基数值的增长并没有变化。\nHLL 后面不同的数字代表着不同的精度，数字越大，精度越高，占用的空间也越大，可以认为 HLL 的空间占用只和精度成正相关。\n\n## 算法的原理简介\n\n举一个生活中的例子来帮助大家理解 HLL 算法的原理：\n比如你在进行一个实验，内容是不停地抛硬币，出现正反面的概率都是1/2，记录你连续抛到正面的次数K，\n这种抛硬币多次直到出现正面的过程记为一次伯努利过程，对于n次伯努利过程，我们会得到n个出现正面的投掷次数值K1,K2,K3...Kn，其中最大值记为Kmax，\n那么可以得到下面结论：\n- n次伯努利过程的投掷次数都不大于Kmax\n- n次伯努利过程，至少有一次投掷次数等于Kmax\n\n![概率公式](/images/hyper_log_log.jpg)\n\n以上结论可以总结为：进行了n次进行抛硬币实验，每次分别记录下第一次抛到正面的抛掷次数K，那么可以用n次实验中最大的抛掷次数Kmax来预估实验组数量n：\nn = 2^Kmax\n\n如果你最多连抛正面记录是 3 次，那可以想象你并没有做这个实验太多次，如果你最长连抛正面记录是 20 次，那你可能进行了这个实验上千次。\n\n一种理论上存在的情况是，你非常幸运，第一次进行这个实验就连抛了 20 次正面，我们也会认为你进行了很多次这个实验才得到了这个记录，这就会导致错误预估；\n改进的方式是请 10 位同学进行这项实验，这样就可以观察到更多的样本数据，降低出现上述情况的概率。这就是 HLL 算法的核心思想。\n\n## 算法具体实现\n\n1. 用一个哈希函数，对数据流中的每一个元素求出哈希值\n\n如果使用long来存储哈希值，则该哈希函数需要把2^64个不同的值映射到 0 ~ 2^64 -1 上\n\n2. 对于每个哈希值，取最后p位来决定桶的序号\n\n3. 在剩下的(64 - p)位中找到第一个1出现的位置，如果大于桶中现有的值，则更新\n\n4. 所有元素处理完毕后，求所有桶中值的调和平均数\n\n调和平均数是将所有的数值取倒数并求其算术平均数之后，再将次算术平均数取倒数而得\n\n5. 乘以m得到最后的结果E\n\nHLL 会通过一个 hash 函数来求出集合中所有元素的 hash 值（二进制表示的 hash 值，就可以理解为一串抛硬币正反面结果的序列），得到一个 hash 值的集合，然后找出该 hash 值集合中，第一个 1 出现的最晚的位置。\n\n例如有集合为 `[010, 100, 001]`, 集合中元素的第一个 1 出现的位置分别为 2, 1, 3，可以得到里面最大值为 3，故该集合中第一个 1 出现的最晚的位置为 3。\n因为每个位置上出现 1 的概率都是 1/2，所以我们可以做一个简单的推断，该集合中有 8 个不重复的元素。\n\n可以看到这种简单推断计算出来集合的基数值是有较大的偏差的，那如何来减少偏差呢？\n\n正如我上面的例子里说的一样，HLL 通过多次的进行试验来减少误差。那它是如何进行多次的实验的呢？\n\n这里 HLL 使用了分桶的思想，上文中我们一直有提到一个精度的概念，比如说 HLL(10)，这个 10 代表的就是取该元素对应 Hash 值二进制的后 10 位，\n计算出记录对应的桶，桶中会记录一个数字，代表对应到该桶的 hash 值的第一个 1 出现的最晚的位置。\n\n例如哈希值：`0000010010111010111100 0000001001`\n该 hash 值的后 10 位的 hash 值是 `0000001001`，转成 10 进制是 9，对应第 9 号桶，而该 hash 值第一个 1 出现的位置是第 6 位，如果比原先 9 号桶中的数字大，那么把 9 号桶中的数字更新为 6。\n可以看到桶的个数越多，HLL 算法的精度就越高，HLL(10) 有 1024(2^10) 个桶，HLL(16) 有 65536(2^16) 个桶。\n同样的，桶的个数越多，所占用的空间也会越大。\n\nHLL 的误差分布服从正态分布，它的空间复杂度: O(m log2log2N), Ｎ 为基数, m 为桶个数。\n这边给大家推导一下它的空间复杂度，我有 264 个的不重复元素 (Long. MAX_VALUE)，表达为二进制一个数是 64 位，这是第一重 log2, 那么第一个 1 最晚可能出现在第 64 位。\n64 需要 6 个 bit (26=64) 就可以存储，这是第二重 log2。如果精度为 10，则会有 1024 个桶，所以最外面还要乘以桶的个数。\n由于需要完整的遍历元素一遍，所以它的时间复杂度是一个线性的时间复杂度\n\n\nRedis实现了HyperLogLog\n","source":"_posts/algorithms/hyper_log_log.md","raw":"---\nurl: /2020/05/12/hyper-log-log.html\ntitle: \"非精确算法HyperLogLog\"\ndate: 2020-05-12T18:31:57+08:00\ndraft: false\ntags: [\"算法\"]\ntags_weight: 100\ncategories: [\"算法\"]\ncategoryes_weight: 100\n---\n\n本文参考：\n\n[陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX](https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX)\n\n[rainybowe 神奇的HyperLogLog算法](http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html)\n\n## 算法简介\n\n是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数\n\nHLL 算法需要完整遍历所有元素一次，而非多次或采样；\n\n该算法只能计算集合中有多少个不重复的元素，不能给出每个元素的出现次数或是判断一个元素是否之前出现过；\n\n多个使用 HLL 统计出的基数值可以融合。\n\n\n在牺牲一定准确性的前提下，存储空间可以被大量节省\n\n算法|存储空间(10^6)|误差\n---|---|---\nBitmap|120KB|0%\nHLL(10)|1KB|9.75%\nHLL(12)|4KB|4.88%\nHLL(14)|16KB|2.44%\nHLL(16)|64KB|1.22%\n\n空间复杂度：Bitmap（O(N)），HLL（O(log2log2N)）\n\nHLL 算法有着非常优异的空间复杂度，可以看到它的空间占用随着基数值的增长并没有变化。\nHLL 后面不同的数字代表着不同的精度，数字越大，精度越高，占用的空间也越大，可以认为 HLL 的空间占用只和精度成正相关。\n\n## 算法的原理简介\n\n举一个生活中的例子来帮助大家理解 HLL 算法的原理：\n比如你在进行一个实验，内容是不停地抛硬币，出现正反面的概率都是1/2，记录你连续抛到正面的次数K，\n这种抛硬币多次直到出现正面的过程记为一次伯努利过程，对于n次伯努利过程，我们会得到n个出现正面的投掷次数值K1,K2,K3...Kn，其中最大值记为Kmax，\n那么可以得到下面结论：\n- n次伯努利过程的投掷次数都不大于Kmax\n- n次伯努利过程，至少有一次投掷次数等于Kmax\n\n![概率公式](/images/hyper_log_log.jpg)\n\n以上结论可以总结为：进行了n次进行抛硬币实验，每次分别记录下第一次抛到正面的抛掷次数K，那么可以用n次实验中最大的抛掷次数Kmax来预估实验组数量n：\nn = 2^Kmax\n\n如果你最多连抛正面记录是 3 次，那可以想象你并没有做这个实验太多次，如果你最长连抛正面记录是 20 次，那你可能进行了这个实验上千次。\n\n一种理论上存在的情况是，你非常幸运，第一次进行这个实验就连抛了 20 次正面，我们也会认为你进行了很多次这个实验才得到了这个记录，这就会导致错误预估；\n改进的方式是请 10 位同学进行这项实验，这样就可以观察到更多的样本数据，降低出现上述情况的概率。这就是 HLL 算法的核心思想。\n\n## 算法具体实现\n\n1. 用一个哈希函数，对数据流中的每一个元素求出哈希值\n\n如果使用long来存储哈希值，则该哈希函数需要把2^64个不同的值映射到 0 ~ 2^64 -1 上\n\n2. 对于每个哈希值，取最后p位来决定桶的序号\n\n3. 在剩下的(64 - p)位中找到第一个1出现的位置，如果大于桶中现有的值，则更新\n\n4. 所有元素处理完毕后，求所有桶中值的调和平均数\n\n调和平均数是将所有的数值取倒数并求其算术平均数之后，再将次算术平均数取倒数而得\n\n5. 乘以m得到最后的结果E\n\nHLL 会通过一个 hash 函数来求出集合中所有元素的 hash 值（二进制表示的 hash 值，就可以理解为一串抛硬币正反面结果的序列），得到一个 hash 值的集合，然后找出该 hash 值集合中，第一个 1 出现的最晚的位置。\n\n例如有集合为 `[010, 100, 001]`, 集合中元素的第一个 1 出现的位置分别为 2, 1, 3，可以得到里面最大值为 3，故该集合中第一个 1 出现的最晚的位置为 3。\n因为每个位置上出现 1 的概率都是 1/2，所以我们可以做一个简单的推断，该集合中有 8 个不重复的元素。\n\n可以看到这种简单推断计算出来集合的基数值是有较大的偏差的，那如何来减少偏差呢？\n\n正如我上面的例子里说的一样，HLL 通过多次的进行试验来减少误差。那它是如何进行多次的实验的呢？\n\n这里 HLL 使用了分桶的思想，上文中我们一直有提到一个精度的概念，比如说 HLL(10)，这个 10 代表的就是取该元素对应 Hash 值二进制的后 10 位，\n计算出记录对应的桶，桶中会记录一个数字，代表对应到该桶的 hash 值的第一个 1 出现的最晚的位置。\n\n例如哈希值：`0000010010111010111100 0000001001`\n该 hash 值的后 10 位的 hash 值是 `0000001001`，转成 10 进制是 9，对应第 9 号桶，而该 hash 值第一个 1 出现的位置是第 6 位，如果比原先 9 号桶中的数字大，那么把 9 号桶中的数字更新为 6。\n可以看到桶的个数越多，HLL 算法的精度就越高，HLL(10) 有 1024(2^10) 个桶，HLL(16) 有 65536(2^16) 个桶。\n同样的，桶的个数越多，所占用的空间也会越大。\n\nHLL 的误差分布服从正态分布，它的空间复杂度: O(m log2log2N), Ｎ 为基数, m 为桶个数。\n这边给大家推导一下它的空间复杂度，我有 264 个的不重复元素 (Long. MAX_VALUE)，表达为二进制一个数是 64 位，这是第一重 log2, 那么第一个 1 最晚可能出现在第 64 位。\n64 需要 6 个 bit (26=64) 就可以存储，这是第二重 log2。如果精度为 10，则会有 1024 个桶，所以最外面还要乘以桶的个数。\n由于需要完整的遍历元素一遍，所以它的时间复杂度是一个线性的时间复杂度\n\n\nRedis实现了HyperLogLog\n","slug":"algorithms/hyper_log_log","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2n000lmv05fg9f7ynv","content":"<p>本文参考：</p>\n<p><a href=\"https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX\">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p>\n<p><a href=\"http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html\">rainybowe 神奇的HyperLogLog算法</a></p>\n<h2 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h2><p>是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数</p>\n<p>HLL 算法需要完整遍历所有元素一次，而非多次或采样；</p>\n<p>该算法只能计算集合中有多少个不重复的元素，不能给出每个元素的出现次数或是判断一个元素是否之前出现过；</p>\n<p>多个使用 HLL 统计出的基数值可以融合。</p>\n<p>在牺牲一定准确性的前提下，存储空间可以被大量节省</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>存储空间(10^6)</th>\n<th>误差</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bitmap</td>\n<td>120KB</td>\n<td>0%</td>\n</tr>\n<tr>\n<td>HLL(10)</td>\n<td>1KB</td>\n<td>9.75%</td>\n</tr>\n<tr>\n<td>HLL(12)</td>\n<td>4KB</td>\n<td>4.88%</td>\n</tr>\n<tr>\n<td>HLL(14)</td>\n<td>16KB</td>\n<td>2.44%</td>\n</tr>\n<tr>\n<td>HLL(16)</td>\n<td>64KB</td>\n<td>1.22%</td>\n</tr>\n</tbody></table>\n<p>空间复杂度：Bitmap（O(N)），HLL（O(log2log2N)）</p>\n<p>HLL 算法有着非常优异的空间复杂度，可以看到它的空间占用随着基数值的增长并没有变化。<br>HLL 后面不同的数字代表着不同的精度，数字越大，精度越高，占用的空间也越大，可以认为 HLL 的空间占用只和精度成正相关。</p>\n<h2 id=\"算法的原理简介\"><a href=\"#算法的原理简介\" class=\"headerlink\" title=\"算法的原理简介\"></a>算法的原理简介</h2><p>举一个生活中的例子来帮助大家理解 HLL 算法的原理：<br>比如你在进行一个实验，内容是不停地抛硬币，出现正反面的概率都是1/2，记录你连续抛到正面的次数K，<br>这种抛硬币多次直到出现正面的过程记为一次伯努利过程，对于n次伯努利过程，我们会得到n个出现正面的投掷次数值K1,K2,K3…Kn，其中最大值记为Kmax，<br>那么可以得到下面结论：</p>\n<ul>\n<li>n次伯努利过程的投掷次数都不大于Kmax</li>\n<li>n次伯努利过程，至少有一次投掷次数等于Kmax</li>\n</ul>\n<p><img src=\"/images/hyper_log_log.jpg\" alt=\"概率公式\"></p>\n<p>以上结论可以总结为：进行了n次进行抛硬币实验，每次分别记录下第一次抛到正面的抛掷次数K，那么可以用n次实验中最大的抛掷次数Kmax来预估实验组数量n：<br>n = 2^Kmax</p>\n<p>如果你最多连抛正面记录是 3 次，那可以想象你并没有做这个实验太多次，如果你最长连抛正面记录是 20 次，那你可能进行了这个实验上千次。</p>\n<p>一种理论上存在的情况是，你非常幸运，第一次进行这个实验就连抛了 20 次正面，我们也会认为你进行了很多次这个实验才得到了这个记录，这就会导致错误预估；<br>改进的方式是请 10 位同学进行这项实验，这样就可以观察到更多的样本数据，降低出现上述情况的概率。这就是 HLL 算法的核心思想。</p>\n<h2 id=\"算法具体实现\"><a href=\"#算法具体实现\" class=\"headerlink\" title=\"算法具体实现\"></a>算法具体实现</h2><ol>\n<li>用一个哈希函数，对数据流中的每一个元素求出哈希值</li>\n</ol>\n<p>如果使用long来存储哈希值，则该哈希函数需要把2^64个不同的值映射到 0 ~ 2^64 -1 上</p>\n<ol start=\"2\">\n<li><p>对于每个哈希值，取最后p位来决定桶的序号</p>\n</li>\n<li><p>在剩下的(64 - p)位中找到第一个1出现的位置，如果大于桶中现有的值，则更新</p>\n</li>\n<li><p>所有元素处理完毕后，求所有桶中值的调和平均数</p>\n</li>\n</ol>\n<p>调和平均数是将所有的数值取倒数并求其算术平均数之后，再将次算术平均数取倒数而得</p>\n<ol start=\"5\">\n<li>乘以m得到最后的结果E</li>\n</ol>\n<p>HLL 会通过一个 hash 函数来求出集合中所有元素的 hash 值（二进制表示的 hash 值，就可以理解为一串抛硬币正反面结果的序列），得到一个 hash 值的集合，然后找出该 hash 值集合中，第一个 1 出现的最晚的位置。</p>\n<p>例如有集合为 <code>[010, 100, 001]</code>, 集合中元素的第一个 1 出现的位置分别为 2, 1, 3，可以得到里面最大值为 3，故该集合中第一个 1 出现的最晚的位置为 3。<br>因为每个位置上出现 1 的概率都是 1/2，所以我们可以做一个简单的推断，该集合中有 8 个不重复的元素。</p>\n<p>可以看到这种简单推断计算出来集合的基数值是有较大的偏差的，那如何来减少偏差呢？</p>\n<p>正如我上面的例子里说的一样，HLL 通过多次的进行试验来减少误差。那它是如何进行多次的实验的呢？</p>\n<p>这里 HLL 使用了分桶的思想，上文中我们一直有提到一个精度的概念，比如说 HLL(10)，这个 10 代表的就是取该元素对应 Hash 值二进制的后 10 位，<br>计算出记录对应的桶，桶中会记录一个数字，代表对应到该桶的 hash 值的第一个 1 出现的最晚的位置。</p>\n<p>例如哈希值：<code>0000010010111010111100 0000001001</code><br>该 hash 值的后 10 位的 hash 值是 <code>0000001001</code>，转成 10 进制是 9，对应第 9 号桶，而该 hash 值第一个 1 出现的位置是第 6 位，如果比原先 9 号桶中的数字大，那么把 9 号桶中的数字更新为 6。<br>可以看到桶的个数越多，HLL 算法的精度就越高，HLL(10) 有 1024(2^10) 个桶，HLL(16) 有 65536(2^16) 个桶。<br>同样的，桶的个数越多，所占用的空间也会越大。</p>\n<p>HLL 的误差分布服从正态分布，它的空间复杂度: O(m log2log2N), Ｎ 为基数, m 为桶个数。<br>这边给大家推导一下它的空间复杂度，我有 264 个的不重复元素 (Long. MAX_VALUE)，表达为二进制一个数是 64 位，这是第一重 log2, 那么第一个 1 最晚可能出现在第 64 位。<br>64 需要 6 个 bit (26=64) 就可以存储，这是第二重 log2。如果精度为 10，则会有 1024 个桶，所以最外面还要乘以桶的个数。<br>由于需要完整的遍历元素一遍，所以它的时间复杂度是一个线性的时间复杂度</p>\n<p>Redis实现了HyperLogLog</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文参考：</p>\n<p><a href=\"https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX\">陶加涛 https://www.infoq.cn/article/j3b2Eoz_V7Wzm27odwXX</a></p>\n<p><a href=\"http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html\">rainybowe 神奇的HyperLogLog算法</a></p>\n<h2 id=\"算法简介\"><a href=\"#算法简介\" class=\"headerlink\" title=\"算法简介\"></a>算法简介</h2><p>是一种近似去重算法，能够使用极少的存储空间给出一个数据流中不重复元素的个数</p>\n<p>HLL 算法需要完整遍历所有元素一次，而非多次或采样；</p>\n<p>该算法只能计算集合中有多少个不重复的元素，不能给出每个元素的出现次数或是判断一个元素是否之前出现过；</p>\n<p>多个使用 HLL 统计出的基数值可以融合。</p>\n<p>在牺牲一定准确性的前提下，存储空间可以被大量节省</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>存储空间(10^6)</th>\n<th>误差</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bitmap</td>\n<td>120KB</td>\n<td>0%</td>\n</tr>\n<tr>\n<td>HLL(10)</td>\n<td>1KB</td>\n<td>9.75%</td>\n</tr>\n<tr>\n<td>HLL(12)</td>\n<td>4KB</td>\n<td>4.88%</td>\n</tr>\n<tr>\n<td>HLL(14)</td>\n<td>16KB</td>\n<td>2.44%</td>\n</tr>\n<tr>\n<td>HLL(16)</td>\n<td>64KB</td>\n<td>1.22%</td>\n</tr>\n</tbody></table>\n<p>空间复杂度：Bitmap（O(N)），HLL（O(log2log2N)）</p>\n<p>HLL 算法有着非常优异的空间复杂度，可以看到它的空间占用随着基数值的增长并没有变化。<br>HLL 后面不同的数字代表着不同的精度，数字越大，精度越高，占用的空间也越大，可以认为 HLL 的空间占用只和精度成正相关。</p>\n<h2 id=\"算法的原理简介\"><a href=\"#算法的原理简介\" class=\"headerlink\" title=\"算法的原理简介\"></a>算法的原理简介</h2><p>举一个生活中的例子来帮助大家理解 HLL 算法的原理：<br>比如你在进行一个实验，内容是不停地抛硬币，出现正反面的概率都是1/2，记录你连续抛到正面的次数K，<br>这种抛硬币多次直到出现正面的过程记为一次伯努利过程，对于n次伯努利过程，我们会得到n个出现正面的投掷次数值K1,K2,K3…Kn，其中最大值记为Kmax，<br>那么可以得到下面结论：</p>\n<ul>\n<li>n次伯努利过程的投掷次数都不大于Kmax</li>\n<li>n次伯努利过程，至少有一次投掷次数等于Kmax</li>\n</ul>\n<p><img src=\"/images/hyper_log_log.jpg\" alt=\"概率公式\"></p>\n<p>以上结论可以总结为：进行了n次进行抛硬币实验，每次分别记录下第一次抛到正面的抛掷次数K，那么可以用n次实验中最大的抛掷次数Kmax来预估实验组数量n：<br>n = 2^Kmax</p>\n<p>如果你最多连抛正面记录是 3 次，那可以想象你并没有做这个实验太多次，如果你最长连抛正面记录是 20 次，那你可能进行了这个实验上千次。</p>\n<p>一种理论上存在的情况是，你非常幸运，第一次进行这个实验就连抛了 20 次正面，我们也会认为你进行了很多次这个实验才得到了这个记录，这就会导致错误预估；<br>改进的方式是请 10 位同学进行这项实验，这样就可以观察到更多的样本数据，降低出现上述情况的概率。这就是 HLL 算法的核心思想。</p>\n<h2 id=\"算法具体实现\"><a href=\"#算法具体实现\" class=\"headerlink\" title=\"算法具体实现\"></a>算法具体实现</h2><ol>\n<li>用一个哈希函数，对数据流中的每一个元素求出哈希值</li>\n</ol>\n<p>如果使用long来存储哈希值，则该哈希函数需要把2^64个不同的值映射到 0 ~ 2^64 -1 上</p>\n<ol start=\"2\">\n<li><p>对于每个哈希值，取最后p位来决定桶的序号</p>\n</li>\n<li><p>在剩下的(64 - p)位中找到第一个1出现的位置，如果大于桶中现有的值，则更新</p>\n</li>\n<li><p>所有元素处理完毕后，求所有桶中值的调和平均数</p>\n</li>\n</ol>\n<p>调和平均数是将所有的数值取倒数并求其算术平均数之后，再将次算术平均数取倒数而得</p>\n<ol start=\"5\">\n<li>乘以m得到最后的结果E</li>\n</ol>\n<p>HLL 会通过一个 hash 函数来求出集合中所有元素的 hash 值（二进制表示的 hash 值，就可以理解为一串抛硬币正反面结果的序列），得到一个 hash 值的集合，然后找出该 hash 值集合中，第一个 1 出现的最晚的位置。</p>\n<p>例如有集合为 <code>[010, 100, 001]</code>, 集合中元素的第一个 1 出现的位置分别为 2, 1, 3，可以得到里面最大值为 3，故该集合中第一个 1 出现的最晚的位置为 3。<br>因为每个位置上出现 1 的概率都是 1/2，所以我们可以做一个简单的推断，该集合中有 8 个不重复的元素。</p>\n<p>可以看到这种简单推断计算出来集合的基数值是有较大的偏差的，那如何来减少偏差呢？</p>\n<p>正如我上面的例子里说的一样，HLL 通过多次的进行试验来减少误差。那它是如何进行多次的实验的呢？</p>\n<p>这里 HLL 使用了分桶的思想，上文中我们一直有提到一个精度的概念，比如说 HLL(10)，这个 10 代表的就是取该元素对应 Hash 值二进制的后 10 位，<br>计算出记录对应的桶，桶中会记录一个数字，代表对应到该桶的 hash 值的第一个 1 出现的最晚的位置。</p>\n<p>例如哈希值：<code>0000010010111010111100 0000001001</code><br>该 hash 值的后 10 位的 hash 值是 <code>0000001001</code>，转成 10 进制是 9，对应第 9 号桶，而该 hash 值第一个 1 出现的位置是第 6 位，如果比原先 9 号桶中的数字大，那么把 9 号桶中的数字更新为 6。<br>可以看到桶的个数越多，HLL 算法的精度就越高，HLL(10) 有 1024(2^10) 个桶，HLL(16) 有 65536(2^16) 个桶。<br>同样的，桶的个数越多，所占用的空间也会越大。</p>\n<p>HLL 的误差分布服从正态分布，它的空间复杂度: O(m log2log2N), Ｎ 为基数, m 为桶个数。<br>这边给大家推导一下它的空间复杂度，我有 264 个的不重复元素 (Long. MAX_VALUE)，表达为二进制一个数是 64 位，这是第一重 log2, 那么第一个 1 最晚可能出现在第 64 位。<br>64 需要 6 个 bit (26=64) 就可以存储，这是第二重 log2。如果精度为 10，则会有 1024 个桶，所以最外面还要乘以桶的个数。<br>由于需要完整的遍历元素一遍，所以它的时间复杂度是一个线性的时间复杂度</p>\n<p>Redis实现了HyperLogLog</p>\n"},{"url":"/2019/03/01/algorithms-insertion_sort.html","title":"算法-插入排序","keywords":"算法,插入排序","description":"插入排序","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 插入排序简介\n\n```\n插入排序（Insertion sort）是一种简单直观且稳定的排序算法。\n如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，\n这个时候就要用到一种新的排序方法——插入排序法,算法适用于少量数据的排序，时间复杂度O(n^2)。\n是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，\n但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。\n在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。\n\n插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @param string $sort\n * @return array\n */\nfunction insertionSort(array $arr, $sort = 'ASC')\n{\n    $length = count($arr);\n    for ($j = 1; $j < $length; $j++) {\n        $key = $arr[$j];\n        // 前一位\n        $i = $j - 1;\n        // 把 $key 依次和前面的数比较\n        // 第一次比较，如果前一位数比 $key 大，就把前一位数代替 $key ，这样前一位就空出来了\n        // 后面的比较，如果再比 $key 大，则向后移一位（因为前面的数已经是顺序的了）\n        // 直到遇到不比 $key 大的，或者比完了\n        while ($i >= 0 && (($sort === 'ASC' && $arr[$i] > $key) || ($sort === 'DESC' && $arr[$i] < $key))) {\n            $arr[$i + 1] = $arr[$i];\n            $i--;\n        }\n        // 最后把 $key 补上空位\n        $arr[$i + 1] = $key;\n    }\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\n//var_dump(insertionSort($arr, 'DESC'));\nvar_dump(insertionSort($arr, 'ASC'));\n```\n","source":"_posts/algorithms/insertion_sort.md","raw":"---\nurl: /2019/03/01/algorithms-insertion_sort.html\ntitle: \"算法-插入排序\"\nkeywords: \"算法,插入排序\"\ndescription: \"插入排序\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 插入排序简介\n\n```\n插入排序（Insertion sort）是一种简单直观且稳定的排序算法。\n如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，\n这个时候就要用到一种新的排序方法——插入排序法,算法适用于少量数据的排序，时间复杂度O(n^2)。\n是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，\n但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。\n在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。\n\n插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @param string $sort\n * @return array\n */\nfunction insertionSort(array $arr, $sort = 'ASC')\n{\n    $length = count($arr);\n    for ($j = 1; $j < $length; $j++) {\n        $key = $arr[$j];\n        // 前一位\n        $i = $j - 1;\n        // 把 $key 依次和前面的数比较\n        // 第一次比较，如果前一位数比 $key 大，就把前一位数代替 $key ，这样前一位就空出来了\n        // 后面的比较，如果再比 $key 大，则向后移一位（因为前面的数已经是顺序的了）\n        // 直到遇到不比 $key 大的，或者比完了\n        while ($i >= 0 && (($sort === 'ASC' && $arr[$i] > $key) || ($sort === 'DESC' && $arr[$i] < $key))) {\n            $arr[$i + 1] = $arr[$i];\n            $i--;\n        }\n        // 最后把 $key 补上空位\n        $arr[$i + 1] = $key;\n    }\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\n//var_dump(insertionSort($arr, 'DESC'));\nvar_dump(insertionSort($arr, 'ASC'));\n```\n","slug":"algorithms/insertion_sort","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2o000pmv05dpxdevvx","content":"<h2 id=\"插入排序简介\"><a href=\"#插入排序简介\" class=\"headerlink\" title=\"插入排序简介\"></a>插入排序简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</span><br><span class=\"line\">如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，</span><br><span class=\"line\">这个时候就要用到一种新的排序方法——插入排序法,算法适用于少量数据的排序，时间复杂度O(n^2)。</span><br><span class=\"line\">是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，</span><br><span class=\"line\">但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。</span><br><span class=\"line\">在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</span><br><span class=\"line\"></span><br><span class=\"line\">插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $sort</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr, $sort = <span class=\"string\">&#x27;ASC&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $length = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($j = <span class=\"number\">1</span>; $j &lt; $length; $j++) &#123;</span><br><span class=\"line\">        $key = $arr[$j];</span><br><span class=\"line\">        <span class=\"comment\">// 前一位</span></span><br><span class=\"line\">        $i = $j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把 $key 依次和前面的数比较</span></span><br><span class=\"line\">        <span class=\"comment\">// 第一次比较，如果前一位数比 $key 大，就把前一位数代替 $key ，这样前一位就空出来了</span></span><br><span class=\"line\">        <span class=\"comment\">// 后面的比较，如果再比 $key 大，则向后移一位（因为前面的数已经是顺序的了）</span></span><br><span class=\"line\">        <span class=\"comment\">// 直到遇到不比 $key 大的，或者比完了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i &gt;= <span class=\"number\">0</span> &amp;&amp; (($sort === <span class=\"string\">&#x27;ASC&#x27;</span> &amp;&amp; $arr[$i] &gt; $key) || ($sort === <span class=\"string\">&#x27;DESC&#x27;</span> &amp;&amp; $arr[$i] &lt; $key))) &#123;</span><br><span class=\"line\">            $arr[$i + <span class=\"number\">1</span>] = $arr[$i];</span><br><span class=\"line\">            $i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后把 $key 补上空位</span></span><br><span class=\"line\">        $arr[$i + <span class=\"number\">1</span>] = $key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//var_dump(insertionSort($arr, &#x27;DESC&#x27;));</span></span><br><span class=\"line\">var_dump(insertionSort($arr, <span class=\"string\">&#x27;ASC&#x27;</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"插入排序简介\"><a href=\"#插入排序简介\" class=\"headerlink\" title=\"插入排序简介\"></a>插入排序简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</span><br><span class=\"line\">如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，</span><br><span class=\"line\">这个时候就要用到一种新的排序方法——插入排序法,算法适用于少量数据的排序，时间复杂度O(n^2)。</span><br><span class=\"line\">是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，</span><br><span class=\"line\">但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。</span><br><span class=\"line\">在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</span><br><span class=\"line\"></span><br><span class=\"line\">插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> string $sort</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr, $sort = <span class=\"string\">&#x27;ASC&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $length = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($j = <span class=\"number\">1</span>; $j &lt; $length; $j++) &#123;</span><br><span class=\"line\">        $key = $arr[$j];</span><br><span class=\"line\">        <span class=\"comment\">// 前一位</span></span><br><span class=\"line\">        $i = $j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把 $key 依次和前面的数比较</span></span><br><span class=\"line\">        <span class=\"comment\">// 第一次比较，如果前一位数比 $key 大，就把前一位数代替 $key ，这样前一位就空出来了</span></span><br><span class=\"line\">        <span class=\"comment\">// 后面的比较，如果再比 $key 大，则向后移一位（因为前面的数已经是顺序的了）</span></span><br><span class=\"line\">        <span class=\"comment\">// 直到遇到不比 $key 大的，或者比完了</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($i &gt;= <span class=\"number\">0</span> &amp;&amp; (($sort === <span class=\"string\">&#x27;ASC&#x27;</span> &amp;&amp; $arr[$i] &gt; $key) || ($sort === <span class=\"string\">&#x27;DESC&#x27;</span> &amp;&amp; $arr[$i] &lt; $key))) &#123;</span><br><span class=\"line\">            $arr[$i + <span class=\"number\">1</span>] = $arr[$i];</span><br><span class=\"line\">            $i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后把 $key 补上空位</span></span><br><span class=\"line\">        $arr[$i + <span class=\"number\">1</span>] = $key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">//var_dump(insertionSort($arr, &#x27;DESC&#x27;));</span></span><br><span class=\"line\">var_dump(insertionSort($arr, <span class=\"string\">&#x27;ASC&#x27;</span>));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/03/01/algorithms-merge-sort.html","title":"算法-归并排序","keywords":"算法,归并排序","description":"归并排序","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 归并排序(快速排序)\n\n```\n分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解\n在最坏、最佳、平均情况下归并排序时间复杂度均为o(nlogn)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param $arr\n * @param $p\n * @param $q\n * @param $r\n */\nfunction merge(&$arr, $p, $q, $r)\n{\n    $temp = [];\n    // 两个起始点位置\n    $i = $p;\n    $j = $q + 1;\n    // 两个起始点都不能超过各自的终点，这里可能导致其中一个起始点没循环完\n    while ($i <= $q && $j <= $r) {\n        if ($arr[$i] < $arr[$j]) {\n            $temp[] = $arr[$i++];\n        } else {\n            $temp[] = $arr[$j++];\n        }\n    }\n\n    // 这里把 $p - $q 未循环完的加入\n    while ($i <= $q) {\n        $temp[] = $arr[$i++];\n    }\n\n    // 这里把 $q + 1 - $r 未循环完的加入\n    while ($j <= $r) {\n        $temp[] = $arr[$j++];\n    }\n\n    // 将排好序的插入原数组\n    for ($k = 0, $len = count($temp); $k < $len; $k++) {\n        $arr[$p + $k] = $temp[$k];\n    }\n}\n\n/**\n * @param $arr\n * @param $p\n * @param $r\n */\nfunction mergeSort(&$arr, $p, $r)\n{\n    //当子序列长度为1时，不用再分组\n    if ($p < $r) {\n        $q = floor(($p + $r) / 2); // $arr $arr[$p - $q] $arr[$q+1 - $r]\n        mergeSort($arr, $p, $q); // $arr[$p - $q]\n        mergeSort($arr, $q + 1, $r); // $arr[$q+1 - $r]\n        echo 'p->'.$p.' q->'.$q.' r->'.$r.PHP_EOL;\n        merge($arr, $p, $q, $r);\n    }\n}\n\n$arr = [4, 3, 2, 1];\nmergeSort($arr, 0, count($arr) - 1);\nvar_dump($arr);\n```\n","source":"_posts/algorithms/merge_sort.md","raw":"---\nurl: /2019/03/01/algorithms-merge-sort.html\ntitle: \"算法-归并排序\"\nkeywords: \"算法,归并排序\"\ndescription: \"归并排序\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 归并排序(快速排序)\n\n```\n分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解\n在最坏、最佳、平均情况下归并排序时间复杂度均为o(nlogn)\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param $arr\n * @param $p\n * @param $q\n * @param $r\n */\nfunction merge(&$arr, $p, $q, $r)\n{\n    $temp = [];\n    // 两个起始点位置\n    $i = $p;\n    $j = $q + 1;\n    // 两个起始点都不能超过各自的终点，这里可能导致其中一个起始点没循环完\n    while ($i <= $q && $j <= $r) {\n        if ($arr[$i] < $arr[$j]) {\n            $temp[] = $arr[$i++];\n        } else {\n            $temp[] = $arr[$j++];\n        }\n    }\n\n    // 这里把 $p - $q 未循环完的加入\n    while ($i <= $q) {\n        $temp[] = $arr[$i++];\n    }\n\n    // 这里把 $q + 1 - $r 未循环完的加入\n    while ($j <= $r) {\n        $temp[] = $arr[$j++];\n    }\n\n    // 将排好序的插入原数组\n    for ($k = 0, $len = count($temp); $k < $len; $k++) {\n        $arr[$p + $k] = $temp[$k];\n    }\n}\n\n/**\n * @param $arr\n * @param $p\n * @param $r\n */\nfunction mergeSort(&$arr, $p, $r)\n{\n    //当子序列长度为1时，不用再分组\n    if ($p < $r) {\n        $q = floor(($p + $r) / 2); // $arr $arr[$p - $q] $arr[$q+1 - $r]\n        mergeSort($arr, $p, $q); // $arr[$p - $q]\n        mergeSort($arr, $q + 1, $r); // $arr[$q+1 - $r]\n        echo 'p->'.$p.' q->'.$q.' r->'.$r.PHP_EOL;\n        merge($arr, $p, $q, $r);\n    }\n}\n\n$arr = [4, 3, 2, 1];\nmergeSort($arr, 0, count($arr) - 1);\nvar_dump($arr);\n```\n","slug":"algorithms/merge_sort","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2p000qmv05e2qw09x3","content":"<h2 id=\"归并排序-快速排序\"><a href=\"#归并排序-快速排序\" class=\"headerlink\" title=\"归并排序(快速排序)\"></a>归并排序(快速排序)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解</span><br><span class=\"line\">在最坏、最佳、平均情况下归并排序时间复杂度均为o(nlogn)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $p</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $q</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $r</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">&amp;$arr, $p, $q, $r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $temp = [];</span><br><span class=\"line\">    <span class=\"comment\">// 两个起始点位置</span></span><br><span class=\"line\">    $i = $p;</span><br><span class=\"line\">    $j = $q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 两个起始点都不能超过各自的终点，这里可能导致其中一个起始点没循环完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt;= $q &amp;&amp; $j &lt;= $r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($arr[$i] &lt; $arr[$j]) &#123;</span><br><span class=\"line\">            $temp[] = $arr[$i++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $temp[] = $arr[$j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里把 $p - $q 未循环完的加入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt;= $q) &#123;</span><br><span class=\"line\">        $temp[] = $arr[$i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里把 $q + 1 - $r 未循环完的加入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($j &lt;= $r) &#123;</span><br><span class=\"line\">        $temp[] = $arr[$j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将排好序的插入原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($k = <span class=\"number\">0</span>, $len = count($temp); $k &lt; $len; $k++) &#123;</span><br><span class=\"line\">        $arr[$p + $k] = $temp[$k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $p</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $r</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">&amp;$arr, $p, $r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当子序列长度为1时，不用再分组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($p &lt; $r) &#123;</span><br><span class=\"line\">        $q = floor(($p + $r) / <span class=\"number\">2</span>); <span class=\"comment\">// $arr $arr[$p - $q] $arr[$q+1 - $r]</span></span><br><span class=\"line\">        mergeSort($arr, $p, $q); <span class=\"comment\">// $arr[$p - $q]</span></span><br><span class=\"line\">        mergeSort($arr, $q + <span class=\"number\">1</span>, $r); <span class=\"comment\">// $arr[$q+1 - $r]</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;p-&gt;&#x27;</span>.$p.<span class=\"string\">&#x27; q-&gt;&#x27;</span>.$q.<span class=\"string\">&#x27; r-&gt;&#x27;</span>.$r.PHP_EOL;</span><br><span class=\"line\">        merge($arr, $p, $q, $r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">mergeSort($arr, <span class=\"number\">0</span>, count($arr) - <span class=\"number\">1</span>);</span><br><span class=\"line\">var_dump($arr);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归并排序-快速排序\"><a href=\"#归并排序-快速排序\" class=\"headerlink\" title=\"归并排序(快速排序)\"></a>归并排序(快速排序)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分治法：将原问题分解为几个规模较小但类似的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解</span><br><span class=\"line\">在最坏、最佳、平均情况下归并排序时间复杂度均为o(nlogn)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $p</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $q</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $r</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">&amp;$arr, $p, $q, $r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $temp = [];</span><br><span class=\"line\">    <span class=\"comment\">// 两个起始点位置</span></span><br><span class=\"line\">    $i = $p;</span><br><span class=\"line\">    $j = $q + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 两个起始点都不能超过各自的终点，这里可能导致其中一个起始点没循环完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt;= $q &amp;&amp; $j &lt;= $r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($arr[$i] &lt; $arr[$j]) &#123;</span><br><span class=\"line\">            $temp[] = $arr[$i++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $temp[] = $arr[$j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里把 $p - $q 未循环完的加入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($i &lt;= $q) &#123;</span><br><span class=\"line\">        $temp[] = $arr[$i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里把 $q + 1 - $r 未循环完的加入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($j &lt;= $r) &#123;</span><br><span class=\"line\">        $temp[] = $arr[$j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将排好序的插入原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($k = <span class=\"number\">0</span>, $len = count($temp); $k &lt; $len; $k++) &#123;</span><br><span class=\"line\">        $arr[$p + $k] = $temp[$k];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $p</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $r</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">&amp;$arr, $p, $r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当子序列长度为1时，不用再分组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($p &lt; $r) &#123;</span><br><span class=\"line\">        $q = floor(($p + $r) / <span class=\"number\">2</span>); <span class=\"comment\">// $arr $arr[$p - $q] $arr[$q+1 - $r]</span></span><br><span class=\"line\">        mergeSort($arr, $p, $q); <span class=\"comment\">// $arr[$p - $q]</span></span><br><span class=\"line\">        mergeSort($arr, $q + <span class=\"number\">1</span>, $r); <span class=\"comment\">// $arr[$q+1 - $r]</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;p-&gt;&#x27;</span>.$p.<span class=\"string\">&#x27; q-&gt;&#x27;</span>.$q.<span class=\"string\">&#x27; r-&gt;&#x27;</span>.$r.PHP_EOL;</span><br><span class=\"line\">        merge($arr, $p, $q, $r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">mergeSort($arr, <span class=\"number\">0</span>, count($arr) - <span class=\"number\">1</span>);</span><br><span class=\"line\">var_dump($arr);</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/04/01/algorithms-probability.html","title":"算法-简单的概率算法","keywords":"算法,简单的概率算法","description":"简单的概率算法","date":"2019-04-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 经典概率算法简介\n\n```\n假设数组为：array(100,200,300,400)，\n开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内，\n如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，\n在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。\n这样 筛选到最终，总会有一个数满足要求。\n就相当于去一个箱子里摸东西，\n第一个不是，第二个不是，第三个还不是，那最后一个一定是。\n\n可用于中奖概率计算，权重等\n```\n## 代码实现\n\n```php\n<?php\nclass Prize\n{\n    private $server_info;\n\n    private $weight_arr;\n\n    public function __construct(array $server_info)\n    {\n        $this->server_info = $server_info;\n    }\n\n    private function getWeightArr()\n    {\n        if (is_null($this->weight_arr)) {\n            $this->weight_arr = array_column($this->server_info, 'weight', 'server_mark');\n        }\n        return $this->weight_arr;\n    }\n\n    public function getServerMark() {\n        $result = '';\n        // 概率数组的总概率精度\n        $weight_sum = array_sum($this->getWeightArr());\n        // 概率数组循环\n        foreach ($this->getWeightArr() as $server_mark => $weight) {\n            $rand_num = mt_rand(1, $weight_sum);\n            if ($rand_num <= $weight) {\n                $result = $server_mark;\n                break;\n            } else {\n                $weight_sum -= $weight;\n            }\n        }\n        return $result;\n    }\n}\n\n$server_info = [\n    'link-rs1' => [\n        'server_mark' => 'link-rs1',\n        'weight' => 1,\n    ],\n    'link-rs2' => [\n        'server_mark' => 'link-rs2',\n        'weight' => 2,\n    ],\n    'link-rs3' => [\n        'server_mark' => 'link-rs3',\n        'weight' => 3,\n    ],\n    'link-rs4' => [\n        'server_mark' => 'link-rs4',\n        'weight' => 4,\n    ]\n];\n\n$prize = new Prize($server_info);\n\n$rings = [];\nfor ($i = 1; $i <= 30000; $i++) {\n    $node = $prize->getServerMark();\n    $rings[$node] = isset($rings[$node]) ? ++$rings[$node] : 1;\n}\n\n//sort($rings);\nvar_dump($rings);\nvar_dump(array_sum($rings));\n```\n","source":"_posts/algorithms/probability.md","raw":"---\nurl: /2019/04/01/algorithms-probability.html\ntitle: \"算法-简单的概率算法\"\nkeywords: \"算法,简单的概率算法\"\ndescription: \"简单的概率算法\"\ndate: 2019-04-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 经典概率算法简介\n\n```\n假设数组为：array(100,200,300,400)，\n开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内，\n如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，\n在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。\n这样 筛选到最终，总会有一个数满足要求。\n就相当于去一个箱子里摸东西，\n第一个不是，第二个不是，第三个还不是，那最后一个一定是。\n\n可用于中奖概率计算，权重等\n```\n## 代码实现\n\n```php\n<?php\nclass Prize\n{\n    private $server_info;\n\n    private $weight_arr;\n\n    public function __construct(array $server_info)\n    {\n        $this->server_info = $server_info;\n    }\n\n    private function getWeightArr()\n    {\n        if (is_null($this->weight_arr)) {\n            $this->weight_arr = array_column($this->server_info, 'weight', 'server_mark');\n        }\n        return $this->weight_arr;\n    }\n\n    public function getServerMark() {\n        $result = '';\n        // 概率数组的总概率精度\n        $weight_sum = array_sum($this->getWeightArr());\n        // 概率数组循环\n        foreach ($this->getWeightArr() as $server_mark => $weight) {\n            $rand_num = mt_rand(1, $weight_sum);\n            if ($rand_num <= $weight) {\n                $result = $server_mark;\n                break;\n            } else {\n                $weight_sum -= $weight;\n            }\n        }\n        return $result;\n    }\n}\n\n$server_info = [\n    'link-rs1' => [\n        'server_mark' => 'link-rs1',\n        'weight' => 1,\n    ],\n    'link-rs2' => [\n        'server_mark' => 'link-rs2',\n        'weight' => 2,\n    ],\n    'link-rs3' => [\n        'server_mark' => 'link-rs3',\n        'weight' => 3,\n    ],\n    'link-rs4' => [\n        'server_mark' => 'link-rs4',\n        'weight' => 4,\n    ]\n];\n\n$prize = new Prize($server_info);\n\n$rings = [];\nfor ($i = 1; $i <= 30000; $i++) {\n    $node = $prize->getServerMark();\n    $rings[$node] = isset($rings[$node]) ? ++$rings[$node] : 1;\n}\n\n//sort($rings);\nvar_dump($rings);\nvar_dump(array_sum($rings));\n```\n","slug":"algorithms/probability","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2r000umv058aqth0cb","content":"<h2 id=\"经典概率算法简介\"><a href=\"#经典概率算法简介\" class=\"headerlink\" title=\"经典概率算法简介\"></a>经典概率算法简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设数组为：array(100,200,300,400)，</span><br><span class=\"line\">开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内，</span><br><span class=\"line\">如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，</span><br><span class=\"line\">在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。</span><br><span class=\"line\">这样 筛选到最终，总会有一个数满足要求。</span><br><span class=\"line\">就相当于去一个箱子里摸东西，</span><br><span class=\"line\">第一个不是，第二个不是，第三个还不是，那最后一个一定是。</span><br><span class=\"line\"></span><br><span class=\"line\">可用于中奖概率计算，权重等</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prize</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $server_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $weight_arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $server_info</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;server_info = $server_info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWeightArr</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">$this</span>-&gt;weight_arr)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;weight_arr = array_column(<span class=\"keyword\">$this</span>-&gt;server_info, <span class=\"string\">&#x27;weight&#x27;</span>, <span class=\"string\">&#x27;server_mark&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;weight_arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getServerMark</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 概率数组的总概率精度</span></span><br><span class=\"line\">        $weight_sum = array_sum(<span class=\"keyword\">$this</span>-&gt;getWeightArr());</span><br><span class=\"line\">        <span class=\"comment\">// 概率数组循环</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getWeightArr() <span class=\"keyword\">as</span> $server_mark =&gt; $weight) &#123;</span><br><span class=\"line\">            $rand_num = mt_rand(<span class=\"number\">1</span>, $weight_sum);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($rand_num &lt;= $weight) &#123;</span><br><span class=\"line\">                $result = $server_mark;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $weight_sum -= $weight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$server_info = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs1&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs2&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs2&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs3&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">3</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs4&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs4&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">4</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">$prize = <span class=\"keyword\">new</span> Prize($server_info);</span><br><span class=\"line\"></span><br><span class=\"line\">$rings = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"number\">30000</span>; $i++) &#123;</span><br><span class=\"line\">    $node = $prize-&gt;getServerMark();</span><br><span class=\"line\">    $rings[$node] = <span class=\"keyword\">isset</span>($rings[$node]) ? ++$rings[$node] : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sort($rings);</span></span><br><span class=\"line\">var_dump($rings);</span><br><span class=\"line\">var_dump(array_sum($rings));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"经典概率算法简介\"><a href=\"#经典概率算法简介\" class=\"headerlink\" title=\"经典概率算法简介\"></a>经典概率算法简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设数组为：array(100,200,300,400)，</span><br><span class=\"line\">开始是从1,1000 这个概率范围内筛选第一个数是否在他的出现概率范围之内，</span><br><span class=\"line\">如果不在，则将概率空间，也就是k的值减去刚刚的那个数字的概率空间，</span><br><span class=\"line\">在本例当中就是减去100，也就是说第二个数是在1，900这个范围内筛选的。</span><br><span class=\"line\">这样 筛选到最终，总会有一个数满足要求。</span><br><span class=\"line\">就相当于去一个箱子里摸东西，</span><br><span class=\"line\">第一个不是，第二个不是，第三个还不是，那最后一个一定是。</span><br><span class=\"line\"></span><br><span class=\"line\">可用于中奖概率计算，权重等</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prize</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $server_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $weight_arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $server_info</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;server_info = $server_info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWeightArr</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">$this</span>-&gt;weight_arr)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;weight_arr = array_column(<span class=\"keyword\">$this</span>-&gt;server_info, <span class=\"string\">&#x27;weight&#x27;</span>, <span class=\"string\">&#x27;server_mark&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;weight_arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getServerMark</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 概率数组的总概率精度</span></span><br><span class=\"line\">        $weight_sum = array_sum(<span class=\"keyword\">$this</span>-&gt;getWeightArr());</span><br><span class=\"line\">        <span class=\"comment\">// 概率数组循环</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;getWeightArr() <span class=\"keyword\">as</span> $server_mark =&gt; $weight) &#123;</span><br><span class=\"line\">            $rand_num = mt_rand(<span class=\"number\">1</span>, $weight_sum);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($rand_num &lt;= $weight) &#123;</span><br><span class=\"line\">                $result = $server_mark;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $weight_sum -= $weight;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$server_info = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs1&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs2&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs2&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs3&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs3&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">3</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&#x27;link-rs4&#x27;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;server_mark&#x27;</span> =&gt; <span class=\"string\">&#x27;link-rs4&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;weight&#x27;</span> =&gt; <span class=\"number\">4</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">$prize = <span class=\"keyword\">new</span> Prize($server_info);</span><br><span class=\"line\"></span><br><span class=\"line\">$rings = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">1</span>; $i &lt;= <span class=\"number\">30000</span>; $i++) &#123;</span><br><span class=\"line\">    $node = $prize-&gt;getServerMark();</span><br><span class=\"line\">    $rings[$node] = <span class=\"keyword\">isset</span>($rings[$node]) ? ++$rings[$node] : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sort($rings);</span></span><br><span class=\"line\">var_dump($rings);</span><br><span class=\"line\">var_dump(array_sum($rings));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/03/01/algorithms-select-sort.html","title":"算法-选择排序","keywords":"算法,选择排序","description":"选择排序","date":"2019-03-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 选择排序\n\n```\n选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置\n实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @return array\n */\nfunction selectSort(array $arr)\n{\n    // $i 当前最小值的位置， 需要参与比较的元素\n    $len = count($arr);\n    for ($i = 0; $i < $len - 1; $i++) {\n        //先假设最小的值的位置\n        $p = $i;\n        //$j 当前都需要和哪些元素比较，$i 后边的。\n        for ($j = $i + 1; $j < $len; $j++) {\n            //$arr[$p] 是 当前已知的最小值\n            if ($arr[$p] > $arr[$j]) {\n                //比较，发现更小的,记录下最小值的位置；并且在下次比较时，\n                // 应该采用已知的最小值进行比较。\n                $p = $j;\n            }\n        }\n        // 已经确定了当前的最小值的位置，保存到$p中。\n        // 如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可\n        if ($p != $i) {\n            $tmp = $arr[$p];\n            $arr[$p] = $arr[$i];\n            $arr[$i] = $tmp;\n        }\n    }\n    //返回最终结果\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\nvar_dump(selectSort($arr));\n```\n","source":"_posts/algorithms/select_sort.md","raw":"---\nurl: /2019/03/01/algorithms-select-sort.html\ntitle: \"算法-选择排序\"\nkeywords: \"算法,选择排序\"\ndescription: \"选择排序\"\ndate: 2019-03-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"算法\"]\ntags_weight: 100\ncategories: [\"PHP\", \"算法\"]\ncategoryes_weight: 100\n---\n\n## 选择排序\n\n```\n选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置\n实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数\n```\n\n## 代码实现\n\n```php\n<?php\n/**\n * @param array $arr\n * @return array\n */\nfunction selectSort(array $arr)\n{\n    // $i 当前最小值的位置， 需要参与比较的元素\n    $len = count($arr);\n    for ($i = 0; $i < $len - 1; $i++) {\n        //先假设最小的值的位置\n        $p = $i;\n        //$j 当前都需要和哪些元素比较，$i 后边的。\n        for ($j = $i + 1; $j < $len; $j++) {\n            //$arr[$p] 是 当前已知的最小值\n            if ($arr[$p] > $arr[$j]) {\n                //比较，发现更小的,记录下最小值的位置；并且在下次比较时，\n                // 应该采用已知的最小值进行比较。\n                $p = $j;\n            }\n        }\n        // 已经确定了当前的最小值的位置，保存到$p中。\n        // 如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可\n        if ($p != $i) {\n            $tmp = $arr[$p];\n            $arr[$p] = $arr[$i];\n            $arr[$i] = $tmp;\n        }\n    }\n    //返回最终结果\n    return $arr;\n}\n\n$arr = [4, 3, 2, 1];\nvar_dump(selectSort($arr));\n```\n","slug":"algorithms/select_sort","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2s000wmv05fw0ehr6z","content":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置</span><br><span class=\"line\">实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $i 当前最小值的位置， 需要参与比较的元素</span></span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len - <span class=\"number\">1</span>; $i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先假设最小的值的位置</span></span><br><span class=\"line\">        $p = $i;</span><br><span class=\"line\">        <span class=\"comment\">//$j 当前都需要和哪些元素比较，$i 后边的。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = $i + <span class=\"number\">1</span>; $j &lt; $len; $j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//$arr[$p] 是 当前已知的最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$p] &gt; $arr[$j]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//比较，发现更小的,记录下最小值的位置；并且在下次比较时，</span></span><br><span class=\"line\">                <span class=\"comment\">// 应该采用已知的最小值进行比较。</span></span><br><span class=\"line\">                $p = $j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 已经确定了当前的最小值的位置，保存到$p中。</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($p != $i) &#123;</span><br><span class=\"line\">            $tmp = $arr[$p];</span><br><span class=\"line\">            $arr[$p] = $arr[$i];</span><br><span class=\"line\">            $arr[$i] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回最终结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">var_dump(selectSort($arr));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择排序法思路：每次选择一个相应的元素，然后将其放到指定的位置</span><br><span class=\"line\">实现思路 双重循环完成，外层控制轮数，当前的最小值。内层控制的比较次数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $arr</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\"><span class=\"keyword\">array</span> $arr</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// $i 当前最小值的位置， 需要参与比较的元素</span></span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len - <span class=\"number\">1</span>; $i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//先假设最小的值的位置</span></span><br><span class=\"line\">        $p = $i;</span><br><span class=\"line\">        <span class=\"comment\">//$j 当前都需要和哪些元素比较，$i 后边的。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ($j = $i + <span class=\"number\">1</span>; $j &lt; $len; $j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//$arr[$p] 是 当前已知的最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($arr[$p] &gt; $arr[$j]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//比较，发现更小的,记录下最小值的位置；并且在下次比较时，</span></span><br><span class=\"line\">                <span class=\"comment\">// 应该采用已知的最小值进行比较。</span></span><br><span class=\"line\">                $p = $j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 已经确定了当前的最小值的位置，保存到$p中。</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($p != $i) &#123;</span><br><span class=\"line\">            $tmp = $arr[$p];</span><br><span class=\"line\">            $arr[$p] = $arr[$i];</span><br><span class=\"line\">            $arr[$i] = $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回最终结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">var_dump(selectSort($arr));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/06/04/redis-read-error-on-connection.html","title":"一次Redis read error on connection 错误调试","keywords":"Redis Linux","description":"Redis read error on connection 错误调试","date":"2020-06-04T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 故事之初\n\n一次重启SOA服务后，突然发现有报错`read error on connection to 127.0.0.1:6379`\n\n下面是SOA服务中环境和依赖的包版本\n\nPHP 7.2.25\n\n使用 PCNTL POSIX 来管理进程\n\n[ext-phpredis 5.2.1](https://pecl.php.net/get/redis-5.2.1.tgz)\n\n[ext-event 2.5.4](https://pecl.php.net/get/event-2.5.4.tgz)\n\nlaravel 6.18.14\n\nSOA是基于event 写的一个多进程服务 使用laravel command来启动和停止进程\n\n由master 进程 fork 多个work进程处理业务\n\n`ps -ef|grep Soa`\n\n```\nroot      31614      1  0 Jun04 ?        00:00:00 Soa master server\nwww       31615  31614  0 Jun04 ?        00:00:01 Soa worker server\nwww       31616  31614  0 Jun04 ?        00:00:01 Soa worker server\n```\n\n## 网上查资料\n\n按照报错，应该是连接被关闭然后再发请求造成的\n\n[参考 Redis：排查 read error on connection 小记](https://www.jianshu.com/p/6d6a09db55e8)\n\n感觉可能是超时时间引起的\n\n于是设置`phpredis` read_timeout 为-1，重启SOA调试，错误依旧\n\n我们redis客户端是启用 persistent 的，使用的 pconnect\n\n看一下redis扩展的配置\n```\nredis.pconnect.pooling_enabled => 1 => 1\nredis.pconnect.connection_limit => 0 => 0\n```\n\n配置没什么问题\n\n也去[phpredis](https://github.com/phpredis/phpredis) 源码搜索这个错误，和上面所说的一样\n\n## 重现并调试\n\n既然能稳定重现 那用 `strace -p $pid` 看看系统调用（开始也使用tcpdump gdb 调试，没发现导致的错误的原因）\n\n```\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9342), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 12\n13414 setsockopt(12, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(12, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(12, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(12, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 12, {EPOLLIN, {u32=12, u64=12}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=12, u64=12}}], 32, -1) = 1\n13414 recvfrom(12, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(12, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(12, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(12, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(12, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(12, \"\\v\\0\\1\\0\\0\\0 d6e820eebbac8b527d721621a\"..., 4096, 0, NULL, NULL) = 40\n13414 poll([{fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(7, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=7, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=7, revents=POLLIN}])\n13414 recvfrom(7, 0x32e7d40, 8192, MSG_DONTWAIT, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)\n13414 close(7)                          = 0\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6179) = 6179\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9348), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 7\n13414 setsockopt(7, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(7, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(7, F_GETFL)                 = 0x2 (flags O_RDWR)\n13414 fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 7, {EPOLLIN, {u32=7, u64=7}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=7, u64=7}}], 32, -1) = 1\n13414 recvfrom(7, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(7, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(7, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(7, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(7, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(7, \"\\v\\0\\1\\0\\0\\0 1e5d42e6117278050b3818af8\"..., 4096, 0, NULL, NULL) = 40\n13414 socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 15\n13414 fcntl(15, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(15, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 connect(15, {sa_family=AF_INET, sin_port=htons(6379), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = -1 EINPROGRESS (Operation now in progress)\n13414 poll([{fd=15, events=POLLIN|POLLOUT|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLOUT}])\n13414 getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) = 0\n13414 fcntl(15, F_SETFL, O_RDWR)        = 0\n13414 setsockopt(15, SOL_TCP, TCP_NODELAY, [1], 4) = 0\n13414 setsockopt(15, SOL_SOCKET, SO_KEEPALIVE, [0], 4) = 0\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(15, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=15, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLIN}])\n13414 recvfrom(15, \"-NOAUTH Authentication required.\"..., 8192, MSG_DONTWAIT, NULL, NULL) = 34\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6166) = 6166\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9344), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 16\n13414 setsockopt(16, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(16, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(16, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(16, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 16, {EPOLLIN, {u32=16, u64=16}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=16, u64=16}}], 32, -1) = 1\n13414 recvfrom(16, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(16, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(16, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(16, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(16, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(16, \"\\v\\0\\1\\0\\0\\0 9eadf923b6dceadd66727a163\"..., 4096, 0, NULL, NULL) = 40\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(15, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=15, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLIN}])\n13414 recvfrom(15, \"-NOAUTH Authentication required.\"..., 8192, MSG_DONTWAIT, NULL, NULL) = 34\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6166) = 6166\n13414 epoll_wait(8, [{EPOLLIN, {u32=16, u64=16}}], 32, -1) = 1\n13414 recvfrom(16, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 16, 0x7ffe0c36b200) = 0\n13414 shutdown(16, SHUT_RDWR)           = 0\n13414 close(16)                         = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=12, u64=12}}], 32, -1) = 1\n13414 recvfrom(12, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 12, 0x7ffe0c36b200) = 0\n13414 shutdown(12, SHUT_RDWR)           = 0\n13414 close(12)                         = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=7, u64=7}}], 32, -1) = 1\n13414 recvfrom(7, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 7, 0x7ffe0c36b200) = 0\n13414 shutdown(7, SHUT_RDWR)            = 0\n13414 close(7)                          = 0\n13414 epoll_wait(8,  <detached ...>\n```\n\n上面的调试 看到了 `EAGAIN (Resource temporarily unavailable)` 然后关闭了连接\n\n下一步redis重连了，重连之后没有发送auth，还报了未验证的错误\n\n去官方看看，重连未验证这个问题已经在`phpredis` 5.2.2解决，于是升级到了 5.2.2 未验证的问题修复了 \n\n看看具体的redis连接情况 `lsof -i:6379`\n```\nphp     17778 root    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17778 root    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\nphp     17779  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17779  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\nphp     17780  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17780  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\n```\n\n每次重启都发现有两个redis连接存在，而且是master进程创建的redis连接\n\n对比php-fpm的redis连接\n\n```\nphp     57305  www    6u  IPv4 5487078      0t0  TCP 127.0.0.1:31788->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    7u  IPv4 5488024      0t0  TCP 127.0.0.1:31790->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    8u  IPv4 5486093      0t0  TCP 127.0.0.1:31792->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    9u  IPv4 5486094      0t0  TCP 127.0.0.1:31794->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    6u  IPv4 5488037      0t0  TCP 127.0.0.1:31798->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    7u  IPv4 5488038      0t0  TCP 127.0.0.1:31800->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    8u  IPv4 5488043      0t0  TCP 127.0.0.1:31802->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    9u  IPv4 5486102      0t0  TCP 127.0.0.1:31804->127.0.0.1:6379 (ESTABLISHED)\n```\n\n仔细看上面的SOA redis连接，发现work进程共享了master的资源，两个work进程有一样的redis连接\n\n继续测试果然发现 redis读取的数据是错乱的，每次都是读取到了上一次的数据\n\n一开始以为laravel加载服务提供者的时候就已经创建了redis连接\n\n于是 在master进程中调用关闭redis连接，然后再work进程中重新注册redis服务提供者，redis连接依然存在\n\n因为线上环境也有一台服务器有这样的问题\n\n于是回到线上环境，线上两台服务器，有一台正常，有一台的问题和我本地环境一样，对比两台服务器的history命令 看看是否和服务启动有关，还是改了什么\n\n通过对比发现正常的那台服务器 是先restart queue 再 restart soa\n\n然后在有问题的那台服务器上重新操作一遍，发现问题居然解决了！是queue影响了吗？queue也是使用laravel command来管理\n\n回到本地测试环境\n\n一样操作，发现问题居然还在，这就有点神奇了 玄学吗（代码的世界是没有玄学的）\n\n最后想到到底在哪里创建了redis连接呢？线上已经验证启动SOA时是没有redis连接的，创建redis连接在具体的业务调用里面\n\n到这里就问题就变成了找到 master 启动时在哪里调用了Redis:connect\n\n最快的方法是看看调用栈，到 laravel 源码 PhpRedisConnector 出直接抛个Exception 看看是哪里调用了 Redis::connect\n\n最后发现是 app/Console/Commands/ProxyUserUsedMigrate 这个文件\n\n然后看看代码，原来我在这类的_ _construct 调用了 redis:connect\n\n而且Commands里面的类 是laravel初始化的时候就全部加载的，这就导致了启动SOA时master已经连接redis了\n\n问题已经明确：\n\n并发测试时，`EAGAIN (Resource temporarily unavailable)` 导致连接被断开，其它子进程还在使用此连接\n\n最终导致了`read error on connection to 127.0.0.1:6379`\n\n至此找到了问题的所在（上面laravel注册服务提供者时，是没有创建redis连接的）\n\n删除这个命令文件 重启soa服务，一切正常了\n\n## 总结\n\n这次的bug是新增代码影响的，而且新增的代码只是临时执行需要，开始没有考虑到这新增的代码会影响到SOA\n\nlaravel Commands __construct 里面不要做redis操作 或者其他的连接操作 这样会影响soa master\n\n像这样的问题，还是得先仔细看看最近修改、增加了那些代码，这样比较容易发现问题的所在\n\n从这次调试中也加深了对phpredis的熟悉\n\n最后讨论和延伸：\n\n主进程不应该创建任何不需要共享的资源，比如问题中的redis连接\n\n主进程进行fork子进程，子进程会继承主进程的资源\n\n两个子进程操作同一个socket，在没有锁的情况下是会出问题的，比如问题中的数据错乱，或者连接关闭了但是信息不同步\n\n需要共享时 应该做好临界区管理，各种锁或者机制来保证\n","source":"_posts/bug/redis-read_error_on_connection.md","raw":"---\nurl: /2020/06/04/redis-read-error-on-connection.html\ntitle: \"一次Redis read error on connection 错误调试\"\nkeywords: \"Redis Linux\"\ndescription: \"Redis read error on connection 错误调试\"\ndate: 2020-06-04T22:53:12+08:00\ndraft: false\ntags: [\"Redis\", \"Linux\"]\ntags_weight: 100\ncategories: [\"Redis\"]\ncategoryes_weight: 100\n---\n\n## 故事之初\n\n一次重启SOA服务后，突然发现有报错`read error on connection to 127.0.0.1:6379`\n\n下面是SOA服务中环境和依赖的包版本\n\nPHP 7.2.25\n\n使用 PCNTL POSIX 来管理进程\n\n[ext-phpredis 5.2.1](https://pecl.php.net/get/redis-5.2.1.tgz)\n\n[ext-event 2.5.4](https://pecl.php.net/get/event-2.5.4.tgz)\n\nlaravel 6.18.14\n\nSOA是基于event 写的一个多进程服务 使用laravel command来启动和停止进程\n\n由master 进程 fork 多个work进程处理业务\n\n`ps -ef|grep Soa`\n\n```\nroot      31614      1  0 Jun04 ?        00:00:00 Soa master server\nwww       31615  31614  0 Jun04 ?        00:00:01 Soa worker server\nwww       31616  31614  0 Jun04 ?        00:00:01 Soa worker server\n```\n\n## 网上查资料\n\n按照报错，应该是连接被关闭然后再发请求造成的\n\n[参考 Redis：排查 read error on connection 小记](https://www.jianshu.com/p/6d6a09db55e8)\n\n感觉可能是超时时间引起的\n\n于是设置`phpredis` read_timeout 为-1，重启SOA调试，错误依旧\n\n我们redis客户端是启用 persistent 的，使用的 pconnect\n\n看一下redis扩展的配置\n```\nredis.pconnect.pooling_enabled => 1 => 1\nredis.pconnect.connection_limit => 0 => 0\n```\n\n配置没什么问题\n\n也去[phpredis](https://github.com/phpredis/phpredis) 源码搜索这个错误，和上面所说的一样\n\n## 重现并调试\n\n既然能稳定重现 那用 `strace -p $pid` 看看系统调用（开始也使用tcpdump gdb 调试，没发现导致的错误的原因）\n\n```\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9342), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 12\n13414 setsockopt(12, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(12, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(12, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(12, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 12, {EPOLLIN, {u32=12, u64=12}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=12, u64=12}}], 32, -1) = 1\n13414 recvfrom(12, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(12, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(12, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(12, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(12, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(12, \"\\v\\0\\1\\0\\0\\0 d6e820eebbac8b527d721621a\"..., 4096, 0, NULL, NULL) = 40\n13414 poll([{fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(7, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=7, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=7, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=7, revents=POLLIN}])\n13414 recvfrom(7, 0x32e7d40, 8192, MSG_DONTWAIT, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)\n13414 close(7)                          = 0\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6179) = 6179\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9348), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 7\n13414 setsockopt(7, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(7, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(7, F_GETFL)                 = 0x2 (flags O_RDWR)\n13414 fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 7, {EPOLLIN, {u32=7, u64=7}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=7, u64=7}}], 32, -1) = 1\n13414 recvfrom(7, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(7, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(7, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(7, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(7, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(7, \"\\v\\0\\1\\0\\0\\0 1e5d42e6117278050b3818af8\"..., 4096, 0, NULL, NULL) = 40\n13414 socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 15\n13414 fcntl(15, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(15, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 connect(15, {sa_family=AF_INET, sin_port=htons(6379), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = -1 EINPROGRESS (Operation now in progress)\n13414 poll([{fd=15, events=POLLIN|POLLOUT|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLOUT}])\n13414 getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) = 0\n13414 fcntl(15, F_SETFL, O_RDWR)        = 0\n13414 setsockopt(15, SOL_TCP, TCP_NODELAY, [1], 4) = 0\n13414 setsockopt(15, SOL_SOCKET, SO_KEEPALIVE, [0], 4) = 0\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(15, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=15, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLIN}])\n13414 recvfrom(15, \"-NOAUTH Authentication required.\"..., 8192, MSG_DONTWAIT, NULL, NULL) = 34\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6166) = 6166\n13414 epoll_wait(8, [{EPOLLIN, {u32=11, u64=11}}], 32, -1) = 1\n13414 accept(11, {sa_family=AF_INET, sin_port=htons(9344), sin_addr=inet_addr(\"127.0.0.1\")}, [16]) = 16\n13414 setsockopt(16, SOL_SOCKET, SO_RCVTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 setsockopt(16, SOL_SOCKET, SO_SNDTIMEO, \"2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 16) = 0\n13414 fcntl(16, F_GETFL)                = 0x2 (flags O_RDWR)\n13414 fcntl(16, F_SETFL, O_RDWR|O_NONBLOCK) = 0\n13414 epoll_ctl(8, EPOLL_CTL_ADD, 16, {EPOLLIN, {u32=16, u64=16}}) = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=16, u64=16}}], 32, -1) = 1\n13414 recvfrom(16, \"\\200\", 1, 0, NULL, NULL) = 1\n13414 recvfrom(16, \"\\1\\0\\1\", 3, 0, NULL, NULL) = 3\n13414 recvfrom(16, \"\\0\\0\\0\\16\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(16, \"Device:offLine\", 14, 0, NULL, NULL) = 14\n13414 recvfrom(16, \"\\0\\0\\0\\0\", 4, 0, NULL, NULL) = 4\n13414 recvfrom(16, \"\\v\\0\\1\\0\\0\\0 9eadf923b6dceadd66727a163\"..., 4096, 0, NULL, NULL) = 40\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 sendto(15, \"*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_\"..., 93, MSG_DONTWAIT, NULL, 0) = 93\n13414 poll([{fd=15, events=POLLIN|POLLPRI|POLLERR|POLLHUP}], 1, 0) = 0 (Timeout)\n13414 poll([{fd=15, events=POLLIN|POLLERR|POLLHUP}], 1, 60000) = 1 ([{fd=15, revents=POLLIN}])\n13414 recvfrom(15, \"-NOAUTH Authentication required.\"..., 8192, MSG_DONTWAIT, NULL, NULL) = 34\n13414 write(13, \"[2020-06-03 17:36:55] local.ERRO\"..., 6166) = 6166\n13414 epoll_wait(8, [{EPOLLIN, {u32=16, u64=16}}], 32, -1) = 1\n13414 recvfrom(16, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 16, 0x7ffe0c36b200) = 0\n13414 shutdown(16, SHUT_RDWR)           = 0\n13414 close(16)                         = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=12, u64=12}}], 32, -1) = 1\n13414 recvfrom(12, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 12, 0x7ffe0c36b200) = 0\n13414 shutdown(12, SHUT_RDWR)           = 0\n13414 close(12)                         = 0\n13414 epoll_wait(8, [{EPOLLIN, {u32=7, u64=7}}], 32, -1) = 1\n13414 recvfrom(7, \"\", 1, 0, NULL, NULL) = 0\n13414 epoll_ctl(8, EPOLL_CTL_DEL, 7, 0x7ffe0c36b200) = 0\n13414 shutdown(7, SHUT_RDWR)            = 0\n13414 close(7)                          = 0\n13414 epoll_wait(8,  <detached ...>\n```\n\n上面的调试 看到了 `EAGAIN (Resource temporarily unavailable)` 然后关闭了连接\n\n下一步redis重连了，重连之后没有发送auth，还报了未验证的错误\n\n去官方看看，重连未验证这个问题已经在`phpredis` 5.2.2解决，于是升级到了 5.2.2 未验证的问题修复了 \n\n看看具体的redis连接情况 `lsof -i:6379`\n```\nphp     17778 root    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17778 root    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\nphp     17779  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17779  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\nphp     17780  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915->127.0.0.1:6379 (ESTABLISHED)\nphp     17780  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917->127.0.0.1:6379 (ESTABLISHED)\n```\n\n每次重启都发现有两个redis连接存在，而且是master进程创建的redis连接\n\n对比php-fpm的redis连接\n\n```\nphp     57305  www    6u  IPv4 5487078      0t0  TCP 127.0.0.1:31788->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    7u  IPv4 5488024      0t0  TCP 127.0.0.1:31790->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    8u  IPv4 5486093      0t0  TCP 127.0.0.1:31792->127.0.0.1:6379 (ESTABLISHED)\nphp     57305  www    9u  IPv4 5486094      0t0  TCP 127.0.0.1:31794->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    6u  IPv4 5488037      0t0  TCP 127.0.0.1:31798->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    7u  IPv4 5488038      0t0  TCP 127.0.0.1:31800->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    8u  IPv4 5488043      0t0  TCP 127.0.0.1:31802->127.0.0.1:6379 (ESTABLISHED)\nphp     57313  www    9u  IPv4 5486102      0t0  TCP 127.0.0.1:31804->127.0.0.1:6379 (ESTABLISHED)\n```\n\n仔细看上面的SOA redis连接，发现work进程共享了master的资源，两个work进程有一样的redis连接\n\n继续测试果然发现 redis读取的数据是错乱的，每次都是读取到了上一次的数据\n\n一开始以为laravel加载服务提供者的时候就已经创建了redis连接\n\n于是 在master进程中调用关闭redis连接，然后再work进程中重新注册redis服务提供者，redis连接依然存在\n\n因为线上环境也有一台服务器有这样的问题\n\n于是回到线上环境，线上两台服务器，有一台正常，有一台的问题和我本地环境一样，对比两台服务器的history命令 看看是否和服务启动有关，还是改了什么\n\n通过对比发现正常的那台服务器 是先restart queue 再 restart soa\n\n然后在有问题的那台服务器上重新操作一遍，发现问题居然解决了！是queue影响了吗？queue也是使用laravel command来管理\n\n回到本地测试环境\n\n一样操作，发现问题居然还在，这就有点神奇了 玄学吗（代码的世界是没有玄学的）\n\n最后想到到底在哪里创建了redis连接呢？线上已经验证启动SOA时是没有redis连接的，创建redis连接在具体的业务调用里面\n\n到这里就问题就变成了找到 master 启动时在哪里调用了Redis:connect\n\n最快的方法是看看调用栈，到 laravel 源码 PhpRedisConnector 出直接抛个Exception 看看是哪里调用了 Redis::connect\n\n最后发现是 app/Console/Commands/ProxyUserUsedMigrate 这个文件\n\n然后看看代码，原来我在这类的_ _construct 调用了 redis:connect\n\n而且Commands里面的类 是laravel初始化的时候就全部加载的，这就导致了启动SOA时master已经连接redis了\n\n问题已经明确：\n\n并发测试时，`EAGAIN (Resource temporarily unavailable)` 导致连接被断开，其它子进程还在使用此连接\n\n最终导致了`read error on connection to 127.0.0.1:6379`\n\n至此找到了问题的所在（上面laravel注册服务提供者时，是没有创建redis连接的）\n\n删除这个命令文件 重启soa服务，一切正常了\n\n## 总结\n\n这次的bug是新增代码影响的，而且新增的代码只是临时执行需要，开始没有考虑到这新增的代码会影响到SOA\n\nlaravel Commands __construct 里面不要做redis操作 或者其他的连接操作 这样会影响soa master\n\n像这样的问题，还是得先仔细看看最近修改、增加了那些代码，这样比较容易发现问题的所在\n\n从这次调试中也加深了对phpredis的熟悉\n\n最后讨论和延伸：\n\n主进程不应该创建任何不需要共享的资源，比如问题中的redis连接\n\n主进程进行fork子进程，子进程会继承主进程的资源\n\n两个子进程操作同一个socket，在没有锁的情况下是会出问题的，比如问题中的数据错乱，或者连接关闭了但是信息不同步\n\n需要共享时 应该做好临界区管理，各种锁或者机制来保证\n","slug":"bug/redis-read_error_on_connection","published":1,"updated":"2020-07-16T12:38:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf2u0011mv05cmsyfszu","content":"<h2 id=\"故事之初\"><a href=\"#故事之初\" class=\"headerlink\" title=\"故事之初\"></a>故事之初</h2><p>一次重启SOA服务后，突然发现有报错<code>read error on connection to 127.0.0.1:6379</code></p>\n<p>下面是SOA服务中环境和依赖的包版本</p>\n<p>PHP 7.2.25</p>\n<p>使用 PCNTL POSIX 来管理进程</p>\n<p><a href=\"https://pecl.php.net/get/redis-5.2.1.tgz\">ext-phpredis 5.2.1</a></p>\n<p><a href=\"https://pecl.php.net/get/event-2.5.4.tgz\">ext-event 2.5.4</a></p>\n<p>laravel 6.18.14</p>\n<p>SOA是基于event 写的一个多进程服务 使用laravel command来启动和停止进程</p>\n<p>由master 进程 fork 多个work进程处理业务</p>\n<p><code>ps -ef|grep Soa</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      31614      1  0 Jun04 ?        00:00:00 Soa master server</span><br><span class=\"line\">www       31615  31614  0 Jun04 ?        00:00:01 Soa worker server</span><br><span class=\"line\">www       31616  31614  0 Jun04 ?        00:00:01 Soa worker server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网上查资料\"><a href=\"#网上查资料\" class=\"headerlink\" title=\"网上查资料\"></a>网上查资料</h2><p>按照报错，应该是连接被关闭然后再发请求造成的</p>\n<p><a href=\"https://www.jianshu.com/p/6d6a09db55e8\">参考 Redis：排查 read error on connection 小记</a></p>\n<p>感觉可能是超时时间引起的</p>\n<p>于是设置<code>phpredis</code> read_timeout 为-1，重启SOA调试，错误依旧</p>\n<p>我们redis客户端是启用 persistent 的，使用的 pconnect</p>\n<p>看一下redis扩展的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.pconnect.pooling_enabled &#x3D;&gt; 1 &#x3D;&gt; 1</span><br><span class=\"line\">redis.pconnect.connection_limit &#x3D;&gt; 0 &#x3D;&gt; 0</span><br></pre></td></tr></table></figure>\n\n<p>配置没什么问题</p>\n<p>也去<a href=\"https://github.com/phpredis/phpredis\">phpredis</a> 源码搜索这个错误，和上面所说的一样</p>\n<h2 id=\"重现并调试\"><a href=\"#重现并调试\" class=\"headerlink\" title=\"重现并调试\"></a>重现并调试</h2><p>既然能稳定重现 那用 <code>strace -p $pid</code> 看看系统调用（开始也使用tcpdump gdb 调试，没发现导致的错误的原因）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9342), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 12</span><br><span class=\"line\">13414 setsockopt(12, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(12, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(12, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(12, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 12, &#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(12, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\v\\0\\1\\0\\0\\0 d6e820eebbac8b527d721621a&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(7, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;7, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(7, 0x32e7d40, 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; -1 EAGAIN (Resource temporarily unavailable)</span><br><span class=\"line\">13414 close(7)                          &#x3D; 0</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6179) &#x3D; 6179</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9348), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 7</span><br><span class=\"line\">13414 setsockopt(7, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(7, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(7, F_GETFL)                 &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 7, &#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(7, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\v\\0\\1\\0\\0\\0 1e5d42e6117278050b3818af8&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 socket(AF_INET, SOCK_STREAM, IPPROTO_IP) &#x3D; 15</span><br><span class=\"line\">13414 fcntl(15, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(15, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 connect(15, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(6379), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) &#x3D; -1 EINPROGRESS (Operation now in progress)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLOUT|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLOUT&#125;])</span><br><span class=\"line\">13414 getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(15, F_SETFL, O_RDWR)        &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(15, SOL_TCP, TCP_NODELAY, [1], 4) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(15, SOL_SOCKET, SO_KEEPALIVE, [0], 4) &#x3D; 0</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(15, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; 34</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) &#x3D; 6166</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9344), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 16</span><br><span class=\"line\">13414 setsockopt(16, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(16, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(16, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(16, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 16, &#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(16, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\v\\0\\1\\0\\0\\0 9eadf923b6dceadd66727a163&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(15, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; 34</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) &#x3D; 6166</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 16, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(16, SHUT_RDWR)           &#x3D; 0</span><br><span class=\"line\">13414 close(16)                         &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 12, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(12, SHUT_RDWR)           &#x3D; 0</span><br><span class=\"line\">13414 close(12)                         &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 7, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(7, SHUT_RDWR)            &#x3D; 0</span><br><span class=\"line\">13414 close(7)                          &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8,  &lt;detached ...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的调试 看到了 <code>EAGAIN (Resource temporarily unavailable)</code> 然后关闭了连接</p>\n<p>下一步redis重连了，重连之后没有发送auth，还报了未验证的错误</p>\n<p>去官方看看，重连未验证这个问题已经在<code>phpredis</code> 5.2.2解决，于是升级到了 5.2.2 未验证的问题修复了 </p>\n<p>看看具体的redis连接情况 <code>lsof -i:6379</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php     17778 root    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17778 root    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17779  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17779  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17780  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17780  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<p>每次重启都发现有两个redis连接存在，而且是master进程创建的redis连接</p>\n<p>对比php-fpm的redis连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php     57305  www    6u  IPv4 5487078      0t0  TCP 127.0.0.1:31788-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    7u  IPv4 5488024      0t0  TCP 127.0.0.1:31790-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    8u  IPv4 5486093      0t0  TCP 127.0.0.1:31792-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    9u  IPv4 5486094      0t0  TCP 127.0.0.1:31794-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    6u  IPv4 5488037      0t0  TCP 127.0.0.1:31798-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    7u  IPv4 5488038      0t0  TCP 127.0.0.1:31800-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    8u  IPv4 5488043      0t0  TCP 127.0.0.1:31802-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    9u  IPv4 5486102      0t0  TCP 127.0.0.1:31804-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<p>仔细看上面的SOA redis连接，发现work进程共享了master的资源，两个work进程有一样的redis连接</p>\n<p>继续测试果然发现 redis读取的数据是错乱的，每次都是读取到了上一次的数据</p>\n<p>一开始以为laravel加载服务提供者的时候就已经创建了redis连接</p>\n<p>于是 在master进程中调用关闭redis连接，然后再work进程中重新注册redis服务提供者，redis连接依然存在</p>\n<p>因为线上环境也有一台服务器有这样的问题</p>\n<p>于是回到线上环境，线上两台服务器，有一台正常，有一台的问题和我本地环境一样，对比两台服务器的history命令 看看是否和服务启动有关，还是改了什么</p>\n<p>通过对比发现正常的那台服务器 是先restart queue 再 restart soa</p>\n<p>然后在有问题的那台服务器上重新操作一遍，发现问题居然解决了！是queue影响了吗？queue也是使用laravel command来管理</p>\n<p>回到本地测试环境</p>\n<p>一样操作，发现问题居然还在，这就有点神奇了 玄学吗（代码的世界是没有玄学的）</p>\n<p>最后想到到底在哪里创建了redis连接呢？线上已经验证启动SOA时是没有redis连接的，创建redis连接在具体的业务调用里面</p>\n<p>到这里就问题就变成了找到 master 启动时在哪里调用了Redis:connect</p>\n<p>最快的方法是看看调用栈，到 laravel 源码 PhpRedisConnector 出直接抛个Exception 看看是哪里调用了 Redis::connect</p>\n<p>最后发现是 app/Console/Commands/ProxyUserUsedMigrate 这个文件</p>\n<p>然后看看代码，原来我在这类的_ _construct 调用了 redis:connect</p>\n<p>而且Commands里面的类 是laravel初始化的时候就全部加载的，这就导致了启动SOA时master已经连接redis了</p>\n<p>问题已经明确：</p>\n<p>并发测试时，<code>EAGAIN (Resource temporarily unavailable)</code> 导致连接被断开，其它子进程还在使用此连接</p>\n<p>最终导致了<code>read error on connection to 127.0.0.1:6379</code></p>\n<p>至此找到了问题的所在（上面laravel注册服务提供者时，是没有创建redis连接的）</p>\n<p>删除这个命令文件 重启soa服务，一切正常了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次的bug是新增代码影响的，而且新增的代码只是临时执行需要，开始没有考虑到这新增的代码会影响到SOA</p>\n<p>laravel Commands __construct 里面不要做redis操作 或者其他的连接操作 这样会影响soa master</p>\n<p>像这样的问题，还是得先仔细看看最近修改、增加了那些代码，这样比较容易发现问题的所在</p>\n<p>从这次调试中也加深了对phpredis的熟悉</p>\n<p>最后讨论和延伸：</p>\n<p>主进程不应该创建任何不需要共享的资源，比如问题中的redis连接</p>\n<p>主进程进行fork子进程，子进程会继承主进程的资源</p>\n<p>两个子进程操作同一个socket，在没有锁的情况下是会出问题的，比如问题中的数据错乱，或者连接关闭了但是信息不同步</p>\n<p>需要共享时 应该做好临界区管理，各种锁或者机制来保证</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"故事之初\"><a href=\"#故事之初\" class=\"headerlink\" title=\"故事之初\"></a>故事之初</h2><p>一次重启SOA服务后，突然发现有报错<code>read error on connection to 127.0.0.1:6379</code></p>\n<p>下面是SOA服务中环境和依赖的包版本</p>\n<p>PHP 7.2.25</p>\n<p>使用 PCNTL POSIX 来管理进程</p>\n<p><a href=\"https://pecl.php.net/get/redis-5.2.1.tgz\">ext-phpredis 5.2.1</a></p>\n<p><a href=\"https://pecl.php.net/get/event-2.5.4.tgz\">ext-event 2.5.4</a></p>\n<p>laravel 6.18.14</p>\n<p>SOA是基于event 写的一个多进程服务 使用laravel command来启动和停止进程</p>\n<p>由master 进程 fork 多个work进程处理业务</p>\n<p><code>ps -ef|grep Soa</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root      31614      1  0 Jun04 ?        00:00:00 Soa master server</span><br><span class=\"line\">www       31615  31614  0 Jun04 ?        00:00:01 Soa worker server</span><br><span class=\"line\">www       31616  31614  0 Jun04 ?        00:00:01 Soa worker server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网上查资料\"><a href=\"#网上查资料\" class=\"headerlink\" title=\"网上查资料\"></a>网上查资料</h2><p>按照报错，应该是连接被关闭然后再发请求造成的</p>\n<p><a href=\"https://www.jianshu.com/p/6d6a09db55e8\">参考 Redis：排查 read error on connection 小记</a></p>\n<p>感觉可能是超时时间引起的</p>\n<p>于是设置<code>phpredis</code> read_timeout 为-1，重启SOA调试，错误依旧</p>\n<p>我们redis客户端是启用 persistent 的，使用的 pconnect</p>\n<p>看一下redis扩展的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.pconnect.pooling_enabled &#x3D;&gt; 1 &#x3D;&gt; 1</span><br><span class=\"line\">redis.pconnect.connection_limit &#x3D;&gt; 0 &#x3D;&gt; 0</span><br></pre></td></tr></table></figure>\n\n<p>配置没什么问题</p>\n<p>也去<a href=\"https://github.com/phpredis/phpredis\">phpredis</a> 源码搜索这个错误，和上面所说的一样</p>\n<h2 id=\"重现并调试\"><a href=\"#重现并调试\" class=\"headerlink\" title=\"重现并调试\"></a>重现并调试</h2><p>既然能稳定重现 那用 <code>strace -p $pid</code> 看看系统调用（开始也使用tcpdump gdb 调试，没发现导致的错误的原因）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9342), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 12</span><br><span class=\"line\">13414 setsockopt(12, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(12, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(12, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(12, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 12, &#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(12, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(12, &quot;\\v\\0\\1\\0\\0\\0 d6e820eebbac8b527d721621a&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(7, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;7, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;7, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(7, 0x32e7d40, 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; -1 EAGAIN (Resource temporarily unavailable)</span><br><span class=\"line\">13414 close(7)                          &#x3D; 0</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6179) &#x3D; 6179</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9348), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 7</span><br><span class=\"line\">13414 setsockopt(7, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(7, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(7, F_GETFL)                 &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(7, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 7, &#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(7, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(7, &quot;\\v\\0\\1\\0\\0\\0 1e5d42e6117278050b3818af8&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 socket(AF_INET, SOCK_STREAM, IPPROTO_IP) &#x3D; 15</span><br><span class=\"line\">13414 fcntl(15, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(15, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 connect(15, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(6379), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) &#x3D; -1 EINPROGRESS (Operation now in progress)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLOUT|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLOUT&#125;])</span><br><span class=\"line\">13414 getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(15, F_SETFL, O_RDWR)        &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(15, SOL_TCP, TCP_NODELAY, [1], 4) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(15, SOL_SOCKET, SO_KEEPALIVE, [0], 4) &#x3D; 0</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(15, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; 34</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) &#x3D; 6166</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;11, u64&#x3D;11&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 accept(11, &#123;sa_family&#x3D;AF_INET, sin_port&#x3D;htons(9344), sin_addr&#x3D;inet_addr(&quot;127.0.0.1&quot;)&#125;, [16]) &#x3D; 16</span><br><span class=\"line\">13414 setsockopt(16, SOL_SOCKET, SO_RCVTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 setsockopt(16, SOL_SOCKET, SO_SNDTIMEO, &quot;2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&quot;, 16) &#x3D; 0</span><br><span class=\"line\">13414 fcntl(16, F_GETFL)                &#x3D; 0x2 (flags O_RDWR)</span><br><span class=\"line\">13414 fcntl(16, F_SETFL, O_RDWR|O_NONBLOCK) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_ADD, 16, &#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;) &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\200&quot;, 1, 0, NULL, NULL) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\1\\0\\1&quot;, 3, 0, NULL, NULL) &#x3D; 3</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\0\\0\\0\\16&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(16, &quot;Device:offLine&quot;, 14, 0, NULL, NULL) &#x3D; 14</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\0\\0\\0\\0&quot;, 4, 0, NULL, NULL) &#x3D; 4</span><br><span class=\"line\">13414 recvfrom(16, &quot;\\v\\0\\1\\0\\0\\0 9eadf923b6dceadd66727a163&quot;..., 4096, 0, NULL, NULL) &#x3D; 40</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 sendto(15, &quot;*3\\r\\n$4\\r\\nHGET\\r\\n$33\\r\\nproxy_server_&quot;..., 93, MSG_DONTWAIT, NULL, 0) &#x3D; 93</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLPRI|POLLERR|POLLHUP&#125;], 1, 0) &#x3D; 0 (Timeout)</span><br><span class=\"line\">13414 poll([&#123;fd&#x3D;15, events&#x3D;POLLIN|POLLERR|POLLHUP&#125;], 1, 60000) &#x3D; 1 ([&#123;fd&#x3D;15, revents&#x3D;POLLIN&#125;])</span><br><span class=\"line\">13414 recvfrom(15, &quot;-NOAUTH Authentication required.&quot;..., 8192, MSG_DONTWAIT, NULL, NULL) &#x3D; 34</span><br><span class=\"line\">13414 write(13, &quot;[2020-06-03 17:36:55] local.ERRO&quot;..., 6166) &#x3D; 6166</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;16, u64&#x3D;16&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(16, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 16, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(16, SHUT_RDWR)           &#x3D; 0</span><br><span class=\"line\">13414 close(16)                         &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;12, u64&#x3D;12&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(12, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 12, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(12, SHUT_RDWR)           &#x3D; 0</span><br><span class=\"line\">13414 close(12)                         &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8, [&#123;EPOLLIN, &#123;u32&#x3D;7, u64&#x3D;7&#125;&#125;], 32, -1) &#x3D; 1</span><br><span class=\"line\">13414 recvfrom(7, &quot;&quot;, 1, 0, NULL, NULL) &#x3D; 0</span><br><span class=\"line\">13414 epoll_ctl(8, EPOLL_CTL_DEL, 7, 0x7ffe0c36b200) &#x3D; 0</span><br><span class=\"line\">13414 shutdown(7, SHUT_RDWR)            &#x3D; 0</span><br><span class=\"line\">13414 close(7)                          &#x3D; 0</span><br><span class=\"line\">13414 epoll_wait(8,  &lt;detached ...&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的调试 看到了 <code>EAGAIN (Resource temporarily unavailable)</code> 然后关闭了连接</p>\n<p>下一步redis重连了，重连之后没有发送auth，还报了未验证的错误</p>\n<p>去官方看看，重连未验证这个问题已经在<code>phpredis</code> 5.2.2解决，于是升级到了 5.2.2 未验证的问题修复了 </p>\n<p>看看具体的redis连接情况 <code>lsof -i:6379</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php     17778 root    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17778 root    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17779  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17779  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17780  www    6u  IPv4 5742941      0t0  TCP 127.0.0.1:7915-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     17780  www    7u  IPv4 5742440      0t0  TCP 127.0.0.1:7917-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<p>每次重启都发现有两个redis连接存在，而且是master进程创建的redis连接</p>\n<p>对比php-fpm的redis连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php     57305  www    6u  IPv4 5487078      0t0  TCP 127.0.0.1:31788-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    7u  IPv4 5488024      0t0  TCP 127.0.0.1:31790-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    8u  IPv4 5486093      0t0  TCP 127.0.0.1:31792-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57305  www    9u  IPv4 5486094      0t0  TCP 127.0.0.1:31794-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    6u  IPv4 5488037      0t0  TCP 127.0.0.1:31798-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    7u  IPv4 5488038      0t0  TCP 127.0.0.1:31800-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    8u  IPv4 5488043      0t0  TCP 127.0.0.1:31802-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br><span class=\"line\">php     57313  www    9u  IPv4 5486102      0t0  TCP 127.0.0.1:31804-&gt;127.0.0.1:6379 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<p>仔细看上面的SOA redis连接，发现work进程共享了master的资源，两个work进程有一样的redis连接</p>\n<p>继续测试果然发现 redis读取的数据是错乱的，每次都是读取到了上一次的数据</p>\n<p>一开始以为laravel加载服务提供者的时候就已经创建了redis连接</p>\n<p>于是 在master进程中调用关闭redis连接，然后再work进程中重新注册redis服务提供者，redis连接依然存在</p>\n<p>因为线上环境也有一台服务器有这样的问题</p>\n<p>于是回到线上环境，线上两台服务器，有一台正常，有一台的问题和我本地环境一样，对比两台服务器的history命令 看看是否和服务启动有关，还是改了什么</p>\n<p>通过对比发现正常的那台服务器 是先restart queue 再 restart soa</p>\n<p>然后在有问题的那台服务器上重新操作一遍，发现问题居然解决了！是queue影响了吗？queue也是使用laravel command来管理</p>\n<p>回到本地测试环境</p>\n<p>一样操作，发现问题居然还在，这就有点神奇了 玄学吗（代码的世界是没有玄学的）</p>\n<p>最后想到到底在哪里创建了redis连接呢？线上已经验证启动SOA时是没有redis连接的，创建redis连接在具体的业务调用里面</p>\n<p>到这里就问题就变成了找到 master 启动时在哪里调用了Redis:connect</p>\n<p>最快的方法是看看调用栈，到 laravel 源码 PhpRedisConnector 出直接抛个Exception 看看是哪里调用了 Redis::connect</p>\n<p>最后发现是 app/Console/Commands/ProxyUserUsedMigrate 这个文件</p>\n<p>然后看看代码，原来我在这类的_ _construct 调用了 redis:connect</p>\n<p>而且Commands里面的类 是laravel初始化的时候就全部加载的，这就导致了启动SOA时master已经连接redis了</p>\n<p>问题已经明确：</p>\n<p>并发测试时，<code>EAGAIN (Resource temporarily unavailable)</code> 导致连接被断开，其它子进程还在使用此连接</p>\n<p>最终导致了<code>read error on connection to 127.0.0.1:6379</code></p>\n<p>至此找到了问题的所在（上面laravel注册服务提供者时，是没有创建redis连接的）</p>\n<p>删除这个命令文件 重启soa服务，一切正常了</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这次的bug是新增代码影响的，而且新增的代码只是临时执行需要，开始没有考虑到这新增的代码会影响到SOA</p>\n<p>laravel Commands __construct 里面不要做redis操作 或者其他的连接操作 这样会影响soa master</p>\n<p>像这样的问题，还是得先仔细看看最近修改、增加了那些代码，这样比较容易发现问题的所在</p>\n<p>从这次调试中也加深了对phpredis的熟悉</p>\n<p>最后讨论和延伸：</p>\n<p>主进程不应该创建任何不需要共享的资源，比如问题中的redis连接</p>\n<p>主进程进行fork子进程，子进程会继承主进程的资源</p>\n<p>两个子进程操作同一个socket，在没有锁的情况下是会出问题的，比如问题中的数据错乱，或者连接关闭了但是信息不同步</p>\n<p>需要共享时 应该做好临界区管理，各种锁或者机制来保证</p>\n"},{"url":"/2020/03/29/linux-file-permission.html","title":"Linux文件目录权限","keywords":"Linux,文件目录权限","description":"Linux文件目录权限","date":"2020-03-29T03:29:11.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\nLinux一切皆文件\n\n## 权限解释\n\n首先我们执行 `ls -al /etc/passwd` 看一下 passwd文件的权限如下：\n\n权限|连接|所有者|用户组|文件大小|修改日期|文件名\n---|---|---|---|---|---|---\n-rw-r--r--|1|root|wheel|6393|Jul 31  2016|/etc/passwd\n\n第一个字符代表这个文件是目录(`d`)、文件(`-`)或者链接文件(`l`)等\n\n接下来三组文件权限9个字符，均为`rwx`三个参数组合，代表读/写/执行权限，分别属于文件所有者、用户组、其他人的权限。\n\n```\n一般记r权限为数字4，w为数字2，x为数字7\n\n所以上面passwd文件的权限也可以说为 644，4+2+0 4+0+0 4+0+0\n所有者拥有读写权限，用户组和其他人拥有读权限\n```\n\n`文件和目录的权限意义并不相同`\n\n### 对文件而言\n\n`r`(read)权限代表可读取此文件内容\n\n`w`(write)可编辑文件内容（**不包含删除该文件**）\n\n`x`(execute)可被系统执行\n\n### 对目录而言\n\n`r`(read contents in directory)具有读取目录结构列表的权限，如使用`ls`命令读取文件夹下的文件列表\n\n`w`(modify contents in directory)这个权限对目录来说是很强大的，因为它表示你具有更改该目录结构列表的权限，具体如下：\n\n- 新建文件与目录，如`touch`，`mkdir`等命令\n- 删除已存在的文件与目录（不论该文件的权限为何）如`rm`等命令\n- 将已存在的文件重命名，如`mv`等命令\n- 转移该目录内的文件，目录位置\n\n`x`(access directory)代表用户能否进入该目录成为工作目录(work directory)，如`cd`等命令\n\n## 文件的默认权限：umask\n\n也就是新建文件或目录的默认权限，`umask` `umask -S`命令查看，一般为0022\n若用户创建文件，默认没有执行权限，则总权限为`-rw-rw-rw-`\n若用户新建目录，则默认全部权限`drwxrwxrwx`\numask的分数指的是，该默认值需要减到的权限，rwx为421\n\n对上面的上umask来说\n用户创建文件：(666 - 022) = 644 = -rw-r--r--\n用户创建目录：(777 - 022) = 755 = drwxr-xr-x\n\n## 如何改变文件用户权限\n\n当我们需要改变文件(目录)权限时，有两个命令`chown`，`chmod`\n\n参考文献：\n\n《鸟哥的Linux私房菜》\n\n\n\n","source":"_posts/linux/file_permission.md","raw":"---\nurl: /2020/03/29/linux-file-permission.html\ntitle: \"Linux文件目录权限\"\nkeywords: \"Linux,文件目录权限\"\ndescription: \"Linux文件目录权限\"\ndate: 2020-03-29T19:29:11+08:00\ndraft: false\ntags: [\"Linux\"]\ntags_weight: 100\ncategories: [\"Linux\"]\ncategoryes_weight: 100\n---\n\nLinux一切皆文件\n\n## 权限解释\n\n首先我们执行 `ls -al /etc/passwd` 看一下 passwd文件的权限如下：\n\n权限|连接|所有者|用户组|文件大小|修改日期|文件名\n---|---|---|---|---|---|---\n-rw-r--r--|1|root|wheel|6393|Jul 31  2016|/etc/passwd\n\n第一个字符代表这个文件是目录(`d`)、文件(`-`)或者链接文件(`l`)等\n\n接下来三组文件权限9个字符，均为`rwx`三个参数组合，代表读/写/执行权限，分别属于文件所有者、用户组、其他人的权限。\n\n```\n一般记r权限为数字4，w为数字2，x为数字7\n\n所以上面passwd文件的权限也可以说为 644，4+2+0 4+0+0 4+0+0\n所有者拥有读写权限，用户组和其他人拥有读权限\n```\n\n`文件和目录的权限意义并不相同`\n\n### 对文件而言\n\n`r`(read)权限代表可读取此文件内容\n\n`w`(write)可编辑文件内容（**不包含删除该文件**）\n\n`x`(execute)可被系统执行\n\n### 对目录而言\n\n`r`(read contents in directory)具有读取目录结构列表的权限，如使用`ls`命令读取文件夹下的文件列表\n\n`w`(modify contents in directory)这个权限对目录来说是很强大的，因为它表示你具有更改该目录结构列表的权限，具体如下：\n\n- 新建文件与目录，如`touch`，`mkdir`等命令\n- 删除已存在的文件与目录（不论该文件的权限为何）如`rm`等命令\n- 将已存在的文件重命名，如`mv`等命令\n- 转移该目录内的文件，目录位置\n\n`x`(access directory)代表用户能否进入该目录成为工作目录(work directory)，如`cd`等命令\n\n## 文件的默认权限：umask\n\n也就是新建文件或目录的默认权限，`umask` `umask -S`命令查看，一般为0022\n若用户创建文件，默认没有执行权限，则总权限为`-rw-rw-rw-`\n若用户新建目录，则默认全部权限`drwxrwxrwx`\numask的分数指的是，该默认值需要减到的权限，rwx为421\n\n对上面的上umask来说\n用户创建文件：(666 - 022) = 644 = -rw-r--r--\n用户创建目录：(777 - 022) = 755 = drwxr-xr-x\n\n## 如何改变文件用户权限\n\n当我们需要改变文件(目录)权限时，有两个命令`chown`，`chmod`\n\n参考文献：\n\n《鸟哥的Linux私房菜》\n\n\n\n","slug":"linux/file_permission","published":1,"updated":"2020-04-02T13:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf30001gmv05ejgx0zrk","content":"<p>Linux一切皆文件</p>\n<h2 id=\"权限解释\"><a href=\"#权限解释\" class=\"headerlink\" title=\"权限解释\"></a>权限解释</h2><p>首先我们执行 <code>ls -al /etc/passwd</code> 看一下 passwd文件的权限如下：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>连接</th>\n<th>所有者</th>\n<th>用户组</th>\n<th>文件大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-rw-r–r–</td>\n<td>1</td>\n<td>root</td>\n<td>wheel</td>\n<td>6393</td>\n<td>Jul 31  2016</td>\n<td>/etc/passwd</td>\n</tr>\n</tbody></table>\n<p>第一个字符代表这个文件是目录(<code>d</code>)、文件(<code>-</code>)或者链接文件(<code>l</code>)等</p>\n<p>接下来三组文件权限9个字符，均为<code>rwx</code>三个参数组合，代表读/写/执行权限，分别属于文件所有者、用户组、其他人的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般记r权限为数字4，w为数字2，x为数字7</span><br><span class=\"line\"></span><br><span class=\"line\">所以上面passwd文件的权限也可以说为 644，4+2+0 4+0+0 4+0+0</span><br><span class=\"line\">所有者拥有读写权限，用户组和其他人拥有读权限</span><br></pre></td></tr></table></figure>\n\n<p><code>文件和目录的权限意义并不相同</code></p>\n<h3 id=\"对文件而言\"><a href=\"#对文件而言\" class=\"headerlink\" title=\"对文件而言\"></a>对文件而言</h3><p><code>r</code>(read)权限代表可读取此文件内容</p>\n<p><code>w</code>(write)可编辑文件内容（<strong>不包含删除该文件</strong>）</p>\n<p><code>x</code>(execute)可被系统执行</p>\n<h3 id=\"对目录而言\"><a href=\"#对目录而言\" class=\"headerlink\" title=\"对目录而言\"></a>对目录而言</h3><p><code>r</code>(read contents in directory)具有读取目录结构列表的权限，如使用<code>ls</code>命令读取文件夹下的文件列表</p>\n<p><code>w</code>(modify contents in directory)这个权限对目录来说是很强大的，因为它表示你具有更改该目录结构列表的权限，具体如下：</p>\n<ul>\n<li>新建文件与目录，如<code>touch</code>，<code>mkdir</code>等命令</li>\n<li>删除已存在的文件与目录（不论该文件的权限为何）如<code>rm</code>等命令</li>\n<li>将已存在的文件重命名，如<code>mv</code>等命令</li>\n<li>转移该目录内的文件，目录位置</li>\n</ul>\n<p><code>x</code>(access directory)代表用户能否进入该目录成为工作目录(work directory)，如<code>cd</code>等命令</p>\n<h2 id=\"文件的默认权限：umask\"><a href=\"#文件的默认权限：umask\" class=\"headerlink\" title=\"文件的默认权限：umask\"></a>文件的默认权限：umask</h2><p>也就是新建文件或目录的默认权限，<code>umask</code> <code>umask -S</code>命令查看，一般为0022<br>若用户创建文件，默认没有执行权限，则总权限为<code>-rw-rw-rw-</code><br>若用户新建目录，则默认全部权限<code>drwxrwxrwx</code><br>umask的分数指的是，该默认值需要减到的权限，rwx为421</p>\n<p>对上面的上umask来说<br>用户创建文件：(666 - 022) = 644 = -rw-r–r–<br>用户创建目录：(777 - 022) = 755 = drwxr-xr-x</p>\n<h2 id=\"如何改变文件用户权限\"><a href=\"#如何改变文件用户权限\" class=\"headerlink\" title=\"如何改变文件用户权限\"></a>如何改变文件用户权限</h2><p>当我们需要改变文件(目录)权限时，有两个命令<code>chown</code>，<code>chmod</code></p>\n<p>参考文献：</p>\n<p>《鸟哥的Linux私房菜》</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux一切皆文件</p>\n<h2 id=\"权限解释\"><a href=\"#权限解释\" class=\"headerlink\" title=\"权限解释\"></a>权限解释</h2><p>首先我们执行 <code>ls -al /etc/passwd</code> 看一下 passwd文件的权限如下：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>连接</th>\n<th>所有者</th>\n<th>用户组</th>\n<th>文件大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-rw-r–r–</td>\n<td>1</td>\n<td>root</td>\n<td>wheel</td>\n<td>6393</td>\n<td>Jul 31  2016</td>\n<td>/etc/passwd</td>\n</tr>\n</tbody></table>\n<p>第一个字符代表这个文件是目录(<code>d</code>)、文件(<code>-</code>)或者链接文件(<code>l</code>)等</p>\n<p>接下来三组文件权限9个字符，均为<code>rwx</code>三个参数组合，代表读/写/执行权限，分别属于文件所有者、用户组、其他人的权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般记r权限为数字4，w为数字2，x为数字7</span><br><span class=\"line\"></span><br><span class=\"line\">所以上面passwd文件的权限也可以说为 644，4+2+0 4+0+0 4+0+0</span><br><span class=\"line\">所有者拥有读写权限，用户组和其他人拥有读权限</span><br></pre></td></tr></table></figure>\n\n<p><code>文件和目录的权限意义并不相同</code></p>\n<h3 id=\"对文件而言\"><a href=\"#对文件而言\" class=\"headerlink\" title=\"对文件而言\"></a>对文件而言</h3><p><code>r</code>(read)权限代表可读取此文件内容</p>\n<p><code>w</code>(write)可编辑文件内容（<strong>不包含删除该文件</strong>）</p>\n<p><code>x</code>(execute)可被系统执行</p>\n<h3 id=\"对目录而言\"><a href=\"#对目录而言\" class=\"headerlink\" title=\"对目录而言\"></a>对目录而言</h3><p><code>r</code>(read contents in directory)具有读取目录结构列表的权限，如使用<code>ls</code>命令读取文件夹下的文件列表</p>\n<p><code>w</code>(modify contents in directory)这个权限对目录来说是很强大的，因为它表示你具有更改该目录结构列表的权限，具体如下：</p>\n<ul>\n<li>新建文件与目录，如<code>touch</code>，<code>mkdir</code>等命令</li>\n<li>删除已存在的文件与目录（不论该文件的权限为何）如<code>rm</code>等命令</li>\n<li>将已存在的文件重命名，如<code>mv</code>等命令</li>\n<li>转移该目录内的文件，目录位置</li>\n</ul>\n<p><code>x</code>(access directory)代表用户能否进入该目录成为工作目录(work directory)，如<code>cd</code>等命令</p>\n<h2 id=\"文件的默认权限：umask\"><a href=\"#文件的默认权限：umask\" class=\"headerlink\" title=\"文件的默认权限：umask\"></a>文件的默认权限：umask</h2><p>也就是新建文件或目录的默认权限，<code>umask</code> <code>umask -S</code>命令查看，一般为0022<br>若用户创建文件，默认没有执行权限，则总权限为<code>-rw-rw-rw-</code><br>若用户新建目录，则默认全部权限<code>drwxrwxrwx</code><br>umask的分数指的是，该默认值需要减到的权限，rwx为421</p>\n<p>对上面的上umask来说<br>用户创建文件：(666 - 022) = 644 = -rw-r–r–<br>用户创建目录：(777 - 022) = 755 = drwxr-xr-x</p>\n<h2 id=\"如何改变文件用户权限\"><a href=\"#如何改变文件用户权限\" class=\"headerlink\" title=\"如何改变文件用户权限\"></a>如何改变文件用户权限</h2><p>当我们需要改变文件(目录)权限时，有两个命令<code>chown</code>，<code>chmod</code></p>\n<p>参考文献：</p>\n<p>《鸟哥的Linux私房菜》</p>\n"},{"url":"/2020/07/16/linux-lock.html","title":"Linux Lock的发展","keywords":"Linux,Lock的发展","description":"Linux Lock的发展","date":"2020-07-16T04:29:21.000Z","draft":true,"tags_weight":100,"categoryes_weight":100,"_content":"\n《操作系统之哲学原理》-锁的发展\n\n## 养金鱼的故事\n\n金鱼有一个很大的特点，就是没有饱的感觉。因此，金鱼吃东西不会因为吃饱就停止，它们会不停的吃\n一直到鱼缸里的食物都被吃完为止。所以，如果你一直喂，它就一直吃，直到胀死。\n\n现在假设小明和小刚两个人合住一套公寓，共同养了一条金鱼，该金鱼一天进食一次。\n两个人想把金鱼养活，一天只喂一次，也只能喂一次。如果有一天两人都喂了鱼，鱼就胀死，\n如果一天内两人都没有喂鱼，鱼就饿死。\n\n他们二人为了把鱼养好，做出如下约定：\n- 每天喂鱼一次，且仅一次\n\n- 如果今天小明喂了鱼，小刚今天就不能再喂，反之亦然\n\n- 如果今天小明没有喂鱼，小刚就必须喂，反之亦然\n\n### 一、不具备任何协调能力\n\n小明与小刚不进行任何沟通，没人觉得要喂鱼时，查看一下鱼的状态，如果感觉鱼像是没有进食，则喂鱼，否则不喂\n\n下面是给出的是在没有同步情况下的程序\n\n小明：\n```\nif (noFeed) {\n    feed fish\n}\n```\n小刚：\n```\nif (noFeed) {\n    feed fish\n}\n```\n\n假设小明和小刚都是养鱼高手，一眼就能看出鱼是否喂过，上述的程序也能正确的执行吗？\n答案是否定的\n\n由于线程的执行可以任意穿插，小明可以先检查鱼，发现没有喂鱼，就准备喂鱼\n但是就在小明准备喂时，程序切换，轮到小刚执行，小刚一看鱼还没喂，就喂鱼，喂完之后，线程切换到小明，\n小明充检查完鱼状态的指令开始执行，于是就喂鱼，这样鱼就被喂了两次，鱼就胀死了\n\n时序图:\n\n时序|小明|小刚\n---|---|---\n1|look at fish(no feed)|\n2| |look at fish(no feed)\n3| |feed fish\n4|feed fish|\n\n\n两个或多个线程争相执行同一段代码或访问同一资源的现象称为竞争(race)。\n这个可能造成竞争的共享代码段或者资源称为临界区(critical section)\n\n### 二、第一种同步机制：留字条\n\n要防止与胀死，就需要防止竞争，想要避免竞争，就需要防止两个或多个进程同时进入临界区\n要达到这一点，就需要某种协调手段\n\n协调的目的就是在任何时刻都只能有一个人在临界区里，这称为互斥(mutual exclusion)\n\n互斥需要满足4个条件\n\n- 不能有两个进程同时在临界区里面\n\n- 进程能够在任何数量和速度的CPU上正确执行\n\n- 在互斥区域外不能阻止另一个进程的运行\n\n- 进程不能无限制地等待进入临界区\n\n第一种同步方式：小明与小刚商定，每人在喂鱼之前留下字条，告诉对方自己将检查鱼，并在需要时喂鱼\n\n小明\n\n```\nif (noNote) {\n    leave note\n    if (noFeed) {\n        feed fish\n    }\n    remove note\n}\n```\n\n小刚：\n```\nif (noNote) {\n    leave note\n    if (noFeed) {\n        feed fish\n    }\n    remove note\n}\n```\n","source":"_posts/linux/lock.md","raw":"---\nurl: /2020/07/16/linux-lock.html\ntitle: \"Linux Lock的发展\"\nkeywords: \"Linux,Lock的发展\"\ndescription: \"Linux Lock的发展\"\ndate: 2020-07-16T20:29:21+08:00\ndraft: true\ntags: [\"Linux\"]\ntags_weight: 100\ncategories: [\"Linux\"]\ncategoryes_weight: 100\n---\n\n《操作系统之哲学原理》-锁的发展\n\n## 养金鱼的故事\n\n金鱼有一个很大的特点，就是没有饱的感觉。因此，金鱼吃东西不会因为吃饱就停止，它们会不停的吃\n一直到鱼缸里的食物都被吃完为止。所以，如果你一直喂，它就一直吃，直到胀死。\n\n现在假设小明和小刚两个人合住一套公寓，共同养了一条金鱼，该金鱼一天进食一次。\n两个人想把金鱼养活，一天只喂一次，也只能喂一次。如果有一天两人都喂了鱼，鱼就胀死，\n如果一天内两人都没有喂鱼，鱼就饿死。\n\n他们二人为了把鱼养好，做出如下约定：\n- 每天喂鱼一次，且仅一次\n\n- 如果今天小明喂了鱼，小刚今天就不能再喂，反之亦然\n\n- 如果今天小明没有喂鱼，小刚就必须喂，反之亦然\n\n### 一、不具备任何协调能力\n\n小明与小刚不进行任何沟通，没人觉得要喂鱼时，查看一下鱼的状态，如果感觉鱼像是没有进食，则喂鱼，否则不喂\n\n下面是给出的是在没有同步情况下的程序\n\n小明：\n```\nif (noFeed) {\n    feed fish\n}\n```\n小刚：\n```\nif (noFeed) {\n    feed fish\n}\n```\n\n假设小明和小刚都是养鱼高手，一眼就能看出鱼是否喂过，上述的程序也能正确的执行吗？\n答案是否定的\n\n由于线程的执行可以任意穿插，小明可以先检查鱼，发现没有喂鱼，就准备喂鱼\n但是就在小明准备喂时，程序切换，轮到小刚执行，小刚一看鱼还没喂，就喂鱼，喂完之后，线程切换到小明，\n小明充检查完鱼状态的指令开始执行，于是就喂鱼，这样鱼就被喂了两次，鱼就胀死了\n\n时序图:\n\n时序|小明|小刚\n---|---|---\n1|look at fish(no feed)|\n2| |look at fish(no feed)\n3| |feed fish\n4|feed fish|\n\n\n两个或多个线程争相执行同一段代码或访问同一资源的现象称为竞争(race)。\n这个可能造成竞争的共享代码段或者资源称为临界区(critical section)\n\n### 二、第一种同步机制：留字条\n\n要防止与胀死，就需要防止竞争，想要避免竞争，就需要防止两个或多个进程同时进入临界区\n要达到这一点，就需要某种协调手段\n\n协调的目的就是在任何时刻都只能有一个人在临界区里，这称为互斥(mutual exclusion)\n\n互斥需要满足4个条件\n\n- 不能有两个进程同时在临界区里面\n\n- 进程能够在任何数量和速度的CPU上正确执行\n\n- 在互斥区域外不能阻止另一个进程的运行\n\n- 进程不能无限制地等待进入临界区\n\n第一种同步方式：小明与小刚商定，每人在喂鱼之前留下字条，告诉对方自己将检查鱼，并在需要时喂鱼\n\n小明\n\n```\nif (noNote) {\n    leave note\n    if (noFeed) {\n        feed fish\n    }\n    remove note\n}\n```\n\n小刚：\n```\nif (noNote) {\n    leave note\n    if (noFeed) {\n        feed fish\n    }\n    remove note\n}\n```\n","slug":"linux/lock","published":1,"updated":"2020-07-16T14:03:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf31001kmv056cvj4ul2","content":"<p>《操作系统之哲学原理》-锁的发展</p>\n<h2 id=\"养金鱼的故事\"><a href=\"#养金鱼的故事\" class=\"headerlink\" title=\"养金鱼的故事\"></a>养金鱼的故事</h2><p>金鱼有一个很大的特点，就是没有饱的感觉。因此，金鱼吃东西不会因为吃饱就停止，它们会不停的吃<br>一直到鱼缸里的食物都被吃完为止。所以，如果你一直喂，它就一直吃，直到胀死。</p>\n<p>现在假设小明和小刚两个人合住一套公寓，共同养了一条金鱼，该金鱼一天进食一次。<br>两个人想把金鱼养活，一天只喂一次，也只能喂一次。如果有一天两人都喂了鱼，鱼就胀死，<br>如果一天内两人都没有喂鱼，鱼就饿死。</p>\n<p>他们二人为了把鱼养好，做出如下约定：</p>\n<ul>\n<li><p>每天喂鱼一次，且仅一次</p>\n</li>\n<li><p>如果今天小明喂了鱼，小刚今天就不能再喂，反之亦然</p>\n</li>\n<li><p>如果今天小明没有喂鱼，小刚就必须喂，反之亦然</p>\n</li>\n</ul>\n<h3 id=\"一、不具备任何协调能力\"><a href=\"#一、不具备任何协调能力\" class=\"headerlink\" title=\"一、不具备任何协调能力\"></a>一、不具备任何协调能力</h3><p>小明与小刚不进行任何沟通，没人觉得要喂鱼时，查看一下鱼的状态，如果感觉鱼像是没有进食，则喂鱼，否则不喂</p>\n<p>下面是给出的是在没有同步情况下的程序</p>\n<p>小明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noFeed) &#123;</span><br><span class=\"line\">    feed fish</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小刚：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noFeed) &#123;</span><br><span class=\"line\">    feed fish</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设小明和小刚都是养鱼高手，一眼就能看出鱼是否喂过，上述的程序也能正确的执行吗？<br>答案是否定的</p>\n<p>由于线程的执行可以任意穿插，小明可以先检查鱼，发现没有喂鱼，就准备喂鱼<br>但是就在小明准备喂时，程序切换，轮到小刚执行，小刚一看鱼还没喂，就喂鱼，喂完之后，线程切换到小明，<br>小明充检查完鱼状态的指令开始执行，于是就喂鱼，这样鱼就被喂了两次，鱼就胀死了</p>\n<p>时序图:</p>\n<table>\n<thead>\n<tr>\n<th>时序</th>\n<th>小明</th>\n<th>小刚</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>look at fish(no feed)</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>look at fish(no feed)</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td>feed fish</td>\n</tr>\n<tr>\n<td>4</td>\n<td>feed fish</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>两个或多个线程争相执行同一段代码或访问同一资源的现象称为竞争(race)。<br>这个可能造成竞争的共享代码段或者资源称为临界区(critical section)</p>\n<h3 id=\"二、第一种同步机制：留字条\"><a href=\"#二、第一种同步机制：留字条\" class=\"headerlink\" title=\"二、第一种同步机制：留字条\"></a>二、第一种同步机制：留字条</h3><p>要防止与胀死，就需要防止竞争，想要避免竞争，就需要防止两个或多个进程同时进入临界区<br>要达到这一点，就需要某种协调手段</p>\n<p>协调的目的就是在任何时刻都只能有一个人在临界区里，这称为互斥(mutual exclusion)</p>\n<p>互斥需要满足4个条件</p>\n<ul>\n<li><p>不能有两个进程同时在临界区里面</p>\n</li>\n<li><p>进程能够在任何数量和速度的CPU上正确执行</p>\n</li>\n<li><p>在互斥区域外不能阻止另一个进程的运行</p>\n</li>\n<li><p>进程不能无限制地等待进入临界区</p>\n</li>\n</ul>\n<p>第一种同步方式：小明与小刚商定，每人在喂鱼之前留下字条，告诉对方自己将检查鱼，并在需要时喂鱼</p>\n<p>小明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noNote) &#123;</span><br><span class=\"line\">    leave note</span><br><span class=\"line\">    if (noFeed) &#123;</span><br><span class=\"line\">        feed fish</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    remove note</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小刚：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noNote) &#123;</span><br><span class=\"line\">    leave note</span><br><span class=\"line\">    if (noFeed) &#123;</span><br><span class=\"line\">        feed fish</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    remove note</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>《操作系统之哲学原理》-锁的发展</p>\n<h2 id=\"养金鱼的故事\"><a href=\"#养金鱼的故事\" class=\"headerlink\" title=\"养金鱼的故事\"></a>养金鱼的故事</h2><p>金鱼有一个很大的特点，就是没有饱的感觉。因此，金鱼吃东西不会因为吃饱就停止，它们会不停的吃<br>一直到鱼缸里的食物都被吃完为止。所以，如果你一直喂，它就一直吃，直到胀死。</p>\n<p>现在假设小明和小刚两个人合住一套公寓，共同养了一条金鱼，该金鱼一天进食一次。<br>两个人想把金鱼养活，一天只喂一次，也只能喂一次。如果有一天两人都喂了鱼，鱼就胀死，<br>如果一天内两人都没有喂鱼，鱼就饿死。</p>\n<p>他们二人为了把鱼养好，做出如下约定：</p>\n<ul>\n<li><p>每天喂鱼一次，且仅一次</p>\n</li>\n<li><p>如果今天小明喂了鱼，小刚今天就不能再喂，反之亦然</p>\n</li>\n<li><p>如果今天小明没有喂鱼，小刚就必须喂，反之亦然</p>\n</li>\n</ul>\n<h3 id=\"一、不具备任何协调能力\"><a href=\"#一、不具备任何协调能力\" class=\"headerlink\" title=\"一、不具备任何协调能力\"></a>一、不具备任何协调能力</h3><p>小明与小刚不进行任何沟通，没人觉得要喂鱼时，查看一下鱼的状态，如果感觉鱼像是没有进食，则喂鱼，否则不喂</p>\n<p>下面是给出的是在没有同步情况下的程序</p>\n<p>小明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noFeed) &#123;</span><br><span class=\"line\">    feed fish</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小刚：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noFeed) &#123;</span><br><span class=\"line\">    feed fish</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设小明和小刚都是养鱼高手，一眼就能看出鱼是否喂过，上述的程序也能正确的执行吗？<br>答案是否定的</p>\n<p>由于线程的执行可以任意穿插，小明可以先检查鱼，发现没有喂鱼，就准备喂鱼<br>但是就在小明准备喂时，程序切换，轮到小刚执行，小刚一看鱼还没喂，就喂鱼，喂完之后，线程切换到小明，<br>小明充检查完鱼状态的指令开始执行，于是就喂鱼，这样鱼就被喂了两次，鱼就胀死了</p>\n<p>时序图:</p>\n<table>\n<thead>\n<tr>\n<th>时序</th>\n<th>小明</th>\n<th>小刚</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>look at fish(no feed)</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>look at fish(no feed)</td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td>feed fish</td>\n</tr>\n<tr>\n<td>4</td>\n<td>feed fish</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>两个或多个线程争相执行同一段代码或访问同一资源的现象称为竞争(race)。<br>这个可能造成竞争的共享代码段或者资源称为临界区(critical section)</p>\n<h3 id=\"二、第一种同步机制：留字条\"><a href=\"#二、第一种同步机制：留字条\" class=\"headerlink\" title=\"二、第一种同步机制：留字条\"></a>二、第一种同步机制：留字条</h3><p>要防止与胀死，就需要防止竞争，想要避免竞争，就需要防止两个或多个进程同时进入临界区<br>要达到这一点，就需要某种协调手段</p>\n<p>协调的目的就是在任何时刻都只能有一个人在临界区里，这称为互斥(mutual exclusion)</p>\n<p>互斥需要满足4个条件</p>\n<ul>\n<li><p>不能有两个进程同时在临界区里面</p>\n</li>\n<li><p>进程能够在任何数量和速度的CPU上正确执行</p>\n</li>\n<li><p>在互斥区域外不能阻止另一个进程的运行</p>\n</li>\n<li><p>进程不能无限制地等待进入临界区</p>\n</li>\n</ul>\n<p>第一种同步方式：小明与小刚商定，每人在喂鱼之前留下字条，告诉对方自己将检查鱼，并在需要时喂鱼</p>\n<p>小明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noNote) &#123;</span><br><span class=\"line\">    leave note</span><br><span class=\"line\">    if (noFeed) &#123;</span><br><span class=\"line\">        feed fish</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    remove note</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小刚：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (noNote) &#123;</span><br><span class=\"line\">    leave note</span><br><span class=\"line\">    if (noFeed) &#123;</span><br><span class=\"line\">        feed fish</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    remove note</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/10/11/linux-lock-principle.html","title":"Linux Lock的原理","keywords":"Linux,Lock的原理","description":"Linux Lock的原理","date":"2019-10-11T06:29:21.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n《操作系统之哲学原理》-锁\n\n## 死锁的4个必要条件\n\n1. 死锁发生的必要条件是 资源有限\n\n2. 持有等待\n\n3. 不能抢占资源\n\n4. 循环等待条件\n\n## 哲学家就餐问题\n\n- 哲学家每天只做两家事情：思考 吃饭\n\n```\n吃饭规矩：哲学家围在一张圆桌边，每个人的左右两边均放着一根筷子。如果要吃饭，需要获得左右的筷子（不能用一根筷子吃饭）\n```\n\n运行的算法：\n```\n1. 等待左边的筷子可用，然后拿起左边的筷子\n2. 等待右边的筷子可用，然后拿起右边的筷子\n3. 吃饭\n4. 放下两根筷子\n```\n如果每个哲学家穿插执行，将出现每个哲学家都拿起左边筷子，而等待右边筷子的情况，死锁将发生。\n\n## 死锁的应对\n\n两种策略：\n\n一、允许死锁发生\n\n- 假装没看见，不予理睬\n```\n死锁发生的概率比较低，防止死锁的代价很高，还不如重启\n```\n\n- 在死锁发生后，想办法予以解决(基本行不通，检测死锁不能肯定死锁发生、可能检测死锁的线程自己发生了死锁)\n```\n首先需要检测死锁，利用资源分配矩阵、资源等待矩阵、系统总资源、当前系统可用资源\n死锁恢复，可用使用抢占、终止占用最多资源的线程、杀掉整个线程、rollback\n```\n\n- 动态避免\n```\n在每次进行资源分配时，必须经过仔细的计算，确保该资源请求批准后系统不会进入死锁或者潜在死锁状态\n```\n\n系统当前可用资源：3\n\n线程|已持有|总需求\n---|---|---\nA|3|9\nB|2|4\nC|2|7\n\n这个状态是否是安全状态？答案是 是安全状态\n\nB先运行 取得2个系统资源运行结束，系统资源为 5\nC运行，取5个系统资源运行结束，系统资源为 7\nA运行，取6个系统资源运行结束\n\n系统当前可用资源：2\n\n线程|已持有|总需求\n---|---|---\nA|4|9\nB|2|4\nC|2|7\n\n谁先执行都会发送死锁\n\n难题所在：不能准确的预测线程的最大资源需求，只能粗略估算，如果计算超额会浪费资源，更为严重的是会\n造成死锁误判，因为安全不安全的状态判断依据之一就是最大资源需求。如果估算过大，超过线程的实际资源需求\n将造成在实际安全的情况下，系统被判为不安全，从而造成可以执行的任务也得不到执行\n\n二、不允许死锁发生\n    仔细检查，避免死锁发生\n    通过将发生死锁的必要条件消除，避免死锁发生\n    \n## 消除死锁的必要条件\n\n1. 将资源无限增加、把资源变为共享，无限是不现实的，资源共享适合部分资源，例如键盘输入就无法共享\n\n2. 一个线程必须一次请求其所需要的所有资源，而不是一般情况下的请求一点资源做一点事情，缺点是不利于资源的有效利用。\n\n一种变通的方法是，还像以前那样请求资源，不过如果请求的资源被拒绝，则该线程需要将其现在已经拥有的资源也释放。\n这样的缺点是，本来完成了一半的工作，因为某个资源获取不到而放弃了以前的全部工作，也会造成浪费\n\n3. 允许抢占资源，如CPU和内存，但也不是所有的资源都能抢占，例如锁就不能抢占\n\n4. 出现循环等待的原因就是因为线程请求资源的顺序是随机的，我们可以规定资源的请求顺序\n\n解决哲学家吃饭问题\n\n1. 杜绝循环等待：对筷子编号123456，拿筷子的人必须按照这个顺序拿\n2. 杜绝保持并等待：要求要么同时拿起两根筷子，要么一根都不拿\n3. 动态避免：在拿起一根筷子时，判断他是否可以拿起这根筷子，有哲学家在吃饭或者这根筷子后还有多余的筷子\n\n## 锁的实现\n\n硬件实现的原子操作(指令)：\n\n1. 中断禁止、启用(interrupt disable/enable)，这个操作由操作系统封装成锁\n2. 内存加载、存入(load/store)\n3. 测试与设置(test&set)\n\n一、以中断启用与禁止来实现锁\n```\n进程切换必须发生上下文切换，而发生上下文切换只能有两种可能：线程自愿(yield)放弃CPU而将控制权交个操作系统调度器，\n另一个是线程被强制（周期性的时钟中断）放弃CPU而失去控制权\n```\n\n获得锁的伪代码：\n```c\nlock() {\n    // 先禁止中断\n    disable interrupts;\n    // 检查 value，如果是FREE表示这个资源没有被占用\n    // 循环等待为 FREE\n    while (value != FREE) {\n        // 启用中断让其它进程有将 value 设置为 FREE时间\n        enable interrupts;\n        // 这中间是其它进程的时间\n        disable interrupts;\n    }\n    // 设置为 BUSY 开启中断\n    value = BUSY;\n    enable interrupts;\n}\n```\n\n释放锁：\n```c\nunlock() {\n    // value 赋值为 FREE 需要中断保护，因为赋值语句不是原子操作\n    disable interrupts;\n    value = FREE;\n    enable interrupts;\n}\n```\n缺点：频繁的中断可能造成对重要的事件处理不及时，在锁的实现中留给其它进程获得CPU的机会也不大\n\n二、以测试与设置指令来实现锁\n```\n原子操作：将内存指定位置的存储单元的内容读取到寄存器，将新的值写入到刚才的内存单元;\ntest&set 将值写入指定的内存单元，并返回内存单元原来的值\n```\n\n```c\ntest_and_set(X) {\n    tmp = X;\n    X = 1;\n    return tmp;\n}\n\nlock() {\n    while(test_and_set(value) == 1) {\n    \n    }\n}\n\n// 调用unlock的进程移动是已经获得锁的，所以不需要保护\nunlock() {\n    value = 0;\n}\n```\n\n三、以非繁忙等待、中断启用与禁止来实现锁\n```\n一和二的两种锁的实现都有繁忙等待的问题，繁忙等待浪费资源，并且有可能造成优先级倒挂和死锁\n```\n\n1. 使用中断禁止，但不进行繁忙等待。\n2. 如果拿不到锁，等待进程放弃CPU并进入睡眠状态，以便持有锁的进程可以更好的运行\n3. 当释放锁的时候将睡眠进程叫醒\n\n错误的方式:\n```c\nlock (){\n    // 如果别的线程没有执行中断，那么系统将进入死锁状态\n    disable interrupts;\n    if (value == FREE) {\n        value = BUSY;\n    } else {\n        // 加入该锁的队列\n        add thread to queue of threads waiting for this lock;\n        // 切换进程\n        switch to next runable thread;\n    }\n    enable interrupts;\n}\n```\n\n只能要求所有的线程遵循下列约定：\n\n- 所有线程承诺在调用线程切换是将中断留在禁止状态\n\n- 所有线程承诺在从切换返回是将中断重启启用\n\n但是依赖别人来遵循是很危险的\n\n四、以最少繁忙等待、测试与设置来实现锁\n```\n只用繁忙等待来执行闭锁操作，如果不能获得锁就得放弃CPU\n```\n\n```c\nlock() {\n    while(test_and_set(guard)) {\n        \n    }\n    \n    if (value == FREE) {\n        value = BUSY;\n        guard = 0;\n    } else {\n        // 加入该锁的队列\n        add thread to queue of threads waiting for this lock;\n        guard = 0;\n        // 切换进程\n        switch to next runable thread;\n    }\n}\n\nunlock() {\n    while(test_and_set(guard)) {\n            \n    }\n    \n    value = FREE;\n    \n    if (any thread is waiting for this lock) {\n        move waiting thread from waiting queue to ready queue;\n        value = BUSY;\n    }\n    guard = 0;\n}\n```\n\n","source":"_posts/linux/lock-principle.md","raw":"---\nurl: /2019/10/11/linux-lock-principle.html\ntitle: \"Linux Lock的原理\"\nkeywords: \"Linux,Lock的原理\"\ndescription: \"Linux Lock的原理\"\ndate: 2019-10-11T22:29:21+08:00\ndraft: false\ntags: [\"Linux\"]\ntags_weight: 100\ncategories: [\"Linux\"]\ncategoryes_weight: 100\n---\n\n《操作系统之哲学原理》-锁\n\n## 死锁的4个必要条件\n\n1. 死锁发生的必要条件是 资源有限\n\n2. 持有等待\n\n3. 不能抢占资源\n\n4. 循环等待条件\n\n## 哲学家就餐问题\n\n- 哲学家每天只做两家事情：思考 吃饭\n\n```\n吃饭规矩：哲学家围在一张圆桌边，每个人的左右两边均放着一根筷子。如果要吃饭，需要获得左右的筷子（不能用一根筷子吃饭）\n```\n\n运行的算法：\n```\n1. 等待左边的筷子可用，然后拿起左边的筷子\n2. 等待右边的筷子可用，然后拿起右边的筷子\n3. 吃饭\n4. 放下两根筷子\n```\n如果每个哲学家穿插执行，将出现每个哲学家都拿起左边筷子，而等待右边筷子的情况，死锁将发生。\n\n## 死锁的应对\n\n两种策略：\n\n一、允许死锁发生\n\n- 假装没看见，不予理睬\n```\n死锁发生的概率比较低，防止死锁的代价很高，还不如重启\n```\n\n- 在死锁发生后，想办法予以解决(基本行不通，检测死锁不能肯定死锁发生、可能检测死锁的线程自己发生了死锁)\n```\n首先需要检测死锁，利用资源分配矩阵、资源等待矩阵、系统总资源、当前系统可用资源\n死锁恢复，可用使用抢占、终止占用最多资源的线程、杀掉整个线程、rollback\n```\n\n- 动态避免\n```\n在每次进行资源分配时，必须经过仔细的计算，确保该资源请求批准后系统不会进入死锁或者潜在死锁状态\n```\n\n系统当前可用资源：3\n\n线程|已持有|总需求\n---|---|---\nA|3|9\nB|2|4\nC|2|7\n\n这个状态是否是安全状态？答案是 是安全状态\n\nB先运行 取得2个系统资源运行结束，系统资源为 5\nC运行，取5个系统资源运行结束，系统资源为 7\nA运行，取6个系统资源运行结束\n\n系统当前可用资源：2\n\n线程|已持有|总需求\n---|---|---\nA|4|9\nB|2|4\nC|2|7\n\n谁先执行都会发送死锁\n\n难题所在：不能准确的预测线程的最大资源需求，只能粗略估算，如果计算超额会浪费资源，更为严重的是会\n造成死锁误判，因为安全不安全的状态判断依据之一就是最大资源需求。如果估算过大，超过线程的实际资源需求\n将造成在实际安全的情况下，系统被判为不安全，从而造成可以执行的任务也得不到执行\n\n二、不允许死锁发生\n    仔细检查，避免死锁发生\n    通过将发生死锁的必要条件消除，避免死锁发生\n    \n## 消除死锁的必要条件\n\n1. 将资源无限增加、把资源变为共享，无限是不现实的，资源共享适合部分资源，例如键盘输入就无法共享\n\n2. 一个线程必须一次请求其所需要的所有资源，而不是一般情况下的请求一点资源做一点事情，缺点是不利于资源的有效利用。\n\n一种变通的方法是，还像以前那样请求资源，不过如果请求的资源被拒绝，则该线程需要将其现在已经拥有的资源也释放。\n这样的缺点是，本来完成了一半的工作，因为某个资源获取不到而放弃了以前的全部工作，也会造成浪费\n\n3. 允许抢占资源，如CPU和内存，但也不是所有的资源都能抢占，例如锁就不能抢占\n\n4. 出现循环等待的原因就是因为线程请求资源的顺序是随机的，我们可以规定资源的请求顺序\n\n解决哲学家吃饭问题\n\n1. 杜绝循环等待：对筷子编号123456，拿筷子的人必须按照这个顺序拿\n2. 杜绝保持并等待：要求要么同时拿起两根筷子，要么一根都不拿\n3. 动态避免：在拿起一根筷子时，判断他是否可以拿起这根筷子，有哲学家在吃饭或者这根筷子后还有多余的筷子\n\n## 锁的实现\n\n硬件实现的原子操作(指令)：\n\n1. 中断禁止、启用(interrupt disable/enable)，这个操作由操作系统封装成锁\n2. 内存加载、存入(load/store)\n3. 测试与设置(test&set)\n\n一、以中断启用与禁止来实现锁\n```\n进程切换必须发生上下文切换，而发生上下文切换只能有两种可能：线程自愿(yield)放弃CPU而将控制权交个操作系统调度器，\n另一个是线程被强制（周期性的时钟中断）放弃CPU而失去控制权\n```\n\n获得锁的伪代码：\n```c\nlock() {\n    // 先禁止中断\n    disable interrupts;\n    // 检查 value，如果是FREE表示这个资源没有被占用\n    // 循环等待为 FREE\n    while (value != FREE) {\n        // 启用中断让其它进程有将 value 设置为 FREE时间\n        enable interrupts;\n        // 这中间是其它进程的时间\n        disable interrupts;\n    }\n    // 设置为 BUSY 开启中断\n    value = BUSY;\n    enable interrupts;\n}\n```\n\n释放锁：\n```c\nunlock() {\n    // value 赋值为 FREE 需要中断保护，因为赋值语句不是原子操作\n    disable interrupts;\n    value = FREE;\n    enable interrupts;\n}\n```\n缺点：频繁的中断可能造成对重要的事件处理不及时，在锁的实现中留给其它进程获得CPU的机会也不大\n\n二、以测试与设置指令来实现锁\n```\n原子操作：将内存指定位置的存储单元的内容读取到寄存器，将新的值写入到刚才的内存单元;\ntest&set 将值写入指定的内存单元，并返回内存单元原来的值\n```\n\n```c\ntest_and_set(X) {\n    tmp = X;\n    X = 1;\n    return tmp;\n}\n\nlock() {\n    while(test_and_set(value) == 1) {\n    \n    }\n}\n\n// 调用unlock的进程移动是已经获得锁的，所以不需要保护\nunlock() {\n    value = 0;\n}\n```\n\n三、以非繁忙等待、中断启用与禁止来实现锁\n```\n一和二的两种锁的实现都有繁忙等待的问题，繁忙等待浪费资源，并且有可能造成优先级倒挂和死锁\n```\n\n1. 使用中断禁止，但不进行繁忙等待。\n2. 如果拿不到锁，等待进程放弃CPU并进入睡眠状态，以便持有锁的进程可以更好的运行\n3. 当释放锁的时候将睡眠进程叫醒\n\n错误的方式:\n```c\nlock (){\n    // 如果别的线程没有执行中断，那么系统将进入死锁状态\n    disable interrupts;\n    if (value == FREE) {\n        value = BUSY;\n    } else {\n        // 加入该锁的队列\n        add thread to queue of threads waiting for this lock;\n        // 切换进程\n        switch to next runable thread;\n    }\n    enable interrupts;\n}\n```\n\n只能要求所有的线程遵循下列约定：\n\n- 所有线程承诺在调用线程切换是将中断留在禁止状态\n\n- 所有线程承诺在从切换返回是将中断重启启用\n\n但是依赖别人来遵循是很危险的\n\n四、以最少繁忙等待、测试与设置来实现锁\n```\n只用繁忙等待来执行闭锁操作，如果不能获得锁就得放弃CPU\n```\n\n```c\nlock() {\n    while(test_and_set(guard)) {\n        \n    }\n    \n    if (value == FREE) {\n        value = BUSY;\n        guard = 0;\n    } else {\n        // 加入该锁的队列\n        add thread to queue of threads waiting for this lock;\n        guard = 0;\n        // 切换进程\n        switch to next runable thread;\n    }\n}\n\nunlock() {\n    while(test_and_set(guard)) {\n            \n    }\n    \n    value = FREE;\n    \n    if (any thread is waiting for this lock) {\n        move waiting thread from waiting queue to ready queue;\n        value = BUSY;\n    }\n    guard = 0;\n}\n```\n\n","slug":"linux/lock-principle","published":1,"updated":"2020-07-16T13:21:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf33001omv05df3dd9h6","content":"<p>《操作系统之哲学原理》-锁</p>\n<h2 id=\"死锁的4个必要条件\"><a href=\"#死锁的4个必要条件\" class=\"headerlink\" title=\"死锁的4个必要条件\"></a>死锁的4个必要条件</h2><ol>\n<li><p>死锁发生的必要条件是 资源有限</p>\n</li>\n<li><p>持有等待</p>\n</li>\n<li><p>不能抢占资源</p>\n</li>\n<li><p>循环等待条件</p>\n</li>\n</ol>\n<h2 id=\"哲学家就餐问题\"><a href=\"#哲学家就餐问题\" class=\"headerlink\" title=\"哲学家就餐问题\"></a>哲学家就餐问题</h2><ul>\n<li>哲学家每天只做两家事情：思考 吃饭</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">吃饭规矩：哲学家围在一张圆桌边，每个人的左右两边均放着一根筷子。如果要吃饭，需要获得左右的筷子（不能用一根筷子吃饭）</span><br></pre></td></tr></table></figure>\n\n<p>运行的算法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 等待左边的筷子可用，然后拿起左边的筷子</span><br><span class=\"line\">2. 等待右边的筷子可用，然后拿起右边的筷子</span><br><span class=\"line\">3. 吃饭</span><br><span class=\"line\">4. 放下两根筷子</span><br></pre></td></tr></table></figure>\n<p>如果每个哲学家穿插执行，将出现每个哲学家都拿起左边筷子，而等待右边筷子的情况，死锁将发生。</p>\n<h2 id=\"死锁的应对\"><a href=\"#死锁的应对\" class=\"headerlink\" title=\"死锁的应对\"></a>死锁的应对</h2><p>两种策略：</p>\n<p>一、允许死锁发生</p>\n<ul>\n<li><p>假装没看见，不予理睬</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">死锁发生的概率比较低，防止死锁的代价很高，还不如重启</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在死锁发生后，想办法予以解决(基本行不通，检测死锁不能肯定死锁发生、可能检测死锁的线程自己发生了死锁)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先需要检测死锁，利用资源分配矩阵、资源等待矩阵、系统总资源、当前系统可用资源</span><br><span class=\"line\">死锁恢复，可用使用抢占、终止占用最多资源的线程、杀掉整个线程、rollback</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态避免</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在每次进行资源分配时，必须经过仔细的计算，确保该资源请求批准后系统不会进入死锁或者潜在死锁状态</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>系统当前可用资源：3</p>\n<table>\n<thead>\n<tr>\n<th>线程</th>\n<th>已持有</th>\n<th>总需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>3</td>\n<td>9</td>\n</tr>\n<tr>\n<td>B</td>\n<td>2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>C</td>\n<td>2</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>这个状态是否是安全状态？答案是 是安全状态</p>\n<p>B先运行 取得2个系统资源运行结束，系统资源为 5<br>C运行，取5个系统资源运行结束，系统资源为 7<br>A运行，取6个系统资源运行结束</p>\n<p>系统当前可用资源：2</p>\n<table>\n<thead>\n<tr>\n<th>线程</th>\n<th>已持有</th>\n<th>总需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>4</td>\n<td>9</td>\n</tr>\n<tr>\n<td>B</td>\n<td>2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>C</td>\n<td>2</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>谁先执行都会发送死锁</p>\n<p>难题所在：不能准确的预测线程的最大资源需求，只能粗略估算，如果计算超额会浪费资源，更为严重的是会<br>造成死锁误判，因为安全不安全的状态判断依据之一就是最大资源需求。如果估算过大，超过线程的实际资源需求<br>将造成在实际安全的情况下，系统被判为不安全，从而造成可以执行的任务也得不到执行</p>\n<p>二、不允许死锁发生<br>    仔细检查，避免死锁发生<br>    通过将发生死锁的必要条件消除，避免死锁发生</p>\n<h2 id=\"消除死锁的必要条件\"><a href=\"#消除死锁的必要条件\" class=\"headerlink\" title=\"消除死锁的必要条件\"></a>消除死锁的必要条件</h2><ol>\n<li><p>将资源无限增加、把资源变为共享，无限是不现实的，资源共享适合部分资源，例如键盘输入就无法共享</p>\n</li>\n<li><p>一个线程必须一次请求其所需要的所有资源，而不是一般情况下的请求一点资源做一点事情，缺点是不利于资源的有效利用。</p>\n</li>\n</ol>\n<p>一种变通的方法是，还像以前那样请求资源，不过如果请求的资源被拒绝，则该线程需要将其现在已经拥有的资源也释放。<br>这样的缺点是，本来完成了一半的工作，因为某个资源获取不到而放弃了以前的全部工作，也会造成浪费</p>\n<ol start=\"3\">\n<li><p>允许抢占资源，如CPU和内存，但也不是所有的资源都能抢占，例如锁就不能抢占</p>\n</li>\n<li><p>出现循环等待的原因就是因为线程请求资源的顺序是随机的，我们可以规定资源的请求顺序</p>\n</li>\n</ol>\n<p>解决哲学家吃饭问题</p>\n<ol>\n<li>杜绝循环等待：对筷子编号123456，拿筷子的人必须按照这个顺序拿</li>\n<li>杜绝保持并等待：要求要么同时拿起两根筷子，要么一根都不拿</li>\n<li>动态避免：在拿起一根筷子时，判断他是否可以拿起这根筷子，有哲学家在吃饭或者这根筷子后还有多余的筷子</li>\n</ol>\n<h2 id=\"锁的实现\"><a href=\"#锁的实现\" class=\"headerlink\" title=\"锁的实现\"></a>锁的实现</h2><p>硬件实现的原子操作(指令)：</p>\n<ol>\n<li>中断禁止、启用(interrupt disable/enable)，这个操作由操作系统封装成锁</li>\n<li>内存加载、存入(load/store)</li>\n<li>测试与设置(test&amp;set)</li>\n</ol>\n<p>一、以中断启用与禁止来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程切换必须发生上下文切换，而发生上下文切换只能有两种可能：线程自愿(yield)放弃CPU而将控制权交个操作系统调度器，</span><br><span class=\"line\">另一个是线程被强制（周期性的时钟中断）放弃CPU而失去控制权</span><br></pre></td></tr></table></figure>\n\n<p>获得锁的伪代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先禁止中断</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    <span class=\"comment\">// 检查 value，如果是FREE表示这个资源没有被占用</span></span><br><span class=\"line\">    <span class=\"comment\">// 循环等待为 FREE</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value != FREE) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用中断让其它进程有将 value 设置为 FREE时间</span></span><br><span class=\"line\">        enable interrupts;</span><br><span class=\"line\">        <span class=\"comment\">// 这中间是其它进程的时间</span></span><br><span class=\"line\">        disable interrupts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置为 BUSY 开启中断</span></span><br><span class=\"line\">    value = BUSY;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>释放锁：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// value 赋值为 FREE 需要中断保护，因为赋值语句不是原子操作</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    value = FREE;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：频繁的中断可能造成对重要的事件处理不及时，在锁的实现中留给其它进程获得CPU的机会也不大</p>\n<p>二、以测试与设置指令来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原子操作：将内存指定位置的存储单元的内容读取到寄存器，将新的值写入到刚才的内存单元;</span><br><span class=\"line\">test&amp;set 将值写入指定的内存单元，并返回内存单元原来的值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_and_set(X) &#123;</span><br><span class=\"line\">    tmp = X;</span><br><span class=\"line\">    X = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(value) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用unlock的进程移动是已经获得锁的，所以不需要保护</span></span><br><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    value = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三、以非繁忙等待、中断启用与禁止来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一和二的两种锁的实现都有繁忙等待的问题，繁忙等待浪费资源，并且有可能造成优先级倒挂和死锁</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用中断禁止，但不进行繁忙等待。</li>\n<li>如果拿不到锁，等待进程放弃CPU并进入睡眠状态，以便持有锁的进程可以更好的运行</li>\n<li>当释放锁的时候将睡眠进程叫醒</li>\n</ol>\n<p>错误的方式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock ()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果别的线程没有执行中断，那么系统将进入死锁状态</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == FREE) &#123;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加入该锁的队列</span></span><br><span class=\"line\">        add thread to <span class=\"built_in\">queue</span> of threads waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock;</span><br><span class=\"line\">        <span class=\"comment\">// 切换进程</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> to next runable thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只能要求所有的线程遵循下列约定：</p>\n<ul>\n<li><p>所有线程承诺在调用线程切换是将中断留在禁止状态</p>\n</li>\n<li><p>所有线程承诺在从切换返回是将中断重启启用</p>\n</li>\n</ul>\n<p>但是依赖别人来遵循是很危险的</p>\n<p>四、以最少繁忙等待、测试与设置来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只用繁忙等待来执行闭锁操作，如果不能获得锁就得放弃CPU</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(guard)) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == FREE) &#123;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">        guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加入该锁的队列</span></span><br><span class=\"line\">        add thread to <span class=\"built_in\">queue</span> of threads waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock;</span><br><span class=\"line\">        guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 切换进程</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> to next runable thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(guard)) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    value = FREE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (any thread is waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock) &#123;</span><br><span class=\"line\">        move waiting thread from waiting <span class=\"built_in\">queue</span> to ready <span class=\"built_in\">queue</span>;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>《操作系统之哲学原理》-锁</p>\n<h2 id=\"死锁的4个必要条件\"><a href=\"#死锁的4个必要条件\" class=\"headerlink\" title=\"死锁的4个必要条件\"></a>死锁的4个必要条件</h2><ol>\n<li><p>死锁发生的必要条件是 资源有限</p>\n</li>\n<li><p>持有等待</p>\n</li>\n<li><p>不能抢占资源</p>\n</li>\n<li><p>循环等待条件</p>\n</li>\n</ol>\n<h2 id=\"哲学家就餐问题\"><a href=\"#哲学家就餐问题\" class=\"headerlink\" title=\"哲学家就餐问题\"></a>哲学家就餐问题</h2><ul>\n<li>哲学家每天只做两家事情：思考 吃饭</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">吃饭规矩：哲学家围在一张圆桌边，每个人的左右两边均放着一根筷子。如果要吃饭，需要获得左右的筷子（不能用一根筷子吃饭）</span><br></pre></td></tr></table></figure>\n\n<p>运行的算法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 等待左边的筷子可用，然后拿起左边的筷子</span><br><span class=\"line\">2. 等待右边的筷子可用，然后拿起右边的筷子</span><br><span class=\"line\">3. 吃饭</span><br><span class=\"line\">4. 放下两根筷子</span><br></pre></td></tr></table></figure>\n<p>如果每个哲学家穿插执行，将出现每个哲学家都拿起左边筷子，而等待右边筷子的情况，死锁将发生。</p>\n<h2 id=\"死锁的应对\"><a href=\"#死锁的应对\" class=\"headerlink\" title=\"死锁的应对\"></a>死锁的应对</h2><p>两种策略：</p>\n<p>一、允许死锁发生</p>\n<ul>\n<li><p>假装没看见，不予理睬</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">死锁发生的概率比较低，防止死锁的代价很高，还不如重启</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在死锁发生后，想办法予以解决(基本行不通，检测死锁不能肯定死锁发生、可能检测死锁的线程自己发生了死锁)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先需要检测死锁，利用资源分配矩阵、资源等待矩阵、系统总资源、当前系统可用资源</span><br><span class=\"line\">死锁恢复，可用使用抢占、终止占用最多资源的线程、杀掉整个线程、rollback</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态避免</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在每次进行资源分配时，必须经过仔细的计算，确保该资源请求批准后系统不会进入死锁或者潜在死锁状态</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>系统当前可用资源：3</p>\n<table>\n<thead>\n<tr>\n<th>线程</th>\n<th>已持有</th>\n<th>总需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>3</td>\n<td>9</td>\n</tr>\n<tr>\n<td>B</td>\n<td>2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>C</td>\n<td>2</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>这个状态是否是安全状态？答案是 是安全状态</p>\n<p>B先运行 取得2个系统资源运行结束，系统资源为 5<br>C运行，取5个系统资源运行结束，系统资源为 7<br>A运行，取6个系统资源运行结束</p>\n<p>系统当前可用资源：2</p>\n<table>\n<thead>\n<tr>\n<th>线程</th>\n<th>已持有</th>\n<th>总需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>4</td>\n<td>9</td>\n</tr>\n<tr>\n<td>B</td>\n<td>2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>C</td>\n<td>2</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>谁先执行都会发送死锁</p>\n<p>难题所在：不能准确的预测线程的最大资源需求，只能粗略估算，如果计算超额会浪费资源，更为严重的是会<br>造成死锁误判，因为安全不安全的状态判断依据之一就是最大资源需求。如果估算过大，超过线程的实际资源需求<br>将造成在实际安全的情况下，系统被判为不安全，从而造成可以执行的任务也得不到执行</p>\n<p>二、不允许死锁发生<br>    仔细检查，避免死锁发生<br>    通过将发生死锁的必要条件消除，避免死锁发生</p>\n<h2 id=\"消除死锁的必要条件\"><a href=\"#消除死锁的必要条件\" class=\"headerlink\" title=\"消除死锁的必要条件\"></a>消除死锁的必要条件</h2><ol>\n<li><p>将资源无限增加、把资源变为共享，无限是不现实的，资源共享适合部分资源，例如键盘输入就无法共享</p>\n</li>\n<li><p>一个线程必须一次请求其所需要的所有资源，而不是一般情况下的请求一点资源做一点事情，缺点是不利于资源的有效利用。</p>\n</li>\n</ol>\n<p>一种变通的方法是，还像以前那样请求资源，不过如果请求的资源被拒绝，则该线程需要将其现在已经拥有的资源也释放。<br>这样的缺点是，本来完成了一半的工作，因为某个资源获取不到而放弃了以前的全部工作，也会造成浪费</p>\n<ol start=\"3\">\n<li><p>允许抢占资源，如CPU和内存，但也不是所有的资源都能抢占，例如锁就不能抢占</p>\n</li>\n<li><p>出现循环等待的原因就是因为线程请求资源的顺序是随机的，我们可以规定资源的请求顺序</p>\n</li>\n</ol>\n<p>解决哲学家吃饭问题</p>\n<ol>\n<li>杜绝循环等待：对筷子编号123456，拿筷子的人必须按照这个顺序拿</li>\n<li>杜绝保持并等待：要求要么同时拿起两根筷子，要么一根都不拿</li>\n<li>动态避免：在拿起一根筷子时，判断他是否可以拿起这根筷子，有哲学家在吃饭或者这根筷子后还有多余的筷子</li>\n</ol>\n<h2 id=\"锁的实现\"><a href=\"#锁的实现\" class=\"headerlink\" title=\"锁的实现\"></a>锁的实现</h2><p>硬件实现的原子操作(指令)：</p>\n<ol>\n<li>中断禁止、启用(interrupt disable/enable)，这个操作由操作系统封装成锁</li>\n<li>内存加载、存入(load/store)</li>\n<li>测试与设置(test&amp;set)</li>\n</ol>\n<p>一、以中断启用与禁止来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程切换必须发生上下文切换，而发生上下文切换只能有两种可能：线程自愿(yield)放弃CPU而将控制权交个操作系统调度器，</span><br><span class=\"line\">另一个是线程被强制（周期性的时钟中断）放弃CPU而失去控制权</span><br></pre></td></tr></table></figure>\n\n<p>获得锁的伪代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先禁止中断</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    <span class=\"comment\">// 检查 value，如果是FREE表示这个资源没有被占用</span></span><br><span class=\"line\">    <span class=\"comment\">// 循环等待为 FREE</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value != FREE) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用中断让其它进程有将 value 设置为 FREE时间</span></span><br><span class=\"line\">        enable interrupts;</span><br><span class=\"line\">        <span class=\"comment\">// 这中间是其它进程的时间</span></span><br><span class=\"line\">        disable interrupts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置为 BUSY 开启中断</span></span><br><span class=\"line\">    value = BUSY;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>释放锁：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// value 赋值为 FREE 需要中断保护，因为赋值语句不是原子操作</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    value = FREE;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：频繁的中断可能造成对重要的事件处理不及时，在锁的实现中留给其它进程获得CPU的机会也不大</p>\n<p>二、以测试与设置指令来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原子操作：将内存指定位置的存储单元的内容读取到寄存器，将新的值写入到刚才的内存单元;</span><br><span class=\"line\">test&amp;set 将值写入指定的内存单元，并返回内存单元原来的值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test_and_set(X) &#123;</span><br><span class=\"line\">    tmp = X;</span><br><span class=\"line\">    X = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(value) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用unlock的进程移动是已经获得锁的，所以不需要保护</span></span><br><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    value = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三、以非繁忙等待、中断启用与禁止来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一和二的两种锁的实现都有繁忙等待的问题，繁忙等待浪费资源，并且有可能造成优先级倒挂和死锁</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用中断禁止，但不进行繁忙等待。</li>\n<li>如果拿不到锁，等待进程放弃CPU并进入睡眠状态，以便持有锁的进程可以更好的运行</li>\n<li>当释放锁的时候将睡眠进程叫醒</li>\n</ol>\n<p>错误的方式:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock ()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果别的线程没有执行中断，那么系统将进入死锁状态</span></span><br><span class=\"line\">    disable interrupts;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == FREE) &#123;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加入该锁的队列</span></span><br><span class=\"line\">        add thread to <span class=\"built_in\">queue</span> of threads waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock;</span><br><span class=\"line\">        <span class=\"comment\">// 切换进程</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> to next runable thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enable interrupts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只能要求所有的线程遵循下列约定：</p>\n<ul>\n<li><p>所有线程承诺在调用线程切换是将中断留在禁止状态</p>\n</li>\n<li><p>所有线程承诺在从切换返回是将中断重启启用</p>\n</li>\n</ul>\n<p>但是依赖别人来遵循是很危险的</p>\n<p>四、以最少繁忙等待、测试与设置来实现锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只用繁忙等待来执行闭锁操作，如果不能获得锁就得放弃CPU</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(guard)) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == FREE) &#123;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">        guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加入该锁的队列</span></span><br><span class=\"line\">        add thread to <span class=\"built_in\">queue</span> of threads waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock;</span><br><span class=\"line\">        guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 切换进程</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> to next runable thread;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unlock() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(test_and_set(guard)) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    value = FREE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (any thread is waiting <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> lock) &#123;</span><br><span class=\"line\">        move waiting thread from waiting <span class=\"built_in\">queue</span> to ready <span class=\"built_in\">queue</span>;</span><br><span class=\"line\">        value = BUSY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    guard = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"url":"/2020/06/07/linux-stdin.html","title":"Linux 输出重定向","keywords":"Linux,输出重定向","description":"Linux输出重定向","date":"2020-06-07T03:29:11.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\nLinux 一切皆文件\n\n## 标准输入、输出、错误\n\nLinux中有三种标准输入输出，分别是`STDIN`，`STDOUT`，`STDERR`，对应的数字是0，1，2。\n\n`STDIN`是标准输入，默认从键盘读取信息；\n\n`STDOUT`是标准输出，默认将输出结果输出至终端；\n\n`STDERR`是标准错误，默认将输出结果输出至终端。\n\n而一般默认\n\n`STDIN` 打开 /dev/stdin 也就是标准输入\n\n`STDOUT` 打开 /dev/stdout 也就是标准输出\n\n`STDERR` 打开 /dev/stderr 也就是标准错误\n\n所以一般使用的时候，用 0,1,2代替\n\n## 重定向命令\n\n重定向命令`>`就是改变fd所对应的指针\n\n常用的重定向命令\n\n```\n>/dev/null 2>&1 // 会将标准输出，错误输出都重定向至/dev/null，也就是全部丢弃\n\n// 首先将fd1的文件指针更改为指向/dev/null\n// 然后将fd2的文件指针更改为fd1所对应的文件指针，也就是/dev/null文件\n\n```\n\n验证示例：\n```\ntouch exists.log\nll exists.log not_exists.log\n// 输出\n// ls: cannot access not_exists.log: No such file or directory\n// -rw-rw-r-- 1 www www 0 Jun  8 15:01 exists.log\n\nll exists.log not_exists.log >/dev/null 2>&1\n```\n结果我们看到什么输出都没有\n\n`/dev/null`在类Unix系统中称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个EOF。\n\n```\n2>&1 >/dev/null // 只会将标准输出重定向至/dev/null\n\n// 首先将fd2的文件指针更改为fd1所对应的文件指针，也就是STDOUT文件\n// 然后将fd1的文件指针更改为指向/dev/null\n\n```\n\n验证示例：\n```\ntouch exists.log\nll exists.log not_exists.log 2>&1 >/dev/null\n// 只输出错误\n// ls: cannot access not_exists.log: No such file or directory\n```\n","source":"_posts/linux/stdin.md","raw":"---\nurl: /2020/06/07/linux-stdin.html\ntitle: \"Linux 输出重定向\"\nkeywords: \"Linux,输出重定向\"\ndescription: \"Linux输出重定向\"\ndate: 2020-06-07T19:29:11+08:00\ndraft: false\ntags: [\"Linux\"]\ntags_weight: 100\ncategories: [\"Linux\"]\ncategoryes_weight: 100\n---\n\nLinux 一切皆文件\n\n## 标准输入、输出、错误\n\nLinux中有三种标准输入输出，分别是`STDIN`，`STDOUT`，`STDERR`，对应的数字是0，1，2。\n\n`STDIN`是标准输入，默认从键盘读取信息；\n\n`STDOUT`是标准输出，默认将输出结果输出至终端；\n\n`STDERR`是标准错误，默认将输出结果输出至终端。\n\n而一般默认\n\n`STDIN` 打开 /dev/stdin 也就是标准输入\n\n`STDOUT` 打开 /dev/stdout 也就是标准输出\n\n`STDERR` 打开 /dev/stderr 也就是标准错误\n\n所以一般使用的时候，用 0,1,2代替\n\n## 重定向命令\n\n重定向命令`>`就是改变fd所对应的指针\n\n常用的重定向命令\n\n```\n>/dev/null 2>&1 // 会将标准输出，错误输出都重定向至/dev/null，也就是全部丢弃\n\n// 首先将fd1的文件指针更改为指向/dev/null\n// 然后将fd2的文件指针更改为fd1所对应的文件指针，也就是/dev/null文件\n\n```\n\n验证示例：\n```\ntouch exists.log\nll exists.log not_exists.log\n// 输出\n// ls: cannot access not_exists.log: No such file or directory\n// -rw-rw-r-- 1 www www 0 Jun  8 15:01 exists.log\n\nll exists.log not_exists.log >/dev/null 2>&1\n```\n结果我们看到什么输出都没有\n\n`/dev/null`在类Unix系统中称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个EOF。\n\n```\n2>&1 >/dev/null // 只会将标准输出重定向至/dev/null\n\n// 首先将fd2的文件指针更改为fd1所对应的文件指针，也就是STDOUT文件\n// 然后将fd1的文件指针更改为指向/dev/null\n\n```\n\n验证示例：\n```\ntouch exists.log\nll exists.log not_exists.log 2>&1 >/dev/null\n// 只输出错误\n// ls: cannot access not_exists.log: No such file or directory\n```\n","slug":"linux/stdin","published":1,"updated":"2020-07-16T12:38:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf34001smv059v3wg3as","content":"<p>Linux 一切皆文件</p>\n<h2 id=\"标准输入、输出、错误\"><a href=\"#标准输入、输出、错误\" class=\"headerlink\" title=\"标准输入、输出、错误\"></a>标准输入、输出、错误</h2><p>Linux中有三种标准输入输出，分别是<code>STDIN</code>，<code>STDOUT</code>，<code>STDERR</code>，对应的数字是0，1，2。</p>\n<p><code>STDIN</code>是标准输入，默认从键盘读取信息；</p>\n<p><code>STDOUT</code>是标准输出，默认将输出结果输出至终端；</p>\n<p><code>STDERR</code>是标准错误，默认将输出结果输出至终端。</p>\n<p>而一般默认</p>\n<p><code>STDIN</code> 打开 /dev/stdin 也就是标准输入</p>\n<p><code>STDOUT</code> 打开 /dev/stdout 也就是标准输出</p>\n<p><code>STDERR</code> 打开 /dev/stderr 也就是标准错误</p>\n<p>所以一般使用的时候，用 0,1,2代替</p>\n<h2 id=\"重定向命令\"><a href=\"#重定向命令\" class=\"headerlink\" title=\"重定向命令\"></a>重定向命令</h2><p>重定向命令<code>&gt;</code>就是改变fd所对应的指针</p>\n<p>常用的重定向命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &#x2F;&#x2F; 会将标准输出，错误输出都重定向至&#x2F;dev&#x2F;null，也就是全部丢弃</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 首先将fd1的文件指针更改为指向&#x2F;dev&#x2F;null</span><br><span class=\"line\">&#x2F;&#x2F; 然后将fd2的文件指针更改为fd1所对应的文件指针，也就是&#x2F;dev&#x2F;null文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch exists.log</span><br><span class=\"line\">ll exists.log not_exists.log</span><br><span class=\"line\">&#x2F;&#x2F; 输出</span><br><span class=\"line\">&#x2F;&#x2F; ls: cannot access not_exists.log: No such file or directory</span><br><span class=\"line\">&#x2F;&#x2F; -rw-rw-r-- 1 www www 0 Jun  8 15:01 exists.log</span><br><span class=\"line\"></span><br><span class=\"line\">ll exists.log not_exists.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>结果我们看到什么输出都没有</p>\n<p><code>/dev/null</code>在类Unix系统中称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个EOF。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null &#x2F;&#x2F; 只会将标准输出重定向至&#x2F;dev&#x2F;null</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 首先将fd2的文件指针更改为fd1所对应的文件指针，也就是STDOUT文件</span><br><span class=\"line\">&#x2F;&#x2F; 然后将fd1的文件指针更改为指向&#x2F;dev&#x2F;null</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch exists.log</span><br><span class=\"line\">ll exists.log not_exists.log 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null</span><br><span class=\"line\">&#x2F;&#x2F; 只输出错误</span><br><span class=\"line\">&#x2F;&#x2F; ls: cannot access not_exists.log: No such file or directory</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux 一切皆文件</p>\n<h2 id=\"标准输入、输出、错误\"><a href=\"#标准输入、输出、错误\" class=\"headerlink\" title=\"标准输入、输出、错误\"></a>标准输入、输出、错误</h2><p>Linux中有三种标准输入输出，分别是<code>STDIN</code>，<code>STDOUT</code>，<code>STDERR</code>，对应的数字是0，1，2。</p>\n<p><code>STDIN</code>是标准输入，默认从键盘读取信息；</p>\n<p><code>STDOUT</code>是标准输出，默认将输出结果输出至终端；</p>\n<p><code>STDERR</code>是标准错误，默认将输出结果输出至终端。</p>\n<p>而一般默认</p>\n<p><code>STDIN</code> 打开 /dev/stdin 也就是标准输入</p>\n<p><code>STDOUT</code> 打开 /dev/stdout 也就是标准输出</p>\n<p><code>STDERR</code> 打开 /dev/stderr 也就是标准错误</p>\n<p>所以一般使用的时候，用 0,1,2代替</p>\n<h2 id=\"重定向命令\"><a href=\"#重定向命令\" class=\"headerlink\" title=\"重定向命令\"></a>重定向命令</h2><p>重定向命令<code>&gt;</code>就是改变fd所对应的指针</p>\n<p>常用的重定向命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &#x2F;&#x2F; 会将标准输出，错误输出都重定向至&#x2F;dev&#x2F;null，也就是全部丢弃</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 首先将fd1的文件指针更改为指向&#x2F;dev&#x2F;null</span><br><span class=\"line\">&#x2F;&#x2F; 然后将fd2的文件指针更改为fd1所对应的文件指针，也就是&#x2F;dev&#x2F;null文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch exists.log</span><br><span class=\"line\">ll exists.log not_exists.log</span><br><span class=\"line\">&#x2F;&#x2F; 输出</span><br><span class=\"line\">&#x2F;&#x2F; ls: cannot access not_exists.log: No such file or directory</span><br><span class=\"line\">&#x2F;&#x2F; -rw-rw-r-- 1 www www 0 Jun  8 15:01 exists.log</span><br><span class=\"line\"></span><br><span class=\"line\">ll exists.log not_exists.log &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>结果我们看到什么输出都没有</p>\n<p><code>/dev/null</code>在类Unix系统中称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据（但报告写入操作成功），读取它则会立即得到一个EOF。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null &#x2F;&#x2F; 只会将标准输出重定向至&#x2F;dev&#x2F;null</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 首先将fd2的文件指针更改为fd1所对应的文件指针，也就是STDOUT文件</span><br><span class=\"line\">&#x2F;&#x2F; 然后将fd1的文件指针更改为指向&#x2F;dev&#x2F;null</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>验证示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch exists.log</span><br><span class=\"line\">ll exists.log not_exists.log 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null</span><br><span class=\"line\">&#x2F;&#x2F; 只输出错误</span><br><span class=\"line\">&#x2F;&#x2F; ls: cannot access not_exists.log: No such file or directory</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/05/24/5g.html","title":"5G简介","keywords":"5G简介","description":"5G简介","date":"2020-05-24T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"type":"reprinted","_content":"\n本文转载自 [小枣君 一文读懂5G无线通信与4G的典型区别](https://www.ednchina.com/news/201707265G.html)\n\n## 定义\n\n第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generation，简称5G或5G技术）是最新一代蜂窝移动通信技术，\n也是继4G（LTE-A、WiMax）、3G（UMTS、LTE）和2G（GSM）系统之后的延伸\n\n无论技术怎么演变，就目前而言，都离不开下面这个公式\n\n一切移动通信技术的数学基石：`光速 = 波长 * 频率`\n\n这个公式是我们学过物理所熟知的，光速在真空的传播速度的理论值是：每秒30万公里\n\n无论我们的2G、3G还是现在的4G、5G都是在这个公式上做文章。\n\n## 通信技术的简单分类\n\n1. 有线通信\n\n电缆、网线、光纤都属于此类，在有线介质上传播数据，想要高速很容易。实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍\n\n2. 无线通信\n\n空中传播这部分，才是移动通信的瓶颈所在\n\n## 电磁波\n\n电波和光波都属于电磁波。电磁波的频率资源有限，根据不同的频率特性，有不同的用途\n\n目前主要使用电波进行通信。当然，光波通信也在崛起，例如可见光通信LiFi（LightFidelity）\n\n电波属于电磁波的一种，它的频率资源也是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途\n\n名称|符号|频率|波段|波长|主要用途\n---|---|---|---|---|---\n甚低频|VLF|3-30KHz|超长波|1000Km-100Km|海岸潜艇通信、远距离通信、超远距离通信\n低频|LF|30-300KHz|长波|10Km-1Km|越洋通信、中距离通信、地下岩层通信、远距离导航\n中频|MF|0.3-3MHz|中波|1Km-100m|船用通信、业余无线通信、`移动通信`、中距离通信\n高频|HF|3-30MHz|短波|100m-10m|远距离短波通信、国际定点通信、`移动通信`\n甚高频|VHF|30-300MHz|米波|10m-1m|电离层散射、流星余迹通信、人造电离层通信、对空间飞行体通信、`移动通信`\n超高频|UHF|0.3-3GHz|分米波|1m-0.1m|小中容量微波中继通信、对流层散射通信、`移动通信`\n特高频|SHF|3-30GHz|厘米波|10cm-1cm|大容量微波中继通信、数字通信、卫星通信\n极高频|EHF|30-300GHz|毫米波|10mm-1mm|再入大气层时的通信、波导通信\n\n一直以来，我们主要是用中频~超高频进行手机通信的。\n例如经常说的“GSM900”、“CDMA800”，其实就是工作频段900MHz和800MHz的意思。目前主流的4G LTE，属于超高频和特高频。\n我们国家主要使用超高频：\n![LTE](/images/lte.jpg)\n\n随着技术的发展，使用的频率越来越高\n\n因为频率越高，车道（频段）越宽，传输速度也就越快\n\n我们国家工信部下发通知，明确了我国的5G初始中频频段：3.3-3.6GHz、4.8-5GHz两个频段。\n同时，24.75-27.5GHz、37-42.5GHz高频频段正在征集意见。\n目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。\n如果按28GHz来算，根据前文我们提到的公式：`波长 = 光速 / 频率` 约为10.7mm\n\n## 技术\n\n既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？”\n原因很简单——不是不想用，是用不起！\n电磁波的一个显著特点：频率越高（波长越短），就越趋近于直线传播（绕射能力越差）。而且，频率越高，传播过程中的衰减也越大。\n\n你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。\n再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。\n而且，卫星那口大锅，必须校准瞄着卫星的方向。稍微歪一点，都会有影响。\n\n如果5G用高频段，那么它最大的问题，就是覆盖能力会大幅减弱。覆盖同一个区域，需要的基站数量将大大超过4G。\n\n这就是为什么这些年，电信、移动、联通为了低频段而争得头破血流。\n基站就是要花钱买的啊，能不玩命争取么？有的频段甚至被称为——黄金频段。\n\n### 微基站\n\n基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！以前都是大的基站，建一个覆盖一大片\n\n以后更多的将是微基站，到处都装，随处可见\n\n基站对人体健康不会造成影响\n\n而且，恰好相反，其实基站数量越多，辐射反而越小！你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好\n\n一个大功率取暖器近的热，远的冷\n\n\n### 天线去哪了\n\n大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么后来我们就看不到带天线的手机了？\n\n有人说，是因为信号好了，不需要天线了。\n其实不对。信号再好，也不能没有天线。更主要的原因是——天线变小了。\n根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。\n\n频率越高，波长越短，天线也就跟着变短啦！毫米波，天线也变成毫米级。这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根\n\n这就是5G的第三大杀手锏——Massive MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。在LTE时代就已经有MIMO了，5G继续发扬光大，变成了加强版的Massive\n\n以前的基站，天线就那么几根\n5G时代，就不是按根来算了，是按“阵”，叫“天线阵列”\n\n天线多得排成阵了，一眼看去一大片的节奏\n不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。不要问我为什么，去问科学家\n\n### 你是直的？还是弯的？\n\n大家都见过灯泡发光吧？\n其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。\n\n基站也是一样，大量的能量和资源都浪费了。我们能不能找到一只无形的手，把散开的光束缚起来呢？这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。\n\n### 波束赋形\n\n波束赋形：在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。\n这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。\n\n### 别收我钱，行不行？\n\n在目前的通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。\n而在5G时代，这种情况就不一定了。\n5G的第五大特点——D2D，也就是Device to Device。\n\n5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。\n\n这样，就节约了大量的空中资源，也减轻了基站的压力。不过，如果你觉得这样就不用付钱，那你就图样图森破了。\n控制消息还是要从基站走的，而且用着频谱资源，运营商爸爸怎么可能放过你。\n","source":"_posts/network/5g.md","raw":"---\nurl: /2020/05/24/5g.html\ntitle: \"5G简介\"\nkeywords: \"5G简介\"\ndescription: \"5G简介\"\ndate: 2020-05-24T22:53:12+08:00\ndraft: false\ntags: [\"5G\", \"Network\"]\ntags_weight: 100\ncategories: [\"5G\"]\ncategoryes_weight: 100\ntype: \"reprinted\"\n---\n\n本文转载自 [小枣君 一文读懂5G无线通信与4G的典型区别](https://www.ednchina.com/news/201707265G.html)\n\n## 定义\n\n第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generation，简称5G或5G技术）是最新一代蜂窝移动通信技术，\n也是继4G（LTE-A、WiMax）、3G（UMTS、LTE）和2G（GSM）系统之后的延伸\n\n无论技术怎么演变，就目前而言，都离不开下面这个公式\n\n一切移动通信技术的数学基石：`光速 = 波长 * 频率`\n\n这个公式是我们学过物理所熟知的，光速在真空的传播速度的理论值是：每秒30万公里\n\n无论我们的2G、3G还是现在的4G、5G都是在这个公式上做文章。\n\n## 通信技术的简单分类\n\n1. 有线通信\n\n电缆、网线、光纤都属于此类，在有线介质上传播数据，想要高速很容易。实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍\n\n2. 无线通信\n\n空中传播这部分，才是移动通信的瓶颈所在\n\n## 电磁波\n\n电波和光波都属于电磁波。电磁波的频率资源有限，根据不同的频率特性，有不同的用途\n\n目前主要使用电波进行通信。当然，光波通信也在崛起，例如可见光通信LiFi（LightFidelity）\n\n电波属于电磁波的一种，它的频率资源也是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途\n\n名称|符号|频率|波段|波长|主要用途\n---|---|---|---|---|---\n甚低频|VLF|3-30KHz|超长波|1000Km-100Km|海岸潜艇通信、远距离通信、超远距离通信\n低频|LF|30-300KHz|长波|10Km-1Km|越洋通信、中距离通信、地下岩层通信、远距离导航\n中频|MF|0.3-3MHz|中波|1Km-100m|船用通信、业余无线通信、`移动通信`、中距离通信\n高频|HF|3-30MHz|短波|100m-10m|远距离短波通信、国际定点通信、`移动通信`\n甚高频|VHF|30-300MHz|米波|10m-1m|电离层散射、流星余迹通信、人造电离层通信、对空间飞行体通信、`移动通信`\n超高频|UHF|0.3-3GHz|分米波|1m-0.1m|小中容量微波中继通信、对流层散射通信、`移动通信`\n特高频|SHF|3-30GHz|厘米波|10cm-1cm|大容量微波中继通信、数字通信、卫星通信\n极高频|EHF|30-300GHz|毫米波|10mm-1mm|再入大气层时的通信、波导通信\n\n一直以来，我们主要是用中频~超高频进行手机通信的。\n例如经常说的“GSM900”、“CDMA800”，其实就是工作频段900MHz和800MHz的意思。目前主流的4G LTE，属于超高频和特高频。\n我们国家主要使用超高频：\n![LTE](/images/lte.jpg)\n\n随着技术的发展，使用的频率越来越高\n\n因为频率越高，车道（频段）越宽，传输速度也就越快\n\n我们国家工信部下发通知，明确了我国的5G初始中频频段：3.3-3.6GHz、4.8-5GHz两个频段。\n同时，24.75-27.5GHz、37-42.5GHz高频频段正在征集意见。\n目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。\n如果按28GHz来算，根据前文我们提到的公式：`波长 = 光速 / 频率` 约为10.7mm\n\n## 技术\n\n既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？”\n原因很简单——不是不想用，是用不起！\n电磁波的一个显著特点：频率越高（波长越短），就越趋近于直线传播（绕射能力越差）。而且，频率越高，传播过程中的衰减也越大。\n\n你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。\n再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。\n而且，卫星那口大锅，必须校准瞄着卫星的方向。稍微歪一点，都会有影响。\n\n如果5G用高频段，那么它最大的问题，就是覆盖能力会大幅减弱。覆盖同一个区域，需要的基站数量将大大超过4G。\n\n这就是为什么这些年，电信、移动、联通为了低频段而争得头破血流。\n基站就是要花钱买的啊，能不玩命争取么？有的频段甚至被称为——黄金频段。\n\n### 微基站\n\n基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！以前都是大的基站，建一个覆盖一大片\n\n以后更多的将是微基站，到处都装，随处可见\n\n基站对人体健康不会造成影响\n\n而且，恰好相反，其实基站数量越多，辐射反而越小！你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好\n\n一个大功率取暖器近的热，远的冷\n\n\n### 天线去哪了\n\n大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么后来我们就看不到带天线的手机了？\n\n有人说，是因为信号好了，不需要天线了。\n其实不对。信号再好，也不能没有天线。更主要的原因是——天线变小了。\n根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。\n\n频率越高，波长越短，天线也就跟着变短啦！毫米波，天线也变成毫米级。这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根\n\n这就是5G的第三大杀手锏——Massive MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。在LTE时代就已经有MIMO了，5G继续发扬光大，变成了加强版的Massive\n\n以前的基站，天线就那么几根\n5G时代，就不是按根来算了，是按“阵”，叫“天线阵列”\n\n天线多得排成阵了，一眼看去一大片的节奏\n不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。不要问我为什么，去问科学家\n\n### 你是直的？还是弯的？\n\n大家都见过灯泡发光吧？\n其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。\n\n基站也是一样，大量的能量和资源都浪费了。我们能不能找到一只无形的手，把散开的光束缚起来呢？这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。\n\n### 波束赋形\n\n波束赋形：在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。\n这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。\n\n### 别收我钱，行不行？\n\n在目前的通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。\n而在5G时代，这种情况就不一定了。\n5G的第五大特点——D2D，也就是Device to Device。\n\n5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。\n\n这样，就节约了大量的空中资源，也减轻了基站的压力。不过，如果你觉得这样就不用付钱，那你就图样图森破了。\n控制消息还是要从基站走的，而且用着频谱资源，运营商爸爸怎么可能放过你。\n","slug":"network/5g","published":1,"updated":"2020-07-16T12:38:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf38001wmv052p1ff0c5","content":"<p>本文转载自 <a href=\"https://www.ednchina.com/news/201707265G.html\">小枣君 一文读懂5G无线通信与4G的典型区别</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generation，简称5G或5G技术）是最新一代蜂窝移动通信技术，<br>也是继4G（LTE-A、WiMax）、3G（UMTS、LTE）和2G（GSM）系统之后的延伸</p>\n<p>无论技术怎么演变，就目前而言，都离不开下面这个公式</p>\n<p>一切移动通信技术的数学基石：<code>光速 = 波长 * 频率</code></p>\n<p>这个公式是我们学过物理所熟知的，光速在真空的传播速度的理论值是：每秒30万公里</p>\n<p>无论我们的2G、3G还是现在的4G、5G都是在这个公式上做文章。</p>\n<h2 id=\"通信技术的简单分类\"><a href=\"#通信技术的简单分类\" class=\"headerlink\" title=\"通信技术的简单分类\"></a>通信技术的简单分类</h2><ol>\n<li>有线通信</li>\n</ol>\n<p>电缆、网线、光纤都属于此类，在有线介质上传播数据，想要高速很容易。实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍</p>\n<ol start=\"2\">\n<li>无线通信</li>\n</ol>\n<p>空中传播这部分，才是移动通信的瓶颈所在</p>\n<h2 id=\"电磁波\"><a href=\"#电磁波\" class=\"headerlink\" title=\"电磁波\"></a>电磁波</h2><p>电波和光波都属于电磁波。电磁波的频率资源有限，根据不同的频率特性，有不同的用途</p>\n<p>目前主要使用电波进行通信。当然，光波通信也在崛起，例如可见光通信LiFi（LightFidelity）</p>\n<p>电波属于电磁波的一种，它的频率资源也是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>符号</th>\n<th>频率</th>\n<th>波段</th>\n<th>波长</th>\n<th>主要用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>甚低频</td>\n<td>VLF</td>\n<td>3-30KHz</td>\n<td>超长波</td>\n<td>1000Km-100Km</td>\n<td>海岸潜艇通信、远距离通信、超远距离通信</td>\n</tr>\n<tr>\n<td>低频</td>\n<td>LF</td>\n<td>30-300KHz</td>\n<td>长波</td>\n<td>10Km-1Km</td>\n<td>越洋通信、中距离通信、地下岩层通信、远距离导航</td>\n</tr>\n<tr>\n<td>中频</td>\n<td>MF</td>\n<td>0.3-3MHz</td>\n<td>中波</td>\n<td>1Km-100m</td>\n<td>船用通信、业余无线通信、<code>移动通信</code>、中距离通信</td>\n</tr>\n<tr>\n<td>高频</td>\n<td>HF</td>\n<td>3-30MHz</td>\n<td>短波</td>\n<td>100m-10m</td>\n<td>远距离短波通信、国际定点通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>甚高频</td>\n<td>VHF</td>\n<td>30-300MHz</td>\n<td>米波</td>\n<td>10m-1m</td>\n<td>电离层散射、流星余迹通信、人造电离层通信、对空间飞行体通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>超高频</td>\n<td>UHF</td>\n<td>0.3-3GHz</td>\n<td>分米波</td>\n<td>1m-0.1m</td>\n<td>小中容量微波中继通信、对流层散射通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>特高频</td>\n<td>SHF</td>\n<td>3-30GHz</td>\n<td>厘米波</td>\n<td>10cm-1cm</td>\n<td>大容量微波中继通信、数字通信、卫星通信</td>\n</tr>\n<tr>\n<td>极高频</td>\n<td>EHF</td>\n<td>30-300GHz</td>\n<td>毫米波</td>\n<td>10mm-1mm</td>\n<td>再入大气层时的通信、波导通信</td>\n</tr>\n</tbody></table>\n<p>一直以来，我们主要是用中频~超高频进行手机通信的。<br>例如经常说的“GSM900”、“CDMA800”，其实就是工作频段900MHz和800MHz的意思。目前主流的4G LTE，属于超高频和特高频。<br>我们国家主要使用超高频：<br><img src=\"/images/lte.jpg\" alt=\"LTE\"></p>\n<p>随着技术的发展，使用的频率越来越高</p>\n<p>因为频率越高，车道（频段）越宽，传输速度也就越快</p>\n<p>我们国家工信部下发通知，明确了我国的5G初始中频频段：3.3-3.6GHz、4.8-5GHz两个频段。<br>同时，24.75-27.5GHz、37-42.5GHz高频频段正在征集意见。<br>目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。<br>如果按28GHz来算，根据前文我们提到的公式：<code>波长 = 光速 / 频率</code> 约为10.7mm</p>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？”<br>原因很简单——不是不想用，是用不起！<br>电磁波的一个显著特点：频率越高（波长越短），就越趋近于直线传播（绕射能力越差）。而且，频率越高，传播过程中的衰减也越大。</p>\n<p>你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。<br>再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。<br>而且，卫星那口大锅，必须校准瞄着卫星的方向。稍微歪一点，都会有影响。</p>\n<p>如果5G用高频段，那么它最大的问题，就是覆盖能力会大幅减弱。覆盖同一个区域，需要的基站数量将大大超过4G。</p>\n<p>这就是为什么这些年，电信、移动、联通为了低频段而争得头破血流。<br>基站就是要花钱买的啊，能不玩命争取么？有的频段甚至被称为——黄金频段。</p>\n<h3 id=\"微基站\"><a href=\"#微基站\" class=\"headerlink\" title=\"微基站\"></a>微基站</h3><p>基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！以前都是大的基站，建一个覆盖一大片</p>\n<p>以后更多的将是微基站，到处都装，随处可见</p>\n<p>基站对人体健康不会造成影响</p>\n<p>而且，恰好相反，其实基站数量越多，辐射反而越小！你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好</p>\n<p>一个大功率取暖器近的热，远的冷</p>\n<h3 id=\"天线去哪了\"><a href=\"#天线去哪了\" class=\"headerlink\" title=\"天线去哪了\"></a>天线去哪了</h3><p>大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么后来我们就看不到带天线的手机了？</p>\n<p>有人说，是因为信号好了，不需要天线了。<br>其实不对。信号再好，也不能没有天线。更主要的原因是——天线变小了。<br>根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。</p>\n<p>频率越高，波长越短，天线也就跟着变短啦！毫米波，天线也变成毫米级。这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根</p>\n<p>这就是5G的第三大杀手锏——Massive MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。在LTE时代就已经有MIMO了，5G继续发扬光大，变成了加强版的Massive</p>\n<p>以前的基站，天线就那么几根<br>5G时代，就不是按根来算了，是按“阵”，叫“天线阵列”</p>\n<p>天线多得排成阵了，一眼看去一大片的节奏<br>不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。不要问我为什么，去问科学家</p>\n<h3 id=\"你是直的？还是弯的？\"><a href=\"#你是直的？还是弯的？\" class=\"headerlink\" title=\"你是直的？还是弯的？\"></a>你是直的？还是弯的？</h3><p>大家都见过灯泡发光吧？<br>其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。</p>\n<p>基站也是一样，大量的能量和资源都浪费了。我们能不能找到一只无形的手，把散开的光束缚起来呢？这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。</p>\n<h3 id=\"波束赋形\"><a href=\"#波束赋形\" class=\"headerlink\" title=\"波束赋形\"></a>波束赋形</h3><p>波束赋形：在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。<br>这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。</p>\n<h3 id=\"别收我钱，行不行？\"><a href=\"#别收我钱，行不行？\" class=\"headerlink\" title=\"别收我钱，行不行？\"></a>别收我钱，行不行？</h3><p>在目前的通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。<br>而在5G时代，这种情况就不一定了。<br>5G的第五大特点——D2D，也就是Device to Device。</p>\n<p>5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。</p>\n<p>这样，就节约了大量的空中资源，也减轻了基站的压力。不过，如果你觉得这样就不用付钱，那你就图样图森破了。<br>控制消息还是要从基站走的，而且用着频谱资源，运营商爸爸怎么可能放过你。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文转载自 <a href=\"https://www.ednchina.com/news/201707265G.html\">小枣君 一文读懂5G无线通信与4G的典型区别</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems、5th-Generation，简称5G或5G技术）是最新一代蜂窝移动通信技术，<br>也是继4G（LTE-A、WiMax）、3G（UMTS、LTE）和2G（GSM）系统之后的延伸</p>\n<p>无论技术怎么演变，就目前而言，都离不开下面这个公式</p>\n<p>一切移动通信技术的数学基石：<code>光速 = 波长 * 频率</code></p>\n<p>这个公式是我们学过物理所熟知的，光速在真空的传播速度的理论值是：每秒30万公里</p>\n<p>无论我们的2G、3G还是现在的4G、5G都是在这个公式上做文章。</p>\n<h2 id=\"通信技术的简单分类\"><a href=\"#通信技术的简单分类\" class=\"headerlink\" title=\"通信技术的简单分类\"></a>通信技术的简单分类</h2><ol>\n<li>有线通信</li>\n</ol>\n<p>电缆、网线、光纤都属于此类，在有线介质上传播数据，想要高速很容易。实验室中，单条光纤最大速度已达到了26Tbps，是传统网线的两万六千倍</p>\n<ol start=\"2\">\n<li>无线通信</li>\n</ol>\n<p>空中传播这部分，才是移动通信的瓶颈所在</p>\n<h2 id=\"电磁波\"><a href=\"#电磁波\" class=\"headerlink\" title=\"电磁波\"></a>电磁波</h2><p>电波和光波都属于电磁波。电磁波的频率资源有限，根据不同的频率特性，有不同的用途</p>\n<p>目前主要使用电波进行通信。当然，光波通信也在崛起，例如可见光通信LiFi（LightFidelity）</p>\n<p>电波属于电磁波的一种，它的频率资源也是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>符号</th>\n<th>频率</th>\n<th>波段</th>\n<th>波长</th>\n<th>主要用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>甚低频</td>\n<td>VLF</td>\n<td>3-30KHz</td>\n<td>超长波</td>\n<td>1000Km-100Km</td>\n<td>海岸潜艇通信、远距离通信、超远距离通信</td>\n</tr>\n<tr>\n<td>低频</td>\n<td>LF</td>\n<td>30-300KHz</td>\n<td>长波</td>\n<td>10Km-1Km</td>\n<td>越洋通信、中距离通信、地下岩层通信、远距离导航</td>\n</tr>\n<tr>\n<td>中频</td>\n<td>MF</td>\n<td>0.3-3MHz</td>\n<td>中波</td>\n<td>1Km-100m</td>\n<td>船用通信、业余无线通信、<code>移动通信</code>、中距离通信</td>\n</tr>\n<tr>\n<td>高频</td>\n<td>HF</td>\n<td>3-30MHz</td>\n<td>短波</td>\n<td>100m-10m</td>\n<td>远距离短波通信、国际定点通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>甚高频</td>\n<td>VHF</td>\n<td>30-300MHz</td>\n<td>米波</td>\n<td>10m-1m</td>\n<td>电离层散射、流星余迹通信、人造电离层通信、对空间飞行体通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>超高频</td>\n<td>UHF</td>\n<td>0.3-3GHz</td>\n<td>分米波</td>\n<td>1m-0.1m</td>\n<td>小中容量微波中继通信、对流层散射通信、<code>移动通信</code></td>\n</tr>\n<tr>\n<td>特高频</td>\n<td>SHF</td>\n<td>3-30GHz</td>\n<td>厘米波</td>\n<td>10cm-1cm</td>\n<td>大容量微波中继通信、数字通信、卫星通信</td>\n</tr>\n<tr>\n<td>极高频</td>\n<td>EHF</td>\n<td>30-300GHz</td>\n<td>毫米波</td>\n<td>10mm-1mm</td>\n<td>再入大气层时的通信、波导通信</td>\n</tr>\n</tbody></table>\n<p>一直以来，我们主要是用中频~超高频进行手机通信的。<br>例如经常说的“GSM900”、“CDMA800”，其实就是工作频段900MHz和800MHz的意思。目前主流的4G LTE，属于超高频和特高频。<br>我们国家主要使用超高频：<br><img src=\"/images/lte.jpg\" alt=\"LTE\"></p>\n<p>随着技术的发展，使用的频率越来越高</p>\n<p>因为频率越高，车道（频段）越宽，传输速度也就越快</p>\n<p>我们国家工信部下发通知，明确了我国的5G初始中频频段：3.3-3.6GHz、4.8-5GHz两个频段。<br>同时，24.75-27.5GHz、37-42.5GHz高频频段正在征集意见。<br>目前，国际上主要使用28GHz进行试验（这个频段也有可能成为5G最先商用的频段）。<br>如果按28GHz来算，根据前文我们提到的公式：<code>波长 = 光速 / 频率</code> 约为10.7mm</p>\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><p>既然，频率高这么好，你一定会问：“为什么以前我们不用高频率呢？”<br>原因很简单——不是不想用，是用不起！<br>电磁波的一个显著特点：频率越高（波长越短），就越趋近于直线传播（绕射能力越差）。而且，频率越高，传播过程中的衰减也越大。</p>\n<p>你看激光笔（波长635nm左右），射出的光是直的吧，挡住了就过不去了。<br>再看卫星通信和GPS导航（波长1cm左右），如果有遮挡物，就没信号了吧。<br>而且，卫星那口大锅，必须校准瞄着卫星的方向。稍微歪一点，都会有影响。</p>\n<p>如果5G用高频段，那么它最大的问题，就是覆盖能力会大幅减弱。覆盖同一个区域，需要的基站数量将大大超过4G。</p>\n<p>这就是为什么这些年，电信、移动、联通为了低频段而争得头破血流。<br>基站就是要花钱买的啊，能不玩命争取么？有的频段甚至被称为——黄金频段。</p>\n<h3 id=\"微基站\"><a href=\"#微基站\" class=\"headerlink\" title=\"微基站\"></a>微基站</h3><p>基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！以前都是大的基站，建一个覆盖一大片</p>\n<p>以后更多的将是微基站，到处都装，随处可见</p>\n<p>基站对人体健康不会造成影响</p>\n<p>而且，恰好相反，其实基站数量越多，辐射反而越小！你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好</p>\n<p>一个大功率取暖器近的热，远的冷</p>\n<h3 id=\"天线去哪了\"><a href=\"#天线去哪了\" class=\"headerlink\" title=\"天线去哪了\"></a>天线去哪了</h3><p>大家有没有发现，以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么后来我们就看不到带天线的手机了？</p>\n<p>有人说，是因为信号好了，不需要天线了。<br>其实不对。信号再好，也不能没有天线。更主要的原因是——天线变小了。<br>根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。</p>\n<p>频率越高，波长越短，天线也就跟着变短啦！毫米波，天线也变成毫米级。这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根</p>\n<p>这就是5G的第三大杀手锏——Massive MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。在LTE时代就已经有MIMO了，5G继续发扬光大，变成了加强版的Massive</p>\n<p>以前的基站，天线就那么几根<br>5G时代，就不是按根来算了，是按“阵”，叫“天线阵列”</p>\n<p>天线多得排成阵了，一眼看去一大片的节奏<br>不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。不要问我为什么，去问科学家</p>\n<h3 id=\"你是直的？还是弯的？\"><a href=\"#你是直的？还是弯的？\" class=\"headerlink\" title=\"你是直的？还是弯的？\"></a>你是直的？还是弯的？</h3><p>大家都见过灯泡发光吧？<br>其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。</p>\n<p>基站也是一样，大量的能量和资源都浪费了。我们能不能找到一只无形的手，把散开的光束缚起来呢？这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。</p>\n<h3 id=\"波束赋形\"><a href=\"#波束赋形\" class=\"headerlink\" title=\"波束赋形\"></a>波束赋形</h3><p>波束赋形：在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。<br>这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。</p>\n<h3 id=\"别收我钱，行不行？\"><a href=\"#别收我钱，行不行？\" class=\"headerlink\" title=\"别收我钱，行不行？\"></a>别收我钱，行不行？</h3><p>在目前的通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。<br>而在5G时代，这种情况就不一定了。<br>5G的第五大特点——D2D，也就是Device to Device。</p>\n<p>5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。</p>\n<p>这样，就节约了大量的空中资源，也减轻了基站的压力。不过，如果你觉得这样就不用付钱，那你就图样图森破了。<br>控制消息还是要从基站走的，而且用着频谱资源，运营商爸爸怎么可能放过你。</p>\n"},{"url":"/2020/04/25/nat.html","title":"NAT原理","keywords":"NAT原理","description":"NAT原理","date":"2020-04-25T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 简介\n\nNAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。\n允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）转换成合法网络IP地址的技术。\n因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。（也有人说这是阻碍IPV6发展的原因之一）\n\n## 分类\n\n- 静态NAT(Static NAT)\n\n- 动态地址NAT(Pooled NAT)\n\n- 网络地址端口转换NAPT(Port-Level NAT)\n\n（Network Address Port Translation）是把内部地址映射到外部网络的一个IP地址的不同端口上。它可以将中小型的网络隐藏在一个合法的IP地址后面。\nNAPT与 动态地址NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的端口号。\nNAPT是使用最普遍的一种转换方式，在HomeGW中也主要使用该方式。它又包含两种转换方式：SNAT和DNAT。\n\n（Source NAT）：修改数据包的源地址。SNAT改变第一个数据包的来源地址，它永远会在数据包发送到网络之前完成，数据包伪装就是一具SNAT的例子。\n\n（Destination NAT，DNAT）：修改数据包的目的地址。DNAT刚好与SNAT相反，它是改变第一个数据包的目的地地址，如平衡负载、端口转发和透明代理就是属于DNAT。\n\n## 原理\n\n- 地址转换\n\nNAT的基本工作原理是，当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。\n\n如下图所示，NAT网关有2个网络端口，其中公共网络端口的IP地址是统一分配的公共 IP，为202.20.65.5；\n私有网络端口的IP地址是保留地址，为192.168.1.1。私有网中的主机192.168.1.2向公共网中的主机202.20.65.4发送了1个IP包(Dst=202.20.65.4,Src=192.168.1.2)。\n\n![NAT工作原理1](/images/nat_1.jpg)\n\n当IP包经过NAT网关时，NAT Gateway会将IP包的源IP转换为NAT Gateway的公共IP并转发到公共网，此时IP包（Dst=202.20.65.4，Src=202.20.65.5）中已经不含任何私有网IP的信息。\n由于IP包的源IP已经被转换成NAT Gateway的公共IP，Web Server发出的响应IP包（Dst= 202.20.65.5,Src=202.20.65.4）将被发送到NAT Gateway。\n\n这时，NAT Gateway会将IP包的目的IP转换成私有网中主机的IP，然后将IP包（Des=192.168.1.2，Src=202.20.65.4）转发到私有网。\n对于通信双方而言，这种地址的转换过程是完全透明的。转换示意图如下：\n\n![转换示意图](/images/nat_2.jpg)\n\n- 连接追踪\n\n在上述过程中，NAT Gateway在收到响应包后，就需要判断将数据包转发给谁。此时如果子网内仅有少量客户机，可以用静态NAT手工指定；\n但如果内网有多台客户机，并且各自访问不同网站，这时候就需要连接追踪（connection track）。如下图所示：\n\n![连接追踪](/images/nat_3.jpg)\n\n在NAT Gateway收到客户机发来的请求包后，做源地址转换，并且将该连接记录保存下来，当NAT Gateway收到服务器来的响应包后，查找Track Table，确定转发目标，做目的地址转换，转发给客户机。\n\n- 端口转换\n\n以上述客户机访问服务器为例，当仅有一台客户机访问服务器时，NAT Gateway只须更改数据包的源IP或目的IP即可正常通讯。\n但是如果Client A和Client B同时访问Web Server，那么当NAT Gateway收到响应包的时候，就无法判断将数据包转发给哪台客户机，如下图所示：\n\n![端口转换1](/images/nat_4.jpg)\n\n此时，NAT Gateway会在Connection Track中加入端口信息加以区分。\n如果两客户机访问同一服务器的源端口不同，那么在Track Table里加入端口信息即可区分，如果源端口正好相同，那么在时行SNAT和DNAT的同时对源端口也要做相应的转换，如下图所示：\n\n![端口转换2](/images/nat_5.jpg)\n\n## 应用\n\n数据伪装: 可以将内网数据包中的地址信息更改成统一的对外地址信息，不让内网主机直接暴露在因特网上，保证内网主机的安全。同时，该功能也常用来实现共享上网。\n\n端口转发: 当内网主机对外提供服务时，由于使用的是内部私有IP地址，外网无法直接访问。因此，需要在网关上进行端口转发，将特定服务的数据包转发给内网主机。\n\n负载均衡: 目的地址转换NAT可以重定向一些服务器的连接到其他随机选定的服务器（被负载均衡的服务器就相当于上面的内网主机）。\n\n失效终结: 目的地址转换NAT可以用来提供高可靠性的服务。如果一个系统有一台通过路由器访问的关键服务器，一旦路由器检测到该服务器宕机（心跳检测），它可以使用目的地址转换NAT透明地把连接转移到一个备份服务器上。\n\n透明代理: NAT可以把连接到因特网的HTTP连接重定向到一个指定的HTTP代理服务器以缓存数据和过滤请求。一些因特网服务提供商就使用这种技术来减少带宽的使用而不用让他们的客户配置他们的浏览器支持代理连接。\n\n转载链接：\n\n[风吹过的时光 https://blog.csdn.net/hzhsan/article/details/45038265](https://blog.csdn.net/hzhsan/article/details/45038265)\n\n[芷菁博客 http://www.stars625.com/nat.html](http://www.stars625.com/nat.html)\n","source":"_posts/network/nat.md","raw":"---\nurl: /2020/04/25/nat.html\ntitle: \"NAT原理\"\nkeywords: \"NAT原理\"\ndescription: \"NAT原理\"\ndate: 2020-04-25T22:53:12+08:00\ndraft: false\ntags: [\"NAT\", \"Network\"]\ntags_weight: 100\ncategories: [\"NAT\"]\ncategoryes_weight: 100\n---\n\n## 简介\n\nNAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。\n允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）转换成合法网络IP地址的技术。\n因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。（也有人说这是阻碍IPV6发展的原因之一）\n\n## 分类\n\n- 静态NAT(Static NAT)\n\n- 动态地址NAT(Pooled NAT)\n\n- 网络地址端口转换NAPT(Port-Level NAT)\n\n（Network Address Port Translation）是把内部地址映射到外部网络的一个IP地址的不同端口上。它可以将中小型的网络隐藏在一个合法的IP地址后面。\nNAPT与 动态地址NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的端口号。\nNAPT是使用最普遍的一种转换方式，在HomeGW中也主要使用该方式。它又包含两种转换方式：SNAT和DNAT。\n\n（Source NAT）：修改数据包的源地址。SNAT改变第一个数据包的来源地址，它永远会在数据包发送到网络之前完成，数据包伪装就是一具SNAT的例子。\n\n（Destination NAT，DNAT）：修改数据包的目的地址。DNAT刚好与SNAT相反，它是改变第一个数据包的目的地地址，如平衡负载、端口转发和透明代理就是属于DNAT。\n\n## 原理\n\n- 地址转换\n\nNAT的基本工作原理是，当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。\n\n如下图所示，NAT网关有2个网络端口，其中公共网络端口的IP地址是统一分配的公共 IP，为202.20.65.5；\n私有网络端口的IP地址是保留地址，为192.168.1.1。私有网中的主机192.168.1.2向公共网中的主机202.20.65.4发送了1个IP包(Dst=202.20.65.4,Src=192.168.1.2)。\n\n![NAT工作原理1](/images/nat_1.jpg)\n\n当IP包经过NAT网关时，NAT Gateway会将IP包的源IP转换为NAT Gateway的公共IP并转发到公共网，此时IP包（Dst=202.20.65.4，Src=202.20.65.5）中已经不含任何私有网IP的信息。\n由于IP包的源IP已经被转换成NAT Gateway的公共IP，Web Server发出的响应IP包（Dst= 202.20.65.5,Src=202.20.65.4）将被发送到NAT Gateway。\n\n这时，NAT Gateway会将IP包的目的IP转换成私有网中主机的IP，然后将IP包（Des=192.168.1.2，Src=202.20.65.4）转发到私有网。\n对于通信双方而言，这种地址的转换过程是完全透明的。转换示意图如下：\n\n![转换示意图](/images/nat_2.jpg)\n\n- 连接追踪\n\n在上述过程中，NAT Gateway在收到响应包后，就需要判断将数据包转发给谁。此时如果子网内仅有少量客户机，可以用静态NAT手工指定；\n但如果内网有多台客户机，并且各自访问不同网站，这时候就需要连接追踪（connection track）。如下图所示：\n\n![连接追踪](/images/nat_3.jpg)\n\n在NAT Gateway收到客户机发来的请求包后，做源地址转换，并且将该连接记录保存下来，当NAT Gateway收到服务器来的响应包后，查找Track Table，确定转发目标，做目的地址转换，转发给客户机。\n\n- 端口转换\n\n以上述客户机访问服务器为例，当仅有一台客户机访问服务器时，NAT Gateway只须更改数据包的源IP或目的IP即可正常通讯。\n但是如果Client A和Client B同时访问Web Server，那么当NAT Gateway收到响应包的时候，就无法判断将数据包转发给哪台客户机，如下图所示：\n\n![端口转换1](/images/nat_4.jpg)\n\n此时，NAT Gateway会在Connection Track中加入端口信息加以区分。\n如果两客户机访问同一服务器的源端口不同，那么在Track Table里加入端口信息即可区分，如果源端口正好相同，那么在时行SNAT和DNAT的同时对源端口也要做相应的转换，如下图所示：\n\n![端口转换2](/images/nat_5.jpg)\n\n## 应用\n\n数据伪装: 可以将内网数据包中的地址信息更改成统一的对外地址信息，不让内网主机直接暴露在因特网上，保证内网主机的安全。同时，该功能也常用来实现共享上网。\n\n端口转发: 当内网主机对外提供服务时，由于使用的是内部私有IP地址，外网无法直接访问。因此，需要在网关上进行端口转发，将特定服务的数据包转发给内网主机。\n\n负载均衡: 目的地址转换NAT可以重定向一些服务器的连接到其他随机选定的服务器（被负载均衡的服务器就相当于上面的内网主机）。\n\n失效终结: 目的地址转换NAT可以用来提供高可靠性的服务。如果一个系统有一台通过路由器访问的关键服务器，一旦路由器检测到该服务器宕机（心跳检测），它可以使用目的地址转换NAT透明地把连接转移到一个备份服务器上。\n\n透明代理: NAT可以把连接到因特网的HTTP连接重定向到一个指定的HTTP代理服务器以缓存数据和过滤请求。一些因特网服务提供商就使用这种技术来减少带宽的使用而不用让他们的客户配置他们的浏览器支持代理连接。\n\n转载链接：\n\n[风吹过的时光 https://blog.csdn.net/hzhsan/article/details/45038265](https://blog.csdn.net/hzhsan/article/details/45038265)\n\n[芷菁博客 http://www.stars625.com/nat.html](http://www.stars625.com/nat.html)\n","slug":"network/nat","published":1,"updated":"2020-05-16T14:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3a0020mv0557988imy","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。<br>允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）转换成合法网络IP地址的技术。<br>因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。（也有人说这是阻碍IPV6发展的原因之一）</p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ul>\n<li><p>静态NAT(Static NAT)</p>\n</li>\n<li><p>动态地址NAT(Pooled NAT)</p>\n</li>\n<li><p>网络地址端口转换NAPT(Port-Level NAT)</p>\n</li>\n</ul>\n<p>（Network Address Port Translation）是把内部地址映射到外部网络的一个IP地址的不同端口上。它可以将中小型的网络隐藏在一个合法的IP地址后面。<br>NAPT与 动态地址NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的端口号。<br>NAPT是使用最普遍的一种转换方式，在HomeGW中也主要使用该方式。它又包含两种转换方式：SNAT和DNAT。</p>\n<p>（Source NAT）：修改数据包的源地址。SNAT改变第一个数据包的来源地址，它永远会在数据包发送到网络之前完成，数据包伪装就是一具SNAT的例子。</p>\n<p>（Destination NAT，DNAT）：修改数据包的目的地址。DNAT刚好与SNAT相反，它是改变第一个数据包的目的地地址，如平衡负载、端口转发和透明代理就是属于DNAT。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>地址转换</li>\n</ul>\n<p>NAT的基本工作原理是，当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。</p>\n<p>如下图所示，NAT网关有2个网络端口，其中公共网络端口的IP地址是统一分配的公共 IP，为202.20.65.5；<br>私有网络端口的IP地址是保留地址，为192.168.1.1。私有网中的主机192.168.1.2向公共网中的主机202.20.65.4发送了1个IP包(Dst=202.20.65.4,Src=192.168.1.2)。</p>\n<p><img src=\"/images/nat_1.jpg\" alt=\"NAT工作原理1\"></p>\n<p>当IP包经过NAT网关时，NAT Gateway会将IP包的源IP转换为NAT Gateway的公共IP并转发到公共网，此时IP包（Dst=202.20.65.4，Src=202.20.65.5）中已经不含任何私有网IP的信息。<br>由于IP包的源IP已经被转换成NAT Gateway的公共IP，Web Server发出的响应IP包（Dst= 202.20.65.5,Src=202.20.65.4）将被发送到NAT Gateway。</p>\n<p>这时，NAT Gateway会将IP包的目的IP转换成私有网中主机的IP，然后将IP包（Des=192.168.1.2，Src=202.20.65.4）转发到私有网。<br>对于通信双方而言，这种地址的转换过程是完全透明的。转换示意图如下：</p>\n<p><img src=\"/images/nat_2.jpg\" alt=\"转换示意图\"></p>\n<ul>\n<li>连接追踪</li>\n</ul>\n<p>在上述过程中，NAT Gateway在收到响应包后，就需要判断将数据包转发给谁。此时如果子网内仅有少量客户机，可以用静态NAT手工指定；<br>但如果内网有多台客户机，并且各自访问不同网站，这时候就需要连接追踪（connection track）。如下图所示：</p>\n<p><img src=\"/images/nat_3.jpg\" alt=\"连接追踪\"></p>\n<p>在NAT Gateway收到客户机发来的请求包后，做源地址转换，并且将该连接记录保存下来，当NAT Gateway收到服务器来的响应包后，查找Track Table，确定转发目标，做目的地址转换，转发给客户机。</p>\n<ul>\n<li>端口转换</li>\n</ul>\n<p>以上述客户机访问服务器为例，当仅有一台客户机访问服务器时，NAT Gateway只须更改数据包的源IP或目的IP即可正常通讯。<br>但是如果Client A和Client B同时访问Web Server，那么当NAT Gateway收到响应包的时候，就无法判断将数据包转发给哪台客户机，如下图所示：</p>\n<p><img src=\"/images/nat_4.jpg\" alt=\"端口转换1\"></p>\n<p>此时，NAT Gateway会在Connection Track中加入端口信息加以区分。<br>如果两客户机访问同一服务器的源端口不同，那么在Track Table里加入端口信息即可区分，如果源端口正好相同，那么在时行SNAT和DNAT的同时对源端口也要做相应的转换，如下图所示：</p>\n<p><img src=\"/images/nat_5.jpg\" alt=\"端口转换2\"></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>数据伪装: 可以将内网数据包中的地址信息更改成统一的对外地址信息，不让内网主机直接暴露在因特网上，保证内网主机的安全。同时，该功能也常用来实现共享上网。</p>\n<p>端口转发: 当内网主机对外提供服务时，由于使用的是内部私有IP地址，外网无法直接访问。因此，需要在网关上进行端口转发，将特定服务的数据包转发给内网主机。</p>\n<p>负载均衡: 目的地址转换NAT可以重定向一些服务器的连接到其他随机选定的服务器（被负载均衡的服务器就相当于上面的内网主机）。</p>\n<p>失效终结: 目的地址转换NAT可以用来提供高可靠性的服务。如果一个系统有一台通过路由器访问的关键服务器，一旦路由器检测到该服务器宕机（心跳检测），它可以使用目的地址转换NAT透明地把连接转移到一个备份服务器上。</p>\n<p>透明代理: NAT可以把连接到因特网的HTTP连接重定向到一个指定的HTTP代理服务器以缓存数据和过滤请求。一些因特网服务提供商就使用这种技术来减少带宽的使用而不用让他们的客户配置他们的浏览器支持代理连接。</p>\n<p>转载链接：</p>\n<p><a href=\"https://blog.csdn.net/hzhsan/article/details/45038265\">风吹过的时光 https://blog.csdn.net/hzhsan/article/details/45038265</a></p>\n<p><a href=\"http://www.stars625.com/nat.html\">芷菁博客 http://www.stars625.com/nat.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”。<br>允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）转换成合法网络IP地址的技术。<br>因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。（也有人说这是阻碍IPV6发展的原因之一）</p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ul>\n<li><p>静态NAT(Static NAT)</p>\n</li>\n<li><p>动态地址NAT(Pooled NAT)</p>\n</li>\n<li><p>网络地址端口转换NAPT(Port-Level NAT)</p>\n</li>\n</ul>\n<p>（Network Address Port Translation）是把内部地址映射到外部网络的一个IP地址的不同端口上。它可以将中小型的网络隐藏在一个合法的IP地址后面。<br>NAPT与 动态地址NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的端口号。<br>NAPT是使用最普遍的一种转换方式，在HomeGW中也主要使用该方式。它又包含两种转换方式：SNAT和DNAT。</p>\n<p>（Source NAT）：修改数据包的源地址。SNAT改变第一个数据包的来源地址，它永远会在数据包发送到网络之前完成，数据包伪装就是一具SNAT的例子。</p>\n<p>（Destination NAT，DNAT）：修改数据包的目的地址。DNAT刚好与SNAT相反，它是改变第一个数据包的目的地地址，如平衡负载、端口转发和透明代理就是属于DNAT。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>地址转换</li>\n</ul>\n<p>NAT的基本工作原理是，当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。</p>\n<p>如下图所示，NAT网关有2个网络端口，其中公共网络端口的IP地址是统一分配的公共 IP，为202.20.65.5；<br>私有网络端口的IP地址是保留地址，为192.168.1.1。私有网中的主机192.168.1.2向公共网中的主机202.20.65.4发送了1个IP包(Dst=202.20.65.4,Src=192.168.1.2)。</p>\n<p><img src=\"/images/nat_1.jpg\" alt=\"NAT工作原理1\"></p>\n<p>当IP包经过NAT网关时，NAT Gateway会将IP包的源IP转换为NAT Gateway的公共IP并转发到公共网，此时IP包（Dst=202.20.65.4，Src=202.20.65.5）中已经不含任何私有网IP的信息。<br>由于IP包的源IP已经被转换成NAT Gateway的公共IP，Web Server发出的响应IP包（Dst= 202.20.65.5,Src=202.20.65.4）将被发送到NAT Gateway。</p>\n<p>这时，NAT Gateway会将IP包的目的IP转换成私有网中主机的IP，然后将IP包（Des=192.168.1.2，Src=202.20.65.4）转发到私有网。<br>对于通信双方而言，这种地址的转换过程是完全透明的。转换示意图如下：</p>\n<p><img src=\"/images/nat_2.jpg\" alt=\"转换示意图\"></p>\n<ul>\n<li>连接追踪</li>\n</ul>\n<p>在上述过程中，NAT Gateway在收到响应包后，就需要判断将数据包转发给谁。此时如果子网内仅有少量客户机，可以用静态NAT手工指定；<br>但如果内网有多台客户机，并且各自访问不同网站，这时候就需要连接追踪（connection track）。如下图所示：</p>\n<p><img src=\"/images/nat_3.jpg\" alt=\"连接追踪\"></p>\n<p>在NAT Gateway收到客户机发来的请求包后，做源地址转换，并且将该连接记录保存下来，当NAT Gateway收到服务器来的响应包后，查找Track Table，确定转发目标，做目的地址转换，转发给客户机。</p>\n<ul>\n<li>端口转换</li>\n</ul>\n<p>以上述客户机访问服务器为例，当仅有一台客户机访问服务器时，NAT Gateway只须更改数据包的源IP或目的IP即可正常通讯。<br>但是如果Client A和Client B同时访问Web Server，那么当NAT Gateway收到响应包的时候，就无法判断将数据包转发给哪台客户机，如下图所示：</p>\n<p><img src=\"/images/nat_4.jpg\" alt=\"端口转换1\"></p>\n<p>此时，NAT Gateway会在Connection Track中加入端口信息加以区分。<br>如果两客户机访问同一服务器的源端口不同，那么在Track Table里加入端口信息即可区分，如果源端口正好相同，那么在时行SNAT和DNAT的同时对源端口也要做相应的转换，如下图所示：</p>\n<p><img src=\"/images/nat_5.jpg\" alt=\"端口转换2\"></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>数据伪装: 可以将内网数据包中的地址信息更改成统一的对外地址信息，不让内网主机直接暴露在因特网上，保证内网主机的安全。同时，该功能也常用来实现共享上网。</p>\n<p>端口转发: 当内网主机对外提供服务时，由于使用的是内部私有IP地址，外网无法直接访问。因此，需要在网关上进行端口转发，将特定服务的数据包转发给内网主机。</p>\n<p>负载均衡: 目的地址转换NAT可以重定向一些服务器的连接到其他随机选定的服务器（被负载均衡的服务器就相当于上面的内网主机）。</p>\n<p>失效终结: 目的地址转换NAT可以用来提供高可靠性的服务。如果一个系统有一台通过路由器访问的关键服务器，一旦路由器检测到该服务器宕机（心跳检测），它可以使用目的地址转换NAT透明地把连接转移到一个备份服务器上。</p>\n<p>透明代理: NAT可以把连接到因特网的HTTP连接重定向到一个指定的HTTP代理服务器以缓存数据和过滤请求。一些因特网服务提供商就使用这种技术来减少带宽的使用而不用让他们的客户配置他们的浏览器支持代理连接。</p>\n<p>转载链接：</p>\n<p><a href=\"https://blog.csdn.net/hzhsan/article/details/45038265\">风吹过的时光 https://blog.csdn.net/hzhsan/article/details/45038265</a></p>\n<p><a href=\"http://www.stars625.com/nat.html\">芷菁博客 http://www.stars625.com/nat.html</a></p>\n"},{"url":"/2020/04/02/tcp-connect-close.html","title":"TCP 三次握手 四次挥手","keywords":"TCP,三次握手,四次挥手","description":"TCP 三次握手 四次挥手","date":"2020-04-02T04:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## TCP连接三次握手\n\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于`CLOSED`（关闭）状态。\n下图中在主机下面的方框分别是TCP进程所处的状态。请注意，A主动打开连接，而B被动打开连接。\n\n![TCP三次握手](/images/tcp_connect.jpeg)\n\nB的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。\n然后服务器进程就处于`LISTEN`（收听）状态，等待客户的连接请求。如有，即作出响应。\n\nA的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，\n这时首部中的同步位SYN = 1，同时选择一个初始序号seq = x。\nTCP规定，SYN报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。\n这时，TCP客户进程进入`SYN-SENT`（同步已发送）状态。\n\nB收到连接请求报文段后，如同意建立连接，则向A发送确认。\n在确认报文段中应把SYN位和ACK位都置1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。\n请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入`SYN-RCVD`（同步收到）状态。\n\nTCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack = y + 1，而自己的序号seq = x + 1。\nTCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。\n这时，TCP连接已经建立，A进入`ESTABLISHED`（已建立连接）状态。\n\n当B收到A的确认后，也进入`ESTABLISHED`状态。\n\n上面给出的连接建立过程叫做三次握手(three-way handshake)。\n\n为什么A还要发送一次确认呢？这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n\n所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。A发出连接请求，但因连接请求报文丢失而未收到确认。\n于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。\nA共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。没有“已失效的连接请求报文段”。\n\n现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。\n本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。\n于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。\n\n由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。\n但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了。\n\n采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。\n\n## TCP连接四次挥手\n\n数据传输结束后，通信的双方都可释放连接。现在A和B都处于`ESTABLISHED`状态，如下图。\n\n![TCP四次挥手](/images/tcp_close.jpg)\n\nA的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。\nA把连接释放报文段首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节的序号加1。\n这时A进入`FIN-WAIT-1`（终止等待1）状态，等待B的确认。\n\n请注意，TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n\nB收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。\n然后B就进入`CLOSE-WAIT`（关闭等待）状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，\n这时的TCP连接处于半关闭(`half-close`)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。\n也就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n\nA收到来自B的确认后，就进入`FIN-WAIT-2`（终止等待2）状态，等待B发出的连接释放报文段。\n\n若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使FIN = 1。\n现假定B的序号为w（在半关闭状态B可能又发送了一些数据）。B还必须重复上次已发送过的确认号ack = u + 1。\n这时B就进入`LAST-ACK`（最后确认）状态，等待A的确认。\n\nA在收到B的连接释放报文段后，必须对此发出确认。\n在确认报文段中把ACK置1，确认号ack = w + 1，而自己的序号是seq = u + 1（根据TCP标准，前面发送过的FIN报文段要消耗一个序号）。\n然后进入到`TIME-WAIT`（时间等待）状态。请注意，现在TCP连接还没有释放掉。\n必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到`CLOSED`状态。\n\n时间MSL叫做最长报文段寿命(Maximum Segment Lifetime)，RFC 793建议设为2分钟。\n但这完全是从工程上来考虑，对于现在的网络，MSL = 2分钟可能太长了一些。\n因此TCP允许不同的实现可根据具体情况使用更小的MSL值。\n因此，从A进入到`TIME-WAIT`状态后，要经过4分钟才能进入到`CLOSED`状态，才能开始建立下一个新的连接。\n当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接。\n\n为什么A在`TIME-WAIT`状态必须等待2MSL的时间呢？这有两个理由。\n\n第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN + ACK报文段的确认。\nB会超时重传这个FIN + ACK报文段，而A就能在2MSL时间内收到这个重传的FIN + ACK报文段。\n接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到`CLOSED`状态。\n如果A在`TIME-WAIT`状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN + ACK报文段，因而也不会再发送一次确认报文段。\n这样，B就无法按照正常步骤进入`CLOSED`状态。\n\n第二，防止“已失效的连接请求报文段”出现在本连接中。\nA在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。\n这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。\n\nB只要收到了A发出的确认，就进入`CLOSED`状态。同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接。我们注意到，B结束TCP连接的时间要比A早一些。\n上述的TCP连接释放过程是四次挥手。\n除时间等待计时器外，TCP还设有一个保活计时器(keepalive timer)。\n\n设想有这样的情况：客户已主动与服务器建立了TCP连接。但后来客户端的主机突然出故障。\n显然，服务器以后就不能再收到客户发来的数据。因此，应当有措施使服务器不要再白白等待下去。\n这就是使用保活计时器。服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两小时。\n若两小时没有收到客户的数据，服务器就发送一个探测报文段，以后则每隔75分钟发送一次。\n若一连发送10个探测报文段后仍无客户的响应，服务器就认为客户端出了故障，接着就关闭这个连接。\n\n如果B在接收到A的FIN请求后，自己的数据已经发送完毕，B的ACK和FIN可以合并为FIN，也就相当于三次挥手。\n\n参考文献：《计算机网络》谢希仁编著\n","source":"_posts/network/tcp_connect_close.md","raw":"---\nurl: /2020/04/02/tcp-connect-close.html\ntitle: \"TCP 三次握手 四次挥手\"\nkeywords: \"TCP,三次握手,四次挥手\"\ndescription: \"TCP 三次握手 四次挥手\"\ndate: 2020-04-02T20:53:12+08:00\ndraft: false\ntags: [\"TCP\", \"Network\"]\ntags_weight: 100\ncategories: [\"TCP\"]\ncategoryes_weight: 100\n---\n\n## TCP连接三次握手\n\n假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于`CLOSED`（关闭）状态。\n下图中在主机下面的方框分别是TCP进程所处的状态。请注意，A主动打开连接，而B被动打开连接。\n\n![TCP三次握手](/images/tcp_connect.jpeg)\n\nB的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。\n然后服务器进程就处于`LISTEN`（收听）状态，等待客户的连接请求。如有，即作出响应。\n\nA的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，\n这时首部中的同步位SYN = 1，同时选择一个初始序号seq = x。\nTCP规定，SYN报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。\n这时，TCP客户进程进入`SYN-SENT`（同步已发送）状态。\n\nB收到连接请求报文段后，如同意建立连接，则向A发送确认。\n在确认报文段中应把SYN位和ACK位都置1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。\n请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入`SYN-RCVD`（同步收到）状态。\n\nTCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack = y + 1，而自己的序号seq = x + 1。\nTCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。\n这时，TCP连接已经建立，A进入`ESTABLISHED`（已建立连接）状态。\n\n当B收到A的确认后，也进入`ESTABLISHED`状态。\n\n上面给出的连接建立过程叫做三次握手(three-way handshake)。\n\n为什么A还要发送一次确认呢？这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。\n\n所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。A发出连接请求，但因连接请求报文丢失而未收到确认。\n于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。\nA共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。没有“已失效的连接请求报文段”。\n\n现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。\n本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。\n于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。\n\n由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。\n但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了。\n\n采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。\n\n## TCP连接四次挥手\n\n数据传输结束后，通信的双方都可释放连接。现在A和B都处于`ESTABLISHED`状态，如下图。\n\n![TCP四次挥手](/images/tcp_close.jpg)\n\nA的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。\nA把连接释放报文段首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节的序号加1。\n这时A进入`FIN-WAIT-1`（终止等待1）状态，等待B的确认。\n\n请注意，TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。\n\nB收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。\n然后B就进入`CLOSE-WAIT`（关闭等待）状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，\n这时的TCP连接处于半关闭(`half-close`)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。\n也就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。\n\nA收到来自B的确认后，就进入`FIN-WAIT-2`（终止等待2）状态，等待B发出的连接释放报文段。\n\n若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使FIN = 1。\n现假定B的序号为w（在半关闭状态B可能又发送了一些数据）。B还必须重复上次已发送过的确认号ack = u + 1。\n这时B就进入`LAST-ACK`（最后确认）状态，等待A的确认。\n\nA在收到B的连接释放报文段后，必须对此发出确认。\n在确认报文段中把ACK置1，确认号ack = w + 1，而自己的序号是seq = u + 1（根据TCP标准，前面发送过的FIN报文段要消耗一个序号）。\n然后进入到`TIME-WAIT`（时间等待）状态。请注意，现在TCP连接还没有释放掉。\n必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到`CLOSED`状态。\n\n时间MSL叫做最长报文段寿命(Maximum Segment Lifetime)，RFC 793建议设为2分钟。\n但这完全是从工程上来考虑，对于现在的网络，MSL = 2分钟可能太长了一些。\n因此TCP允许不同的实现可根据具体情况使用更小的MSL值。\n因此，从A进入到`TIME-WAIT`状态后，要经过4分钟才能进入到`CLOSED`状态，才能开始建立下一个新的连接。\n当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接。\n\n为什么A在`TIME-WAIT`状态必须等待2MSL的时间呢？这有两个理由。\n\n第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN + ACK报文段的确认。\nB会超时重传这个FIN + ACK报文段，而A就能在2MSL时间内收到这个重传的FIN + ACK报文段。\n接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到`CLOSED`状态。\n如果A在`TIME-WAIT`状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN + ACK报文段，因而也不会再发送一次确认报文段。\n这样，B就无法按照正常步骤进入`CLOSED`状态。\n\n第二，防止“已失效的连接请求报文段”出现在本连接中。\nA在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。\n这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。\n\nB只要收到了A发出的确认，就进入`CLOSED`状态。同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接。我们注意到，B结束TCP连接的时间要比A早一些。\n上述的TCP连接释放过程是四次挥手。\n除时间等待计时器外，TCP还设有一个保活计时器(keepalive timer)。\n\n设想有这样的情况：客户已主动与服务器建立了TCP连接。但后来客户端的主机突然出故障。\n显然，服务器以后就不能再收到客户发来的数据。因此，应当有措施使服务器不要再白白等待下去。\n这就是使用保活计时器。服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两小时。\n若两小时没有收到客户的数据，服务器就发送一个探测报文段，以后则每隔75分钟发送一次。\n若一连发送10个探测报文段后仍无客户的响应，服务器就认为客户端出了故障，接着就关闭这个连接。\n\n如果B在接收到A的FIN请求后，自己的数据已经发送完毕，B的ACK和FIN可以合并为FIN，也就相当于三次挥手。\n\n参考文献：《计算机网络》谢希仁编著\n","slug":"network/tcp_connect_close","published":1,"updated":"2020-05-16T14:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3b0024mv05f58475o4","content":"<h2 id=\"TCP连接三次握手\"><a href=\"#TCP连接三次握手\" class=\"headerlink\" title=\"TCP连接三次握手\"></a>TCP连接三次握手</h2><p>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于<code>CLOSED</code>（关闭）状态。<br>下图中在主机下面的方框分别是TCP进程所处的状态。请注意，A主动打开连接，而B被动打开连接。</p>\n<p><img src=\"/images/tcp_connect.jpeg\" alt=\"TCP三次握手\"></p>\n<p>B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。<br>然后服务器进程就处于<code>LISTEN</code>（收听）状态，等待客户的连接请求。如有，即作出响应。</p>\n<p>A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，<br>这时首部中的同步位SYN = 1，同时选择一个初始序号seq = x。<br>TCP规定，SYN报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。<br>这时，TCP客户进程进入<code>SYN-SENT</code>（同步已发送）状态。</p>\n<p>B收到连接请求报文段后，如同意建立连接，则向A发送确认。<br>在确认报文段中应把SYN位和ACK位都置1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。<br>请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入<code>SYN-RCVD</code>（同步收到）状态。</p>\n<p>TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack = y + 1，而自己的序号seq = x + 1。<br>TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。<br>这时，TCP连接已经建立，A进入<code>ESTABLISHED</code>（已建立连接）状态。</p>\n<p>当B收到A的确认后，也进入<code>ESTABLISHED</code>状态。</p>\n<p>上面给出的连接建立过程叫做三次握手(three-way handshake)。</p>\n<p>为什么A还要发送一次确认呢？这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。</p>\n<p>所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。A发出连接请求，但因连接请求报文丢失而未收到确认。<br>于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。<br>A共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。没有“已失效的连接请求报文段”。</p>\n<p>现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。<br>本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。<br>于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。</p>\n<p>由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。<br>但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了。</p>\n<p>采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。</p>\n<h2 id=\"TCP连接四次挥手\"><a href=\"#TCP连接四次挥手\" class=\"headerlink\" title=\"TCP连接四次挥手\"></a>TCP连接四次挥手</h2><p>数据传输结束后，通信的双方都可释放连接。现在A和B都处于<code>ESTABLISHED</code>状态，如下图。</p>\n<p><img src=\"/images/tcp_close.jpg\" alt=\"TCP四次挥手\"></p>\n<p>A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。<br>A把连接释放报文段首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节的序号加1。<br>这时A进入<code>FIN-WAIT-1</code>（终止等待1）状态，等待B的确认。</p>\n<p>请注意，TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。</p>\n<p>B收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。<br>然后B就进入<code>CLOSE-WAIT</code>（关闭等待）状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，<br>这时的TCP连接处于半关闭(<code>half-close</code>)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。<br>也就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。</p>\n<p>A收到来自B的确认后，就进入<code>FIN-WAIT-2</code>（终止等待2）状态，等待B发出的连接释放报文段。</p>\n<p>若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使FIN = 1。<br>现假定B的序号为w（在半关闭状态B可能又发送了一些数据）。B还必须重复上次已发送过的确认号ack = u + 1。<br>这时B就进入<code>LAST-ACK</code>（最后确认）状态，等待A的确认。</p>\n<p>A在收到B的连接释放报文段后，必须对此发出确认。<br>在确认报文段中把ACK置1，确认号ack = w + 1，而自己的序号是seq = u + 1（根据TCP标准，前面发送过的FIN报文段要消耗一个序号）。<br>然后进入到<code>TIME-WAIT</code>（时间等待）状态。请注意，现在TCP连接还没有释放掉。<br>必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到<code>CLOSED</code>状态。</p>\n<p>时间MSL叫做最长报文段寿命(Maximum Segment Lifetime)，RFC 793建议设为2分钟。<br>但这完全是从工程上来考虑，对于现在的网络，MSL = 2分钟可能太长了一些。<br>因此TCP允许不同的实现可根据具体情况使用更小的MSL值。<br>因此，从A进入到<code>TIME-WAIT</code>状态后，要经过4分钟才能进入到<code>CLOSED</code>状态，才能开始建立下一个新的连接。<br>当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接。</p>\n<p>为什么A在<code>TIME-WAIT</code>状态必须等待2MSL的时间呢？这有两个理由。</p>\n<p>第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN + ACK报文段的确认。<br>B会超时重传这个FIN + ACK报文段，而A就能在2MSL时间内收到这个重传的FIN + ACK报文段。<br>接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到<code>CLOSED</code>状态。<br>如果A在<code>TIME-WAIT</code>状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN + ACK报文段，因而也不会再发送一次确认报文段。<br>这样，B就无法按照正常步骤进入<code>CLOSED</code>状态。</p>\n<p>第二，防止“已失效的连接请求报文段”出现在本连接中。<br>A在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。<br>这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p>\n<p>B只要收到了A发出的确认，就进入<code>CLOSED</code>状态。同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接。我们注意到，B结束TCP连接的时间要比A早一些。<br>上述的TCP连接释放过程是四次挥手。<br>除时间等待计时器外，TCP还设有一个保活计时器(keepalive timer)。</p>\n<p>设想有这样的情况：客户已主动与服务器建立了TCP连接。但后来客户端的主机突然出故障。<br>显然，服务器以后就不能再收到客户发来的数据。因此，应当有措施使服务器不要再白白等待下去。<br>这就是使用保活计时器。服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两小时。<br>若两小时没有收到客户的数据，服务器就发送一个探测报文段，以后则每隔75分钟发送一次。<br>若一连发送10个探测报文段后仍无客户的响应，服务器就认为客户端出了故障，接着就关闭这个连接。</p>\n<p>如果B在接收到A的FIN请求后，自己的数据已经发送完毕，B的ACK和FIN可以合并为FIN，也就相当于三次挥手。</p>\n<p>参考文献：《计算机网络》谢希仁编著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP连接三次握手\"><a href=\"#TCP连接三次握手\" class=\"headerlink\" title=\"TCP连接三次握手\"></a>TCP连接三次握手</h2><p>假定主机A运行的是TCP客户程序，而B运行TCP服务器程序。最初两端的TCP进程都处于<code>CLOSED</code>（关闭）状态。<br>下图中在主机下面的方框分别是TCP进程所处的状态。请注意，A主动打开连接，而B被动打开连接。</p>\n<p><img src=\"/images/tcp_connect.jpeg\" alt=\"TCP三次握手\"></p>\n<p>B的TCP服务器进程先创建传输控制块 TCB，准备接受客户进程的连接请求。<br>然后服务器进程就处于<code>LISTEN</code>（收听）状态，等待客户的连接请求。如有，即作出响应。</p>\n<p>A的TCP客户进程也是首先创建传输控制模块TCB，然后向B发出连接请求报文段，<br>这时首部中的同步位SYN = 1，同时选择一个初始序号seq = x。<br>TCP规定，SYN报文段（即SYN = 1的报文段）不能携带数据，但要消耗掉一个序号。<br>这时，TCP客户进程进入<code>SYN-SENT</code>（同步已发送）状态。</p>\n<p>B收到连接请求报文段后，如同意建立连接，则向A发送确认。<br>在确认报文段中应把SYN位和ACK位都置1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。<br>请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时TCP服务器进程进入<code>SYN-RCVD</code>（同步收到）状态。</p>\n<p>TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1，确认号ack = y + 1，而自己的序号seq = x + 1。<br>TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。<br>这时，TCP连接已经建立，A进入<code>ESTABLISHED</code>（已建立连接）状态。</p>\n<p>当B收到A的确认后，也进入<code>ESTABLISHED</code>状态。</p>\n<p>上面给出的连接建立过程叫做三次握手(three-way handshake)。</p>\n<p>为什么A还要发送一次确认呢？这主要是为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。</p>\n<p>所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。A发出连接请求，但因连接请求报文丢失而未收到确认。<br>于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。<br>A共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。没有“已失效的连接请求报文段”。</p>\n<p>现假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。<br>本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。<br>于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。</p>\n<p>由于现在A并没有发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。<br>但B却以为新的运输连接已经建立了，并一直等待A发来数据。B的许多资源就这样白白浪费了。</p>\n<p>采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接。</p>\n<h2 id=\"TCP连接四次挥手\"><a href=\"#TCP连接四次挥手\" class=\"headerlink\" title=\"TCP连接四次挥手\"></a>TCP连接四次挥手</h2><p>数据传输结束后，通信的双方都可释放连接。现在A和B都处于<code>ESTABLISHED</code>状态，如下图。</p>\n<p><img src=\"/images/tcp_close.jpg\" alt=\"TCP四次挥手\"></p>\n<p>A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。<br>A把连接释放报文段首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节的序号加1。<br>这时A进入<code>FIN-WAIT-1</code>（终止等待1）状态，等待B的确认。</p>\n<p>请注意，TCP规定，FIN报文段即使不携带数据，它也消耗掉一个序号。</p>\n<p>B收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。<br>然后B就进入<code>CLOSE-WAIT</code>（关闭等待）状态。TCP服务器进程这时应通知高层应用进程，因而从A到B这个方向的连接就释放了，<br>这时的TCP连接处于半关闭(<code>half-close</code>)状态，即A已经没有数据要发送了，但B若发送数据，A仍要接收。<br>也就是说，从B到A这个方向的连接并未关闭，这个状态可能会持续一些时间。</p>\n<p>A收到来自B的确认后，就进入<code>FIN-WAIT-2</code>（终止等待2）状态，等待B发出的连接释放报文段。</p>\n<p>若B已经没有要向A发送的数据，其应用进程就通知TCP释放连接。这时B发出的连接释放报文段必须使FIN = 1。<br>现假定B的序号为w（在半关闭状态B可能又发送了一些数据）。B还必须重复上次已发送过的确认号ack = u + 1。<br>这时B就进入<code>LAST-ACK</code>（最后确认）状态，等待A的确认。</p>\n<p>A在收到B的连接释放报文段后，必须对此发出确认。<br>在确认报文段中把ACK置1，确认号ack = w + 1，而自己的序号是seq = u + 1（根据TCP标准，前面发送过的FIN报文段要消耗一个序号）。<br>然后进入到<code>TIME-WAIT</code>（时间等待）状态。请注意，现在TCP连接还没有释放掉。<br>必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到<code>CLOSED</code>状态。</p>\n<p>时间MSL叫做最长报文段寿命(Maximum Segment Lifetime)，RFC 793建议设为2分钟。<br>但这完全是从工程上来考虑，对于现在的网络，MSL = 2分钟可能太长了一些。<br>因此TCP允许不同的实现可根据具体情况使用更小的MSL值。<br>因此，从A进入到<code>TIME-WAIT</code>状态后，要经过4分钟才能进入到<code>CLOSED</code>状态，才能开始建立下一个新的连接。<br>当A撤销相应的传输控制块TCB后，就结束了这次的TCP连接。</p>\n<p>为什么A在<code>TIME-WAIT</code>状态必须等待2MSL的时间呢？这有两个理由。</p>\n<p>第一，为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN + ACK报文段的确认。<br>B会超时重传这个FIN + ACK报文段，而A就能在2MSL时间内收到这个重传的FIN + ACK报文段。<br>接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到<code>CLOSED</code>状态。<br>如果A在<code>TIME-WAIT</code>状态不等待一段时间，而是在发送完ACK报文段后立即释放连接，那么就无法收到B重传的FIN + ACK报文段，因而也不会再发送一次确认报文段。<br>这样，B就无法按照正常步骤进入<code>CLOSED</code>状态。</p>\n<p>第二，防止“已失效的连接请求报文段”出现在本连接中。<br>A在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。<br>这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p>\n<p>B只要收到了A发出的确认，就进入<code>CLOSED</code>状态。同样，B在撤销相应的传输控制块TCB后，就结束了这次的TCP连接。我们注意到，B结束TCP连接的时间要比A早一些。<br>上述的TCP连接释放过程是四次挥手。<br>除时间等待计时器外，TCP还设有一个保活计时器(keepalive timer)。</p>\n<p>设想有这样的情况：客户已主动与服务器建立了TCP连接。但后来客户端的主机突然出故障。<br>显然，服务器以后就不能再收到客户发来的数据。因此，应当有措施使服务器不要再白白等待下去。<br>这就是使用保活计时器。服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两小时。<br>若两小时没有收到客户的数据，服务器就发送一个探测报文段，以后则每隔75分钟发送一次。<br>若一连发送10个探测报文段后仍无客户的响应，服务器就认为客户端出了故障，接着就关闭这个连接。</p>\n<p>如果B在接收到A的FIN请求后，自己的数据已经发送完毕，B的ACK和FIN可以合并为FIN，也就相当于三次挥手。</p>\n<p>参考文献：《计算机网络》谢希仁编著</p>\n"},{"url":"/2020/04/14/tls.html","title":"TLS握手通信","keywords":"TLS握手通信","description":"TLS握手通信","date":"2020-04-14T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## RSA\n\n[阮一峰 RSA算法原理（一）](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n\n[阮一峰 RSA算法原理（二）](http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html)\n\n### 一些数学知识\n\n- 质数\n\n质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数\n\n[百度百科 质数](https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0)\n\n- 互质关系\n\n如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）\n\n互质关系的结论：\n```\n1. 任意两个质数构成互质关系，比如13和61。\n\n2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。\n\n3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。\n\n4. 1和任意一个自然数是都是互质关系，比如1和99。\n\n5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。\n\n6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。\n```\n\n- 欧拉函数\n\n任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？\n\n计算这个值的方法就叫做欧拉函数，以φ(n)表示。\n\n分以下情况讨论\n\n```\n1. 如果n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系。\n\n2. 如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。\n\n3. 如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)，则 φ(p^k) = p^k - p^(k-1) = p^k(1-1/p)。\n例如：φ(8) = φ(2^3) = 2^3 - 2^2 = 8 - 4 = 4。\n\n4. 如果n可以分解成两个互质的整数之积，n = p1 * p2，则 φ(n) = φ(p1p2) = φ(p1)φ(p2)\n\n5. 任意一个大于1的正整数，都可以写成一系列质数的积。φ(n) = n(1-1/p1)(1-1/p2)...(1-1/pr)\n```\n\n- 欧拉定理\n\n如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：`a^φ(n) ≡ 1(mod n)`\n\na的φ(n)次方被n除的余数为1\n\n费马小定理：\n假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：`a^(p-1) ≡ 1(mod p)`\n\n- 模反元素\n\n如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1\n\n`ab ≡ 1(mod n)` b叫做a的模反元素\n\n### RSA算法\n\n假设A与B通信\n\n1. A随机选择两个不相等的质数p和q\n\n这里 p=61 q=53，在实际应用中，这两个质数越大就越难破解\n\n2. 计算p和q的乘积n\n\nn = p*q = 61*53 = 3233\n\nn的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。\n实际应用中，RSA密钥一般是1024位，重要场合则为2048位\n\n3. 计算n的欧拉函数φ(n)\n\nφ(n) = (p-1)(q-1) = 60*52 = 3120\n\n4. 随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质\n\n这里选择 17，实际应用中，常常选择65537\n\n5. 计算e对于φ(n)的模反元素d\n\n`ed ≡ 1 (mod φ(n))` 等价于 `ed - 1 = kφ(n)`\n\n17d - 3120k = 1 (d,k)=(2753,15) d=2753\n\n6. 将n和e封装成公钥，n和d封装成私钥\n\nn=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）\n\n这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏\n\n有无可能在已知n和e的情况下，推导出d？\n\n`ed≡1 (mod φ(n))`。只有知道e和φ(n)，才能算出d。\n\n`φ(n)=(p-1)(q-1)`。只有知道p和q，才能算出φ(n)。\n\nn=pq。只有将n因数分解，才能算出p和q。\n\n如果n可以被因数分解，d就可以算出，也就意味着私钥被破解\n\n对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。\n\n假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。\n\n只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的\n\n- 加密和解密\n\n假设A向B发送信息m，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n\n\nm = 65\n\n`m^e ≡ c (mod n)`\n\nB的公钥是(n,e) (3233, 17)\n\n65^17 ≡ 2790 (mod 3233)\n\nc等于2790，于是A把2790发送给B\n\n解密要用私钥(n,d) (3233, 2753) \n\nB收到2790\n\n`cd ≡ m (mod n)`\n\n2790^2753 ≡ 65 (mod 3233)\n\n因此加密前的原文就是65\n\n## TLS1.2\n\n1. 客户端发送 ClientHello, 包含一个随机数 ClientHello.random。\n\n2. 服务器回复 ServerHello，包含一个随机数 ServerHello.random，同时回复 certificate，携带了证书公钥P。\n\n3. 客户端收到 ServerHello.random 之后，就能够生成 pre_master_secret 以及 master_secret。\n\n  其中，pre_master_secret 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：\n  `Struct {byte Version[2]; bute random[46];}`\n  \n  master_secret 的生成算法简述如下：\n  `master_secret = PRF(pre_master_secret, \"master secret\", ClientHello.random+ServerHello.random)`\n  \n  其中，PRF是一个随机函数，定义如下:\n  `PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)`\n  \n   而 master_secret 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，\n   以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把 pre_master_secret 赋值给 secret， \n   master_key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。\n\n4. 客户端使用证书公钥P将 pre_master_secret 加密后发送给服务器。\n\n5. 服务器使用私钥解密得到 pre_master_secret，又由于服务端之前就接收了 ClientHello.random ，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master_secret。\n\n6. 客户端和服务器使用 master_secret 加密数据通信\n","source":"_posts/network/tls.md","raw":"---\nurl: /2020/04/14/tls.html\ntitle: \"TLS握手通信\"\nkeywords: \"TLS握手通信\"\ndescription: \"TLS握手通信\"\ndate: 2020-04-14T22:53:12+08:00\ndraft: false\ntags: [\"TLS\", \"RSA\", \"Network\"]\ntags_weight: 100\ncategories: [\"TLS\"]\ncategoryes_weight: 100\n---\n\n## RSA\n\n[阮一峰 RSA算法原理（一）](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)\n\n[阮一峰 RSA算法原理（二）](http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html)\n\n### 一些数学知识\n\n- 质数\n\n质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数\n\n[百度百科 质数](https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0)\n\n- 互质关系\n\n如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）\n\n互质关系的结论：\n```\n1. 任意两个质数构成互质关系，比如13和61。\n\n2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。\n\n3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。\n\n4. 1和任意一个自然数是都是互质关系，比如1和99。\n\n5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。\n\n6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。\n```\n\n- 欧拉函数\n\n任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？\n\n计算这个值的方法就叫做欧拉函数，以φ(n)表示。\n\n分以下情况讨论\n\n```\n1. 如果n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系。\n\n2. 如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。\n\n3. 如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)，则 φ(p^k) = p^k - p^(k-1) = p^k(1-1/p)。\n例如：φ(8) = φ(2^3) = 2^3 - 2^2 = 8 - 4 = 4。\n\n4. 如果n可以分解成两个互质的整数之积，n = p1 * p2，则 φ(n) = φ(p1p2) = φ(p1)φ(p2)\n\n5. 任意一个大于1的正整数，都可以写成一系列质数的积。φ(n) = n(1-1/p1)(1-1/p2)...(1-1/pr)\n```\n\n- 欧拉定理\n\n如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：`a^φ(n) ≡ 1(mod n)`\n\na的φ(n)次方被n除的余数为1\n\n费马小定理：\n假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：`a^(p-1) ≡ 1(mod p)`\n\n- 模反元素\n\n如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1\n\n`ab ≡ 1(mod n)` b叫做a的模反元素\n\n### RSA算法\n\n假设A与B通信\n\n1. A随机选择两个不相等的质数p和q\n\n这里 p=61 q=53，在实际应用中，这两个质数越大就越难破解\n\n2. 计算p和q的乘积n\n\nn = p*q = 61*53 = 3233\n\nn的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。\n实际应用中，RSA密钥一般是1024位，重要场合则为2048位\n\n3. 计算n的欧拉函数φ(n)\n\nφ(n) = (p-1)(q-1) = 60*52 = 3120\n\n4. 随机选择一个整数e，条件是1< e < φ(n)，且e与φ(n) 互质\n\n这里选择 17，实际应用中，常常选择65537\n\n5. 计算e对于φ(n)的模反元素d\n\n`ed ≡ 1 (mod φ(n))` 等价于 `ed - 1 = kφ(n)`\n\n17d - 3120k = 1 (d,k)=(2753,15) d=2753\n\n6. 将n和e封装成公钥，n和d封装成私钥\n\nn=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）\n\n这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏\n\n有无可能在已知n和e的情况下，推导出d？\n\n`ed≡1 (mod φ(n))`。只有知道e和φ(n)，才能算出d。\n\n`φ(n)=(p-1)(q-1)`。只有知道p和q，才能算出φ(n)。\n\nn=pq。只有将n因数分解，才能算出p和q。\n\n如果n可以被因数分解，d就可以算出，也就意味着私钥被破解\n\n对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。\n\n假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。\n\n只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的\n\n- 加密和解密\n\n假设A向B发送信息m，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n\n\nm = 65\n\n`m^e ≡ c (mod n)`\n\nB的公钥是(n,e) (3233, 17)\n\n65^17 ≡ 2790 (mod 3233)\n\nc等于2790，于是A把2790发送给B\n\n解密要用私钥(n,d) (3233, 2753) \n\nB收到2790\n\n`cd ≡ m (mod n)`\n\n2790^2753 ≡ 65 (mod 3233)\n\n因此加密前的原文就是65\n\n## TLS1.2\n\n1. 客户端发送 ClientHello, 包含一个随机数 ClientHello.random。\n\n2. 服务器回复 ServerHello，包含一个随机数 ServerHello.random，同时回复 certificate，携带了证书公钥P。\n\n3. 客户端收到 ServerHello.random 之后，就能够生成 pre_master_secret 以及 master_secret。\n\n  其中，pre_master_secret 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：\n  `Struct {byte Version[2]; bute random[46];}`\n  \n  master_secret 的生成算法简述如下：\n  `master_secret = PRF(pre_master_secret, \"master secret\", ClientHello.random+ServerHello.random)`\n  \n  其中，PRF是一个随机函数，定义如下:\n  `PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)`\n  \n   而 master_secret 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，\n   以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把 pre_master_secret 赋值给 secret， \n   master_key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。\n\n4. 客户端使用证书公钥P将 pre_master_secret 加密后发送给服务器。\n\n5. 服务器使用私钥解密得到 pre_master_secret，又由于服务端之前就接收了 ClientHello.random ，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master_secret。\n\n6. 客户端和服务器使用 master_secret 加密数据通信\n","slug":"network/tls","published":1,"updated":"2020-05-16T14:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3d0028mv057j6bd7a3","content":"<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><p><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">阮一峰 RSA算法原理（一）</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html\">阮一峰 RSA算法原理（二）</a></p>\n<h3 id=\"一些数学知识\"><a href=\"#一些数学知识\" class=\"headerlink\" title=\"一些数学知识\"></a>一些数学知识</h3><ul>\n<li>质数</li>\n</ul>\n<p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数</p>\n<p><a href=\"https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0\">百度百科 质数</a></p>\n<ul>\n<li>互质关系</li>\n</ul>\n<p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）</p>\n<p>互质关系的结论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 任意两个质数构成互质关系，比如13和61。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。</span><br><span class=\"line\"></span><br><span class=\"line\">4. 1和任意一个自然数是都是互质关系，比如1和99。</span><br><span class=\"line\"></span><br><span class=\"line\">5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。</span><br><span class=\"line\"></span><br><span class=\"line\">6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>欧拉函数</li>\n</ul>\n<p>任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？</p>\n<p>计算这个值的方法就叫做欧拉函数，以φ(n)表示。</p>\n<p>分以下情况讨论</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 如果n&#x3D;1，则 φ(1) &#x3D; 1 。因为1与任何数（包括自身）都构成互质关系。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 如果n是质数，则 φ(n)&#x3D;n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 如果n是质数的某一个次方，即 n &#x3D; p^k (p为质数，k为大于等于1的整数)，则 φ(p^k) &#x3D; p^k - p^(k-1) &#x3D; p^k(1-1&#x2F;p)。</span><br><span class=\"line\">例如：φ(8) &#x3D; φ(2^3) &#x3D; 2^3 - 2^2 &#x3D; 8 - 4 &#x3D; 4。</span><br><span class=\"line\"></span><br><span class=\"line\">4. 如果n可以分解成两个互质的整数之积，n &#x3D; p1 * p2，则 φ(n) &#x3D; φ(p1p2) &#x3D; φ(p1)φ(p2)</span><br><span class=\"line\"></span><br><span class=\"line\">5. 任意一个大于1的正整数，都可以写成一系列质数的积。φ(n) &#x3D; n(1-1&#x2F;p1)(1-1&#x2F;p2)...(1-1&#x2F;pr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>欧拉定理</li>\n</ul>\n<p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：<code>a^φ(n) ≡ 1(mod n)</code></p>\n<p>a的φ(n)次方被n除的余数为1</p>\n<p>费马小定理：<br>假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：<code>a^(p-1) ≡ 1(mod p)</code></p>\n<ul>\n<li>模反元素</li>\n</ul>\n<p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1</p>\n<p><code>ab ≡ 1(mod n)</code> b叫做a的模反元素</p>\n<h3 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h3><p>假设A与B通信</p>\n<ol>\n<li>A随机选择两个不相等的质数p和q</li>\n</ol>\n<p>这里 p=61 q=53，在实际应用中，这两个质数越大就越难破解</p>\n<ol start=\"2\">\n<li>计算p和q的乘积n</li>\n</ol>\n<p>n = p<em>q = 61</em>53 = 3233</p>\n<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。<br>实际应用中，RSA密钥一般是1024位，重要场合则为2048位</p>\n<ol start=\"3\">\n<li>计算n的欧拉函数φ(n)</li>\n</ol>\n<p>φ(n) = (p-1)(q-1) = 60*52 = 3120</p>\n<ol start=\"4\">\n<li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</li>\n</ol>\n<p>这里选择 17，实际应用中，常常选择65537</p>\n<ol start=\"5\">\n<li>计算e对于φ(n)的模反元素d</li>\n</ol>\n<p><code>ed ≡ 1 (mod φ(n))</code> 等价于 <code>ed - 1 = kφ(n)</code></p>\n<p>17d - 3120k = 1 (d,k)=(2753,15) d=2753</p>\n<ol start=\"6\">\n<li>将n和e封装成公钥，n和d封装成私钥</li>\n</ol>\n<p>n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）</p>\n<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏</p>\n<p>有无可能在已知n和e的情况下，推导出d？</p>\n<p><code>ed≡1 (mod φ(n))</code>。只有知道e和φ(n)，才能算出d。</p>\n<p><code>φ(n)=(p-1)(q-1)</code>。只有知道p和q，才能算出φ(n)。</p>\n<p>n=pq。只有将n因数分解，才能算出p和q。</p>\n<p>如果n可以被因数分解，d就可以算出，也就意味着私钥被破解</p>\n<p>对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。</p>\n<p>假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。</p>\n<p>只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的</p>\n<ul>\n<li>加密和解密</li>\n</ul>\n<p>假设A向B发送信息m，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n</p>\n<p>m = 65</p>\n<p><code>m^e ≡ c (mod n)</code></p>\n<p>B的公钥是(n,e) (3233, 17)</p>\n<p>65^17 ≡ 2790 (mod 3233)</p>\n<p>c等于2790，于是A把2790发送给B</p>\n<p>解密要用私钥(n,d) (3233, 2753) </p>\n<p>B收到2790</p>\n<p><code>cd ≡ m (mod n)</code></p>\n<p>2790^2753 ≡ 65 (mod 3233)</p>\n<p>因此加密前的原文就是65</p>\n<h2 id=\"TLS1-2\"><a href=\"#TLS1-2\" class=\"headerlink\" title=\"TLS1.2\"></a>TLS1.2</h2><ol>\n<li><p>客户端发送 ClientHello, 包含一个随机数 ClientHello.random。</p>\n</li>\n<li><p>服务器回复 ServerHello，包含一个随机数 ServerHello.random，同时回复 certificate，携带了证书公钥P。</p>\n</li>\n<li><p>客户端收到 ServerHello.random 之后，就能够生成 pre_master_secret 以及 master_secret。</p>\n<p>其中，pre_master_secret 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：<br><code>Struct &#123;byte Version[2]; bute random[46];&#125;</code></p>\n<p>master_secret 的生成算法简述如下：<br><code>master_secret = PRF(pre_master_secret, &quot;master secret&quot;, ClientHello.random+ServerHello.random)</code></p>\n<p>其中，PRF是一个随机函数，定义如下:<br><code>PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)</code></p>\n<p>而 master_secret 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，<br>以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把 pre_master_secret 赋值给 secret，<br>master_key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。</p>\n</li>\n<li><p>客户端使用证书公钥P将 pre_master_secret 加密后发送给服务器。</p>\n</li>\n<li><p>服务器使用私钥解密得到 pre_master_secret，又由于服务端之前就接收了 ClientHello.random ，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master_secret。</p>\n</li>\n<li><p>客户端和服务器使用 master_secret 加密数据通信</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><p><a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">阮一峰 RSA算法原理（一）</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html\">阮一峰 RSA算法原理（二）</a></p>\n<h3 id=\"一些数学知识\"><a href=\"#一些数学知识\" class=\"headerlink\" title=\"一些数学知识\"></a>一些数学知识</h3><ul>\n<li>质数</li>\n</ul>\n<p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数</p>\n<p><a href=\"https://baike.baidu.com/item/%E8%B4%A8%E6%95%B0\">百度百科 质数</a></p>\n<ul>\n<li>互质关系</li>\n</ul>\n<p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）</p>\n<p>互质关系的结论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 任意两个质数构成互质关系，比如13和61。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。</span><br><span class=\"line\"></span><br><span class=\"line\">4. 1和任意一个自然数是都是互质关系，比如1和99。</span><br><span class=\"line\"></span><br><span class=\"line\">5. p是大于1的整数，则p和p-1构成互质关系，比如57和56。</span><br><span class=\"line\"></span><br><span class=\"line\">6. p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>欧拉函数</li>\n</ul>\n<p>任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？</p>\n<p>计算这个值的方法就叫做欧拉函数，以φ(n)表示。</p>\n<p>分以下情况讨论</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 如果n&#x3D;1，则 φ(1) &#x3D; 1 。因为1与任何数（包括自身）都构成互质关系。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 如果n是质数，则 φ(n)&#x3D;n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 如果n是质数的某一个次方，即 n &#x3D; p^k (p为质数，k为大于等于1的整数)，则 φ(p^k) &#x3D; p^k - p^(k-1) &#x3D; p^k(1-1&#x2F;p)。</span><br><span class=\"line\">例如：φ(8) &#x3D; φ(2^3) &#x3D; 2^3 - 2^2 &#x3D; 8 - 4 &#x3D; 4。</span><br><span class=\"line\"></span><br><span class=\"line\">4. 如果n可以分解成两个互质的整数之积，n &#x3D; p1 * p2，则 φ(n) &#x3D; φ(p1p2) &#x3D; φ(p1)φ(p2)</span><br><span class=\"line\"></span><br><span class=\"line\">5. 任意一个大于1的正整数，都可以写成一系列质数的积。φ(n) &#x3D; n(1-1&#x2F;p1)(1-1&#x2F;p2)...(1-1&#x2F;pr)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>欧拉定理</li>\n</ul>\n<p>如果两个正整数a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立：<code>a^φ(n) ≡ 1(mod n)</code></p>\n<p>a的φ(n)次方被n除的余数为1</p>\n<p>费马小定理：<br>假设正整数a与质数p互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：<code>a^(p-1) ≡ 1(mod p)</code></p>\n<ul>\n<li>模反元素</li>\n</ul>\n<p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1</p>\n<p><code>ab ≡ 1(mod n)</code> b叫做a的模反元素</p>\n<h3 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h3><p>假设A与B通信</p>\n<ol>\n<li>A随机选择两个不相等的质数p和q</li>\n</ol>\n<p>这里 p=61 q=53，在实际应用中，这两个质数越大就越难破解</p>\n<ol start=\"2\">\n<li>计算p和q的乘积n</li>\n</ol>\n<p>n = p<em>q = 61</em>53 = 3233</p>\n<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。<br>实际应用中，RSA密钥一般是1024位，重要场合则为2048位</p>\n<ol start=\"3\">\n<li>计算n的欧拉函数φ(n)</li>\n</ol>\n<p>φ(n) = (p-1)(q-1) = 60*52 = 3120</p>\n<ol start=\"4\">\n<li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</li>\n</ol>\n<p>这里选择 17，实际应用中，常常选择65537</p>\n<ol start=\"5\">\n<li>计算e对于φ(n)的模反元素d</li>\n</ol>\n<p><code>ed ≡ 1 (mod φ(n))</code> 等价于 <code>ed - 1 = kφ(n)</code></p>\n<p>17d - 3120k = 1 (d,k)=(2753,15) d=2753</p>\n<ol start=\"6\">\n<li>将n和e封装成公钥，n和d封装成私钥</li>\n</ol>\n<p>n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）</p>\n<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏</p>\n<p>有无可能在已知n和e的情况下，推导出d？</p>\n<p><code>ed≡1 (mod φ(n))</code>。只有知道e和φ(n)，才能算出d。</p>\n<p><code>φ(n)=(p-1)(q-1)</code>。只有知道p和q，才能算出φ(n)。</p>\n<p>n=pq。只有将n因数分解，才能算出p和q。</p>\n<p>如果n可以被因数分解，d就可以算出，也就意味着私钥被破解</p>\n<p>对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。</p>\n<p>假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。</p>\n<p>只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的</p>\n<ul>\n<li>加密和解密</li>\n</ul>\n<p>假设A向B发送信息m，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n</p>\n<p>m = 65</p>\n<p><code>m^e ≡ c (mod n)</code></p>\n<p>B的公钥是(n,e) (3233, 17)</p>\n<p>65^17 ≡ 2790 (mod 3233)</p>\n<p>c等于2790，于是A把2790发送给B</p>\n<p>解密要用私钥(n,d) (3233, 2753) </p>\n<p>B收到2790</p>\n<p><code>cd ≡ m (mod n)</code></p>\n<p>2790^2753 ≡ 65 (mod 3233)</p>\n<p>因此加密前的原文就是65</p>\n<h2 id=\"TLS1-2\"><a href=\"#TLS1-2\" class=\"headerlink\" title=\"TLS1.2\"></a>TLS1.2</h2><ol>\n<li><p>客户端发送 ClientHello, 包含一个随机数 ClientHello.random。</p>\n</li>\n<li><p>服务器回复 ServerHello，包含一个随机数 ServerHello.random，同时回复 certificate，携带了证书公钥P。</p>\n</li>\n<li><p>客户端收到 ServerHello.random 之后，就能够生成 pre_master_secret 以及 master_secret。</p>\n<p>其中，pre_master_secret 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：<br><code>Struct &#123;byte Version[2]; bute random[46];&#125;</code></p>\n<p>master_secret 的生成算法简述如下：<br><code>master_secret = PRF(pre_master_secret, &quot;master secret&quot;, ClientHello.random+ServerHello.random)</code></p>\n<p>其中，PRF是一个随机函数，定义如下:<br><code>PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)</code></p>\n<p>而 master_secret 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，<br>以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把 pre_master_secret 赋值给 secret，<br>master_key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。</p>\n</li>\n<li><p>客户端使用证书公钥P将 pre_master_secret 加密后发送给服务器。</p>\n</li>\n<li><p>服务器使用私钥解密得到 pre_master_secret，又由于服务端之前就接收了 ClientHello.random ，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master_secret。</p>\n</li>\n<li><p>客户端和服务器使用 master_secret 加密数据通信</p>\n</li>\n</ol>\n"},{"url":"/2019/10/11/php7-array.html","title":"PHP7数组的实现","keywords":"PHP7数组的实现","description":"PHP7数组的实现","date":"2019-10-11T06:29:21.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## PHP数组是一个有序的字典，它必须同时满足下面两个语义\n\n1. PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。\n\n2. PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。\n\n为了实现语义1，PHP使用 HashTable 来存储 key-value ，但是 HashTable 只能保证语义1\n\n- php使用了带h值的 HashTable\n\n`key/value -> hash1函数 -> h值 -> hash2函数 -> slotN -> bucket()`\n\n示意图：\n\n![示意图](/images/hash_table_h.jpeg)\n\n1. bucket里面增加了 h 字段\n\n2. hash函数拆分成 hash1 和 hash2 函数，hash1 将 key 映射成 h值，hash2 将 h 值映射为 slot 的索引值\n\n3. bucket 里的 key 作为字符串key\n```\nHashTable 的key可能为数字，也可能是字符串，如果是数字那么 h值就代表数字key，如果是字符串，计算出h值，key1和key2比较时\n先比较它们的h值是否相等，如果相等在比较key1和key2是否相等，因为大部分场景，不同字符串的h值都不会相等，这样提高了 HashTable\n的插入、查找速度。\n```\n## 数组的基本结构\n\n```c\ntypedef struct _zend_array zend_array;\ntypedef struct _zend_array HashTable;\n\n//Bucket：散列表中存储的元素\ntypedef struct _Bucket {\n    zval              val; //存储的具体value，这里嵌入了一个zval，而不是一个指针\n    zend_ulong        h;   //key根据times 33计算得到的哈希值，或者是数值索引编号\n    zend_string      *key; //存储元素的key\n} Bucket;\n\n//HashTable结构\ntypedef struct _zend_array HashTable;\nstruct _zend_array {\n    zend_refcounted_h gc;   // 引用计数相关\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4(\n                    zend_uchar    flags,    // \n                    zend_uchar    nApplyCount,  // 递归遍历计数，为了解决循环引用导致死循环的问题\n                    zend_uchar    nIteratorsCount,  // 迭代器计数器\n                    zend_uchar    reserve)\n        } v;\n        uint32_t flags;\n    } u;\n    uint32_t          nTableMask; //哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)\n    Bucket           *arData;     //存储元素数组，指向第一个Bucket（连续的内存）\n    uint32_t          nNumUsed;   //已用Bucket数\n    uint32_t          nNumOfElements; //哈希表有效元素数\n    uint32_t          nTableSize;     //哈希表总大小，为2的n次方\n    uint32_t          nInternalPointer; // 全局游标 与 reset/key/current/next/prev函数有关\n    zend_long         nNextFreeElement; //下一个可用的数值索引,如:arr[] = 1;arr[\"a\"] = 2;arr[] = 3;  则nNextFreeElement = 2;\n    dtor_func_t       pDestructor;  // 析构函数\n};\n\n```\n\n- bucket结构分析\n\n1. val 对应 HashTable 设计中的 value 始终是 zval类型（当zval是 IS_PTR类型时，可以通过 zval.value.ptr（指针）指向任何数据类型）\n\n2. h 对应 HashTable 设计中的 h 表示数字key 或者字符串的 h值\n\n3. key 对应 HashTable 设计中的 key\n\n- bucket按使用分类\n\n1. 未使用 初始化时都是未使用\n\n2. 有效 有数据的bucket\n\n3. 无效 被删除的bucket\n\n数组的示意图：\n\n![示意图](https://github.com/pangudashu/php7-internal/raw/master/img/zend_hash_1.png)\n\n## 为什么 nTableMask 为负数？\n```\nphp7在分配bucket内存的时候，在bucket数组的前面额外多申请了一些内存，这段内存是一个索引数组（索引表），\n数组里面的没一个元素代表一个slot，存放着每个slot链表的第一个bucket在bucket数组中的下标。如果当前slot没有任何bucket元素，\n那么索引值为 -1 。\n\n这里一个巧妙的设计是索引数组仍然通过 HashTable.arData 来引用，由于索引数组和bucket数组是连续的内存，\n因此 arData[0...n-1]表示bucket数组元素，((uint32_t*)(arData))[-1...-n]表示索引数组元素，也就是对应的slot。\n```\n- 为了得到介于[-1...-n]之间的数组下标，hash2函数按照下面来计算的（nIndex 就是 slot 值）\n\n```c\nnIndex = h | ht->nTableMask;\n```\n\n以 nTableSize=8 为例， nTableMask=-8 二进制表示为：\n\n11111111 11111111 11111111 11111000   -8\n\n任何整数和它进行按位或之后的结果只有以下8种，恰好满足 [-n, -1]的取值范围：\n\n```c\n11111111 11111111 11111111 11111000   -8\n11111111 11111111 11111111 11111001   -7\n11111111 11111111 11111111 11111010   -6\n11111111 11111111 11111111 11111011   -5\n11111111 11111111 11111111 11111100   -4\n11111111 11111111 11111111 11111101   -3\n11111111 11111111 11111111 11111110   -2\n11111111 11111111 11111111 11111111   -1\n```\n\n## packed array 和 hash array 的区别\n\n```php\n$a = [1, 2, 3]; // packed array\n$b = ['a' => 'a', 'b' => 'b']; // hash array\n```\n\n1. 内存的本质区别\n\n脚本1：\n\n```php\n<?php\n$memory_start = memory_get_usage();\n$test = [];\nfor ($i = 0; $i <= 20000; $i++) {\n    $test[$i] = 1;\n}\n\necho memory_get_usage() - $memory_start, \"bytes\\n\"; // 1052728bytes\n```\n\n脚本2：\n```php\n<?php\n$memory_start = memory_get_usage();\n$test = [];\nfor ($i = 20000; $i >= 0; $i--) {\n    $test[$i] = 1;\n}\n\necho memory_get_usage() - $memory_start, \"bytes\\n\"; // 1179704bytes\n```\n\n2. packed array\n\n- key全是数字\n\n- key按插入顺序排序，仍然是递增的\n\n- 每个key-value 的存储位置都是确定的，都存在bucket数组的第key个元素上\n\n- 不需要索引索引数组 key=NULL\n\n利用了bucket数组的连续的特点，对于某些只有数字的key的场景进行了优化，由于不在需要索引数组，\n从内存空间上节省了 (nTableSize-2) * sizeof(uint32_t) 个字节，直接操作bucket数组，性能也有所提升。\n\n## hash冲突解决 \n\n链地址法(php采用) 开放地址法，链地址法就是将同一个slot中的bucket通过链表连接起来\n\nhash array 的做法是，不单独维护一个双链表，而是把每个冲突的 idx 存储在 bucket 的 zval.u2.next 中，\n插入的时候把老的value存储的地址(idx)放到新的value的next中，再把新的value的存储地址更新到索引数组中。\n\n假如 第1、2、3个bucket发生hash冲突\n\n1. 插入第1个bucket，对应的 nIndex=-3 那么此时 nIndex=-3 的位置为1\n\n2. 插入第2个bucket，对应的 nIndex=-3，与第1个冲突，令 nIndex=-3 的位置为2，同时将第2个bucket中\nzval 的 u2.next=1，这样在查找第1个bucket的key对应的 nIndex时，找到第2个bucket，校验 key值不同，\n取 u2.next 的值 1，取第1个bucket中的内容，校验key一致，返回\n\n3. 插入第3个bucket，与第1 2 冲突，同样 令 nIndex=-3 的位置为3 同时将第3个bucket中zval 的 u2.next=2\n\n## 扩容和 rehash 操作\n\n数组再重置一个key时并不会真正触发删除操作，只是做一个标识，删除是在扩容和重进索引时触发\n\n1. hash array 的容量的分配是固定的，初始化的时每次申请的是 2^n 的容量，范围为 2^3 - 0x80000000\n\n2. 当容量足够时直接执行插入操作\n\n3. 当容量不够时(nNumUsed >= nTableSize)，检查已删除元素所占的比例，假如达到阈值，则将已删除的元素从HashTable中移除\n并重建索引，如果未达到阈值则进行扩容，扩容为当前大小的2倍，将当前的bucket复制到新的空间，然后重建索引。\n\n4. 重建索引后，有足够空余空间后再执行插入操作。\n\n## zval 的基本结构\n\n```c\n//zend_types.h\ntypedef struct _zval_struct     zval;\n\ntypedef union _zend_value {\n    zend_long         lval;    //int整形\n    double            dval;    //浮点型\n    zend_refcounted  *counted;\n    zend_string      *str;     //string字符串\n    zend_array       *arr;     //array数组\n    zend_object      *obj;     //object对象\n    zend_resource    *res;     //resource资源类型\n    zend_reference   *ref;     //引用类型，通过&$var_name定义的\n    zend_ast_ref     *ast;     //下面几个都是内核使用的value\n    zval             *zv;       // zval 类型\n    void             *ptr;      // 指针类型，可以指向任何类型\n    zend_class_entry *ce;       // class 类型\n    zend_function    *func;     // function 类型\n    struct {\n        uint32_t w1;\n        uint32_t w2;\n    } ww;\n} zend_value;\n\nstruct _zval_struct {\n    zend_value        value; //变量实际的value\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4( //这个是为了兼容大小字节序，小字节序就是下面的顺序，大字节序则下面4个顺序翻转\n                zend_uchar    type,         //变量类型\n                zend_uchar    type_flags,  //类型掩码，不同的类型会有不同的几种属性，内存管理会用到\n                zend_uchar    const_flags,  // 常量类型的标记\n                zend_uchar    reserved)     //call info，zend执行流程会用到\n        } v;\n        uint32_t type_info; //上面4个值的组合值，可以直接根据type_info取到4个对应位置的值\n    } u1;\n    union {\n        uint32_t     next;                 //哈希表中解决哈希冲突时用到，记录冲突的下一个位置\n        uint32_t     cache_slot;           /* 运行时的缓存 */\n        uint32_t     lineno;               /* 对于zend_ast_zval存行号应用在AST节点上 */\n        uint32_t     num_args;             /* EX(This) 函数调用时传入的参数个数 */\n        uint32_t     fe_pos;               /* foreach 的位置 每执行一次 +1 再次调用 foreach 重置*/\n        uint32_t     fe_iter_idx;          /* foreach 游标的标记 针对的是对象 */\n        uint32_t     access_flags;          /* 对象类的访问标记 public protected private */\n        uint32_t     property_guard;          /* 单一属性保护 防止类中魔术方法的循环调用 */\n    } u2;\n};\n\n```\n\n## String 的结构\n\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* 避免了在数组操作中hash值的重复计算 */\n\tsize_t            len;  // 已使用的内存字符串长度，可以保证二进制读取安全 '\\0'\n\tchar              val[1];       // 柔性数组\n};\n```\n","source":"_posts/php/php7-array.md","raw":"---\nurl: /2019/10/11/php7-array.html\ntitle: \"PHP7数组的实现\"\nkeywords: \"PHP7数组的实现\"\ndescription: \"PHP7数组的实现\"\ndate: 2019-10-11T22:29:21+08:00\ndraft: false\ntags: [\"PHP\"]\ntags_weight: 100\ncategories: [\"PHP\"]\ncategoryes_weight: 100\n---\n\n## PHP数组是一个有序的字典，它必须同时满足下面两个语义\n\n1. PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。\n\n2. PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。\n\n为了实现语义1，PHP使用 HashTable 来存储 key-value ，但是 HashTable 只能保证语义1\n\n- php使用了带h值的 HashTable\n\n`key/value -> hash1函数 -> h值 -> hash2函数 -> slotN -> bucket()`\n\n示意图：\n\n![示意图](/images/hash_table_h.jpeg)\n\n1. bucket里面增加了 h 字段\n\n2. hash函数拆分成 hash1 和 hash2 函数，hash1 将 key 映射成 h值，hash2 将 h 值映射为 slot 的索引值\n\n3. bucket 里的 key 作为字符串key\n```\nHashTable 的key可能为数字，也可能是字符串，如果是数字那么 h值就代表数字key，如果是字符串，计算出h值，key1和key2比较时\n先比较它们的h值是否相等，如果相等在比较key1和key2是否相等，因为大部分场景，不同字符串的h值都不会相等，这样提高了 HashTable\n的插入、查找速度。\n```\n## 数组的基本结构\n\n```c\ntypedef struct _zend_array zend_array;\ntypedef struct _zend_array HashTable;\n\n//Bucket：散列表中存储的元素\ntypedef struct _Bucket {\n    zval              val; //存储的具体value，这里嵌入了一个zval，而不是一个指针\n    zend_ulong        h;   //key根据times 33计算得到的哈希值，或者是数值索引编号\n    zend_string      *key; //存储元素的key\n} Bucket;\n\n//HashTable结构\ntypedef struct _zend_array HashTable;\nstruct _zend_array {\n    zend_refcounted_h gc;   // 引用计数相关\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4(\n                    zend_uchar    flags,    // \n                    zend_uchar    nApplyCount,  // 递归遍历计数，为了解决循环引用导致死循环的问题\n                    zend_uchar    nIteratorsCount,  // 迭代器计数器\n                    zend_uchar    reserve)\n        } v;\n        uint32_t flags;\n    } u;\n    uint32_t          nTableMask; //哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)\n    Bucket           *arData;     //存储元素数组，指向第一个Bucket（连续的内存）\n    uint32_t          nNumUsed;   //已用Bucket数\n    uint32_t          nNumOfElements; //哈希表有效元素数\n    uint32_t          nTableSize;     //哈希表总大小，为2的n次方\n    uint32_t          nInternalPointer; // 全局游标 与 reset/key/current/next/prev函数有关\n    zend_long         nNextFreeElement; //下一个可用的数值索引,如:arr[] = 1;arr[\"a\"] = 2;arr[] = 3;  则nNextFreeElement = 2;\n    dtor_func_t       pDestructor;  // 析构函数\n};\n\n```\n\n- bucket结构分析\n\n1. val 对应 HashTable 设计中的 value 始终是 zval类型（当zval是 IS_PTR类型时，可以通过 zval.value.ptr（指针）指向任何数据类型）\n\n2. h 对应 HashTable 设计中的 h 表示数字key 或者字符串的 h值\n\n3. key 对应 HashTable 设计中的 key\n\n- bucket按使用分类\n\n1. 未使用 初始化时都是未使用\n\n2. 有效 有数据的bucket\n\n3. 无效 被删除的bucket\n\n数组的示意图：\n\n![示意图](https://github.com/pangudashu/php7-internal/raw/master/img/zend_hash_1.png)\n\n## 为什么 nTableMask 为负数？\n```\nphp7在分配bucket内存的时候，在bucket数组的前面额外多申请了一些内存，这段内存是一个索引数组（索引表），\n数组里面的没一个元素代表一个slot，存放着每个slot链表的第一个bucket在bucket数组中的下标。如果当前slot没有任何bucket元素，\n那么索引值为 -1 。\n\n这里一个巧妙的设计是索引数组仍然通过 HashTable.arData 来引用，由于索引数组和bucket数组是连续的内存，\n因此 arData[0...n-1]表示bucket数组元素，((uint32_t*)(arData))[-1...-n]表示索引数组元素，也就是对应的slot。\n```\n- 为了得到介于[-1...-n]之间的数组下标，hash2函数按照下面来计算的（nIndex 就是 slot 值）\n\n```c\nnIndex = h | ht->nTableMask;\n```\n\n以 nTableSize=8 为例， nTableMask=-8 二进制表示为：\n\n11111111 11111111 11111111 11111000   -8\n\n任何整数和它进行按位或之后的结果只有以下8种，恰好满足 [-n, -1]的取值范围：\n\n```c\n11111111 11111111 11111111 11111000   -8\n11111111 11111111 11111111 11111001   -7\n11111111 11111111 11111111 11111010   -6\n11111111 11111111 11111111 11111011   -5\n11111111 11111111 11111111 11111100   -4\n11111111 11111111 11111111 11111101   -3\n11111111 11111111 11111111 11111110   -2\n11111111 11111111 11111111 11111111   -1\n```\n\n## packed array 和 hash array 的区别\n\n```php\n$a = [1, 2, 3]; // packed array\n$b = ['a' => 'a', 'b' => 'b']; // hash array\n```\n\n1. 内存的本质区别\n\n脚本1：\n\n```php\n<?php\n$memory_start = memory_get_usage();\n$test = [];\nfor ($i = 0; $i <= 20000; $i++) {\n    $test[$i] = 1;\n}\n\necho memory_get_usage() - $memory_start, \"bytes\\n\"; // 1052728bytes\n```\n\n脚本2：\n```php\n<?php\n$memory_start = memory_get_usage();\n$test = [];\nfor ($i = 20000; $i >= 0; $i--) {\n    $test[$i] = 1;\n}\n\necho memory_get_usage() - $memory_start, \"bytes\\n\"; // 1179704bytes\n```\n\n2. packed array\n\n- key全是数字\n\n- key按插入顺序排序，仍然是递增的\n\n- 每个key-value 的存储位置都是确定的，都存在bucket数组的第key个元素上\n\n- 不需要索引索引数组 key=NULL\n\n利用了bucket数组的连续的特点，对于某些只有数字的key的场景进行了优化，由于不在需要索引数组，\n从内存空间上节省了 (nTableSize-2) * sizeof(uint32_t) 个字节，直接操作bucket数组，性能也有所提升。\n\n## hash冲突解决 \n\n链地址法(php采用) 开放地址法，链地址法就是将同一个slot中的bucket通过链表连接起来\n\nhash array 的做法是，不单独维护一个双链表，而是把每个冲突的 idx 存储在 bucket 的 zval.u2.next 中，\n插入的时候把老的value存储的地址(idx)放到新的value的next中，再把新的value的存储地址更新到索引数组中。\n\n假如 第1、2、3个bucket发生hash冲突\n\n1. 插入第1个bucket，对应的 nIndex=-3 那么此时 nIndex=-3 的位置为1\n\n2. 插入第2个bucket，对应的 nIndex=-3，与第1个冲突，令 nIndex=-3 的位置为2，同时将第2个bucket中\nzval 的 u2.next=1，这样在查找第1个bucket的key对应的 nIndex时，找到第2个bucket，校验 key值不同，\n取 u2.next 的值 1，取第1个bucket中的内容，校验key一致，返回\n\n3. 插入第3个bucket，与第1 2 冲突，同样 令 nIndex=-3 的位置为3 同时将第3个bucket中zval 的 u2.next=2\n\n## 扩容和 rehash 操作\n\n数组再重置一个key时并不会真正触发删除操作，只是做一个标识，删除是在扩容和重进索引时触发\n\n1. hash array 的容量的分配是固定的，初始化的时每次申请的是 2^n 的容量，范围为 2^3 - 0x80000000\n\n2. 当容量足够时直接执行插入操作\n\n3. 当容量不够时(nNumUsed >= nTableSize)，检查已删除元素所占的比例，假如达到阈值，则将已删除的元素从HashTable中移除\n并重建索引，如果未达到阈值则进行扩容，扩容为当前大小的2倍，将当前的bucket复制到新的空间，然后重建索引。\n\n4. 重建索引后，有足够空余空间后再执行插入操作。\n\n## zval 的基本结构\n\n```c\n//zend_types.h\ntypedef struct _zval_struct     zval;\n\ntypedef union _zend_value {\n    zend_long         lval;    //int整形\n    double            dval;    //浮点型\n    zend_refcounted  *counted;\n    zend_string      *str;     //string字符串\n    zend_array       *arr;     //array数组\n    zend_object      *obj;     //object对象\n    zend_resource    *res;     //resource资源类型\n    zend_reference   *ref;     //引用类型，通过&$var_name定义的\n    zend_ast_ref     *ast;     //下面几个都是内核使用的value\n    zval             *zv;       // zval 类型\n    void             *ptr;      // 指针类型，可以指向任何类型\n    zend_class_entry *ce;       // class 类型\n    zend_function    *func;     // function 类型\n    struct {\n        uint32_t w1;\n        uint32_t w2;\n    } ww;\n} zend_value;\n\nstruct _zval_struct {\n    zend_value        value; //变量实际的value\n    union {\n        struct {\n            ZEND_ENDIAN_LOHI_4( //这个是为了兼容大小字节序，小字节序就是下面的顺序，大字节序则下面4个顺序翻转\n                zend_uchar    type,         //变量类型\n                zend_uchar    type_flags,  //类型掩码，不同的类型会有不同的几种属性，内存管理会用到\n                zend_uchar    const_flags,  // 常量类型的标记\n                zend_uchar    reserved)     //call info，zend执行流程会用到\n        } v;\n        uint32_t type_info; //上面4个值的组合值，可以直接根据type_info取到4个对应位置的值\n    } u1;\n    union {\n        uint32_t     next;                 //哈希表中解决哈希冲突时用到，记录冲突的下一个位置\n        uint32_t     cache_slot;           /* 运行时的缓存 */\n        uint32_t     lineno;               /* 对于zend_ast_zval存行号应用在AST节点上 */\n        uint32_t     num_args;             /* EX(This) 函数调用时传入的参数个数 */\n        uint32_t     fe_pos;               /* foreach 的位置 每执行一次 +1 再次调用 foreach 重置*/\n        uint32_t     fe_iter_idx;          /* foreach 游标的标记 针对的是对象 */\n        uint32_t     access_flags;          /* 对象类的访问标记 public protected private */\n        uint32_t     property_guard;          /* 单一属性保护 防止类中魔术方法的循环调用 */\n    } u2;\n};\n\n```\n\n## String 的结构\n\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* 避免了在数组操作中hash值的重复计算 */\n\tsize_t            len;  // 已使用的内存字符串长度，可以保证二进制读取安全 '\\0'\n\tchar              val[1];       // 柔性数组\n};\n```\n","slug":"php/php7-array","published":1,"updated":"2020-04-02T13:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3e002cmv05exzlfdnw","content":"<h2 id=\"PHP数组是一个有序的字典，它必须同时满足下面两个语义\"><a href=\"#PHP数组是一个有序的字典，它必须同时满足下面两个语义\" class=\"headerlink\" title=\"PHP数组是一个有序的字典，它必须同时满足下面两个语义\"></a>PHP数组是一个有序的字典，它必须同时满足下面两个语义</h2><ol>\n<li><p>PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。</p>\n</li>\n<li><p>PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。</p>\n</li>\n</ol>\n<p>为了实现语义1，PHP使用 HashTable 来存储 key-value ，但是 HashTable 只能保证语义1</p>\n<ul>\n<li>php使用了带h值的 HashTable</li>\n</ul>\n<p><code>key/value -&gt; hash1函数 -&gt; h值 -&gt; hash2函数 -&gt; slotN -&gt; bucket()</code></p>\n<p>示意图：</p>\n<p><img src=\"/images/hash_table_h.jpeg\" alt=\"示意图\"></p>\n<ol>\n<li><p>bucket里面增加了 h 字段</p>\n</li>\n<li><p>hash函数拆分成 hash1 和 hash2 函数，hash1 将 key 映射成 h值，hash2 将 h 值映射为 slot 的索引值</p>\n</li>\n<li><p>bucket 里的 key 作为字符串key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashTable 的key可能为数字，也可能是字符串，如果是数字那么 h值就代表数字key，如果是字符串，计算出h值，key1和key2比较时</span><br><span class=\"line\">先比较它们的h值是否相等，如果相等在比较key1和key2是否相等，因为大部分场景，不同字符串的h值都不会相等，这样提高了 HashTable</span><br><span class=\"line\">的插入、查找速度。</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组的基本结构\"><a href=\"#数组的基本结构\" class=\"headerlink\" title=\"数组的基本结构\"></a>数组的基本结构</h2></li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">zend_array</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Bucket：散列表中存储的元素</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Bucket</span> &#123;</span></span><br><span class=\"line\">    zval              val; <span class=\"comment\">//存储的具体value，这里嵌入了一个zval，而不是一个指针</span></span><br><span class=\"line\">    zend_ulong        h;   <span class=\"comment\">//key根据times 33计算得到的哈希值，或者是数值索引编号</span></span><br><span class=\"line\">    zend_string      *key; <span class=\"comment\">//存储元素的key</span></span><br><span class=\"line\">&#125; Bucket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//HashTable结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> &#123;</span></span><br><span class=\"line\">    zend_refcounted_h gc;   <span class=\"comment\">// 引用计数相关</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">                    zend_uchar    flags,    <span class=\"comment\">// </span></span><br><span class=\"line\">                    zend_uchar    nApplyCount,  <span class=\"comment\">// 递归遍历计数，为了解决循环引用导致死循环的问题</span></span><br><span class=\"line\">                    zend_uchar    nIteratorsCount,  <span class=\"comment\">// 迭代器计数器</span></span><br><span class=\"line\">                    zend_uchar    reserve)</span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> flags;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nTableMask; <span class=\"comment\">//哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span><br><span class=\"line\">    Bucket           *arData;     <span class=\"comment\">//存储元素数组，指向第一个Bucket（连续的内存）</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nNumUsed;   <span class=\"comment\">//已用Bucket数</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nNumOfElements; <span class=\"comment\">//哈希表有效元素数</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nTableSize;     <span class=\"comment\">//哈希表总大小，为2的n次方</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nInternalPointer; <span class=\"comment\">// 全局游标 与 reset/key/current/next/prev函数有关</span></span><br><span class=\"line\">    zend_long         nNextFreeElement; <span class=\"comment\">//下一个可用的数值索引,如:arr[] = 1;arr[&quot;a&quot;] = 2;arr[] = 3;  则nNextFreeElement = 2;</span></span><br><span class=\"line\">    <span class=\"keyword\">dtor_func_t</span>       pDestructor;  <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bucket结构分析</li>\n</ul>\n<ol>\n<li><p>val 对应 HashTable 设计中的 value 始终是 zval类型（当zval是 IS_PTR类型时，可以通过 zval.value.ptr（指针）指向任何数据类型）</p>\n</li>\n<li><p>h 对应 HashTable 设计中的 h 表示数字key 或者字符串的 h值</p>\n</li>\n<li><p>key 对应 HashTable 设计中的 key</p>\n</li>\n</ol>\n<ul>\n<li>bucket按使用分类</li>\n</ul>\n<ol>\n<li><p>未使用 初始化时都是未使用</p>\n</li>\n<li><p>有效 有数据的bucket</p>\n</li>\n<li><p>无效 被删除的bucket</p>\n</li>\n</ol>\n<p>数组的示意图：</p>\n<p><img src=\"https://github.com/pangudashu/php7-internal/raw/master/img/zend_hash_1.png\" alt=\"示意图\"></p>\n<h2 id=\"为什么-nTableMask-为负数？\"><a href=\"#为什么-nTableMask-为负数？\" class=\"headerlink\" title=\"为什么 nTableMask 为负数？\"></a>为什么 nTableMask 为负数？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7在分配bucket内存的时候，在bucket数组的前面额外多申请了一些内存，这段内存是一个索引数组（索引表），</span><br><span class=\"line\">数组里面的没一个元素代表一个slot，存放着每个slot链表的第一个bucket在bucket数组中的下标。如果当前slot没有任何bucket元素，</span><br><span class=\"line\">那么索引值为 -1 。</span><br><span class=\"line\"></span><br><span class=\"line\">这里一个巧妙的设计是索引数组仍然通过 HashTable.arData 来引用，由于索引数组和bucket数组是连续的内存，</span><br><span class=\"line\">因此 arData[0...n-1]表示bucket数组元素，((uint32_t*)(arData))[-1...-n]表示索引数组元素，也就是对应的slot。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了得到介于[-1…-n]之间的数组下标，hash2函数按照下面来计算的（nIndex 就是 slot 值）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nIndex = h | ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure>\n\n<p>以 nTableSize=8 为例， nTableMask=-8 二进制表示为：</p>\n<p>11111111 11111111 11111111 11111000   -8</p>\n<p>任何整数和它进行按位或之后的结果只有以下8种，恰好满足 [-n, -1]的取值范围：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111000</span>   <span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111001</span>   <span class=\"number\">-7</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111010</span>   <span class=\"number\">-6</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111011</span>   <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111100</span>   <span class=\"number\">-4</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111101</span>   <span class=\"number\">-3</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111110</span>   <span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span>   <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"packed-array-和-hash-array-的区别\"><a href=\"#packed-array-和-hash-array-的区别\" class=\"headerlink\" title=\"packed array 和 hash array 的区别\"></a>packed array 和 hash array 的区别</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// packed array</span></span><br><span class=\"line\">$b = [<span class=\"string\">&#x27;a&#x27;</span> =&gt; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span> =&gt; <span class=\"string\">&#x27;b&#x27;</span>]; <span class=\"comment\">// hash array</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>内存的本质区别</li>\n</ol>\n<p>脚本1：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$memory_start = memory_get_usage();</span><br><span class=\"line\">$test = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt;= <span class=\"number\">20000</span>; $i++) &#123;</span><br><span class=\"line\">    $test[$i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() - $memory_start, <span class=\"string\">&quot;bytes\\n&quot;</span>; <span class=\"comment\">// 1052728bytes</span></span><br></pre></td></tr></table></figure>\n\n<p>脚本2：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$memory_start = memory_get_usage();</span><br><span class=\"line\">$test = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">20000</span>; $i &gt;= <span class=\"number\">0</span>; $i--) &#123;</span><br><span class=\"line\">    $test[$i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() - $memory_start, <span class=\"string\">&quot;bytes\\n&quot;</span>; <span class=\"comment\">// 1179704bytes</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>packed array</li>\n</ol>\n<ul>\n<li><p>key全是数字</p>\n</li>\n<li><p>key按插入顺序排序，仍然是递增的</p>\n</li>\n<li><p>每个key-value 的存储位置都是确定的，都存在bucket数组的第key个元素上</p>\n</li>\n<li><p>不需要索引索引数组 key=NULL</p>\n</li>\n</ul>\n<p>利用了bucket数组的连续的特点，对于某些只有数字的key的场景进行了优化，由于不在需要索引数组，<br>从内存空间上节省了 (nTableSize-2) * sizeof(uint32_t) 个字节，直接操作bucket数组，性能也有所提升。</p>\n<h2 id=\"hash冲突解决\"><a href=\"#hash冲突解决\" class=\"headerlink\" title=\"hash冲突解决\"></a>hash冲突解决</h2><p>链地址法(php采用) 开放地址法，链地址法就是将同一个slot中的bucket通过链表连接起来</p>\n<p>hash array 的做法是，不单独维护一个双链表，而是把每个冲突的 idx 存储在 bucket 的 zval.u2.next 中，<br>插入的时候把老的value存储的地址(idx)放到新的value的next中，再把新的value的存储地址更新到索引数组中。</p>\n<p>假如 第1、2、3个bucket发生hash冲突</p>\n<ol>\n<li><p>插入第1个bucket，对应的 nIndex=-3 那么此时 nIndex=-3 的位置为1</p>\n</li>\n<li><p>插入第2个bucket，对应的 nIndex=-3，与第1个冲突，令 nIndex=-3 的位置为2，同时将第2个bucket中<br>zval 的 u2.next=1，这样在查找第1个bucket的key对应的 nIndex时，找到第2个bucket，校验 key值不同，<br>取 u2.next 的值 1，取第1个bucket中的内容，校验key一致，返回</p>\n</li>\n<li><p>插入第3个bucket，与第1 2 冲突，同样 令 nIndex=-3 的位置为3 同时将第3个bucket中zval 的 u2.next=2</p>\n</li>\n</ol>\n<h2 id=\"扩容和-rehash-操作\"><a href=\"#扩容和-rehash-操作\" class=\"headerlink\" title=\"扩容和 rehash 操作\"></a>扩容和 rehash 操作</h2><p>数组再重置一个key时并不会真正触发删除操作，只是做一个标识，删除是在扩容和重进索引时触发</p>\n<ol>\n<li><p>hash array 的容量的分配是固定的，初始化的时每次申请的是 2^n 的容量，范围为 2^3 - 0x80000000</p>\n</li>\n<li><p>当容量足够时直接执行插入操作</p>\n</li>\n<li><p>当容量不够时(nNumUsed &gt;= nTableSize)，检查已删除元素所占的比例，假如达到阈值，则将已删除的元素从HashTable中移除<br>并重建索引，如果未达到阈值则进行扩容，扩容为当前大小的2倍，将当前的bucket复制到新的空间，然后重建索引。</p>\n</li>\n<li><p>重建索引后，有足够空余空间后再执行插入操作。</p>\n</li>\n</ol>\n<h2 id=\"zval-的基本结构\"><a href=\"#zval-的基本结构\" class=\"headerlink\" title=\"zval 的基本结构\"></a>zval 的基本结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zend_types.h</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zval_struct</span>     <span class=\"title\">zval</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> _<span class=\"title\">zend_value</span> &#123;</span></span><br><span class=\"line\">    zend_long         lval;    <span class=\"comment\">//int整形</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span>            dval;    <span class=\"comment\">//浮点型</span></span><br><span class=\"line\">    zend_refcounted  *counted;</span><br><span class=\"line\">    zend_string      *str;     <span class=\"comment\">//string字符串</span></span><br><span class=\"line\">    zend_array       *arr;     <span class=\"comment\">//array数组</span></span><br><span class=\"line\">    zend_object      *obj;     <span class=\"comment\">//object对象</span></span><br><span class=\"line\">    zend_resource    *res;     <span class=\"comment\">//resource资源类型</span></span><br><span class=\"line\">    zend_reference   *ref;     <span class=\"comment\">//引用类型，通过&amp;$var_name定义的</span></span><br><span class=\"line\">    zend_ast_ref     *ast;     <span class=\"comment\">//下面几个都是内核使用的value</span></span><br><span class=\"line\">    zval             *zv;       <span class=\"comment\">// zval 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span>             *ptr;      <span class=\"comment\">// 指针类型，可以指向任何类型</span></span><br><span class=\"line\">    zend_class_entry *ce;       <span class=\"comment\">// class 类型</span></span><br><span class=\"line\">    zend_function    *func;     <span class=\"comment\">// function 类型</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> w1;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> w2;</span><br><span class=\"line\">    &#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zval_struct</span> &#123;</span></span><br><span class=\"line\">    zend_value        value; <span class=\"comment\">//变量实际的value</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4( <span class=\"comment\">//这个是为了兼容大小字节序，小字节序就是下面的顺序，大字节序则下面4个顺序翻转</span></span><br><span class=\"line\">                zend_uchar    type,         <span class=\"comment\">//变量类型</span></span><br><span class=\"line\">                zend_uchar    type_flags,  <span class=\"comment\">//类型掩码，不同的类型会有不同的几种属性，内存管理会用到</span></span><br><span class=\"line\">                zend_uchar    const_flags,  <span class=\"comment\">// 常量类型的标记</span></span><br><span class=\"line\">                zend_uchar    reserved)     <span class=\"comment\">//call info，zend执行流程会用到</span></span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> type_info; <span class=\"comment\">//上面4个值的组合值，可以直接根据type_info取到4个对应位置的值</span></span><br><span class=\"line\">    &#125; u1;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">//哈希表中解决哈希冲突时用到，记录冲突的下一个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* 运行时的缓存 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* 对于zend_ast_zval存行号应用在AST节点上 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* EX(This) 函数调用时传入的参数个数 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach 的位置 每执行一次 +1 再次调用 foreach 重置*/</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach 游标的标记 针对的是对象 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     access_flags;          <span class=\"comment\">/* 对象类的访问标记 public protected private */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     property_guard;          <span class=\"comment\">/* 单一属性保护 防止类中魔术方法的循环调用 */</span></span><br><span class=\"line\">    &#125; u2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-的结构\"><a href=\"#String-的结构\" class=\"headerlink\" title=\"String 的结构\"></a>String 的结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_string</span> &#123;</span></span><br><span class=\"line\">\tzend_refcounted_h gc;</span><br><span class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* 避免了在数组操作中hash值的重复计算 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>            len;  <span class=\"comment\">// 已使用的内存字符串长度，可以保证二进制读取安全 &#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];       <span class=\"comment\">// 柔性数组</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"PHP数组是一个有序的字典，它必须同时满足下面两个语义\"><a href=\"#PHP数组是一个有序的字典，它必须同时满足下面两个语义\" class=\"headerlink\" title=\"PHP数组是一个有序的字典，它必须同时满足下面两个语义\"></a>PHP数组是一个有序的字典，它必须同时满足下面两个语义</h2><ol>\n<li><p>PHP数组是一个字典，存储着键-值（key-value）对，通过键可以快速地找到对应的值，键可以是整形、字符串。</p>\n</li>\n<li><p>PHP数组是有序的，这个有序是指插入顺序，即遍历数组的时候，遍历元素的顺序应该和插入的顺序一致。</p>\n</li>\n</ol>\n<p>为了实现语义1，PHP使用 HashTable 来存储 key-value ，但是 HashTable 只能保证语义1</p>\n<ul>\n<li>php使用了带h值的 HashTable</li>\n</ul>\n<p><code>key/value -&gt; hash1函数 -&gt; h值 -&gt; hash2函数 -&gt; slotN -&gt; bucket()</code></p>\n<p>示意图：</p>\n<p><img src=\"/images/hash_table_h.jpeg\" alt=\"示意图\"></p>\n<ol>\n<li><p>bucket里面增加了 h 字段</p>\n</li>\n<li><p>hash函数拆分成 hash1 和 hash2 函数，hash1 将 key 映射成 h值，hash2 将 h 值映射为 slot 的索引值</p>\n</li>\n<li><p>bucket 里的 key 作为字符串key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashTable 的key可能为数字，也可能是字符串，如果是数字那么 h值就代表数字key，如果是字符串，计算出h值，key1和key2比较时</span><br><span class=\"line\">先比较它们的h值是否相等，如果相等在比较key1和key2是否相等，因为大部分场景，不同字符串的h值都不会相等，这样提高了 HashTable</span><br><span class=\"line\">的插入、查找速度。</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组的基本结构\"><a href=\"#数组的基本结构\" class=\"headerlink\" title=\"数组的基本结构\"></a>数组的基本结构</h2></li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">zend_array</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Bucket：散列表中存储的元素</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Bucket</span> &#123;</span></span><br><span class=\"line\">    zval              val; <span class=\"comment\">//存储的具体value，这里嵌入了一个zval，而不是一个指针</span></span><br><span class=\"line\">    zend_ulong        h;   <span class=\"comment\">//key根据times 33计算得到的哈希值，或者是数值索引编号</span></span><br><span class=\"line\">    zend_string      *key; <span class=\"comment\">//存储元素的key</span></span><br><span class=\"line\">&#125; Bucket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//HashTable结构</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> <span class=\"title\">HashTable</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_array</span> &#123;</span></span><br><span class=\"line\">    zend_refcounted_h gc;   <span class=\"comment\">// 引用计数相关</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">                    zend_uchar    flags,    <span class=\"comment\">// </span></span><br><span class=\"line\">                    zend_uchar    nApplyCount,  <span class=\"comment\">// 递归遍历计数，为了解决循环引用导致死循环的问题</span></span><br><span class=\"line\">                    zend_uchar    nIteratorsCount,  <span class=\"comment\">// 迭代器计数器</span></span><br><span class=\"line\">                    zend_uchar    reserve)</span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> flags;</span><br><span class=\"line\">    &#125; u;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nTableMask; <span class=\"comment\">//哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span><br><span class=\"line\">    Bucket           *arData;     <span class=\"comment\">//存储元素数组，指向第一个Bucket（连续的内存）</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nNumUsed;   <span class=\"comment\">//已用Bucket数</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nNumOfElements; <span class=\"comment\">//哈希表有效元素数</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nTableSize;     <span class=\"comment\">//哈希表总大小，为2的n次方</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span>          nInternalPointer; <span class=\"comment\">// 全局游标 与 reset/key/current/next/prev函数有关</span></span><br><span class=\"line\">    zend_long         nNextFreeElement; <span class=\"comment\">//下一个可用的数值索引,如:arr[] = 1;arr[&quot;a&quot;] = 2;arr[] = 3;  则nNextFreeElement = 2;</span></span><br><span class=\"line\">    <span class=\"keyword\">dtor_func_t</span>       pDestructor;  <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>bucket结构分析</li>\n</ul>\n<ol>\n<li><p>val 对应 HashTable 设计中的 value 始终是 zval类型（当zval是 IS_PTR类型时，可以通过 zval.value.ptr（指针）指向任何数据类型）</p>\n</li>\n<li><p>h 对应 HashTable 设计中的 h 表示数字key 或者字符串的 h值</p>\n</li>\n<li><p>key 对应 HashTable 设计中的 key</p>\n</li>\n</ol>\n<ul>\n<li>bucket按使用分类</li>\n</ul>\n<ol>\n<li><p>未使用 初始化时都是未使用</p>\n</li>\n<li><p>有效 有数据的bucket</p>\n</li>\n<li><p>无效 被删除的bucket</p>\n</li>\n</ol>\n<p>数组的示意图：</p>\n<p><img src=\"https://github.com/pangudashu/php7-internal/raw/master/img/zend_hash_1.png\" alt=\"示意图\"></p>\n<h2 id=\"为什么-nTableMask-为负数？\"><a href=\"#为什么-nTableMask-为负数？\" class=\"headerlink\" title=\"为什么 nTableMask 为负数？\"></a>为什么 nTableMask 为负数？</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php7在分配bucket内存的时候，在bucket数组的前面额外多申请了一些内存，这段内存是一个索引数组（索引表），</span><br><span class=\"line\">数组里面的没一个元素代表一个slot，存放着每个slot链表的第一个bucket在bucket数组中的下标。如果当前slot没有任何bucket元素，</span><br><span class=\"line\">那么索引值为 -1 。</span><br><span class=\"line\"></span><br><span class=\"line\">这里一个巧妙的设计是索引数组仍然通过 HashTable.arData 来引用，由于索引数组和bucket数组是连续的内存，</span><br><span class=\"line\">因此 arData[0...n-1]表示bucket数组元素，((uint32_t*)(arData))[-1...-n]表示索引数组元素，也就是对应的slot。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了得到介于[-1…-n]之间的数组下标，hash2函数按照下面来计算的（nIndex 就是 slot 值）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nIndex = h | ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure>\n\n<p>以 nTableSize=8 为例， nTableMask=-8 二进制表示为：</p>\n<p>11111111 11111111 11111111 11111000   -8</p>\n<p>任何整数和它进行按位或之后的结果只有以下8种，恰好满足 [-n, -1]的取值范围：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111000</span>   <span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111001</span>   <span class=\"number\">-7</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111010</span>   <span class=\"number\">-6</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111011</span>   <span class=\"number\">-5</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111100</span>   <span class=\"number\">-4</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111101</span>   <span class=\"number\">-3</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111110</span>   <span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span> <span class=\"number\">11111111</span>   <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"packed-array-和-hash-array-的区别\"><a href=\"#packed-array-和-hash-array-的区别\" class=\"headerlink\" title=\"packed array 和 hash array 的区别\"></a>packed array 和 hash array 的区别</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// packed array</span></span><br><span class=\"line\">$b = [<span class=\"string\">&#x27;a&#x27;</span> =&gt; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span> =&gt; <span class=\"string\">&#x27;b&#x27;</span>]; <span class=\"comment\">// hash array</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>内存的本质区别</li>\n</ol>\n<p>脚本1：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$memory_start = memory_get_usage();</span><br><span class=\"line\">$test = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt;= <span class=\"number\">20000</span>; $i++) &#123;</span><br><span class=\"line\">    $test[$i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() - $memory_start, <span class=\"string\">&quot;bytes\\n&quot;</span>; <span class=\"comment\">// 1052728bytes</span></span><br></pre></td></tr></table></figure>\n\n<p>脚本2：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$memory_start = memory_get_usage();</span><br><span class=\"line\">$test = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($i = <span class=\"number\">20000</span>; $i &gt;= <span class=\"number\">0</span>; $i--) &#123;</span><br><span class=\"line\">    $test[$i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> memory_get_usage() - $memory_start, <span class=\"string\">&quot;bytes\\n&quot;</span>; <span class=\"comment\">// 1179704bytes</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>packed array</li>\n</ol>\n<ul>\n<li><p>key全是数字</p>\n</li>\n<li><p>key按插入顺序排序，仍然是递增的</p>\n</li>\n<li><p>每个key-value 的存储位置都是确定的，都存在bucket数组的第key个元素上</p>\n</li>\n<li><p>不需要索引索引数组 key=NULL</p>\n</li>\n</ul>\n<p>利用了bucket数组的连续的特点，对于某些只有数字的key的场景进行了优化，由于不在需要索引数组，<br>从内存空间上节省了 (nTableSize-2) * sizeof(uint32_t) 个字节，直接操作bucket数组，性能也有所提升。</p>\n<h2 id=\"hash冲突解决\"><a href=\"#hash冲突解决\" class=\"headerlink\" title=\"hash冲突解决\"></a>hash冲突解决</h2><p>链地址法(php采用) 开放地址法，链地址法就是将同一个slot中的bucket通过链表连接起来</p>\n<p>hash array 的做法是，不单独维护一个双链表，而是把每个冲突的 idx 存储在 bucket 的 zval.u2.next 中，<br>插入的时候把老的value存储的地址(idx)放到新的value的next中，再把新的value的存储地址更新到索引数组中。</p>\n<p>假如 第1、2、3个bucket发生hash冲突</p>\n<ol>\n<li><p>插入第1个bucket，对应的 nIndex=-3 那么此时 nIndex=-3 的位置为1</p>\n</li>\n<li><p>插入第2个bucket，对应的 nIndex=-3，与第1个冲突，令 nIndex=-3 的位置为2，同时将第2个bucket中<br>zval 的 u2.next=1，这样在查找第1个bucket的key对应的 nIndex时，找到第2个bucket，校验 key值不同，<br>取 u2.next 的值 1，取第1个bucket中的内容，校验key一致，返回</p>\n</li>\n<li><p>插入第3个bucket，与第1 2 冲突，同样 令 nIndex=-3 的位置为3 同时将第3个bucket中zval 的 u2.next=2</p>\n</li>\n</ol>\n<h2 id=\"扩容和-rehash-操作\"><a href=\"#扩容和-rehash-操作\" class=\"headerlink\" title=\"扩容和 rehash 操作\"></a>扩容和 rehash 操作</h2><p>数组再重置一个key时并不会真正触发删除操作，只是做一个标识，删除是在扩容和重进索引时触发</p>\n<ol>\n<li><p>hash array 的容量的分配是固定的，初始化的时每次申请的是 2^n 的容量，范围为 2^3 - 0x80000000</p>\n</li>\n<li><p>当容量足够时直接执行插入操作</p>\n</li>\n<li><p>当容量不够时(nNumUsed &gt;= nTableSize)，检查已删除元素所占的比例，假如达到阈值，则将已删除的元素从HashTable中移除<br>并重建索引，如果未达到阈值则进行扩容，扩容为当前大小的2倍，将当前的bucket复制到新的空间，然后重建索引。</p>\n</li>\n<li><p>重建索引后，有足够空余空间后再执行插入操作。</p>\n</li>\n</ol>\n<h2 id=\"zval-的基本结构\"><a href=\"#zval-的基本结构\" class=\"headerlink\" title=\"zval 的基本结构\"></a>zval 的基本结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//zend_types.h</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zval_struct</span>     <span class=\"title\">zval</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> _<span class=\"title\">zend_value</span> &#123;</span></span><br><span class=\"line\">    zend_long         lval;    <span class=\"comment\">//int整形</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span>            dval;    <span class=\"comment\">//浮点型</span></span><br><span class=\"line\">    zend_refcounted  *counted;</span><br><span class=\"line\">    zend_string      *str;     <span class=\"comment\">//string字符串</span></span><br><span class=\"line\">    zend_array       *arr;     <span class=\"comment\">//array数组</span></span><br><span class=\"line\">    zend_object      *obj;     <span class=\"comment\">//object对象</span></span><br><span class=\"line\">    zend_resource    *res;     <span class=\"comment\">//resource资源类型</span></span><br><span class=\"line\">    zend_reference   *ref;     <span class=\"comment\">//引用类型，通过&amp;$var_name定义的</span></span><br><span class=\"line\">    zend_ast_ref     *ast;     <span class=\"comment\">//下面几个都是内核使用的value</span></span><br><span class=\"line\">    zval             *zv;       <span class=\"comment\">// zval 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span>             *ptr;      <span class=\"comment\">// 指针类型，可以指向任何类型</span></span><br><span class=\"line\">    zend_class_entry *ce;       <span class=\"comment\">// class 类型</span></span><br><span class=\"line\">    zend_function    *func;     <span class=\"comment\">// function 类型</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> w1;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> w2;</span><br><span class=\"line\">    &#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zval_struct</span> &#123;</span></span><br><span class=\"line\">    zend_value        value; <span class=\"comment\">//变量实际的value</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">            ZEND_ENDIAN_LOHI_4( <span class=\"comment\">//这个是为了兼容大小字节序，小字节序就是下面的顺序，大字节序则下面4个顺序翻转</span></span><br><span class=\"line\">                zend_uchar    type,         <span class=\"comment\">//变量类型</span></span><br><span class=\"line\">                zend_uchar    type_flags,  <span class=\"comment\">//类型掩码，不同的类型会有不同的几种属性，内存管理会用到</span></span><br><span class=\"line\">                zend_uchar    const_flags,  <span class=\"comment\">// 常量类型的标记</span></span><br><span class=\"line\">                zend_uchar    reserved)     <span class=\"comment\">//call info，zend执行流程会用到</span></span><br><span class=\"line\">        &#125; v;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> type_info; <span class=\"comment\">//上面4个值的组合值，可以直接根据type_info取到4个对应位置的值</span></span><br><span class=\"line\">    &#125; u1;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">//哈希表中解决哈希冲突时用到，记录冲突的下一个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* 运行时的缓存 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* 对于zend_ast_zval存行号应用在AST节点上 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* EX(This) 函数调用时传入的参数个数 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach 的位置 每执行一次 +1 再次调用 foreach 重置*/</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach 游标的标记 针对的是对象 */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     access_flags;          <span class=\"comment\">/* 对象类的访问标记 public protected private */</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>     property_guard;          <span class=\"comment\">/* 单一属性保护 防止类中魔术方法的循环调用 */</span></span><br><span class=\"line\">    &#125; u2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-的结构\"><a href=\"#String-的结构\" class=\"headerlink\" title=\"String 的结构\"></a>String 的结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">zend_string</span> &#123;</span></span><br><span class=\"line\">\tzend_refcounted_h gc;</span><br><span class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* 避免了在数组操作中hash值的重复计算 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>            len;  <span class=\"comment\">// 已使用的内存字符串长度，可以保证二进制读取安全 &#x27;\\0&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];       <span class=\"comment\">// 柔性数组</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2017/12/20/php-spl-datastructures.html","title":"PHP Spl Datastructures","date":"2017-12-19T22:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"[PHP文档](https://www.php.net/manual/zh/spl.datastructures.php)\n\n```\n这里主要学习，PHP SPL 提供了一套标准的数据结构。\n它们按底层实现进行分组, 通常定义了它们的一般应用领域\n```\n\n## SplDoublyLinkedList\n\n双向链表\n\n```php\n<?php\n$dlist = new SplDoublyLinkedList();\n\n// 末端压入\n$dlist->push('hiramariam');\n$dlist->push('maaz');\n$dlist->push('zafar');\n\n// 首端压入\n$dlist->unshift(1);\n$dlist->unshift(2);\n$dlist->unshift(3);\n\n/* the list now contains\n3\n2\n1\nhiramariam\nmaaz\nzafar\n*/\n\necho $dlist->pop() . PHP_EOL; // zafar\necho $dlist->shift() . PHP_EOL; // 3\n\n$dlist->add(3, 2.24);\n\nfor ($dlist->rewind(); $dlist->valid(); $dlist->next()) {\n\n    echo $dlist->current() . PHP_EOL;\n}\n\n\n$list = new SplDoublyLinkedList();\n$list->push('a');\n$list->push('b');\n$list->push('c');\n\necho 'FIFO (First In First Out) :' . PHP_EOL;\n$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO);\nfor ($list->rewind(); $list->valid(); $list->next()) {\n    echo $list->current() . PHP_EOL;\n}\necho \"LIFO (Last In First Out) :\" . PHP_EOL;\n$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO);\nfor ($list->rewind(); $list->valid(); $list->next()) {\n    echo $list->current() . PHP_EOL;\n}\n\necho 'test While:' . PHP_EOL;\n$splDoubleLinkedList = new SplDoublyLinkedList();\n$splDoubleLinkedList->push('a');\n$splDoubleLinkedList->push('3');\n$splDoubleLinkedList->push('v');\n//First of all, we need rewind list\n$splDoubleLinkedList->rewind();\n//Use while, check if the list has valid node\nwhile ($splDoubleLinkedList->valid()) {\n    //Print current node's value\n    echo $splDoubleLinkedList->current() . PHP_EOL;\n    //Turn the cursor to next node\n    $splDoubleLinkedList->next();\n}\n```\n\n## SplFileObject\n\n解析文件用的，f*函数\n\n```php\n<?php\ntry{\n    // iterate directly over the object\n    foreach( new SplFileObject(__DIR__.'/spl_file.log') as $line)\n    // and echo each line of the file\n    echo $line;\n}\ncatch (Exception $e)\n{\n    echo $e->getMessage();\n}\n\ntry{\n    $file = new SplFileObject(__DIR__.'/spl_file.log');\n\n    $file->seek(3);\n\n    echo $file->current();\n}\ncatch (Exception $e)\n{\n    echo $e->getMessage();\n}\n```\n\n## SplFixedArray\n\n一个固定长度的数组\n\n```php\n<?php\n// Initialize the array with a fixed length\n$array = new SplFixedArray(5);\n\n$array[1] = 2;\n$array[4] = \"foo\";\n\nvar_dump($array[0]); // NULL\nvar_dump($array[1]); // int(2)\n\nvar_dump($array[\"4\"]); // string(3) \"foo\"\n\n// Increase the size of the array to 10\n$array->setSize(10);\n\n$array[9] = \"asdf\";\nvar_dump($array[9]);\n\n// Shrink the array to a size of 2\n$array->setSize(2);\n\n// The following lines throw a RuntimeException: Index invalid or out of range\ntry {\n    var_dump($array[\"non-numeric\"]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n\ntry {\n    var_dump($array[-1]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n\ntry {\n    var_dump($array[5]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n```\n\n## SplHeap\n\n堆的实现\n\n```php\n<?php\nclass JupilerLeague extends SplHeap\n{\n    /**\n     * We modify the abstract method compare so we can sort our\n     * rankings using the values of a given array\n     */\n    public function compare($array1, $array2)\n    {\n        $values1 = array_values($array1);\n        $values2 = array_values($array2);\n        if ($values1[0] === $values2[0]) {\n            return 0;\n        }\n        return $values1[0] < $values2[0] ? -1 : 1;\n    }\n}\n\n$heap = new JupilerLeague();\n$heap->insert(['AA Gent' => 15]);\n$heap->insert(['Anderlecht' => 20]);\n$heap->insert(['Cercle Brugge' => 11]);\n\n// For displaying the ranking we move up to the first node\n$heap->top();\n\n// Then we iterate through each node for displaying the result\nwhile ($heap->valid()) {\n    foreach ($heap->current() as $team => $score) {\n        echo $team . ': ' . $score . PHP_EOL;\n    }\n    $heap->next();\n}\n```\n\n## SplMaxHeap\n\n顶部最大堆\n\n```php\nclass MySimpleHeap extends SplMaxHeap\n{\n\n}\n\n$obj = new MySimpleHeap();\n$obj->insert(4);\n$obj->insert(8);\n$obj->insert(1);\n$obj->insert(0);\n\nforeach ($obj as $number) {\n    echo $number . PHP_EOL;\n}\n```\n\n## MySimpleHeap\n\n顶部最小堆\n\n```php\n<?php\nclass MySimpleHeap extends SplMinHeap\n{\n\n}\n\n$obj = new MySimpleHeap();\n$obj->insert(4);\n$obj->insert(8);\n$obj->insert(1);\n$obj->insert(0);\n\nforeach ($obj as $number) {\n    echo $number . PHP_EOL;\n}\n```\n\n## SplStack\n\n栈，通过使用一个双向链表来提供栈的主要功能\n\n```php\n$q = new SplStack();\n\n$q[] = 1;\n$q[] = 2;\n$q[] = 3;\n$q->push(4);\n$q->add(4, 5);\n\n$q->rewind();\nwhile ($q->valid()) {\n    echo $q->current(), \"\\n\";\n    $q->next();\n}\n\nclass Stack\n{\n\n    private $splstack;\n\n    function __construct(\\SplStack $splstack)\n    {\n        $this->splstack = $splstack;\n    }\n\n    public function calculateSomme()\n    {\n\n        if ($this->splstack->count() > 1) {\n            $val1 = $this->splstack->pop();\n            $val2 = $this->splstack->pop();\n            $val = $val1 + $val2;\n            $this->splstack->push($val);\n            $this->calculateSomme();\n        }\n    }\n\n    /**\n     *\n     * @return integer\n     */\n    public function displaySomme()\n    {\n        $result = $this->splstack->pop();\n        return $result;\n    }\n\n}\n\n$splstack = new \\SplStack();\n\n$splstack->push(10);\n$splstack->push(10);\n$splstack->push(10);\n\n$stack = new Stack($splstack);\n$stack->calculateSomme();\necho $stack->displaySomme() . PHP_EOL; // 30\n\n$stack = new SplStack();\n$stack->push('a');\n$stack->push('b');\n$stack->push('c');\necho $stack->offsetGet(0);\n$stack->offsetSet(0, 'C'); # the last element has index zero\n\n$stack->rewind();\n\nwhile ($stack->valid()) {\n    echo $stack->current(), PHP_EOL;\n    $stack->next();\n}\n```\n\n## SplQueue\n\n队列，通过使用一个双向链表来提供队列的主要功能\n\n```php\n<?php\n$queue = new SplQueue();\n$queue->enqueue('A');\n$queue->enqueue('B');\n$queue->enqueue('C');\n\n$queue->rewind();\nwhile($queue->valid()){\n    echo $queue->current(),\"\\n\";\n    $queue->next();\n}\necho $queue->dequeue(); //remove first one\n```\n\n## SplPriorityQueue\n\n优先队列\n\n```php\n<?php\nclass PQtest extends SplPriorityQueue\n{\n    public function compare($priority1, $priority2)\n    {\n        if ($priority1 === $priority2) {\n            return 0;\n        }\n        return $priority1 < $priority2 ? -1 : 1;\n    }\n}\n\n$objPQ = new PQtest();\n\n$objPQ->insert('A', 3);\n$objPQ->insert('B', 6);\n$objPQ->insert('C', 1);\n$objPQ->insert('D', 2);\n\necho \"COUNT->\" . $objPQ->count() . PHP_EOL;\n\n//mode of extraction\n$objPQ->setExtractFlags(PQtest::EXTR_BOTH);\n\n//Go to TOP\n$objPQ->top();\n\nwhile ($objPQ->valid()) {\n    $value = $objPQ->current();\n    echo 'data->' . $value['data'] . '==priority->' . $value['priority'] . PHP_EOL;\n    $objPQ->next();\n}\n```\n","source":"_posts/php/spl-datastructures.md","raw":"---\nurl: /2017/12/20/php-spl-datastructures.html\ntitle: \"PHP Spl Datastructures\"\ndate: 2017-12-20T14:53:12+08:00\ndraft: false\ntags: [\"PHP\"]\ntags_weight: 100\ncategories: [\"PHP\"]\ncategoryes_weight: 100\n---\n[PHP文档](https://www.php.net/manual/zh/spl.datastructures.php)\n\n```\n这里主要学习，PHP SPL 提供了一套标准的数据结构。\n它们按底层实现进行分组, 通常定义了它们的一般应用领域\n```\n\n## SplDoublyLinkedList\n\n双向链表\n\n```php\n<?php\n$dlist = new SplDoublyLinkedList();\n\n// 末端压入\n$dlist->push('hiramariam');\n$dlist->push('maaz');\n$dlist->push('zafar');\n\n// 首端压入\n$dlist->unshift(1);\n$dlist->unshift(2);\n$dlist->unshift(3);\n\n/* the list now contains\n3\n2\n1\nhiramariam\nmaaz\nzafar\n*/\n\necho $dlist->pop() . PHP_EOL; // zafar\necho $dlist->shift() . PHP_EOL; // 3\n\n$dlist->add(3, 2.24);\n\nfor ($dlist->rewind(); $dlist->valid(); $dlist->next()) {\n\n    echo $dlist->current() . PHP_EOL;\n}\n\n\n$list = new SplDoublyLinkedList();\n$list->push('a');\n$list->push('b');\n$list->push('c');\n\necho 'FIFO (First In First Out) :' . PHP_EOL;\n$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO);\nfor ($list->rewind(); $list->valid(); $list->next()) {\n    echo $list->current() . PHP_EOL;\n}\necho \"LIFO (Last In First Out) :\" . PHP_EOL;\n$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO);\nfor ($list->rewind(); $list->valid(); $list->next()) {\n    echo $list->current() . PHP_EOL;\n}\n\necho 'test While:' . PHP_EOL;\n$splDoubleLinkedList = new SplDoublyLinkedList();\n$splDoubleLinkedList->push('a');\n$splDoubleLinkedList->push('3');\n$splDoubleLinkedList->push('v');\n//First of all, we need rewind list\n$splDoubleLinkedList->rewind();\n//Use while, check if the list has valid node\nwhile ($splDoubleLinkedList->valid()) {\n    //Print current node's value\n    echo $splDoubleLinkedList->current() . PHP_EOL;\n    //Turn the cursor to next node\n    $splDoubleLinkedList->next();\n}\n```\n\n## SplFileObject\n\n解析文件用的，f*函数\n\n```php\n<?php\ntry{\n    // iterate directly over the object\n    foreach( new SplFileObject(__DIR__.'/spl_file.log') as $line)\n    // and echo each line of the file\n    echo $line;\n}\ncatch (Exception $e)\n{\n    echo $e->getMessage();\n}\n\ntry{\n    $file = new SplFileObject(__DIR__.'/spl_file.log');\n\n    $file->seek(3);\n\n    echo $file->current();\n}\ncatch (Exception $e)\n{\n    echo $e->getMessage();\n}\n```\n\n## SplFixedArray\n\n一个固定长度的数组\n\n```php\n<?php\n// Initialize the array with a fixed length\n$array = new SplFixedArray(5);\n\n$array[1] = 2;\n$array[4] = \"foo\";\n\nvar_dump($array[0]); // NULL\nvar_dump($array[1]); // int(2)\n\nvar_dump($array[\"4\"]); // string(3) \"foo\"\n\n// Increase the size of the array to 10\n$array->setSize(10);\n\n$array[9] = \"asdf\";\nvar_dump($array[9]);\n\n// Shrink the array to a size of 2\n$array->setSize(2);\n\n// The following lines throw a RuntimeException: Index invalid or out of range\ntry {\n    var_dump($array[\"non-numeric\"]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n\ntry {\n    var_dump($array[-1]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n\ntry {\n    var_dump($array[5]);\n} catch (RuntimeException $re) {\n    echo \"RuntimeException: \" . $re->getMessage() . \"\\n\";\n}\n```\n\n## SplHeap\n\n堆的实现\n\n```php\n<?php\nclass JupilerLeague extends SplHeap\n{\n    /**\n     * We modify the abstract method compare so we can sort our\n     * rankings using the values of a given array\n     */\n    public function compare($array1, $array2)\n    {\n        $values1 = array_values($array1);\n        $values2 = array_values($array2);\n        if ($values1[0] === $values2[0]) {\n            return 0;\n        }\n        return $values1[0] < $values2[0] ? -1 : 1;\n    }\n}\n\n$heap = new JupilerLeague();\n$heap->insert(['AA Gent' => 15]);\n$heap->insert(['Anderlecht' => 20]);\n$heap->insert(['Cercle Brugge' => 11]);\n\n// For displaying the ranking we move up to the first node\n$heap->top();\n\n// Then we iterate through each node for displaying the result\nwhile ($heap->valid()) {\n    foreach ($heap->current() as $team => $score) {\n        echo $team . ': ' . $score . PHP_EOL;\n    }\n    $heap->next();\n}\n```\n\n## SplMaxHeap\n\n顶部最大堆\n\n```php\nclass MySimpleHeap extends SplMaxHeap\n{\n\n}\n\n$obj = new MySimpleHeap();\n$obj->insert(4);\n$obj->insert(8);\n$obj->insert(1);\n$obj->insert(0);\n\nforeach ($obj as $number) {\n    echo $number . PHP_EOL;\n}\n```\n\n## MySimpleHeap\n\n顶部最小堆\n\n```php\n<?php\nclass MySimpleHeap extends SplMinHeap\n{\n\n}\n\n$obj = new MySimpleHeap();\n$obj->insert(4);\n$obj->insert(8);\n$obj->insert(1);\n$obj->insert(0);\n\nforeach ($obj as $number) {\n    echo $number . PHP_EOL;\n}\n```\n\n## SplStack\n\n栈，通过使用一个双向链表来提供栈的主要功能\n\n```php\n$q = new SplStack();\n\n$q[] = 1;\n$q[] = 2;\n$q[] = 3;\n$q->push(4);\n$q->add(4, 5);\n\n$q->rewind();\nwhile ($q->valid()) {\n    echo $q->current(), \"\\n\";\n    $q->next();\n}\n\nclass Stack\n{\n\n    private $splstack;\n\n    function __construct(\\SplStack $splstack)\n    {\n        $this->splstack = $splstack;\n    }\n\n    public function calculateSomme()\n    {\n\n        if ($this->splstack->count() > 1) {\n            $val1 = $this->splstack->pop();\n            $val2 = $this->splstack->pop();\n            $val = $val1 + $val2;\n            $this->splstack->push($val);\n            $this->calculateSomme();\n        }\n    }\n\n    /**\n     *\n     * @return integer\n     */\n    public function displaySomme()\n    {\n        $result = $this->splstack->pop();\n        return $result;\n    }\n\n}\n\n$splstack = new \\SplStack();\n\n$splstack->push(10);\n$splstack->push(10);\n$splstack->push(10);\n\n$stack = new Stack($splstack);\n$stack->calculateSomme();\necho $stack->displaySomme() . PHP_EOL; // 30\n\n$stack = new SplStack();\n$stack->push('a');\n$stack->push('b');\n$stack->push('c');\necho $stack->offsetGet(0);\n$stack->offsetSet(0, 'C'); # the last element has index zero\n\n$stack->rewind();\n\nwhile ($stack->valid()) {\n    echo $stack->current(), PHP_EOL;\n    $stack->next();\n}\n```\n\n## SplQueue\n\n队列，通过使用一个双向链表来提供队列的主要功能\n\n```php\n<?php\n$queue = new SplQueue();\n$queue->enqueue('A');\n$queue->enqueue('B');\n$queue->enqueue('C');\n\n$queue->rewind();\nwhile($queue->valid()){\n    echo $queue->current(),\"\\n\";\n    $queue->next();\n}\necho $queue->dequeue(); //remove first one\n```\n\n## SplPriorityQueue\n\n优先队列\n\n```php\n<?php\nclass PQtest extends SplPriorityQueue\n{\n    public function compare($priority1, $priority2)\n    {\n        if ($priority1 === $priority2) {\n            return 0;\n        }\n        return $priority1 < $priority2 ? -1 : 1;\n    }\n}\n\n$objPQ = new PQtest();\n\n$objPQ->insert('A', 3);\n$objPQ->insert('B', 6);\n$objPQ->insert('C', 1);\n$objPQ->insert('D', 2);\n\necho \"COUNT->\" . $objPQ->count() . PHP_EOL;\n\n//mode of extraction\n$objPQ->setExtractFlags(PQtest::EXTR_BOTH);\n\n//Go to TOP\n$objPQ->top();\n\nwhile ($objPQ->valid()) {\n    $value = $objPQ->current();\n    echo 'data->' . $value['data'] . '==priority->' . $value['priority'] . PHP_EOL;\n    $objPQ->next();\n}\n```\n","slug":"php/spl-datastructures","published":1,"updated":"2020-03-26T12:33:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3g002gmv05eiqlhv7u","content":"<p><a href=\"https://www.php.net/manual/zh/spl.datastructures.php\">PHP文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里主要学习，PHP SPL 提供了一套标准的数据结构。</span><br><span class=\"line\">它们按底层实现进行分组, 通常定义了它们的一般应用领域</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplDoublyLinkedList\"><a href=\"#SplDoublyLinkedList\" class=\"headerlink\" title=\"SplDoublyLinkedList\"></a>SplDoublyLinkedList</h2><p>双向链表</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dlist = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 末端压入</span></span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;hiramariam&#x27;</span>);</span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;maaz&#x27;</span>);</span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;zafar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首端压入</span></span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">2</span>);</span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* the list now contains</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">hiramariam</span></span><br><span class=\"line\"><span class=\"comment\">maaz</span></span><br><span class=\"line\"><span class=\"comment\">zafar</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $dlist-&gt;pop() . PHP_EOL; <span class=\"comment\">// zafar</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $dlist-&gt;shift() . PHP_EOL; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$dlist-&gt;add(<span class=\"number\">3</span>, <span class=\"number\">2.24</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($dlist-&gt;rewind(); $dlist-&gt;valid(); $dlist-&gt;next()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $dlist-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$list = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;FIFO (First In First Out) :&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">$list-&gt;setIteratorMode(<span class=\"built_in\">SplDoublyLinkedList</span>::IT_MODE_FIFO);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($list-&gt;rewind(); $list-&gt;valid(); $list-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $list-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;LIFO (Last In First Out) :&quot;</span> . PHP_EOL;</span><br><span class=\"line\">$list-&gt;setIteratorMode(<span class=\"built_in\">SplDoublyLinkedList</span>::IT_MODE_LIFO);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($list-&gt;rewind(); $list-&gt;valid(); $list-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $list-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;test While:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">$splDoubleLinkedList = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;v&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//First of all, we need rewind list</span></span><br><span class=\"line\">$splDoubleLinkedList-&gt;rewind();</span><br><span class=\"line\"><span class=\"comment\">//Use while, check if the list has valid node</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($splDoubleLinkedList-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Print current node&#x27;s value</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $splDoubleLinkedList-&gt;current() . PHP_EOL;</span><br><span class=\"line\">    <span class=\"comment\">//Turn the cursor to next node</span></span><br><span class=\"line\">    $splDoubleLinkedList-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplFileObject\"><a href=\"#SplFileObject\" class=\"headerlink\" title=\"SplFileObject\"></a>SplFileObject</h2><p>解析文件用的，f*函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// iterate directly over the object</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>( <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileObject</span>(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/spl_file.log&#x27;</span>) <span class=\"keyword\">as</span> $line)</span><br><span class=\"line\">    <span class=\"comment\">// and echo each line of the file</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $line;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    $file = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileObject</span>(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/spl_file.log&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $file-&gt;seek(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $file-&gt;current();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplFixedArray\"><a href=\"#SplFixedArray\" class=\"headerlink\" title=\"SplFixedArray\"></a>SplFixedArray</h2><p>一个固定长度的数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize the array with a fixed length</span></span><br><span class=\"line\">$array = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFixedArray</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">$array[<span class=\"number\">4</span>] = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($array[<span class=\"number\">0</span>]); <span class=\"comment\">// NULL</span></span><br><span class=\"line\">var_dump($array[<span class=\"number\">1</span>]); <span class=\"comment\">// int(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($array[<span class=\"string\">&quot;4&quot;</span>]); <span class=\"comment\">// string(3) &quot;foo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Increase the size of the array to 10</span></span><br><span class=\"line\">$array-&gt;setSize(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array[<span class=\"number\">9</span>] = <span class=\"string\">&quot;asdf&quot;</span>;</span><br><span class=\"line\">var_dump($array[<span class=\"number\">9</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Shrink the array to a size of 2</span></span><br><span class=\"line\">$array-&gt;setSize(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The following lines throw a RuntimeException: Index invalid or out of range</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"string\">&quot;non-numeric&quot;</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"number\">5</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplHeap\"><a href=\"#SplHeap\" class=\"headerlink\" title=\"SplHeap\"></a>SplHeap</h2><p>堆的实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JupilerLeague</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * We modify the abstract method compare so we can sort our</span></span><br><span class=\"line\"><span class=\"comment\">     * rankings using the values of a given array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">$array1, $array2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $values1 = array_values($array1);</span><br><span class=\"line\">        $values2 = array_values($array2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($values1[<span class=\"number\">0</span>] === $values2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $values1[<span class=\"number\">0</span>] &lt; $values2[<span class=\"number\">0</span>] ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$heap = <span class=\"keyword\">new</span> JupilerLeague();</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;AA Gent&#x27;</span> =&gt; <span class=\"number\">15</span>]);</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;Anderlecht&#x27;</span> =&gt; <span class=\"number\">20</span>]);</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;Cercle Brugge&#x27;</span> =&gt; <span class=\"number\">11</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For displaying the ranking we move up to the first node</span></span><br><span class=\"line\">$heap-&gt;top();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Then we iterate through each node for displaying the result</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($heap-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($heap-&gt;current() <span class=\"keyword\">as</span> $team =&gt; $score) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $team . <span class=\"string\">&#x27;: &#x27;</span> . $score . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $heap-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplMaxHeap\"><a href=\"#SplMaxHeap\" class=\"headerlink\" title=\"SplMaxHeap\"></a>SplMaxHeap</h2><p>顶部最大堆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySimpleHeap</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplMaxHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MySimpleHeap();</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">8</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $number . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySimpleHeap\"><a href=\"#MySimpleHeap\" class=\"headerlink\" title=\"MySimpleHeap\"></a>MySimpleHeap</h2><p>顶部最小堆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySimpleHeap</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplMinHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MySimpleHeap();</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">8</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $number . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplStack\"><a href=\"#SplStack\" class=\"headerlink\" title=\"SplStack\"></a>SplStack</h2><p>栈，通过使用一个双向链表来提供栈的主要功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$q = <span class=\"keyword\">new</span> <span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">$q[] = <span class=\"number\">1</span>;</span><br><span class=\"line\">$q[] = <span class=\"number\">2</span>;</span><br><span class=\"line\">$q[] = <span class=\"number\">3</span>;</span><br><span class=\"line\">$q-&gt;push(<span class=\"number\">4</span>);</span><br><span class=\"line\">$q-&gt;add(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$q-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($q-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $q-&gt;current(), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    $q-&gt;next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $splstack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">\\<span class=\"built_in\">SplStack</span> $splstack</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;splstack = $splstack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateSomme</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;splstack-&gt;count() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $val1 = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">            $val2 = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">            $val = $val1 + $val2;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;splstack-&gt;push($val);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;calculateSomme();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displaySomme</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$splstack = <span class=\"keyword\">new</span> \\<span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$stack = <span class=\"keyword\">new</span> Stack($splstack);</span><br><span class=\"line\">$stack-&gt;calculateSomme();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $stack-&gt;displaySomme() . PHP_EOL; <span class=\"comment\">// 30</span></span><br><span class=\"line\"></span><br><span class=\"line\">$stack = <span class=\"keyword\">new</span> <span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $stack-&gt;offsetGet(<span class=\"number\">0</span>);</span><br><span class=\"line\">$stack-&gt;offsetSet(<span class=\"number\">0</span>, <span class=\"string\">&#x27;C&#x27;</span>); <span class=\"comment\"># the last element has index zero</span></span><br><span class=\"line\"></span><br><span class=\"line\">$stack-&gt;rewind();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($stack-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $stack-&gt;current(), PHP_EOL;</span><br><span class=\"line\">    $stack-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplQueue\"><a href=\"#SplQueue\" class=\"headerlink\" title=\"SplQueue\"></a>SplQueue</h2><p>队列，通过使用一个双向链表来提供队列的主要功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$queue = <span class=\"keyword\">new</span> <span class=\"built_in\">SplQueue</span>();</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$queue-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span>($queue-&gt;valid())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $queue-&gt;current(),<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    $queue-&gt;next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $queue-&gt;dequeue(); <span class=\"comment\">//remove first one</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplPriorityQueue\"><a href=\"#SplPriorityQueue\" class=\"headerlink\" title=\"SplPriorityQueue\"></a>SplPriorityQueue</h2><p>优先队列</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PQtest</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplPriorityQueue</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">$priority1, $priority2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($priority1 === $priority2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $priority1 &lt; $priority2 ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$objPQ = <span class=\"keyword\">new</span> PQtest();</span><br><span class=\"line\"></span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;COUNT-&gt;&quot;</span> . $objPQ-&gt;count() . PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mode of extraction</span></span><br><span class=\"line\">$objPQ-&gt;setExtractFlags(PQtest::EXTR_BOTH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Go to TOP</span></span><br><span class=\"line\">$objPQ-&gt;top();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($objPQ-&gt;valid()) &#123;</span><br><span class=\"line\">    $value = $objPQ-&gt;current();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;data-&gt;&#x27;</span> . $value[<span class=\"string\">&#x27;data&#x27;</span>] . <span class=\"string\">&#x27;==priority-&gt;&#x27;</span> . $value[<span class=\"string\">&#x27;priority&#x27;</span>] . PHP_EOL;</span><br><span class=\"line\">    $objPQ-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.php.net/manual/zh/spl.datastructures.php\">PHP文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里主要学习，PHP SPL 提供了一套标准的数据结构。</span><br><span class=\"line\">它们按底层实现进行分组, 通常定义了它们的一般应用领域</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplDoublyLinkedList\"><a href=\"#SplDoublyLinkedList\" class=\"headerlink\" title=\"SplDoublyLinkedList\"></a>SplDoublyLinkedList</h2><p>双向链表</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dlist = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 末端压入</span></span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;hiramariam&#x27;</span>);</span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;maaz&#x27;</span>);</span><br><span class=\"line\">$dlist-&gt;push(<span class=\"string\">&#x27;zafar&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首端压入</span></span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">1</span>);</span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">2</span>);</span><br><span class=\"line\">$dlist-&gt;unshift(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* the list now contains</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">hiramariam</span></span><br><span class=\"line\"><span class=\"comment\">maaz</span></span><br><span class=\"line\"><span class=\"comment\">zafar</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $dlist-&gt;pop() . PHP_EOL; <span class=\"comment\">// zafar</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $dlist-&gt;shift() . PHP_EOL; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">$dlist-&gt;add(<span class=\"number\">3</span>, <span class=\"number\">2.24</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ($dlist-&gt;rewind(); $dlist-&gt;valid(); $dlist-&gt;next()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $dlist-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$list = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">$list-&gt;push(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;FIFO (First In First Out) :&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">$list-&gt;setIteratorMode(<span class=\"built_in\">SplDoublyLinkedList</span>::IT_MODE_FIFO);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($list-&gt;rewind(); $list-&gt;valid(); $list-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $list-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;LIFO (Last In First Out) :&quot;</span> . PHP_EOL;</span><br><span class=\"line\">$list-&gt;setIteratorMode(<span class=\"built_in\">SplDoublyLinkedList</span>::IT_MODE_LIFO);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($list-&gt;rewind(); $list-&gt;valid(); $list-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $list-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;test While:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">$splDoubleLinkedList = <span class=\"keyword\">new</span> <span class=\"built_in\">SplDoublyLinkedList</span>();</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">$splDoubleLinkedList-&gt;push(<span class=\"string\">&#x27;v&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//First of all, we need rewind list</span></span><br><span class=\"line\">$splDoubleLinkedList-&gt;rewind();</span><br><span class=\"line\"><span class=\"comment\">//Use while, check if the list has valid node</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($splDoubleLinkedList-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Print current node&#x27;s value</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $splDoubleLinkedList-&gt;current() . PHP_EOL;</span><br><span class=\"line\">    <span class=\"comment\">//Turn the cursor to next node</span></span><br><span class=\"line\">    $splDoubleLinkedList-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplFileObject\"><a href=\"#SplFileObject\" class=\"headerlink\" title=\"SplFileObject\"></a>SplFileObject</h2><p>解析文件用的，f*函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// iterate directly over the object</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>( <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileObject</span>(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/spl_file.log&#x27;</span>) <span class=\"keyword\">as</span> $line)</span><br><span class=\"line\">    <span class=\"comment\">// and echo each line of the file</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $line;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    $file = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFileObject</span>(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/spl_file.log&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $file-&gt;seek(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $file-&gt;current();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplFixedArray\"><a href=\"#SplFixedArray\" class=\"headerlink\" title=\"SplFixedArray\"></a>SplFixedArray</h2><p>一个固定长度的数组</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// Initialize the array with a fixed length</span></span><br><span class=\"line\">$array = <span class=\"keyword\">new</span> <span class=\"built_in\">SplFixedArray</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">$array[<span class=\"number\">4</span>] = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($array[<span class=\"number\">0</span>]); <span class=\"comment\">// NULL</span></span><br><span class=\"line\">var_dump($array[<span class=\"number\">1</span>]); <span class=\"comment\">// int(2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($array[<span class=\"string\">&quot;4&quot;</span>]); <span class=\"comment\">// string(3) &quot;foo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Increase the size of the array to 10</span></span><br><span class=\"line\">$array-&gt;setSize(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$array[<span class=\"number\">9</span>] = <span class=\"string\">&quot;asdf&quot;</span>;</span><br><span class=\"line\">var_dump($array[<span class=\"number\">9</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Shrink the array to a size of 2</span></span><br><span class=\"line\">$array-&gt;setSize(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The following lines throw a RuntimeException: Index invalid or out of range</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"string\">&quot;non-numeric&quot;</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    var_dump($array[<span class=\"number\">5</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">RuntimeException</span> $re) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;RuntimeException: &quot;</span> . $re-&gt;getMessage() . <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplHeap\"><a href=\"#SplHeap\" class=\"headerlink\" title=\"SplHeap\"></a>SplHeap</h2><p>堆的实现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JupilerLeague</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * We modify the abstract method compare so we can sort our</span></span><br><span class=\"line\"><span class=\"comment\">     * rankings using the values of a given array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">$array1, $array2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $values1 = array_values($array1);</span><br><span class=\"line\">        $values2 = array_values($array2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($values1[<span class=\"number\">0</span>] === $values2[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $values1[<span class=\"number\">0</span>] &lt; $values2[<span class=\"number\">0</span>] ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$heap = <span class=\"keyword\">new</span> JupilerLeague();</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;AA Gent&#x27;</span> =&gt; <span class=\"number\">15</span>]);</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;Anderlecht&#x27;</span> =&gt; <span class=\"number\">20</span>]);</span><br><span class=\"line\">$heap-&gt;insert([<span class=\"string\">&#x27;Cercle Brugge&#x27;</span> =&gt; <span class=\"number\">11</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// For displaying the ranking we move up to the first node</span></span><br><span class=\"line\">$heap-&gt;top();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Then we iterate through each node for displaying the result</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($heap-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($heap-&gt;current() <span class=\"keyword\">as</span> $team =&gt; $score) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $team . <span class=\"string\">&#x27;: &#x27;</span> . $score . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $heap-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplMaxHeap\"><a href=\"#SplMaxHeap\" class=\"headerlink\" title=\"SplMaxHeap\"></a>SplMaxHeap</h2><p>顶部最大堆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySimpleHeap</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplMaxHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MySimpleHeap();</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">8</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $number . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySimpleHeap\"><a href=\"#MySimpleHeap\" class=\"headerlink\" title=\"MySimpleHeap\"></a>MySimpleHeap</h2><p>顶部最小堆</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySimpleHeap</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplMinHeap</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MySimpleHeap();</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">8</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">$obj-&gt;insert(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $number) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $number . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplStack\"><a href=\"#SplStack\" class=\"headerlink\" title=\"SplStack\"></a>SplStack</h2><p>栈，通过使用一个双向链表来提供栈的主要功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$q = <span class=\"keyword\">new</span> <span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">$q[] = <span class=\"number\">1</span>;</span><br><span class=\"line\">$q[] = <span class=\"number\">2</span>;</span><br><span class=\"line\">$q[] = <span class=\"number\">3</span>;</span><br><span class=\"line\">$q-&gt;push(<span class=\"number\">4</span>);</span><br><span class=\"line\">$q-&gt;add(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$q-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($q-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $q-&gt;current(), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    $q-&gt;next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $splstack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">\\<span class=\"built_in\">SplStack</span> $splstack</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;splstack = $splstack;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateSomme</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;splstack-&gt;count() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            $val1 = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">            $val2 = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">            $val = $val1 + $val2;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;splstack-&gt;push($val);</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;calculateSomme();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> integer</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displaySomme</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;splstack-&gt;pop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$splstack = <span class=\"keyword\">new</span> \\<span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\">$splstack-&gt;push(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$stack = <span class=\"keyword\">new</span> Stack($splstack);</span><br><span class=\"line\">$stack-&gt;calculateSomme();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $stack-&gt;displaySomme() . PHP_EOL; <span class=\"comment\">// 30</span></span><br><span class=\"line\"></span><br><span class=\"line\">$stack = <span class=\"keyword\">new</span> <span class=\"built_in\">SplStack</span>();</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">$stack-&gt;push(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $stack-&gt;offsetGet(<span class=\"number\">0</span>);</span><br><span class=\"line\">$stack-&gt;offsetSet(<span class=\"number\">0</span>, <span class=\"string\">&#x27;C&#x27;</span>); <span class=\"comment\"># the last element has index zero</span></span><br><span class=\"line\"></span><br><span class=\"line\">$stack-&gt;rewind();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($stack-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $stack-&gt;current(), PHP_EOL;</span><br><span class=\"line\">    $stack-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplQueue\"><a href=\"#SplQueue\" class=\"headerlink\" title=\"SplQueue\"></a>SplQueue</h2><p>队列，通过使用一个双向链表来提供队列的主要功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$queue = <span class=\"keyword\">new</span> <span class=\"built_in\">SplQueue</span>();</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">$queue-&gt;enqueue(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$queue-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span>($queue-&gt;valid())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $queue-&gt;current(),<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    $queue-&gt;next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $queue-&gt;dequeue(); <span class=\"comment\">//remove first one</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplPriorityQueue\"><a href=\"#SplPriorityQueue\" class=\"headerlink\" title=\"SplPriorityQueue\"></a>SplPriorityQueue</h2><p>优先队列</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PQtest</span> <span class=\"keyword\">extends</span> <span class=\"title\">SplPriorityQueue</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">$priority1, $priority2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($priority1 === $priority2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $priority1 &lt; $priority2 ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$objPQ = <span class=\"keyword\">new</span> PQtest();</span><br><span class=\"line\"></span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">$objPQ-&gt;insert(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;COUNT-&gt;&quot;</span> . $objPQ-&gt;count() . PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mode of extraction</span></span><br><span class=\"line\">$objPQ-&gt;setExtractFlags(PQtest::EXTR_BOTH);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Go to TOP</span></span><br><span class=\"line\">$objPQ-&gt;top();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ($objPQ-&gt;valid()) &#123;</span><br><span class=\"line\">    $value = $objPQ-&gt;current();</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;data-&gt;&#x27;</span> . $value[<span class=\"string\">&#x27;data&#x27;</span>] . <span class=\"string\">&#x27;==priority-&gt;&#x27;</span> . $value[<span class=\"string\">&#x27;priority&#x27;</span>] . PHP_EOL;</span><br><span class=\"line\">    $objPQ-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2017/12/20/php-spl-iterators.html","title":"PHP Spl Iterators","date":"2017-12-19T22:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"[PHP文档](https://www.php.net/manual/zh/spl.iterators.php)\n\n```\nPHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。\n```\n\n## Iterator\n\n实现一个最简单的迭代器接口\n\n```php\n<?php\nclass MyIterator implements Iterator\n{\n    private $array = [];\n\n    private $valid = false;\n\n    public function __construct(array $array)\n    {\n        $this->array = $array;\n    }\n\n    /**\n     * 返回到迭代器的第一个元素\n     * @author jiangyi\n     */\n    function rewind()\n    {\n        $this->valid = (false !== reset($this->array));\n    }\n\n    /**\n     * 返回当前元素\n     * @return mixed\n     * @author jiangyi\n     */\n    function current()\n    {\n        return current($this->array);\n    }\n\n    /**\n     * 返回当前元素的键\n     * @return int\n     * @author jiangyi\n     */\n    function key()\n    {\n        return key($this->array);\n    }\n\n    /**\n     * 向前移动到下一个元素\n     * @author jiangyi\n     */\n    function next()\n    {\n        $this->valid = (false !== next($this->array));\n    }\n\n    /**\n     * 检查当前位置是否有效\n     * @return bool\n     * @author jiangyi\n     */\n    function valid()\n    {\n        return $this->valid;\n    }\n}\n\n$array = [\n    'a' => \"firstelement\",\n    \"secondelement\",\n    \"lastelement\",\n];\n$it = new MyIterator($array);\n\nforeach ($it as $key => $value) {\n    echo \"{$key}=>{$value}\\n\";\n}\n\n$it->rewind();\nwhile ($it->valid()) {\n    echo \"{$it->key()}=>{$it->current()}\\n\";\n    $it->next();\n}\n```\n\n## Countable\n\n实现统计接口\n\n```php\n<?php\nclass MyCountable implements Countable\n{\n    private $myCount = 3;\n\n    public function count()\n    {\n        return $this->myCount;\n    }\n}\n\n$countable = new MyCountable();\nvar_dump($countable->count());\nvar_dump(count($countable));\n```\n\n## AppendIterator\n\n`这个迭代器可以遍历很多的迭代器`\n\n用在什么地方呢？暂时没想到\n\n```php\n<?php\n\n$arrayIteratorOne = new ArrayIterator(['a', 'b', 'c']);\n$arrayIteratorTwo = new ArrayIterator(['d', 'e', 'f']);\n\n$iterator = new AppendIterator;\n$iterator->append($arrayIteratorOne);\n$iterator->append($arrayIteratorTwo);\n\nforeach ($iterator as $current) {\n    echo $current . PHP_EOL;\n}\n\n// 输出a b c d e f\n```\n\n## ArrayAccess\n\n`提供像访问数组一样访问对象的能力的接口`\n\n大部分框架的model都实现它来达到上述的效果\n\n```php\n<?php\n\nclass MyArrayAccess implements ArrayAccess, IteratorAggregate\n{\n    private $container = [];\n    public $title;\n    public $author;\n    public $category;\n\n    public function __construct($title, $author, $category)\n    {\n        $this->container = [\n            \"one\"   => 1,\n            \"two\"   => 2,\n            \"three\" => 3,\n        ];\n        $this->title = $title;\n        $this->author = $author;\n        $this->category = $category;\n    }\n\n    /**\n     * 设置一个偏移位置的值\n     * @param mixed $offset\n     * @param mixed $value\n     * @author jiangyi\n     */\n    public function offsetSet($offset, $value)\n    {\n        $this->{$offset} = $value;\n    }\n\n    /**\n     * 检查一个偏移位置是否存在\n     * @param mixed $offset\n     * @return bool\n     * @author jiangyi\n     */\n    public function offsetExists($offset)\n    {\n        return isset($this->{$offset});\n    }\n\n    /**\n     * 复位一个偏移位置的值\n     * @param mixed $offset\n     * @author jiangyi\n     */\n    public function offsetUnset($offset)\n    {\n        unset($this->{$offset});\n    }\n\n    /**\n     * 获取一个偏移位置的值\n     * @param mixed $offset\n     * @return mixed|null\n     * @author jiangyi\n     */\n    public function offsetGet($offset)\n    {\n        return isset($this->{$offset}) ? $this->{$offset} : null;\n    }\n\n    function getIterator()\n    {\n        return new ArrayIterator($this);\n    }\n}\n\n$obj = new MyArrayAccess('a', 'wen', 'new');\n\nvar_dump(isset($obj['title']));\nvar_dump($obj[\"title\"]);\nunset($obj[\"title\"]);\nvar_dump(isset($obj[\"title\"]));\n$obj[\"title\"] = \"A value\";\nvar_dump($obj[\"title\"]);\n$obj['a'] = 'Append 1';\n$obj['b'] = 'Append 2';\n$obj['c'] = 'Append 3';\n\nforeach ($obj as $field => $value) {\n    echo \"$field=>$value\\n\";\n}\n```\n\n## ArrayIterator\n\n`这个迭代器允许在遍历数组和对象时删除和更新值与键`\n\n其实它实现了ArrayAccess , SeekableIterator , Countable , Serializable拥有更多的功能\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\ntry {\n    $object = new ArrayIterator($array);\n    foreach ($object as $key => $value) {\n        echo $key . ' => ' . $value . PHP_EOL;\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n## ArrayObject\n\n更像手动的foreach\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\n$arrayObj = new ArrayObject($array);\n$arrayObj->append('e');\n$arrayObj->natcasesort();\necho 'count->' . $arrayObj->count() . PHP_EOL;\n$arrayObj->offsetUnset(3);\nif ($arrayObj->offsetExists(2)) {\n    echo 'Offset Exists' . PHP_EOL;\n}\n$arrayObj->offsetSet(5, 'f');\necho $arrayObj->offsetGet(4) . PHP_EOL;\nfor ($iterator = $arrayObj->getIterator();\n     $iterator->valid();\n     $iterator->next()) {\n    echo $iterator->key() . ' => ' . $iterator->current() . PHP_EOL;\n}\n```\n\n## CachingIterator\n\n没用过。。。\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\ntry {\n    $object = new CachingIterator(new ArrayIterator($array));\n    foreach ($object as $value) {\n        echo $value . PHP_EOL;\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n## DirectoryIterator\n\n用来遍历目录，获取文件的信息很方便\n\n```php\n<?php\n\ntry {\n    foreach (new DirectoryIterator(__DIR__) as $item) {\n        if ($item->getFilename() == 'ArrayObject.php') {\n            echo 'getFilename()->' . $item->getFilename() . PHP_EOL;\n            echo 'isDot()->' . $item->isDot() . PHP_EOL;\n            echo '__toString()->' . $item->__toString() . PHP_EOL;\n            echo 'getPath()->' . $item->getPath() . PHP_EOL;\n            echo 'getPathname()->' . $item->getPathname() . PHP_EOL;\n            echo 'getPerms()->' . $item->getPerms() . PHP_EOL;\n            echo 'getInode()->' . $item->getInode() . PHP_EOL;\n            echo 'getSize()->' . $item->getSize() . PHP_EOL;\n            echo 'getOwner()->' . $item->getOwner() . PHP_EOL;\n            echo 'getGroup()->' . $item->getGroup() . PHP_EOL;\n            echo 'getATime()->' . $item->getATime() . PHP_EOL;\n            echo 'getMTime()->' . $item->getMTime() . PHP_EOL;\n            echo 'getCTime()->' . $item->getCTime() . PHP_EOL;\n            echo 'getType()->' . $item->getType() . PHP_EOL;\n            echo 'isWritable()->' . $item->isWritable() . PHP_EOL;\n            echo 'isReadable()->' . $item->isReadable() . PHP_EOL;\n            echo 'isExecutable()->' . $item->isExecutable() . PHP_EOL;\n            echo 'isFile()->' . $item->isFile() . PHP_EOL;\n            echo 'isDir()->' . $item->isDir() . PHP_EOL;\n            echo 'isLink()->' . $item->isLink() . PHP_EOL;\n            echo 'getFileInfo()->' . $item->getFileInfo() . PHP_EOL;\n            echo 'getPathInfo()->' . $item->getPathInfo() . PHP_EOL;\n            echo 'setFileClass()->' . $item->setFileClass() . PHP_EOL;\n            echo 'setInfoClass()->' . $item->setInfoClass() . PHP_EOL;\n            echo 'openFile()->' . $item->openFile() . PHP_EOL;\n        }\n    }\n} catch (Exception $e) {\n    echo 'No files Found!' . PHP_EOL;\n}\n```\n\n## FilterIterator\n\n过滤指定条件的值，感觉效果和array_filter差不多，没用过\n\n```php\n<?php\n\n$animals = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'NZ' => 'kiwi', 'kookaburra', 'platypus'];\n\nclass CullingIterator extends FilterIterator\n{\n\n    /*** The filteriterator takes  a iterator as param: ***/\n    public function __construct(Iterator $it)\n    {\n        parent::__construct($it);\n    }\n\n    /*** check if key is numeric ***/\n    function accept()\n    {\n        return is_numeric($this->key());\n    }\n}\n\n/*** end of class ***/\n$cull = new CullingIterator(new ArrayIterator($animals));\n\nforeach ($cull as $key => $value) {\n    echo $key . '=>' . $value . PHP_EOL;\n}\n```\n\n## IteratorAggregate\n\n没使用过\n\n```php\n<?php\nclass MyIteratorAggregate implements IteratorAggregate\n{\n    public $property1 = \"Public property one\";\n    public $property2 = \"Public property two\";\n    public $property3 = \"Public property three\";\n\n    public $arr = [1, 2, 3, 4, 5, 6];\n\n    public function __construct()\n    {\n        $this->property4 = \"last property\";\n    }\n\n    /**\n     * 聚合迭代器本身不实现迭代的5个方法接口(rewind valid key current next),\n     * 委托ArrayIterator实现\n     *\n     * @return ArrayIterator\n     * @author jiangyi\n     */\n    public function getIterator()\n    {\n        //return new ArrayIterator($this);\n        return new ArrayIterator($this->arr);\n    }\n}\n\n$obj = new MyIteratorAggregate;\n\nforeach ($obj as $key => $value) {\n    var_dump($key, $value);\n    echo \"\\n\";\n}\n```\n\n## LimitIterator\n\n没啥用处\n\n```php\n/*** the offset value ***/\n$offset = 3;\n\n/*** the limit of records to show ***/\n$limit = 2;\n\n$array = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus'];\n\n$it = new LimitIterator(new ArrayIterator($array), $offset, $limit);\n\nforeach ($it as $k => $v) {\n    //echo $it->getPosition() . PHP_EOL;\n    echo $k .'=>'.$v . PHP_EOL;\n}\n\n$array = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus'];\n\n$it = new LimitIterator(new ArrayIterator($array));\n\ntry {\n    $it->seek(5);\n    echo $it->current();\n} catch (OutOfBoundsException $e) {\n    echo $e->getMessage() . PHP_EOL;\n}\n```\n\n## RecursiveIteratorIterator\n\n递归迭代器\n\n```php\n<?php\n$array = [\n    ['name' => 'butch', 'sex' => 'm', 'breed' => 'boxer'],\n    ['name' => 'fido', 'sex' => 'm', 'breed' => 'doberman'],\n    ['name' => 'girly', 'sex' => 'f', 'breed' => 'poodle'],\n];\n\nforeach (new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $key => $value) {\n    echo $key . '->' . $value . PHP_EOL;\n}\n```\n\n## SimpleXMLIterator\n\n可以用来解析XML\n\n```php\n<?php\n\n/*** a simple xml tree ***/\n$xmlstring = <<<XML\n<?xml version = \"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<document>\n  <animal>\n    <category id=\"48\">\n      <species>monotremes</species>\n      <type>platypus</type>\n      <name>Bruce</name>\n    </category>\n  </animal>\n  <animal>\n    <category id=\"4\">\n      <species>arachnid</species>\n      <type>funnel web</type>\n      <name>Bruce</name>\n      <legs>8</legs>\n    </category>\n  </animal>\n</document>\nXML;\n\n/*** a new simpleXML iterator object ***/\ntry {\n    /*** a new simple xml iterator ***/\n    $it = new SimpleXMLIterator($xmlstring);\n    /*** a new limitIterator object ***/\n    foreach (new RecursiveIteratorIterator($it, 1) as $name => $data) {\n        //echo $name . '=>' . $data . PHP_EOL;\n        if ($name == 'animal') {\n            //var_dump($data);\n        }\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n\ntry {\n    /*** a new simpleXML iterator object ***/\n    $sxi =  new SimpleXMLIterator($xmlstring);\n\n    /*** set the xpath ***/\n    $foo = $sxi->xpath('animal/category/species');\n\n    /*** iterate over the xpath ***/\n    foreach ($foo as $k=>$v)\n    {\n        echo $v.PHP_EOL;\n    }\n}\ncatch(Exception $e)\n{\n    echo $e->getMessage();\n}\n```\n","source":"_posts/php/spl-iterators.md","raw":"---\nurl: /2017/12/20/php-spl-iterators.html\ntitle: \"PHP Spl Iterators\"\ndate: 2017-12-20T14:53:12+08:00\ndraft: false\ntags: [\"PHP\"]\ntags_weight: 100\ncategories: [\"PHP\"]\ncategoryes_weight: 100\n---\n[PHP文档](https://www.php.net/manual/zh/spl.iterators.php)\n\n```\nPHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。\n```\n\n## Iterator\n\n实现一个最简单的迭代器接口\n\n```php\n<?php\nclass MyIterator implements Iterator\n{\n    private $array = [];\n\n    private $valid = false;\n\n    public function __construct(array $array)\n    {\n        $this->array = $array;\n    }\n\n    /**\n     * 返回到迭代器的第一个元素\n     * @author jiangyi\n     */\n    function rewind()\n    {\n        $this->valid = (false !== reset($this->array));\n    }\n\n    /**\n     * 返回当前元素\n     * @return mixed\n     * @author jiangyi\n     */\n    function current()\n    {\n        return current($this->array);\n    }\n\n    /**\n     * 返回当前元素的键\n     * @return int\n     * @author jiangyi\n     */\n    function key()\n    {\n        return key($this->array);\n    }\n\n    /**\n     * 向前移动到下一个元素\n     * @author jiangyi\n     */\n    function next()\n    {\n        $this->valid = (false !== next($this->array));\n    }\n\n    /**\n     * 检查当前位置是否有效\n     * @return bool\n     * @author jiangyi\n     */\n    function valid()\n    {\n        return $this->valid;\n    }\n}\n\n$array = [\n    'a' => \"firstelement\",\n    \"secondelement\",\n    \"lastelement\",\n];\n$it = new MyIterator($array);\n\nforeach ($it as $key => $value) {\n    echo \"{$key}=>{$value}\\n\";\n}\n\n$it->rewind();\nwhile ($it->valid()) {\n    echo \"{$it->key()}=>{$it->current()}\\n\";\n    $it->next();\n}\n```\n\n## Countable\n\n实现统计接口\n\n```php\n<?php\nclass MyCountable implements Countable\n{\n    private $myCount = 3;\n\n    public function count()\n    {\n        return $this->myCount;\n    }\n}\n\n$countable = new MyCountable();\nvar_dump($countable->count());\nvar_dump(count($countable));\n```\n\n## AppendIterator\n\n`这个迭代器可以遍历很多的迭代器`\n\n用在什么地方呢？暂时没想到\n\n```php\n<?php\n\n$arrayIteratorOne = new ArrayIterator(['a', 'b', 'c']);\n$arrayIteratorTwo = new ArrayIterator(['d', 'e', 'f']);\n\n$iterator = new AppendIterator;\n$iterator->append($arrayIteratorOne);\n$iterator->append($arrayIteratorTwo);\n\nforeach ($iterator as $current) {\n    echo $current . PHP_EOL;\n}\n\n// 输出a b c d e f\n```\n\n## ArrayAccess\n\n`提供像访问数组一样访问对象的能力的接口`\n\n大部分框架的model都实现它来达到上述的效果\n\n```php\n<?php\n\nclass MyArrayAccess implements ArrayAccess, IteratorAggregate\n{\n    private $container = [];\n    public $title;\n    public $author;\n    public $category;\n\n    public function __construct($title, $author, $category)\n    {\n        $this->container = [\n            \"one\"   => 1,\n            \"two\"   => 2,\n            \"three\" => 3,\n        ];\n        $this->title = $title;\n        $this->author = $author;\n        $this->category = $category;\n    }\n\n    /**\n     * 设置一个偏移位置的值\n     * @param mixed $offset\n     * @param mixed $value\n     * @author jiangyi\n     */\n    public function offsetSet($offset, $value)\n    {\n        $this->{$offset} = $value;\n    }\n\n    /**\n     * 检查一个偏移位置是否存在\n     * @param mixed $offset\n     * @return bool\n     * @author jiangyi\n     */\n    public function offsetExists($offset)\n    {\n        return isset($this->{$offset});\n    }\n\n    /**\n     * 复位一个偏移位置的值\n     * @param mixed $offset\n     * @author jiangyi\n     */\n    public function offsetUnset($offset)\n    {\n        unset($this->{$offset});\n    }\n\n    /**\n     * 获取一个偏移位置的值\n     * @param mixed $offset\n     * @return mixed|null\n     * @author jiangyi\n     */\n    public function offsetGet($offset)\n    {\n        return isset($this->{$offset}) ? $this->{$offset} : null;\n    }\n\n    function getIterator()\n    {\n        return new ArrayIterator($this);\n    }\n}\n\n$obj = new MyArrayAccess('a', 'wen', 'new');\n\nvar_dump(isset($obj['title']));\nvar_dump($obj[\"title\"]);\nunset($obj[\"title\"]);\nvar_dump(isset($obj[\"title\"]));\n$obj[\"title\"] = \"A value\";\nvar_dump($obj[\"title\"]);\n$obj['a'] = 'Append 1';\n$obj['b'] = 'Append 2';\n$obj['c'] = 'Append 3';\n\nforeach ($obj as $field => $value) {\n    echo \"$field=>$value\\n\";\n}\n```\n\n## ArrayIterator\n\n`这个迭代器允许在遍历数组和对象时删除和更新值与键`\n\n其实它实现了ArrayAccess , SeekableIterator , Countable , Serializable拥有更多的功能\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\ntry {\n    $object = new ArrayIterator($array);\n    foreach ($object as $key => $value) {\n        echo $key . ' => ' . $value . PHP_EOL;\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n## ArrayObject\n\n更像手动的foreach\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\n$arrayObj = new ArrayObject($array);\n$arrayObj->append('e');\n$arrayObj->natcasesort();\necho 'count->' . $arrayObj->count() . PHP_EOL;\n$arrayObj->offsetUnset(3);\nif ($arrayObj->offsetExists(2)) {\n    echo 'Offset Exists' . PHP_EOL;\n}\n$arrayObj->offsetSet(5, 'f');\necho $arrayObj->offsetGet(4) . PHP_EOL;\nfor ($iterator = $arrayObj->getIterator();\n     $iterator->valid();\n     $iterator->next()) {\n    echo $iterator->key() . ' => ' . $iterator->current() . PHP_EOL;\n}\n```\n\n## CachingIterator\n\n没用过。。。\n\n```php\n<?php\n\n$array = ['a', 'b', 'c', 'd'];\n\ntry {\n    $object = new CachingIterator(new ArrayIterator($array));\n    foreach ($object as $value) {\n        echo $value . PHP_EOL;\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n## DirectoryIterator\n\n用来遍历目录，获取文件的信息很方便\n\n```php\n<?php\n\ntry {\n    foreach (new DirectoryIterator(__DIR__) as $item) {\n        if ($item->getFilename() == 'ArrayObject.php') {\n            echo 'getFilename()->' . $item->getFilename() . PHP_EOL;\n            echo 'isDot()->' . $item->isDot() . PHP_EOL;\n            echo '__toString()->' . $item->__toString() . PHP_EOL;\n            echo 'getPath()->' . $item->getPath() . PHP_EOL;\n            echo 'getPathname()->' . $item->getPathname() . PHP_EOL;\n            echo 'getPerms()->' . $item->getPerms() . PHP_EOL;\n            echo 'getInode()->' . $item->getInode() . PHP_EOL;\n            echo 'getSize()->' . $item->getSize() . PHP_EOL;\n            echo 'getOwner()->' . $item->getOwner() . PHP_EOL;\n            echo 'getGroup()->' . $item->getGroup() . PHP_EOL;\n            echo 'getATime()->' . $item->getATime() . PHP_EOL;\n            echo 'getMTime()->' . $item->getMTime() . PHP_EOL;\n            echo 'getCTime()->' . $item->getCTime() . PHP_EOL;\n            echo 'getType()->' . $item->getType() . PHP_EOL;\n            echo 'isWritable()->' . $item->isWritable() . PHP_EOL;\n            echo 'isReadable()->' . $item->isReadable() . PHP_EOL;\n            echo 'isExecutable()->' . $item->isExecutable() . PHP_EOL;\n            echo 'isFile()->' . $item->isFile() . PHP_EOL;\n            echo 'isDir()->' . $item->isDir() . PHP_EOL;\n            echo 'isLink()->' . $item->isLink() . PHP_EOL;\n            echo 'getFileInfo()->' . $item->getFileInfo() . PHP_EOL;\n            echo 'getPathInfo()->' . $item->getPathInfo() . PHP_EOL;\n            echo 'setFileClass()->' . $item->setFileClass() . PHP_EOL;\n            echo 'setInfoClass()->' . $item->setInfoClass() . PHP_EOL;\n            echo 'openFile()->' . $item->openFile() . PHP_EOL;\n        }\n    }\n} catch (Exception $e) {\n    echo 'No files Found!' . PHP_EOL;\n}\n```\n\n## FilterIterator\n\n过滤指定条件的值，感觉效果和array_filter差不多，没用过\n\n```php\n<?php\n\n$animals = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'NZ' => 'kiwi', 'kookaburra', 'platypus'];\n\nclass CullingIterator extends FilterIterator\n{\n\n    /*** The filteriterator takes  a iterator as param: ***/\n    public function __construct(Iterator $it)\n    {\n        parent::__construct($it);\n    }\n\n    /*** check if key is numeric ***/\n    function accept()\n    {\n        return is_numeric($this->key());\n    }\n}\n\n/*** end of class ***/\n$cull = new CullingIterator(new ArrayIterator($animals));\n\nforeach ($cull as $key => $value) {\n    echo $key . '=>' . $value . PHP_EOL;\n}\n```\n\n## IteratorAggregate\n\n没使用过\n\n```php\n<?php\nclass MyIteratorAggregate implements IteratorAggregate\n{\n    public $property1 = \"Public property one\";\n    public $property2 = \"Public property two\";\n    public $property3 = \"Public property three\";\n\n    public $arr = [1, 2, 3, 4, 5, 6];\n\n    public function __construct()\n    {\n        $this->property4 = \"last property\";\n    }\n\n    /**\n     * 聚合迭代器本身不实现迭代的5个方法接口(rewind valid key current next),\n     * 委托ArrayIterator实现\n     *\n     * @return ArrayIterator\n     * @author jiangyi\n     */\n    public function getIterator()\n    {\n        //return new ArrayIterator($this);\n        return new ArrayIterator($this->arr);\n    }\n}\n\n$obj = new MyIteratorAggregate;\n\nforeach ($obj as $key => $value) {\n    var_dump($key, $value);\n    echo \"\\n\";\n}\n```\n\n## LimitIterator\n\n没啥用处\n\n```php\n/*** the offset value ***/\n$offset = 3;\n\n/*** the limit of records to show ***/\n$limit = 2;\n\n$array = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus'];\n\n$it = new LimitIterator(new ArrayIterator($array), $offset, $limit);\n\nforeach ($it as $k => $v) {\n    //echo $it->getPosition() . PHP_EOL;\n    echo $k .'=>'.$v . PHP_EOL;\n}\n\n$array = ['koala', 'kangaroo', 'wombat', 'wallaby', 'emu', 'kiwi', 'kookaburra', 'platypus'];\n\n$it = new LimitIterator(new ArrayIterator($array));\n\ntry {\n    $it->seek(5);\n    echo $it->current();\n} catch (OutOfBoundsException $e) {\n    echo $e->getMessage() . PHP_EOL;\n}\n```\n\n## RecursiveIteratorIterator\n\n递归迭代器\n\n```php\n<?php\n$array = [\n    ['name' => 'butch', 'sex' => 'm', 'breed' => 'boxer'],\n    ['name' => 'fido', 'sex' => 'm', 'breed' => 'doberman'],\n    ['name' => 'girly', 'sex' => 'f', 'breed' => 'poodle'],\n];\n\nforeach (new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $key => $value) {\n    echo $key . '->' . $value . PHP_EOL;\n}\n```\n\n## SimpleXMLIterator\n\n可以用来解析XML\n\n```php\n<?php\n\n/*** a simple xml tree ***/\n$xmlstring = <<<XML\n<?xml version = \"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<document>\n  <animal>\n    <category id=\"48\">\n      <species>monotremes</species>\n      <type>platypus</type>\n      <name>Bruce</name>\n    </category>\n  </animal>\n  <animal>\n    <category id=\"4\">\n      <species>arachnid</species>\n      <type>funnel web</type>\n      <name>Bruce</name>\n      <legs>8</legs>\n    </category>\n  </animal>\n</document>\nXML;\n\n/*** a new simpleXML iterator object ***/\ntry {\n    /*** a new simple xml iterator ***/\n    $it = new SimpleXMLIterator($xmlstring);\n    /*** a new limitIterator object ***/\n    foreach (new RecursiveIteratorIterator($it, 1) as $name => $data) {\n        //echo $name . '=>' . $data . PHP_EOL;\n        if ($name == 'animal') {\n            //var_dump($data);\n        }\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n\ntry {\n    /*** a new simpleXML iterator object ***/\n    $sxi =  new SimpleXMLIterator($xmlstring);\n\n    /*** set the xpath ***/\n    $foo = $sxi->xpath('animal/category/species');\n\n    /*** iterate over the xpath ***/\n    foreach ($foo as $k=>$v)\n    {\n        echo $v.PHP_EOL;\n    }\n}\ncatch(Exception $e)\n{\n    echo $e->getMessage();\n}\n```\n","slug":"php/spl-iterators","published":1,"updated":"2020-03-26T12:33:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3h002jmv05hfqh59f3","content":"<p><a href=\"https://www.php.net/manual/zh/spl.iterators.php\">PHP文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h2><p>实现一个最简单的迭代器接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $array = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $valid = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $array</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;array = $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回到迭代器的第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewind</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;valid = (<span class=\"literal\">false</span> !== reset(<span class=\"keyword\">$this</span>-&gt;array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回当前元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">current</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current(<span class=\"keyword\">$this</span>-&gt;array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回当前元素的键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">key</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key(<span class=\"keyword\">$this</span>-&gt;array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前移动到下一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;valid = (<span class=\"literal\">false</span> !== next(<span class=\"keyword\">$this</span>-&gt;array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查当前位置是否有效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;valid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span> =&gt; <span class=\"string\">&quot;firstelement&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;secondelement&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lastelement&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> MyIterator($array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($it <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$key&#125;</span>=&gt;<span class=\"subst\">&#123;$value&#125;</span>\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$it-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($it-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$it-&gt;key()&#125;</span>=&gt;<span class=\"subst\">&#123;$it-&gt;current()&#125;</span>\\n&quot;</span>;</span><br><span class=\"line\">    $it-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Countable\"><a href=\"#Countable\" class=\"headerlink\" title=\"Countable\"></a>Countable</h2><p>实现统计接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCountable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Countable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $myCount = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;myCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$countable = <span class=\"keyword\">new</span> MyCountable();</span><br><span class=\"line\">var_dump($countable-&gt;count());</span><br><span class=\"line\">var_dump(count($countable));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AppendIterator\"><a href=\"#AppendIterator\" class=\"headerlink\" title=\"AppendIterator\"></a>AppendIterator</h2><p><code>这个迭代器可以遍历很多的迭代器</code></p>\n<p>用在什么地方呢？暂时没想到</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arrayIteratorOne = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]);</span><br><span class=\"line\">$arrayIteratorTwo = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>([<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$iterator = <span class=\"keyword\">new</span> <span class=\"built_in\">AppendIterator</span>;</span><br><span class=\"line\">$iterator-&gt;append($arrayIteratorOne);</span><br><span class=\"line\">$iterator-&gt;append($arrayIteratorTwo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($iterator <span class=\"keyword\">as</span> $current) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $current . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出a b c d e f</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayAccess\"><a href=\"#ArrayAccess\" class=\"headerlink\" title=\"ArrayAccess\"></a>ArrayAccess</h2><p><code>提供像访问数组一样访问对象的能力的接口</code></p>\n<p>大部分框架的model都实现它来达到上述的效果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArrayAccess</span> <span class=\"keyword\">implements</span> <span class=\"title\">ArrayAccess</span>, <span class=\"title\">IteratorAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $container = [];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $title;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $author;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $category;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$title, $author, $category</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;container = [</span><br><span class=\"line\">            <span class=\"string\">&quot;one&quot;</span>   =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;two&quot;</span>   =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;three&quot;</span> =&gt; <span class=\"number\">3</span>,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;title = $title;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;author = $author;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;category = $category;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span>(<span class=\"params\">$offset, $value</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125; = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查一个偏移位置是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复位一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed|null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;) ? <span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIterator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyArrayAccess(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;wen&#x27;</span>, <span class=\"string\">&#x27;new&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(<span class=\"keyword\">isset</span>($obj[<span class=\"string\">&#x27;title&#x27;</span>]));</span><br><span class=\"line\">var_dump($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\">var_dump(<span class=\"keyword\">isset</span>($obj[<span class=\"string\">&quot;title&quot;</span>]));</span><br><span class=\"line\">$obj[<span class=\"string\">&quot;title&quot;</span>] = <span class=\"string\">&quot;A value&quot;</span>;</span><br><span class=\"line\">var_dump($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"string\">&#x27;Append 1&#x27;</span>;</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;b&#x27;</span>] = <span class=\"string\">&#x27;Append 2&#x27;</span>;</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"string\">&#x27;Append 3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $field =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$field</span>=&gt;<span class=\"subst\">$value</span>\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayIterator\"><a href=\"#ArrayIterator\" class=\"headerlink\" title=\"ArrayIterator\"></a>ArrayIterator</h2><p><code>这个迭代器允许在遍历数组和对象时删除和更新值与键</code></p>\n<p>其实它实现了ArrayAccess , SeekableIterator , Countable , Serializable拥有更多的功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $object = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($object <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27; =&gt; &#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayObject\"><a href=\"#ArrayObject\" class=\"headerlink\" title=\"ArrayObject\"></a>ArrayObject</h2><p>更像手动的foreach</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$arrayObj = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayObject</span>($array);</span><br><span class=\"line\">$arrayObj-&gt;append(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">$arrayObj-&gt;natcasesort();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;count-&gt;&#x27;</span> . $arrayObj-&gt;count() . PHP_EOL;</span><br><span class=\"line\">$arrayObj-&gt;offsetUnset(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($arrayObj-&gt;offsetExists(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Offset Exists&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$arrayObj-&gt;offsetSet(<span class=\"number\">5</span>, <span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arrayObj-&gt;offsetGet(<span class=\"number\">4</span>) . PHP_EOL;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($iterator = $arrayObj-&gt;getIterator();</span><br><span class=\"line\">     $iterator-&gt;valid();</span><br><span class=\"line\">     $iterator-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $iterator-&gt;key() . <span class=\"string\">&#x27; =&gt; &#x27;</span> . $iterator-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CachingIterator\"><a href=\"#CachingIterator\" class=\"headerlink\" title=\"CachingIterator\"></a>CachingIterator</h2><p>没用过。。。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $object = <span class=\"keyword\">new</span> <span class=\"built_in\">CachingIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array));</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($object <span class=\"keyword\">as</span> $value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $value . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DirectoryIterator\"><a href=\"#DirectoryIterator\" class=\"headerlink\" title=\"DirectoryIterator\"></a>DirectoryIterator</h2><p>用来遍历目录，获取文件的信息很方便</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">DirectoryIterator</span>(<span class=\"keyword\">__DIR__</span>) <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($item-&gt;getFilename() == <span class=\"string\">&#x27;ArrayObject.php&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getFilename()-&gt;&#x27;</span> . $item-&gt;getFilename() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isDot()-&gt;&#x27;</span> . $item-&gt;isDot() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__toString()-&gt;&#x27;</span> . $item-&gt;__toString() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPath()-&gt;&#x27;</span> . $item-&gt;getPath() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPathname()-&gt;&#x27;</span> . $item-&gt;getPathname() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPerms()-&gt;&#x27;</span> . $item-&gt;getPerms() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getInode()-&gt;&#x27;</span> . $item-&gt;getInode() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getSize()-&gt;&#x27;</span> . $item-&gt;getSize() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getOwner()-&gt;&#x27;</span> . $item-&gt;getOwner() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getGroup()-&gt;&#x27;</span> . $item-&gt;getGroup() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getATime()-&gt;&#x27;</span> . $item-&gt;getATime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getMTime()-&gt;&#x27;</span> . $item-&gt;getMTime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getCTime()-&gt;&#x27;</span> . $item-&gt;getCTime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getType()-&gt;&#x27;</span> . $item-&gt;getType() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isWritable()-&gt;&#x27;</span> . $item-&gt;isWritable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isReadable()-&gt;&#x27;</span> . $item-&gt;isReadable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isExecutable()-&gt;&#x27;</span> . $item-&gt;isExecutable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isFile()-&gt;&#x27;</span> . $item-&gt;isFile() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isDir()-&gt;&#x27;</span> . $item-&gt;isDir() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isLink()-&gt;&#x27;</span> . $item-&gt;isLink() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getFileInfo()-&gt;&#x27;</span> . $item-&gt;getFileInfo() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPathInfo()-&gt;&#x27;</span> . $item-&gt;getPathInfo() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;setFileClass()-&gt;&#x27;</span> . $item-&gt;setFileClass() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;setInfoClass()-&gt;&#x27;</span> . $item-&gt;setInfoClass() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;openFile()-&gt;&#x27;</span> . $item-&gt;openFile() . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;No files Found!&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FilterIterator\"><a href=\"#FilterIterator\" class=\"headerlink\" title=\"FilterIterator\"></a>FilterIterator</h2><p>过滤指定条件的值，感觉效果和array_filter差不多，没用过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$animals = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;NZ&#x27;</span> =&gt; <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CullingIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">FilterIterator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** The filteriterator takes  a iterator as param: ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"built_in\">Iterator</span> $it</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** check if key is numeric ***/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> is_numeric(<span class=\"keyword\">$this</span>-&gt;key());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** end of class ***/</span></span><br><span class=\"line\">$cull = <span class=\"keyword\">new</span> CullingIterator(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($animals));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($cull <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27;=&gt;&#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IteratorAggregate\"><a href=\"#IteratorAggregate\" class=\"headerlink\" title=\"IteratorAggregate\"></a>IteratorAggregate</h2><p>没使用过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIteratorAggregate</span> <span class=\"keyword\">implements</span> <span class=\"title\">IteratorAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property1 = <span class=\"string\">&quot;Public property one&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property2 = <span class=\"string\">&quot;Public property two&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property3 = <span class=\"string\">&quot;Public property three&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;property4 = <span class=\"string\">&quot;last property&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 聚合迭代器本身不实现迭代的5个方法接口(rewind valid key current next),</span></span><br><span class=\"line\"><span class=\"comment\">     * 委托ArrayIterator实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ArrayIterator</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIterator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return new ArrayIterator($this);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>(<span class=\"keyword\">$this</span>-&gt;arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyIteratorAggregate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    var_dump($key, $value);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LimitIterator\"><a href=\"#LimitIterator\" class=\"headerlink\" title=\"LimitIterator\"></a>LimitIterator</h2><p>没啥用处</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*** the offset value ***/</span></span><br><span class=\"line\">$offset = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** the limit of records to show ***/</span></span><br><span class=\"line\">$limit = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> <span class=\"built_in\">LimitIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array), $offset, $limit);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($it <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//echo $it-&gt;getPosition() . PHP_EOL;</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $k .<span class=\"string\">&#x27;=&gt;&#x27;</span>.$v . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> <span class=\"built_in\">LimitIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $it-&gt;seek(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $it-&gt;current();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">OutOfBoundsException</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecursiveIteratorIterator\"><a href=\"#RecursiveIteratorIterator\" class=\"headerlink\" title=\"RecursiveIteratorIterator\"></a>RecursiveIteratorIterator</h2><p>递归迭代器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;butch&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;boxer&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;fido&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;doberman&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;girly&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;poodle&#x27;</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveIteratorIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveArrayIterator</span>($array)) <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27;-&gt;&#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SimpleXMLIterator\"><a href=\"#SimpleXMLIterator\" class=\"headerlink\" title=\"SimpleXMLIterator\"></a>SimpleXMLIterator</h2><p>可以用来解析XML</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** a simple xml tree ***/</span></span><br><span class=\"line\">$xmlstring = &lt;&lt;&lt;XML</span><br><span class=\"line\"><span class=\"meta\">&lt;?</span>xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> standalone=<span class=\"string\">&quot;yes&quot;</span><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;document&gt;</span><br><span class=\"line\">  &lt;animal&gt;</span><br><span class=\"line\">    &lt;category id=<span class=\"string\">&quot;48&quot;</span>&gt;</span><br><span class=\"line\">      &lt;species&gt;monotremes&lt;/species&gt;</span><br><span class=\"line\">      &lt;type&gt;platypus&lt;/type&gt;</span><br><span class=\"line\">      &lt;name&gt;Bruce&lt;/name&gt;</span><br><span class=\"line\">    &lt;/category&gt;</span><br><span class=\"line\">  &lt;/animal&gt;</span><br><span class=\"line\">  &lt;animal&gt;</span><br><span class=\"line\">    &lt;category id=<span class=\"string\">&quot;4&quot;</span>&gt;</span><br><span class=\"line\">      &lt;species&gt;arachnid&lt;/species&gt;</span><br><span class=\"line\">      &lt;type&gt;funnel web&lt;/type&gt;</span><br><span class=\"line\">      &lt;name&gt;Bruce&lt;/name&gt;</span><br><span class=\"line\">      &lt;legs&gt;<span class=\"number\">8</span>&lt;/legs&gt;</span><br><span class=\"line\">    &lt;/category&gt;</span><br><span class=\"line\">  &lt;/animal&gt;</span><br><span class=\"line\">&lt;/document&gt;</span><br><span class=\"line\">XML;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** a new simpleXML iterator object ***/</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*** a new simple xml iterator ***/</span></span><br><span class=\"line\">    $it = <span class=\"keyword\">new</span> SimpleXMLIterator($xmlstring);</span><br><span class=\"line\">    <span class=\"comment\">/*** a new limitIterator object ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveIteratorIterator</span>($it, <span class=\"number\">1</span>) <span class=\"keyword\">as</span> $name =&gt; $data) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//echo $name . &#x27;=&gt;&#x27; . $data . PHP_EOL;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($name == <span class=\"string\">&#x27;animal&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//var_dump($data);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*** a new simpleXML iterator object ***/</span></span><br><span class=\"line\">    $sxi =  <span class=\"keyword\">new</span> SimpleXMLIterator($xmlstring);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** set the xpath ***/</span></span><br><span class=\"line\">    $foo = $sxi-&gt;xpath(<span class=\"string\">&#x27;animal/category/species&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** iterate over the xpath ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($foo <span class=\"keyword\">as</span> $k=&gt;$v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $v.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.php.net/manual/zh/spl.iterators.php\">PHP文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP SPL 提供一系列迭代器以遍历不同的对象，有些比较实用（如ArrayAccess），有些比较鸡肋，从来没有使用过。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h2><p>实现一个最简单的迭代器接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $array = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $valid = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">array</span> $array</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;array = $array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回到迭代器的第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rewind</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;valid = (<span class=\"literal\">false</span> !== reset(<span class=\"keyword\">$this</span>-&gt;array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回当前元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">current</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current(<span class=\"keyword\">$this</span>-&gt;array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回当前元素的键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">key</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key(<span class=\"keyword\">$this</span>-&gt;array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向前移动到下一个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;valid = (<span class=\"literal\">false</span> !== next(<span class=\"keyword\">$this</span>-&gt;array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查当前位置是否有效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;valid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;a&#x27;</span> =&gt; <span class=\"string\">&quot;firstelement&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;secondelement&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lastelement&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> MyIterator($array);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($it <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$key&#125;</span>=&gt;<span class=\"subst\">&#123;$value&#125;</span>\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$it-&gt;rewind();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($it-&gt;valid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">&#123;$it-&gt;key()&#125;</span>=&gt;<span class=\"subst\">&#123;$it-&gt;current()&#125;</span>\\n&quot;</span>;</span><br><span class=\"line\">    $it-&gt;next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Countable\"><a href=\"#Countable\" class=\"headerlink\" title=\"Countable\"></a>Countable</h2><p>实现统计接口</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCountable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Countable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $myCount = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;myCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$countable = <span class=\"keyword\">new</span> MyCountable();</span><br><span class=\"line\">var_dump($countable-&gt;count());</span><br><span class=\"line\">var_dump(count($countable));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AppendIterator\"><a href=\"#AppendIterator\" class=\"headerlink\" title=\"AppendIterator\"></a>AppendIterator</h2><p><code>这个迭代器可以遍历很多的迭代器</code></p>\n<p>用在什么地方呢？暂时没想到</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arrayIteratorOne = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]);</span><br><span class=\"line\">$arrayIteratorTwo = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>([<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$iterator = <span class=\"keyword\">new</span> <span class=\"built_in\">AppendIterator</span>;</span><br><span class=\"line\">$iterator-&gt;append($arrayIteratorOne);</span><br><span class=\"line\">$iterator-&gt;append($arrayIteratorTwo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($iterator <span class=\"keyword\">as</span> $current) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $current . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出a b c d e f</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayAccess\"><a href=\"#ArrayAccess\" class=\"headerlink\" title=\"ArrayAccess\"></a>ArrayAccess</h2><p><code>提供像访问数组一样访问对象的能力的接口</code></p>\n<p>大部分框架的model都实现它来达到上述的效果</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArrayAccess</span> <span class=\"keyword\">implements</span> <span class=\"title\">ArrayAccess</span>, <span class=\"title\">IteratorAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $container = [];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $title;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $author;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $category;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$title, $author, $category</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;container = [</span><br><span class=\"line\">            <span class=\"string\">&quot;one&quot;</span>   =&gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;two&quot;</span>   =&gt; <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;three&quot;</span> =&gt; <span class=\"number\">3</span>,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;title = $title;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;author = $author;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;category = $category;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $value</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span>(<span class=\"params\">$offset, $value</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125; = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查一个偏移位置是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复位一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取一个偏移位置的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $offset</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed|null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span>(<span class=\"params\">$offset</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125;) ? <span class=\"keyword\">$this</span>-&gt;&#123;$offset&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIterator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyArrayAccess(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;wen&#x27;</span>, <span class=\"string\">&#x27;new&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(<span class=\"keyword\">isset</span>($obj[<span class=\"string\">&#x27;title&#x27;</span>]));</span><br><span class=\"line\">var_dump($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\">var_dump(<span class=\"keyword\">isset</span>($obj[<span class=\"string\">&quot;title&quot;</span>]));</span><br><span class=\"line\">$obj[<span class=\"string\">&quot;title&quot;</span>] = <span class=\"string\">&quot;A value&quot;</span>;</span><br><span class=\"line\">var_dump($obj[<span class=\"string\">&quot;title&quot;</span>]);</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"string\">&#x27;Append 1&#x27;</span>;</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;b&#x27;</span>] = <span class=\"string\">&#x27;Append 2&#x27;</span>;</span><br><span class=\"line\">$obj[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"string\">&#x27;Append 3&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $field =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$field</span>=&gt;<span class=\"subst\">$value</span>\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayIterator\"><a href=\"#ArrayIterator\" class=\"headerlink\" title=\"ArrayIterator\"></a>ArrayIterator</h2><p><code>这个迭代器允许在遍历数组和对象时删除和更新值与键</code></p>\n<p>其实它实现了ArrayAccess , SeekableIterator , Countable , Serializable拥有更多的功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $object = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($object <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27; =&gt; &#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ArrayObject\"><a href=\"#ArrayObject\" class=\"headerlink\" title=\"ArrayObject\"></a>ArrayObject</h2><p>更像手动的foreach</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$arrayObj = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayObject</span>($array);</span><br><span class=\"line\">$arrayObj-&gt;append(<span class=\"string\">&#x27;e&#x27;</span>);</span><br><span class=\"line\">$arrayObj-&gt;natcasesort();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;count-&gt;&#x27;</span> . $arrayObj-&gt;count() . PHP_EOL;</span><br><span class=\"line\">$arrayObj-&gt;offsetUnset(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($arrayObj-&gt;offsetExists(<span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Offset Exists&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$arrayObj-&gt;offsetSet(<span class=\"number\">5</span>, <span class=\"string\">&#x27;f&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arrayObj-&gt;offsetGet(<span class=\"number\">4</span>) . PHP_EOL;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ($iterator = $arrayObj-&gt;getIterator();</span><br><span class=\"line\">     $iterator-&gt;valid();</span><br><span class=\"line\">     $iterator-&gt;next()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $iterator-&gt;key() . <span class=\"string\">&#x27; =&gt; &#x27;</span> . $iterator-&gt;current() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CachingIterator\"><a href=\"#CachingIterator\" class=\"headerlink\" title=\"CachingIterator\"></a>CachingIterator</h2><p>没用过。。。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $object = <span class=\"keyword\">new</span> <span class=\"built_in\">CachingIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array));</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($object <span class=\"keyword\">as</span> $value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $value . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DirectoryIterator\"><a href=\"#DirectoryIterator\" class=\"headerlink\" title=\"DirectoryIterator\"></a>DirectoryIterator</h2><p>用来遍历目录，获取文件的信息很方便</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">DirectoryIterator</span>(<span class=\"keyword\">__DIR__</span>) <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($item-&gt;getFilename() == <span class=\"string\">&#x27;ArrayObject.php&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getFilename()-&gt;&#x27;</span> . $item-&gt;getFilename() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isDot()-&gt;&#x27;</span> . $item-&gt;isDot() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;__toString()-&gt;&#x27;</span> . $item-&gt;__toString() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPath()-&gt;&#x27;</span> . $item-&gt;getPath() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPathname()-&gt;&#x27;</span> . $item-&gt;getPathname() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPerms()-&gt;&#x27;</span> . $item-&gt;getPerms() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getInode()-&gt;&#x27;</span> . $item-&gt;getInode() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getSize()-&gt;&#x27;</span> . $item-&gt;getSize() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getOwner()-&gt;&#x27;</span> . $item-&gt;getOwner() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getGroup()-&gt;&#x27;</span> . $item-&gt;getGroup() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getATime()-&gt;&#x27;</span> . $item-&gt;getATime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getMTime()-&gt;&#x27;</span> . $item-&gt;getMTime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getCTime()-&gt;&#x27;</span> . $item-&gt;getCTime() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getType()-&gt;&#x27;</span> . $item-&gt;getType() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isWritable()-&gt;&#x27;</span> . $item-&gt;isWritable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isReadable()-&gt;&#x27;</span> . $item-&gt;isReadable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isExecutable()-&gt;&#x27;</span> . $item-&gt;isExecutable() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isFile()-&gt;&#x27;</span> . $item-&gt;isFile() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isDir()-&gt;&#x27;</span> . $item-&gt;isDir() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;isLink()-&gt;&#x27;</span> . $item-&gt;isLink() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getFileInfo()-&gt;&#x27;</span> . $item-&gt;getFileInfo() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;getPathInfo()-&gt;&#x27;</span> . $item-&gt;getPathInfo() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;setFileClass()-&gt;&#x27;</span> . $item-&gt;setFileClass() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;setInfoClass()-&gt;&#x27;</span> . $item-&gt;setInfoClass() . PHP_EOL;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;openFile()-&gt;&#x27;</span> . $item-&gt;openFile() . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;No files Found!&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FilterIterator\"><a href=\"#FilterIterator\" class=\"headerlink\" title=\"FilterIterator\"></a>FilterIterator</h2><p>过滤指定条件的值，感觉效果和array_filter差不多，没用过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$animals = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;NZ&#x27;</span> =&gt; <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CullingIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">FilterIterator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** The filteriterator takes  a iterator as param: ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"built_in\">Iterator</span> $it</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** check if key is numeric ***/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> is_numeric(<span class=\"keyword\">$this</span>-&gt;key());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** end of class ***/</span></span><br><span class=\"line\">$cull = <span class=\"keyword\">new</span> CullingIterator(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($animals));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($cull <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27;=&gt;&#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IteratorAggregate\"><a href=\"#IteratorAggregate\" class=\"headerlink\" title=\"IteratorAggregate\"></a>IteratorAggregate</h2><p>没使用过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIteratorAggregate</span> <span class=\"keyword\">implements</span> <span class=\"title\">IteratorAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property1 = <span class=\"string\">&quot;Public property one&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property2 = <span class=\"string\">&quot;Public property two&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $property3 = <span class=\"string\">&quot;Public property three&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;property4 = <span class=\"string\">&quot;last property&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 聚合迭代器本身不实现迭代的5个方法接口(rewind valid key current next),</span></span><br><span class=\"line\"><span class=\"comment\">     * 委托ArrayIterator实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ArrayIterator</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIterator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//return new ArrayIterator($this);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>(<span class=\"keyword\">$this</span>-&gt;arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyIteratorAggregate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    var_dump($key, $value);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LimitIterator\"><a href=\"#LimitIterator\" class=\"headerlink\" title=\"LimitIterator\"></a>LimitIterator</h2><p>没啥用处</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*** the offset value ***/</span></span><br><span class=\"line\">$offset = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** the limit of records to show ***/</span></span><br><span class=\"line\">$limit = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> <span class=\"built_in\">LimitIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array), $offset, $limit);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($it <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//echo $it-&gt;getPosition() . PHP_EOL;</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $k .<span class=\"string\">&#x27;=&gt;&#x27;</span>.$v . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = [<span class=\"string\">&#x27;koala&#x27;</span>, <span class=\"string\">&#x27;kangaroo&#x27;</span>, <span class=\"string\">&#x27;wombat&#x27;</span>, <span class=\"string\">&#x27;wallaby&#x27;</span>, <span class=\"string\">&#x27;emu&#x27;</span>, <span class=\"string\">&#x27;kiwi&#x27;</span>, <span class=\"string\">&#x27;kookaburra&#x27;</span>, <span class=\"string\">&#x27;platypus&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$it = <span class=\"keyword\">new</span> <span class=\"built_in\">LimitIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ArrayIterator</span>($array));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $it-&gt;seek(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $it-&gt;current();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">OutOfBoundsException</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage() . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RecursiveIteratorIterator\"><a href=\"#RecursiveIteratorIterator\" class=\"headerlink\" title=\"RecursiveIteratorIterator\"></a>RecursiveIteratorIterator</h2><p>递归迭代器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$array = [</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;butch&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;boxer&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;fido&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;doberman&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;name&#x27;</span> =&gt; <span class=\"string\">&#x27;girly&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span> =&gt; <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;breed&#x27;</span> =&gt; <span class=\"string\">&#x27;poodle&#x27;</span>],</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveIteratorIterator</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveArrayIterator</span>($array)) <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key . <span class=\"string\">&#x27;-&gt;&#x27;</span> . $value . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SimpleXMLIterator\"><a href=\"#SimpleXMLIterator\" class=\"headerlink\" title=\"SimpleXMLIterator\"></a>SimpleXMLIterator</h2><p>可以用来解析XML</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** a simple xml tree ***/</span></span><br><span class=\"line\">$xmlstring = &lt;&lt;&lt;XML</span><br><span class=\"line\"><span class=\"meta\">&lt;?</span>xml version = <span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> standalone=<span class=\"string\">&quot;yes&quot;</span><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;document&gt;</span><br><span class=\"line\">  &lt;animal&gt;</span><br><span class=\"line\">    &lt;category id=<span class=\"string\">&quot;48&quot;</span>&gt;</span><br><span class=\"line\">      &lt;species&gt;monotremes&lt;/species&gt;</span><br><span class=\"line\">      &lt;type&gt;platypus&lt;/type&gt;</span><br><span class=\"line\">      &lt;name&gt;Bruce&lt;/name&gt;</span><br><span class=\"line\">    &lt;/category&gt;</span><br><span class=\"line\">  &lt;/animal&gt;</span><br><span class=\"line\">  &lt;animal&gt;</span><br><span class=\"line\">    &lt;category id=<span class=\"string\">&quot;4&quot;</span>&gt;</span><br><span class=\"line\">      &lt;species&gt;arachnid&lt;/species&gt;</span><br><span class=\"line\">      &lt;type&gt;funnel web&lt;/type&gt;</span><br><span class=\"line\">      &lt;name&gt;Bruce&lt;/name&gt;</span><br><span class=\"line\">      &lt;legs&gt;<span class=\"number\">8</span>&lt;/legs&gt;</span><br><span class=\"line\">    &lt;/category&gt;</span><br><span class=\"line\">  &lt;/animal&gt;</span><br><span class=\"line\">&lt;/document&gt;</span><br><span class=\"line\">XML;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*** a new simpleXML iterator object ***/</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*** a new simple xml iterator ***/</span></span><br><span class=\"line\">    $it = <span class=\"keyword\">new</span> SimpleXMLIterator($xmlstring);</span><br><span class=\"line\">    <span class=\"comment\">/*** a new limitIterator object ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RecursiveIteratorIterator</span>($it, <span class=\"number\">1</span>) <span class=\"keyword\">as</span> $name =&gt; $data) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//echo $name . &#x27;=&gt;&#x27; . $data . PHP_EOL;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($name == <span class=\"string\">&#x27;animal&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//var_dump($data);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">Exception</span> $e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*** a new simpleXML iterator object ***/</span></span><br><span class=\"line\">    $sxi =  <span class=\"keyword\">new</span> SimpleXMLIterator($xmlstring);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** set the xpath ***/</span></span><br><span class=\"line\">    $foo = $sxi-&gt;xpath(<span class=\"string\">&#x27;animal/category/species&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*** iterate over the xpath ***/</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($foo <span class=\"keyword\">as</span> $k=&gt;$v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $v.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(<span class=\"built_in\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/03/26/git-command.html","title":"Git 常用命令","keywords":"Git 常用命令","description":"Git 常用命令","date":"2020-03-26T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"## git init\n初始化本地git仓库（创建新仓库）\n\n`git init` 创建普通库\n\n`git init --bare` 创建裸库\n```\n当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。\n你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库\n\n当你创建一个裸库时，在工作目录下，只有一个.git目录，而没有类似于本地库那样的文件结构可供你直接进行浏览和修改。\n一般来说，一个裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面push自己的本地修改。\n项目团队里面的每个人都可以clone这个库，然后完成本地修改之后，往这个库中push自己的代码。\n```\n\n示例：在www用户的home目录创建裸仓库并clone，提交一次\n\n服务器：\n```\nmkdir git_test && cd git_test && git init --bare\n```\n\n客户端：\n```\nssh-copy-id www@ip\n\ngit clone ssh://www@ip/~/git_test\n\ntouch readme.md\n\ngit add .\n\ngit commit -m \"first commit\"\n\ngit push\n```\n\n## git config\n配置git的一些参数\n\n`git config user.name \"xxx\"` 配置用户名\n\n`git config user.email \"xxx@xxx.com\"` 配置邮箱\n\n`git config --global color.ui true` git status等命令自动着色\n\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\ngit对CRLF的处理配置\n\n`git config --global core.autocrlf true` 提交时转换为LF，检出时转换为CRLF\n\n`git config --global core.autocrlf input` 提交时转换为LF，检出时不转换\n\n`git config --global core.autocrlf false` 提交检出均不转换\n\n`git config --global core.safecrlf true` 拒绝提交包含混合换行符的文件\n\n`git config --global core.safecrlf false` 允许提交包含混合换行符的文件\n\n`git config --global core.safecrlf warn` 提交包含混合换行符的文件时给出警告\n\n加上 `--global` 表示全局配置，不加表示仅该仓库配置\n\n## git clone\n\nclone远程仓库\n\n`git clone git+ssh://git@192.168.53.168/VT.git`\n\n## git submodule\n\n不加参数时查看子模块\n\n`git submodule add https://github.com/wenjy/maupassant-hugo.git themes/maupassant`\n\n`git submodule update --remote` 更新子模块为远程项目的最新版本\n\n```\ngit Submodule 是一个很好的多项目使用共同类库的工具，他允许类库项目做为repository，子项目做为一个单独的git项目存在父项目中，\n子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，\n父项目中会的提交信息包含Submodule的信息，再clone父项目的时候可以把Submodule初始化。\n```\n\n## git status\n                                                \n查看当前版本状态（是否修改）\n\n## git add\n\n添加文件至index（暂存区）\n\n`git add xyz ` 添加xyz文件至index\n\n`git add .` 增加当前子目录下所有更改过的文件至index\n\n## git commit\n\n把暂存区的文件提交到本地仓库\n\n`git commit -m 'xxx'` 提交并备注信息\n\n`git commit --amend -m 'xxx'` 合并上一次提交（用于反复修改）\n\n`git commit -am 'xxx'` 将add和commit合为一步\n\n## git rm\n\n删除index中的文件\n\n`git rm xxx` 删除index中的xxx文件\n\n`git rm -r *` 递归删除\n\n## git log\n\n显示提交日志\n\n`git log` 显示全部的\n\n`git log -1` 显示1行日志 -n为n行\n\n`git log --stat` 显示提交日志及相关变动文件\n\n`git log -p -m` 更加详细的文件改动 diff\n\n`git log v2.0` 显示tag v2.0的日志\n\n`git log --pretty=format:'%h' --graph` 图示提交日志\n\n## git show\n\n显示某个提交的详细内容\n\n`git show dfb02e6e4f2f7b573337763e5c0013802e392818` 显示某个提交的详细内容\n\n`git show dfb02` 可只用commitid的前几位，一般不会重复\n\n`git show HEAD` 显示HEAD提交日志\n\n`git show HEAD^` 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\n\n`git show v2.0` 显示tag v2.0的日志及详细内容\n\n`git show master@{yesterday}` 显示master分支昨天的状态\n\n\n## git ls-files                                              \n列出git index包含的文件\n\n## git show-branch                                           \n显示当前分支历史\n\n`git show-branch --all` 显示所有分支历史\n\n## git whatchanged                                          \n显示提交历史对应的文件修改\n\n## git reflog                                                \n显示所有提交，包括孤立节点\n\n```\n什么叫孤立节点，git commit id 组成的树是单向链表，当前commit只指向父级的commit，当HEAD指向头指针\n我们每次commit merge 等操作都有可能出现不能追踪的commit。\n```\n\n## git tag\n\n`git tag` 显示已存在的tag\n\n`git tag -a v2.0 -m 'xxx'` 增加v2.0的tag\n\n\n## git diff\n显示所有未添加至index的变更\n\n`git diff` 显示所有未添加至index的变更\n\n`git diff --cached` 显示所有已添加index但还未commit的变更\n\n`git diff HEAD^` 比较与上一个版本的差异\n\n`git diff HEAD -- ./lib` 比较与HEAD版本lib目录的差异\n\n`git diff origin/master..master` 比较远程分支master上有本地分支master上没有的\n\n`git diff origin/master..master --stat` 只显示差异的文件，不显示具体内容\n\n## git remote\n关于远程分支操作\n\n\n`git remote add origin git+ssh://git@192.168.53.168/VT.git` 增加远程定义（用于push/pull/fetch）\n\n`git remote rename origin origin_new` 重命名\n\n`git remote remove origin_new` 删除远程追踪\n\n`git remote show` 查看远程追踪\n\n`git remote show origin` 查看远程追踪的详细信息\n\n## git branch\n显示本地分支\n\n\n`git branch` 显示本地分支\n\n`git branch --contains 50089` 显示包含提交50089的分支\n\n`git branch -a` 显示所有分支\n\n`git branch -r` 显示所有原创分支\n\n`git branch --merged` 显示所有已合并到当前分支的分支\n\n`git branch --no-merged` 显示所有已合并到当前分支的分支\n\n`git branch -m master master_copy` 本地分支改名\n\n`git branch -d hotfixes/BJVEP933` 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\n\n`git branch -D hotfixes/BJVEP933` 强制删除分支hotfixes/BJVEP933\n\n## git checkout\n检出分支\n\n\n`git checkout -b master_copy` 从当前分支创建新分支master_copy并检出\n\n`git checkout -b master master_copy` 上面的完整版\n\n`git checkout features/performance` 检出已存在的features/performance分支\n\n`git checkout --track hotfixes/BJVEP933` 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\n\n`git checkout v2.0` 检出版本v2.0\n\n`git checkout -b develop origin/develop` 从远程分支develop创建新本地分支develop并检出\n\n`git checkout -- README` 检出head版本的README文件（可用于修改错误回退），可以简略`--`，加上是为了避免和分支 tag冲突\n\n## git merge\n分支合并\n\n\n`git merge origin/master` 合并远程master分支至当前分支\n\n```\nfast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。\n属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit\n```\n\n`git merge --no-ff origin/master` 强行关闭fast-forward方式，不使用fast-forward方式合并，保留分支的commit历史\n\n`git merge --squash origin/master` 把一些不必要commit进行压缩，把多次分支commit历史压缩为一次\n\n\n## git cherry-pick\n合并提交\n\n`git cherry-pick ff44785404a8e` 合并提交ff44785404a8e的修改\n```\n可以选择某一个分支中的一个或几个commit(s)来进行操作。\n例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，\n但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交。\n```\n`git cherry-pick (--continue | --quit | --abort)` 解决冲突使用\n\n`git cherry-pick -x <commit id>` 保留原提交者信息\n\n`git cherry-pick <start-commit-id>..<end-commit-id>` Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit\n\n`git cherry-pick <start-commit-id>^..<end-commit-id>`\n```\n前者表示把<start-commit-id>到<end-commit-id>之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；\n后者有\"^\"标志的表示把<start-commit-id>到<end-commit-id>之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。\n其中，<start-commit-id>到<end-commit-id>只需要commit-id的前6位即可，并且<start-commit-id>在时间上必须早于<end-commit-id>\n```\n\n\n## git push\n提交分支修改到远程分支\n\n`git push origin master` 将当前分支push到远程master分支\n\n`git push origin :hotfixes/BJVEP933` 删除远程仓库的hotfixes/BJVEP933分支\n\n`git push --tags` 把所有tag推送到远程仓库\n\n## git fetch\n获取所有远程分支（不更新本地分支，另需merge）到FETCH_HEAD\n\n`git fetch --prune` 获取所有原创分支并清除服务器上已删掉的分支\n\n## git pull\n获取所有远程分支并合并\n\n`git pull origin master` 获取远程分支master并merge到当前分支\n\n与 `git fetch`相比，差了一个merge操作\n\n\n## git mv\n重命名文件\n\n`git mv README README2` 重命名文件README为README2\n\n## git reset\n回滚操作\n\n`git reset --hard HEAD` 将当前版本重置为HEAD（通常用于merge失败回退），会导致工作区内容“丢失”\n\n`git reset HEAD <file>...` 取消暂存的文件\n\n```\n在使用 hard 选项时，一定要确保知道自己在做什么，不要在迷糊的时候使用这条选项。\n如果真的误操作了，也不要慌，因为只要 git 一般不会主动删除本地仓库中的内容，根据你丢失的情况，可以进行找回，\n比如在丢失后可以使用 git reset --hard ORIG_HEAD 立即恢复，或者使用 git reflog 命令查看之前分支的引用。\n```\n\n`git reset --mixed HEAD` mixed 比 soft 的作用域多了一个 暂存区。实际上 mixed 选项与 soft 只差了一个 add 操作。\n\n`git reset --soft HEAD` 会仅仅修改分支指向。而不修改工作区与暂存区的内容，我们可以接着做一次提交，形成一个新的 commit。这在我们撤销临时提交的场景下显得比较有用\n\n\n## git rebase\n```\nrebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。\n这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。提交历史是一条线。\nrebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送（怕不怕被打？）。\n所以使用 rebase 最好不要在公共分支上进行操作。\n```\n\n## git revert\n撤销提交\n\n\n`git revert dfb02e6` 撤销提交dfb02e6\n```\n如果我们想要用一个反向提交恢复项目的某个版本，那就需要 revert 来协助我们完成了。\n什么是反向提交呢，就是旧版本添加了的内容，要在新版本中删除，旧版本中删除了的内容，要在新版本中添加。\n这在分支已经推送到远程仓库的情境下非常有用。\nrevert 也不会修改历史提交记录，实际的操作相当于是检出目标提交的项目快照到工作区与暂存区，然后用一个新的提交完成版本的“回退”。\n```\n\n## git stash\n暂存当前修改，将所有至为HEAD状态\n\n`git stash list` 查看所有暂存\n\n`git stash show -p stash@{0}` 参考第一次暂存\n\n`git stash apply stash@{0}` 应用第一次暂存\n\n```\n有时，我们在一个分支上做了一些工作，修改了很多代码，而这时需要切换到另一个分支干点别的事。但又不想将只做了一半的工作提交。\n在曾经这样做过，将当前的修改做一次提交，message 填写 half of work，然后切换另一个分支去做工作，完成工作后，切换回来使用 reset —soft 或者是 commit amend。\n\ngit 为了帮我们解决这种需求，提供了 stash 命令。\n\nstash 将工作区与暂存区中的内容做一个提交，保存起来，然后使用reset hard选项恢复工作区与暂存区内容。我们可以随时使用 stash apply 将修改应用回来。\n\nstash 实现思路将我们的修改提交到本地仓库，使用特殊的分支指针（.git/refs/stash）引用该提交，然后在恢复的时候，将该提交恢复即可。\n```\n\n## git grep\n搜索文本\n\n`git grep \"delete from\"` 文件中搜索文本“delete from”\n\n参考链接：\n\n[git 命令](https://gist.github.com/guweigang/9848271)\n\n[git 原理](https://blog.coding.net/blog/principle-of-git)\n\n[git官方文档](https://git-scm.com/docs)\n","source":"_posts/tools/git_command.md","raw":"---\nurl: /2020/03/26/git-command.html\ntitle: \"Git 常用命令\"\nkeywords: \"Git 常用命令\"\ndescription: \"Git 常用命令\"\ndate: 2020-03-26T22:53:12+08:00\ndraft: false\ntags: [\"Git\"]\ntags_weight: 100\ncategories: [\"Git\"]\ncategoryes_weight: 100\n---\n## git init\n初始化本地git仓库（创建新仓库）\n\n`git init` 创建普通库\n\n`git init --bare` 创建裸库\n```\n当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。\n你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库\n\n当你创建一个裸库时，在工作目录下，只有一个.git目录，而没有类似于本地库那样的文件结构可供你直接进行浏览和修改。\n一般来说，一个裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面push自己的本地修改。\n项目团队里面的每个人都可以clone这个库，然后完成本地修改之后，往这个库中push自己的代码。\n```\n\n示例：在www用户的home目录创建裸仓库并clone，提交一次\n\n服务器：\n```\nmkdir git_test && cd git_test && git init --bare\n```\n\n客户端：\n```\nssh-copy-id www@ip\n\ngit clone ssh://www@ip/~/git_test\n\ntouch readme.md\n\ngit add .\n\ngit commit -m \"first commit\"\n\ngit push\n```\n\n## git config\n配置git的一些参数\n\n`git config user.name \"xxx\"` 配置用户名\n\n`git config user.email \"xxx@xxx.com\"` 配置邮箱\n\n`git config --global color.ui true` git status等命令自动着色\n\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\ngit对CRLF的处理配置\n\n`git config --global core.autocrlf true` 提交时转换为LF，检出时转换为CRLF\n\n`git config --global core.autocrlf input` 提交时转换为LF，检出时不转换\n\n`git config --global core.autocrlf false` 提交检出均不转换\n\n`git config --global core.safecrlf true` 拒绝提交包含混合换行符的文件\n\n`git config --global core.safecrlf false` 允许提交包含混合换行符的文件\n\n`git config --global core.safecrlf warn` 提交包含混合换行符的文件时给出警告\n\n加上 `--global` 表示全局配置，不加表示仅该仓库配置\n\n## git clone\n\nclone远程仓库\n\n`git clone git+ssh://git@192.168.53.168/VT.git`\n\n## git submodule\n\n不加参数时查看子模块\n\n`git submodule add https://github.com/wenjy/maupassant-hugo.git themes/maupassant`\n\n`git submodule update --remote` 更新子模块为远程项目的最新版本\n\n```\ngit Submodule 是一个很好的多项目使用共同类库的工具，他允许类库项目做为repository，子项目做为一个单独的git项目存在父项目中，\n子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，\n父项目中会的提交信息包含Submodule的信息，再clone父项目的时候可以把Submodule初始化。\n```\n\n## git status\n                                                \n查看当前版本状态（是否修改）\n\n## git add\n\n添加文件至index（暂存区）\n\n`git add xyz ` 添加xyz文件至index\n\n`git add .` 增加当前子目录下所有更改过的文件至index\n\n## git commit\n\n把暂存区的文件提交到本地仓库\n\n`git commit -m 'xxx'` 提交并备注信息\n\n`git commit --amend -m 'xxx'` 合并上一次提交（用于反复修改）\n\n`git commit -am 'xxx'` 将add和commit合为一步\n\n## git rm\n\n删除index中的文件\n\n`git rm xxx` 删除index中的xxx文件\n\n`git rm -r *` 递归删除\n\n## git log\n\n显示提交日志\n\n`git log` 显示全部的\n\n`git log -1` 显示1行日志 -n为n行\n\n`git log --stat` 显示提交日志及相关变动文件\n\n`git log -p -m` 更加详细的文件改动 diff\n\n`git log v2.0` 显示tag v2.0的日志\n\n`git log --pretty=format:'%h' --graph` 图示提交日志\n\n## git show\n\n显示某个提交的详细内容\n\n`git show dfb02e6e4f2f7b573337763e5c0013802e392818` 显示某个提交的详细内容\n\n`git show dfb02` 可只用commitid的前几位，一般不会重复\n\n`git show HEAD` 显示HEAD提交日志\n\n`git show HEAD^` 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\n\n`git show v2.0` 显示tag v2.0的日志及详细内容\n\n`git show master@{yesterday}` 显示master分支昨天的状态\n\n\n## git ls-files                                              \n列出git index包含的文件\n\n## git show-branch                                           \n显示当前分支历史\n\n`git show-branch --all` 显示所有分支历史\n\n## git whatchanged                                          \n显示提交历史对应的文件修改\n\n## git reflog                                                \n显示所有提交，包括孤立节点\n\n```\n什么叫孤立节点，git commit id 组成的树是单向链表，当前commit只指向父级的commit，当HEAD指向头指针\n我们每次commit merge 等操作都有可能出现不能追踪的commit。\n```\n\n## git tag\n\n`git tag` 显示已存在的tag\n\n`git tag -a v2.0 -m 'xxx'` 增加v2.0的tag\n\n\n## git diff\n显示所有未添加至index的变更\n\n`git diff` 显示所有未添加至index的变更\n\n`git diff --cached` 显示所有已添加index但还未commit的变更\n\n`git diff HEAD^` 比较与上一个版本的差异\n\n`git diff HEAD -- ./lib` 比较与HEAD版本lib目录的差异\n\n`git diff origin/master..master` 比较远程分支master上有本地分支master上没有的\n\n`git diff origin/master..master --stat` 只显示差异的文件，不显示具体内容\n\n## git remote\n关于远程分支操作\n\n\n`git remote add origin git+ssh://git@192.168.53.168/VT.git` 增加远程定义（用于push/pull/fetch）\n\n`git remote rename origin origin_new` 重命名\n\n`git remote remove origin_new` 删除远程追踪\n\n`git remote show` 查看远程追踪\n\n`git remote show origin` 查看远程追踪的详细信息\n\n## git branch\n显示本地分支\n\n\n`git branch` 显示本地分支\n\n`git branch --contains 50089` 显示包含提交50089的分支\n\n`git branch -a` 显示所有分支\n\n`git branch -r` 显示所有原创分支\n\n`git branch --merged` 显示所有已合并到当前分支的分支\n\n`git branch --no-merged` 显示所有已合并到当前分支的分支\n\n`git branch -m master master_copy` 本地分支改名\n\n`git branch -d hotfixes/BJVEP933` 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\n\n`git branch -D hotfixes/BJVEP933` 强制删除分支hotfixes/BJVEP933\n\n## git checkout\n检出分支\n\n\n`git checkout -b master_copy` 从当前分支创建新分支master_copy并检出\n\n`git checkout -b master master_copy` 上面的完整版\n\n`git checkout features/performance` 检出已存在的features/performance分支\n\n`git checkout --track hotfixes/BJVEP933` 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\n\n`git checkout v2.0` 检出版本v2.0\n\n`git checkout -b develop origin/develop` 从远程分支develop创建新本地分支develop并检出\n\n`git checkout -- README` 检出head版本的README文件（可用于修改错误回退），可以简略`--`，加上是为了避免和分支 tag冲突\n\n## git merge\n分支合并\n\n\n`git merge origin/master` 合并远程master分支至当前分支\n\n```\nfast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。\n属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit\n```\n\n`git merge --no-ff origin/master` 强行关闭fast-forward方式，不使用fast-forward方式合并，保留分支的commit历史\n\n`git merge --squash origin/master` 把一些不必要commit进行压缩，把多次分支commit历史压缩为一次\n\n\n## git cherry-pick\n合并提交\n\n`git cherry-pick ff44785404a8e` 合并提交ff44785404a8e的修改\n```\n可以选择某一个分支中的一个或几个commit(s)来进行操作。\n例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，\n但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交。\n```\n`git cherry-pick (--continue | --quit | --abort)` 解决冲突使用\n\n`git cherry-pick -x <commit id>` 保留原提交者信息\n\n`git cherry-pick <start-commit-id>..<end-commit-id>` Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit\n\n`git cherry-pick <start-commit-id>^..<end-commit-id>`\n```\n前者表示把<start-commit-id>到<end-commit-id>之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；\n后者有\"^\"标志的表示把<start-commit-id>到<end-commit-id>之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。\n其中，<start-commit-id>到<end-commit-id>只需要commit-id的前6位即可，并且<start-commit-id>在时间上必须早于<end-commit-id>\n```\n\n\n## git push\n提交分支修改到远程分支\n\n`git push origin master` 将当前分支push到远程master分支\n\n`git push origin :hotfixes/BJVEP933` 删除远程仓库的hotfixes/BJVEP933分支\n\n`git push --tags` 把所有tag推送到远程仓库\n\n## git fetch\n获取所有远程分支（不更新本地分支，另需merge）到FETCH_HEAD\n\n`git fetch --prune` 获取所有原创分支并清除服务器上已删掉的分支\n\n## git pull\n获取所有远程分支并合并\n\n`git pull origin master` 获取远程分支master并merge到当前分支\n\n与 `git fetch`相比，差了一个merge操作\n\n\n## git mv\n重命名文件\n\n`git mv README README2` 重命名文件README为README2\n\n## git reset\n回滚操作\n\n`git reset --hard HEAD` 将当前版本重置为HEAD（通常用于merge失败回退），会导致工作区内容“丢失”\n\n`git reset HEAD <file>...` 取消暂存的文件\n\n```\n在使用 hard 选项时，一定要确保知道自己在做什么，不要在迷糊的时候使用这条选项。\n如果真的误操作了，也不要慌，因为只要 git 一般不会主动删除本地仓库中的内容，根据你丢失的情况，可以进行找回，\n比如在丢失后可以使用 git reset --hard ORIG_HEAD 立即恢复，或者使用 git reflog 命令查看之前分支的引用。\n```\n\n`git reset --mixed HEAD` mixed 比 soft 的作用域多了一个 暂存区。实际上 mixed 选项与 soft 只差了一个 add 操作。\n\n`git reset --soft HEAD` 会仅仅修改分支指向。而不修改工作区与暂存区的内容，我们可以接着做一次提交，形成一个新的 commit。这在我们撤销临时提交的场景下显得比较有用\n\n\n## git rebase\n```\nrebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。\n这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。提交历史是一条线。\nrebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送（怕不怕被打？）。\n所以使用 rebase 最好不要在公共分支上进行操作。\n```\n\n## git revert\n撤销提交\n\n\n`git revert dfb02e6` 撤销提交dfb02e6\n```\n如果我们想要用一个反向提交恢复项目的某个版本，那就需要 revert 来协助我们完成了。\n什么是反向提交呢，就是旧版本添加了的内容，要在新版本中删除，旧版本中删除了的内容，要在新版本中添加。\n这在分支已经推送到远程仓库的情境下非常有用。\nrevert 也不会修改历史提交记录，实际的操作相当于是检出目标提交的项目快照到工作区与暂存区，然后用一个新的提交完成版本的“回退”。\n```\n\n## git stash\n暂存当前修改，将所有至为HEAD状态\n\n`git stash list` 查看所有暂存\n\n`git stash show -p stash@{0}` 参考第一次暂存\n\n`git stash apply stash@{0}` 应用第一次暂存\n\n```\n有时，我们在一个分支上做了一些工作，修改了很多代码，而这时需要切换到另一个分支干点别的事。但又不想将只做了一半的工作提交。\n在曾经这样做过，将当前的修改做一次提交，message 填写 half of work，然后切换另一个分支去做工作，完成工作后，切换回来使用 reset —soft 或者是 commit amend。\n\ngit 为了帮我们解决这种需求，提供了 stash 命令。\n\nstash 将工作区与暂存区中的内容做一个提交，保存起来，然后使用reset hard选项恢复工作区与暂存区内容。我们可以随时使用 stash apply 将修改应用回来。\n\nstash 实现思路将我们的修改提交到本地仓库，使用特殊的分支指针（.git/refs/stash）引用该提交，然后在恢复的时候，将该提交恢复即可。\n```\n\n## git grep\n搜索文本\n\n`git grep \"delete from\"` 文件中搜索文本“delete from”\n\n参考链接：\n\n[git 命令](https://gist.github.com/guweigang/9848271)\n\n[git 原理](https://blog.coding.net/blog/principle-of-git)\n\n[git官方文档](https://git-scm.com/docs)\n","slug":"tools/git_command","published":1,"updated":"2020-08-28T13:49:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3j002omv050ck8dfnm","content":"<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h2><p>初始化本地git仓库（创建新仓库）</p>\n<p><code>git init</code> 创建普通库</p>\n<p><code>git init --bare</code> 创建裸库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。</span><br><span class=\"line\">你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库</span><br><span class=\"line\"></span><br><span class=\"line\">当你创建一个裸库时，在工作目录下，只有一个.git目录，而没有类似于本地库那样的文件结构可供你直接进行浏览和修改。</span><br><span class=\"line\">一般来说，一个裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面push自己的本地修改。</span><br><span class=\"line\">项目团队里面的每个人都可以clone这个库，然后完成本地修改之后，往这个库中push自己的代码。</span><br></pre></td></tr></table></figure>\n\n<p>示例：在www用户的home目录创建裸仓库并clone，提交一次</p>\n<p>服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir git_test &amp;&amp; cd git_test &amp;&amp; git init --bare</span><br></pre></td></tr></table></figure>\n\n<p>客户端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id www@ip</span><br><span class=\"line\"></span><br><span class=\"line\">git clone ssh:&#x2F;&#x2F;www@ip&#x2F;~&#x2F;git_test</span><br><span class=\"line\"></span><br><span class=\"line\">touch readme.md</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h2><p>配置git的一些参数</p>\n<p><code>git config user.name &quot;xxx&quot;</code> 配置用户名</p>\n<p><code>git config user.email &quot;xxx@xxx.com&quot;</code> 配置邮箱</p>\n<p><code>git config --global color.ui true</code> git status等命令自动着色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>git对CRLF的处理配置</p>\n<p><code>git config --global core.autocrlf true</code> 提交时转换为LF，检出时转换为CRLF</p>\n<p><code>git config --global core.autocrlf input</code> 提交时转换为LF，检出时不转换</p>\n<p><code>git config --global core.autocrlf false</code> 提交检出均不转换</p>\n<p><code>git config --global core.safecrlf true</code> 拒绝提交包含混合换行符的文件</p>\n<p><code>git config --global core.safecrlf false</code> 允许提交包含混合换行符的文件</p>\n<p><code>git config --global core.safecrlf warn</code> 提交包含混合换行符的文件时给出警告</p>\n<p>加上 <code>--global</code> 表示全局配置，不加表示仅该仓库配置</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p>clone远程仓库</p>\n<p><code>git clone git+ssh://git@192.168.53.168/VT.git</code></p>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><p>不加参数时查看子模块</p>\n<p><code>git submodule add https://github.com/wenjy/maupassant-hugo.git themes/maupassant</code></p>\n<p><code>git submodule update --remote</code> 更新子模块为远程项目的最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git Submodule 是一个很好的多项目使用共同类库的工具，他允许类库项目做为repository，子项目做为一个单独的git项目存在父项目中，</span><br><span class=\"line\">子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，</span><br><span class=\"line\">父项目中会的提交信息包含Submodule的信息，再clone父项目的时候可以把Submodule初始化。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h2><p>查看当前版本状态（是否修改）</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p>添加文件至index（暂存区）</p>\n<p><code>git add xyz </code> 添加xyz文件至index</p>\n<p><code>git add .</code> 增加当前子目录下所有更改过的文件至index</p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p>把暂存区的文件提交到本地仓库</p>\n<p><code>git commit -m &#39;xxx&#39;</code> 提交并备注信息</p>\n<p><code>git commit --amend -m &#39;xxx&#39;</code> 合并上一次提交（用于反复修改）</p>\n<p><code>git commit -am &#39;xxx&#39;</code> 将add和commit合为一步</p>\n<h2 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h2><p>删除index中的文件</p>\n<p><code>git rm xxx</code> 删除index中的xxx文件</p>\n<p><code>git rm -r *</code> 递归删除</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p>显示提交日志</p>\n<p><code>git log</code> 显示全部的</p>\n<p><code>git log -1</code> 显示1行日志 -n为n行</p>\n<p><code>git log --stat</code> 显示提交日志及相关变动文件</p>\n<p><code>git log -p -m</code> 更加详细的文件改动 diff</p>\n<p><code>git log v2.0</code> 显示tag v2.0的日志</p>\n<p><code>git log --pretty=format:&#39;%h&#39; --graph</code> 图示提交日志</p>\n<h2 id=\"git-show\"><a href=\"#git-show\" class=\"headerlink\" title=\"git show\"></a>git show</h2><p>显示某个提交的详细内容</p>\n<p><code>git show dfb02e6e4f2f7b573337763e5c0013802e392818</code> 显示某个提交的详细内容</p>\n<p><code>git show dfb02</code> 可只用commitid的前几位，一般不会重复</p>\n<p><code>git show HEAD</code> 显示HEAD提交日志</p>\n<p><code>git show HEAD^</code> 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</p>\n<p><code>git show v2.0</code> 显示tag v2.0的日志及详细内容</p>\n<p><code>git show master@&#123;yesterday&#125;</code> 显示master分支昨天的状态</p>\n<h2 id=\"git-ls-files\"><a href=\"#git-ls-files\" class=\"headerlink\" title=\"git ls-files\"></a>git ls-files</h2><p>列出git index包含的文件</p>\n<h2 id=\"git-show-branch\"><a href=\"#git-show-branch\" class=\"headerlink\" title=\"git show-branch\"></a>git show-branch</h2><p>显示当前分支历史</p>\n<p><code>git show-branch --all</code> 显示所有分支历史</p>\n<h2 id=\"git-whatchanged\"><a href=\"#git-whatchanged\" class=\"headerlink\" title=\"git whatchanged\"></a>git whatchanged</h2><p>显示提交历史对应的文件修改</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>显示所有提交，包括孤立节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么叫孤立节点，git commit id 组成的树是单向链表，当前commit只指向父级的commit，当HEAD指向头指针</span><br><span class=\"line\">我们每次commit merge 等操作都有可能出现不能追踪的commit。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h2><p><code>git tag</code> 显示已存在的tag</p>\n<p><code>git tag -a v2.0 -m &#39;xxx&#39;</code> 增加v2.0的tag</p>\n<h2 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h2><p>显示所有未添加至index的变更</p>\n<p><code>git diff</code> 显示所有未添加至index的变更</p>\n<p><code>git diff --cached</code> 显示所有已添加index但还未commit的变更</p>\n<p><code>git diff HEAD^</code> 比较与上一个版本的差异</p>\n<p><code>git diff HEAD -- ./lib</code> 比较与HEAD版本lib目录的差异</p>\n<p><code>git diff origin/master..master</code> 比较远程分支master上有本地分支master上没有的</p>\n<p><code>git diff origin/master..master --stat</code> 只显示差异的文件，不显示具体内容</p>\n<h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h2><p>关于远程分支操作</p>\n<p><code>git remote add origin git+ssh://git@192.168.53.168/VT.git</code> 增加远程定义（用于push/pull/fetch）</p>\n<p><code>git remote rename origin origin_new</code> 重命名</p>\n<p><code>git remote remove origin_new</code> 删除远程追踪</p>\n<p><code>git remote show</code> 查看远程追踪</p>\n<p><code>git remote show origin</code> 查看远程追踪的详细信息</p>\n<h2 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h2><p>显示本地分支</p>\n<p><code>git branch</code> 显示本地分支</p>\n<p><code>git branch --contains 50089</code> 显示包含提交50089的分支</p>\n<p><code>git branch -a</code> 显示所有分支</p>\n<p><code>git branch -r</code> 显示所有原创分支</p>\n<p><code>git branch --merged</code> 显示所有已合并到当前分支的分支</p>\n<p><code>git branch --no-merged</code> 显示所有已合并到当前分支的分支</p>\n<p><code>git branch -m master master_copy</code> 本地分支改名</p>\n<p><code>git branch -d hotfixes/BJVEP933</code> 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</p>\n<p><code>git branch -D hotfixes/BJVEP933</code> 强制删除分支hotfixes/BJVEP933</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>检出分支</p>\n<p><code>git checkout -b master_copy</code> 从当前分支创建新分支master_copy并检出</p>\n<p><code>git checkout -b master master_copy</code> 上面的完整版</p>\n<p><code>git checkout features/performance</code> 检出已存在的features/performance分支</p>\n<p><code>git checkout --track hotfixes/BJVEP933</code> 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</p>\n<p><code>git checkout v2.0</code> 检出版本v2.0</p>\n<p><code>git checkout -b develop origin/develop</code> 从远程分支develop创建新本地分支develop并检出</p>\n<p><code>git checkout -- README</code> 检出head版本的README文件（可用于修改错误回退），可以简略<code>--</code>，加上是为了避免和分支 tag冲突</p>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h2><p>分支合并</p>\n<p><code>git merge origin/master</code> 合并远程master分支至当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。</span><br><span class=\"line\">属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit</span><br></pre></td></tr></table></figure>\n\n<p><code>git merge --no-ff origin/master</code> 强行关闭fast-forward方式，不使用fast-forward方式合并，保留分支的commit历史</p>\n<p><code>git merge --squash origin/master</code> 把一些不必要commit进行压缩，把多次分支commit历史压缩为一次</p>\n<h2 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h2><p>合并提交</p>\n<p><code>git cherry-pick ff44785404a8e</code> 合并提交ff44785404a8e的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以选择某一个分支中的一个或几个commit(s)来进行操作。</span><br><span class=\"line\">例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，</span><br><span class=\"line\">但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交。</span><br></pre></td></tr></table></figure>\n<p><code>git cherry-pick (--continue | --quit | --abort)</code> 解决冲突使用</p>\n<p><code>git cherry-pick -x &lt;commit id&gt;</code> 保留原提交者信息</p>\n<p><code>git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;</code> Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit</p>\n<p><code>git cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；</span><br><span class=\"line\">后者有&quot;^&quot;标志的表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。</span><br><span class=\"line\">其中，&lt;start-commit-id&gt;到&lt;end-commit-id&gt;只需要commit-id的前6位即可，并且&lt;start-commit-id&gt;在时间上必须早于&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h2><p>提交分支修改到远程分支</p>\n<p><code>git push origin master</code> 将当前分支push到远程master分支</p>\n<p><code>git push origin :hotfixes/BJVEP933</code> 删除远程仓库的hotfixes/BJVEP933分支</p>\n<p><code>git push --tags</code> 把所有tag推送到远程仓库</p>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h2><p>获取所有远程分支（不更新本地分支，另需merge）到FETCH_HEAD</p>\n<p><code>git fetch --prune</code> 获取所有原创分支并清除服务器上已删掉的分支</p>\n<h2 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h2><p>获取所有远程分支并合并</p>\n<p><code>git pull origin master</code> 获取远程分支master并merge到当前分支</p>\n<p>与 <code>git fetch</code>相比，差了一个merge操作</p>\n<h2 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h2><p>重命名文件</p>\n<p><code>git mv README README2</code> 重命名文件README为README2</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>回滚操作</p>\n<p><code>git reset --hard HEAD</code> 将当前版本重置为HEAD（通常用于merge失败回退），会导致工作区内容“丢失”</p>\n<p><code>git reset HEAD &lt;file&gt;...</code> 取消暂存的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在使用 hard 选项时，一定要确保知道自己在做什么，不要在迷糊的时候使用这条选项。</span><br><span class=\"line\">如果真的误操作了，也不要慌，因为只要 git 一般不会主动删除本地仓库中的内容，根据你丢失的情况，可以进行找回，</span><br><span class=\"line\">比如在丢失后可以使用 git reset --hard ORIG_HEAD 立即恢复，或者使用 git reflog 命令查看之前分支的引用。</span><br></pre></td></tr></table></figure>\n\n<p><code>git reset --mixed HEAD</code> mixed 比 soft 的作用域多了一个 暂存区。实际上 mixed 选项与 soft 只差了一个 add 操作。</p>\n<p><code>git reset --soft HEAD</code> 会仅仅修改分支指向。而不修改工作区与暂存区的内容，我们可以接着做一次提交，形成一个新的 commit。这在我们撤销临时提交的场景下显得比较有用</p>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。</span><br><span class=\"line\">这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。提交历史是一条线。</span><br><span class=\"line\">rebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送（怕不怕被打？）。</span><br><span class=\"line\">所以使用 rebase 最好不要在公共分支上进行操作。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p>撤销提交</p>\n<p><code>git revert dfb02e6</code> 撤销提交dfb02e6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果我们想要用一个反向提交恢复项目的某个版本，那就需要 revert 来协助我们完成了。</span><br><span class=\"line\">什么是反向提交呢，就是旧版本添加了的内容，要在新版本中删除，旧版本中删除了的内容，要在新版本中添加。</span><br><span class=\"line\">这在分支已经推送到远程仓库的情境下非常有用。</span><br><span class=\"line\">revert 也不会修改历史提交记录，实际的操作相当于是检出目标提交的项目快照到工作区与暂存区，然后用一个新的提交完成版本的“回退”。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><p>暂存当前修改，将所有至为HEAD状态</p>\n<p><code>git stash list</code> 查看所有暂存</p>\n<p><code>git stash show -p stash@&#123;0&#125;</code> 参考第一次暂存</p>\n<p><code>git stash apply stash@&#123;0&#125;</code> 应用第一次暂存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有时，我们在一个分支上做了一些工作，修改了很多代码，而这时需要切换到另一个分支干点别的事。但又不想将只做了一半的工作提交。</span><br><span class=\"line\">在曾经这样做过，将当前的修改做一次提交，message 填写 half of work，然后切换另一个分支去做工作，完成工作后，切换回来使用 reset —soft 或者是 commit amend。</span><br><span class=\"line\"></span><br><span class=\"line\">git 为了帮我们解决这种需求，提供了 stash 命令。</span><br><span class=\"line\"></span><br><span class=\"line\">stash 将工作区与暂存区中的内容做一个提交，保存起来，然后使用reset hard选项恢复工作区与暂存区内容。我们可以随时使用 stash apply 将修改应用回来。</span><br><span class=\"line\"></span><br><span class=\"line\">stash 实现思路将我们的修改提交到本地仓库，使用特殊的分支指针（.git&#x2F;refs&#x2F;stash）引用该提交，然后在恢复的时候，将该提交恢复即可。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-grep\"><a href=\"#git-grep\" class=\"headerlink\" title=\"git grep\"></a>git grep</h2><p>搜索文本</p>\n<p><code>git grep &quot;delete from&quot;</code> 文件中搜索文本“delete from”</p>\n<p>参考链接：</p>\n<p><a href=\"https://gist.github.com/guweigang/9848271\">git 命令</a></p>\n<p><a href=\"https://blog.coding.net/blog/principle-of-git\">git 原理</a></p>\n<p><a href=\"https://git-scm.com/docs\">git官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h2><p>初始化本地git仓库（创建新仓库）</p>\n<p><code>git init</code> 创建普通库</p>\n<p><code>git init --bare</code> 创建裸库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当你创建一个普通库时，在工作目录下，除了.git目录之外，你还可以看到库中所包含的所有源文件。</span><br><span class=\"line\">你拥有了一个可以进行浏览和修改（add, commit, delete等）的本地库</span><br><span class=\"line\"></span><br><span class=\"line\">当你创建一个裸库时，在工作目录下，只有一个.git目录，而没有类似于本地库那样的文件结构可供你直接进行浏览和修改。</span><br><span class=\"line\">一般来说，一个裸库往往被创建用于作为大家一起工作的共享库，每一个人都可以往里面push自己的本地修改。</span><br><span class=\"line\">项目团队里面的每个人都可以clone这个库，然后完成本地修改之后，往这个库中push自己的代码。</span><br></pre></td></tr></table></figure>\n\n<p>示例：在www用户的home目录创建裸仓库并clone，提交一次</p>\n<p>服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir git_test &amp;&amp; cd git_test &amp;&amp; git init --bare</span><br></pre></td></tr></table></figure>\n\n<p>客户端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id www@ip</span><br><span class=\"line\"></span><br><span class=\"line\">git clone ssh:&#x2F;&#x2F;www@ip&#x2F;~&#x2F;git_test</span><br><span class=\"line\"></span><br><span class=\"line\">touch readme.md</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-config\"><a href=\"#git-config\" class=\"headerlink\" title=\"git config\"></a>git config</h2><p>配置git的一些参数</p>\n<p><code>git config user.name &quot;xxx&quot;</code> 配置用户名</p>\n<p><code>git config user.email &quot;xxx@xxx.com&quot;</code> 配置邮箱</p>\n<p><code>git config --global color.ui true</code> git status等命令自动着色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>git对CRLF的处理配置</p>\n<p><code>git config --global core.autocrlf true</code> 提交时转换为LF，检出时转换为CRLF</p>\n<p><code>git config --global core.autocrlf input</code> 提交时转换为LF，检出时不转换</p>\n<p><code>git config --global core.autocrlf false</code> 提交检出均不转换</p>\n<p><code>git config --global core.safecrlf true</code> 拒绝提交包含混合换行符的文件</p>\n<p><code>git config --global core.safecrlf false</code> 允许提交包含混合换行符的文件</p>\n<p><code>git config --global core.safecrlf warn</code> 提交包含混合换行符的文件时给出警告</p>\n<p>加上 <code>--global</code> 表示全局配置，不加表示仅该仓库配置</p>\n<h2 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h2><p>clone远程仓库</p>\n<p><code>git clone git+ssh://git@192.168.53.168/VT.git</code></p>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><p>不加参数时查看子模块</p>\n<p><code>git submodule add https://github.com/wenjy/maupassant-hugo.git themes/maupassant</code></p>\n<p><code>git submodule update --remote</code> 更新子模块为远程项目的最新版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git Submodule 是一个很好的多项目使用共同类库的工具，他允许类库项目做为repository，子项目做为一个单独的git项目存在父项目中，</span><br><span class=\"line\">子项目可以有自己的独立的commit，push，pull。而父项目以Submodule的形式包含子项目，父项目可以指定子项目header，</span><br><span class=\"line\">父项目中会的提交信息包含Submodule的信息，再clone父项目的时候可以把Submodule初始化。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h2><p>查看当前版本状态（是否修改）</p>\n<h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p>添加文件至index（暂存区）</p>\n<p><code>git add xyz </code> 添加xyz文件至index</p>\n<p><code>git add .</code> 增加当前子目录下所有更改过的文件至index</p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p>把暂存区的文件提交到本地仓库</p>\n<p><code>git commit -m &#39;xxx&#39;</code> 提交并备注信息</p>\n<p><code>git commit --amend -m &#39;xxx&#39;</code> 合并上一次提交（用于反复修改）</p>\n<p><code>git commit -am &#39;xxx&#39;</code> 将add和commit合为一步</p>\n<h2 id=\"git-rm\"><a href=\"#git-rm\" class=\"headerlink\" title=\"git rm\"></a>git rm</h2><p>删除index中的文件</p>\n<p><code>git rm xxx</code> 删除index中的xxx文件</p>\n<p><code>git rm -r *</code> 递归删除</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p>显示提交日志</p>\n<p><code>git log</code> 显示全部的</p>\n<p><code>git log -1</code> 显示1行日志 -n为n行</p>\n<p><code>git log --stat</code> 显示提交日志及相关变动文件</p>\n<p><code>git log -p -m</code> 更加详细的文件改动 diff</p>\n<p><code>git log v2.0</code> 显示tag v2.0的日志</p>\n<p><code>git log --pretty=format:&#39;%h&#39; --graph</code> 图示提交日志</p>\n<h2 id=\"git-show\"><a href=\"#git-show\" class=\"headerlink\" title=\"git show\"></a>git show</h2><p>显示某个提交的详细内容</p>\n<p><code>git show dfb02e6e4f2f7b573337763e5c0013802e392818</code> 显示某个提交的详细内容</p>\n<p><code>git show dfb02</code> 可只用commitid的前几位，一般不会重复</p>\n<p><code>git show HEAD</code> 显示HEAD提交日志</p>\n<p><code>git show HEAD^</code> 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</p>\n<p><code>git show v2.0</code> 显示tag v2.0的日志及详细内容</p>\n<p><code>git show master@&#123;yesterday&#125;</code> 显示master分支昨天的状态</p>\n<h2 id=\"git-ls-files\"><a href=\"#git-ls-files\" class=\"headerlink\" title=\"git ls-files\"></a>git ls-files</h2><p>列出git index包含的文件</p>\n<h2 id=\"git-show-branch\"><a href=\"#git-show-branch\" class=\"headerlink\" title=\"git show-branch\"></a>git show-branch</h2><p>显示当前分支历史</p>\n<p><code>git show-branch --all</code> 显示所有分支历史</p>\n<h2 id=\"git-whatchanged\"><a href=\"#git-whatchanged\" class=\"headerlink\" title=\"git whatchanged\"></a>git whatchanged</h2><p>显示提交历史对应的文件修改</p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>显示所有提交，包括孤立节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么叫孤立节点，git commit id 组成的树是单向链表，当前commit只指向父级的commit，当HEAD指向头指针</span><br><span class=\"line\">我们每次commit merge 等操作都有可能出现不能追踪的commit。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-tag\"><a href=\"#git-tag\" class=\"headerlink\" title=\"git tag\"></a>git tag</h2><p><code>git tag</code> 显示已存在的tag</p>\n<p><code>git tag -a v2.0 -m &#39;xxx&#39;</code> 增加v2.0的tag</p>\n<h2 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h2><p>显示所有未添加至index的变更</p>\n<p><code>git diff</code> 显示所有未添加至index的变更</p>\n<p><code>git diff --cached</code> 显示所有已添加index但还未commit的变更</p>\n<p><code>git diff HEAD^</code> 比较与上一个版本的差异</p>\n<p><code>git diff HEAD -- ./lib</code> 比较与HEAD版本lib目录的差异</p>\n<p><code>git diff origin/master..master</code> 比较远程分支master上有本地分支master上没有的</p>\n<p><code>git diff origin/master..master --stat</code> 只显示差异的文件，不显示具体内容</p>\n<h2 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h2><p>关于远程分支操作</p>\n<p><code>git remote add origin git+ssh://git@192.168.53.168/VT.git</code> 增加远程定义（用于push/pull/fetch）</p>\n<p><code>git remote rename origin origin_new</code> 重命名</p>\n<p><code>git remote remove origin_new</code> 删除远程追踪</p>\n<p><code>git remote show</code> 查看远程追踪</p>\n<p><code>git remote show origin</code> 查看远程追踪的详细信息</p>\n<h2 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h2><p>显示本地分支</p>\n<p><code>git branch</code> 显示本地分支</p>\n<p><code>git branch --contains 50089</code> 显示包含提交50089的分支</p>\n<p><code>git branch -a</code> 显示所有分支</p>\n<p><code>git branch -r</code> 显示所有原创分支</p>\n<p><code>git branch --merged</code> 显示所有已合并到当前分支的分支</p>\n<p><code>git branch --no-merged</code> 显示所有已合并到当前分支的分支</p>\n<p><code>git branch -m master master_copy</code> 本地分支改名</p>\n<p><code>git branch -d hotfixes/BJVEP933</code> 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</p>\n<p><code>git branch -D hotfixes/BJVEP933</code> 强制删除分支hotfixes/BJVEP933</p>\n<h2 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h2><p>检出分支</p>\n<p><code>git checkout -b master_copy</code> 从当前分支创建新分支master_copy并检出</p>\n<p><code>git checkout -b master master_copy</code> 上面的完整版</p>\n<p><code>git checkout features/performance</code> 检出已存在的features/performance分支</p>\n<p><code>git checkout --track hotfixes/BJVEP933</code> 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</p>\n<p><code>git checkout v2.0</code> 检出版本v2.0</p>\n<p><code>git checkout -b develop origin/develop</code> 从远程分支develop创建新本地分支develop并检出</p>\n<p><code>git checkout -- README</code> 检出head版本的README文件（可用于修改错误回退），可以简略<code>--</code>，加上是为了避免和分支 tag冲突</p>\n<h2 id=\"git-merge\"><a href=\"#git-merge\" class=\"headerlink\" title=\"git merge\"></a>git merge</h2><p>分支合并</p>\n<p><code>git merge origin/master</code> 合并远程master分支至当前分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。</span><br><span class=\"line\">属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit</span><br></pre></td></tr></table></figure>\n\n<p><code>git merge --no-ff origin/master</code> 强行关闭fast-forward方式，不使用fast-forward方式合并，保留分支的commit历史</p>\n<p><code>git merge --squash origin/master</code> 把一些不必要commit进行压缩，把多次分支commit历史压缩为一次</p>\n<h2 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h2><p>合并提交</p>\n<p><code>git cherry-pick ff44785404a8e</code> 合并提交ff44785404a8e的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以选择某一个分支中的一个或几个commit(s)来进行操作。</span><br><span class=\"line\">例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，</span><br><span class=\"line\">但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交。</span><br></pre></td></tr></table></figure>\n<p><code>git cherry-pick (--continue | --quit | --abort)</code> 解决冲突使用</p>\n<p><code>git cherry-pick -x &lt;commit id&gt;</code> 保留原提交者信息</p>\n<p><code>git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;</code> Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit</p>\n<p><code>git cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；</span><br><span class=\"line\">后者有&quot;^&quot;标志的表示把&lt;start-commit-id&gt;到&lt;end-commit-id&gt;之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。</span><br><span class=\"line\">其中，&lt;start-commit-id&gt;到&lt;end-commit-id&gt;只需要commit-id的前6位即可，并且&lt;start-commit-id&gt;在时间上必须早于&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h2><p>提交分支修改到远程分支</p>\n<p><code>git push origin master</code> 将当前分支push到远程master分支</p>\n<p><code>git push origin :hotfixes/BJVEP933</code> 删除远程仓库的hotfixes/BJVEP933分支</p>\n<p><code>git push --tags</code> 把所有tag推送到远程仓库</p>\n<h2 id=\"git-fetch\"><a href=\"#git-fetch\" class=\"headerlink\" title=\"git fetch\"></a>git fetch</h2><p>获取所有远程分支（不更新本地分支，另需merge）到FETCH_HEAD</p>\n<p><code>git fetch --prune</code> 获取所有原创分支并清除服务器上已删掉的分支</p>\n<h2 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h2><p>获取所有远程分支并合并</p>\n<p><code>git pull origin master</code> 获取远程分支master并merge到当前分支</p>\n<p>与 <code>git fetch</code>相比，差了一个merge操作</p>\n<h2 id=\"git-mv\"><a href=\"#git-mv\" class=\"headerlink\" title=\"git mv\"></a>git mv</h2><p>重命名文件</p>\n<p><code>git mv README README2</code> 重命名文件README为README2</p>\n<h2 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h2><p>回滚操作</p>\n<p><code>git reset --hard HEAD</code> 将当前版本重置为HEAD（通常用于merge失败回退），会导致工作区内容“丢失”</p>\n<p><code>git reset HEAD &lt;file&gt;...</code> 取消暂存的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在使用 hard 选项时，一定要确保知道自己在做什么，不要在迷糊的时候使用这条选项。</span><br><span class=\"line\">如果真的误操作了，也不要慌，因为只要 git 一般不会主动删除本地仓库中的内容，根据你丢失的情况，可以进行找回，</span><br><span class=\"line\">比如在丢失后可以使用 git reset --hard ORIG_HEAD 立即恢复，或者使用 git reflog 命令查看之前分支的引用。</span><br></pre></td></tr></table></figure>\n\n<p><code>git reset --mixed HEAD</code> mixed 比 soft 的作用域多了一个 暂存区。实际上 mixed 选项与 soft 只差了一个 add 操作。</p>\n<p><code>git reset --soft HEAD</code> 会仅仅修改分支指向。而不修改工作区与暂存区的内容，我们可以接着做一次提交，形成一个新的 commit。这在我们撤销临时提交的场景下显得比较有用</p>\n<h2 id=\"git-rebase\"><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rebase 会把从 Merge Base 以来的所有提交，以补丁的形式一个一个重新达到目标分支上。</span><br><span class=\"line\">这使得目标分支合并该分支的时候会直接 Fast Forward，即不会产生任何冲突。提交历史是一条线。</span><br><span class=\"line\">rebase 的一个缺点，那就是修改了分支的历史提交。如果已经将分支推送到了远程仓库，会导致无法将修改后的分支推送上去，必须使用 -f 参数（force）强行推送（怕不怕被打？）。</span><br><span class=\"line\">所以使用 rebase 最好不要在公共分支上进行操作。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-revert\"><a href=\"#git-revert\" class=\"headerlink\" title=\"git revert\"></a>git revert</h2><p>撤销提交</p>\n<p><code>git revert dfb02e6</code> 撤销提交dfb02e6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果我们想要用一个反向提交恢复项目的某个版本，那就需要 revert 来协助我们完成了。</span><br><span class=\"line\">什么是反向提交呢，就是旧版本添加了的内容，要在新版本中删除，旧版本中删除了的内容，要在新版本中添加。</span><br><span class=\"line\">这在分支已经推送到远程仓库的情境下非常有用。</span><br><span class=\"line\">revert 也不会修改历史提交记录，实际的操作相当于是检出目标提交的项目快照到工作区与暂存区，然后用一个新的提交完成版本的“回退”。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><p>暂存当前修改，将所有至为HEAD状态</p>\n<p><code>git stash list</code> 查看所有暂存</p>\n<p><code>git stash show -p stash@&#123;0&#125;</code> 参考第一次暂存</p>\n<p><code>git stash apply stash@&#123;0&#125;</code> 应用第一次暂存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有时，我们在一个分支上做了一些工作，修改了很多代码，而这时需要切换到另一个分支干点别的事。但又不想将只做了一半的工作提交。</span><br><span class=\"line\">在曾经这样做过，将当前的修改做一次提交，message 填写 half of work，然后切换另一个分支去做工作，完成工作后，切换回来使用 reset —soft 或者是 commit amend。</span><br><span class=\"line\"></span><br><span class=\"line\">git 为了帮我们解决这种需求，提供了 stash 命令。</span><br><span class=\"line\"></span><br><span class=\"line\">stash 将工作区与暂存区中的内容做一个提交，保存起来，然后使用reset hard选项恢复工作区与暂存区内容。我们可以随时使用 stash apply 将修改应用回来。</span><br><span class=\"line\"></span><br><span class=\"line\">stash 实现思路将我们的修改提交到本地仓库，使用特殊的分支指针（.git&#x2F;refs&#x2F;stash）引用该提交，然后在恢复的时候，将该提交恢复即可。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-grep\"><a href=\"#git-grep\" class=\"headerlink\" title=\"git grep\"></a>git grep</h2><p>搜索文本</p>\n<p><code>git grep &quot;delete from&quot;</code> 文件中搜索文本“delete from”</p>\n<p>参考链接：</p>\n<p><a href=\"https://gist.github.com/guweigang/9848271\">git 命令</a></p>\n<p><a href=\"https://blog.coding.net/blog/principle-of-git\">git 原理</a></p>\n<p><a href=\"https://git-scm.com/docs\">git官方文档</a></p>\n"},{"url":"/2020/03/26/linux-command.html","title":"Linux 常用命令","keywords":"Linux 常用命令","description":"Linux 常用命令","date":"2020-03-26T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## ls\n\n`ls -alh` \n\n```\n-a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件\n-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来\n-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)\n```\n\n## cd\n\n`cd /usr/local` 使用绝对路径\n\n`cd ../` 使用相对路径\n\n`cd ~` home目录\n\n`cd -` 返回进入此目录之前所在的目录\n\n## pwd\n查看“当前工作目录”的完整路径\n\n`pwd -P`  显示出实际路径，而非使用连接（link）路径\n\n`pwd -L` 目录连接链接时，输出连接路径\n\n## rm\n删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。\n对于链接文件，只是删除了链接，原有文件均保持不变。\n\n`rm -rf /a/b/c` 我是谁，我在哪里，我做了什么？\n\n`rm -i /a/b/*.log` 可以使用通配符\n\n```\n-f, --force 忽略不存在的文件，从不给出提示。\n-i, --interactive 进行交互式删除\n-r, -R, --recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。\n```\n\n## rmdir\n删除空目录，一个目录被删除之前必须是空的。\n\n## mv\nmv命令是move的缩写，可以用来移动文件或者将文件改名。\n\n`mv test.log test1.txt` 把test.log重命名为test1.txt\n\n## cp\n复制文件或者目录\n\n`cp log1 log.bak` 复制log1为log.bak\n\n## cat\n显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。\n\n`cat filename` 显示filename的内容\n\n`cat filename1 fielname2 > filename3` 把filename1和2合并为filename3，只能创建新文件,不能编辑已有文件\n\n## less\n文件或其它输出进行分页显示，文件比较大时less不是加载整个文件\n\n## head\n显示开头\n\n`head -n 10 filename` 显示前10行\n\n## tail\n显示结尾\n\n`tail -n 10 -f filename` 循环显示结尾10行，调试监控某日志文件时经常使用\n\n## which\n查看可执行文件的位置。\n在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。\n\n## whereis \n查看文件的位置。定位可执行文件、源代码文件、帮助文件在文件系统中的位置。\n \n## locate   \n配合数据库查看文件位置。loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理\n\n## find   \n实际搜寻硬盘查询文件名称。\n\n`find . -type f -exec ls -l {} \\;` ls -l命令放在find命令的-exec选项中\n\n`find . -type f -print | xargs file` 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件\n\n`find . -name \"*.log\" -print` 在当前目录及子目录中查找所有的‘*.log’文件\n\n## chomd\n改变linux系统文件或目录的访问权限。\n\n`chomd -R 0644 /test` 递归修改目录权限\n\n`chomd +x /test/test.sh` 增加执行权限\n\n## tar\n压缩，解压缩，打包，解包等\n\n`tar xvf FileName.tar` 解包\n\n`tar cvf FileName.tar DirName` 打包\n\n`tar zxvf FileName.tar.gz` 解压\n\n`tar zcvf FileName.tar.gz DirName` 压缩\n\n`tar jxvf FileName.tar.bz2` 解压\n\n`tar jcvf FileName.tar.bz2 DirName` 压缩\n\n## chown\n将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；\n文件是以空格分开的要改变权限的文件列表，支持通配符\n\n`chown mail:mail -R /test` 递归把`/test` 目录的用户和用户组改成mail\n\n## df\n检查linux服务器的文件系统的磁盘空间占用情况。\n\n`df -h` 方便阅读方式显示\n\n## du\n文件和目录磁盘使用的空间的查看\n\n`du -h  --max-depth=1` 输出当前目录下各个子目录所使用的空间\n\n## ln\n为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，\n我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，\n然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间\n\n`ln -s log2013.log link2013` 给文件log2013.log创建软链接\n\n## diff\n用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方\n\n`diff log2014.log log2013.log`\n\n## date \n可以用来显示或设定系统的日期与时间\n\n`date '+%Y-%m-%d %T'` 2020-03-26 15:26:08\n\n## grep\n(Global Regular Expression Print)使用正则表达式搜索文本，并把匹 配的行打印出来。\n\n`ll /usr/local/bin |grep php`\n\n## wc\n(Word Count)统计指定文件中的字节数、字数、行数，并将统计结果显示输出\n\n`ps aux|grep php-fpm|wc -l` 统计php-fpm的进程数\n\n## ps\n\n`ps aux|grep php-fpm`\n\n解释：\n\nUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND\n\nUSER 进程用户 \n\nPID 进程ID\n \n%CPU 进程占用的CPU百分比\n \n%MEM 占用内存的百分比 \n\nVSZ 进程使用的虚拟内存量（KB） \n\nRSS 进程占用的固定内存量（KB）\n\nTTY 该进程在哪个终端上运行（登陆者的终端位置），若与终端无关，则显示（？）。若为pts/0等，则表示由网络连接主机进程\n\nSTAT 当前状态（D 无法中断的休眠状态、R 正在运行、S 处于休眠、T 停止或被追踪、Z 僵尸进程、< 优先级高、N 优先级较低、s 进程的领导者、l 多进程、+ 位于后台的进程组）\n\nSTART 进程被触发启动时间\n\nTIME 进程实际使用CPU运行的时间\n\nCOMMAND 命令的名称和参数\n`\n\n`ps -ef|grep php-fpm`\n\n## kill\n用来终止指定的进程\n\n`kill -9 12345` 强制杀死进程\n\n`kill -15 12345` 终止指定进程\n\n## killall\n用于杀死指定名字的进程（kill processes by name）\n\n`killall php-fpm`\n\n## pkill\npkill和killall应用方法差不多，也是直接杀死运行中的程序；如果想杀掉单个进程，请用kill来杀掉。\n\n`软件能用自己提供的命令来终止，重启最好`\n\n## top\n实时显示系统中各个进程的资源占用状况\n\n## uptime\ntop中运行时间，负载值\n\n## free\n显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer\n\n`free -m`\n\n## vmstat\nVirtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控\n\n## watch\nwatch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果\n\n`watch -n 1 -d netstat -ant` 每隔一秒高亮显示网络链接数的变化情况\n\n## crontab\n\n`crontab -u www -l` 查看\n\n`crontab -e` 编辑\n\n## ifconfig\n命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置\n\n`ifconfig eth0 up` 启动网卡\n\n`ifconfig eth0 down` 关闭网卡\n\n## route\n用于显示和操作IP路由表（show / manipulate the IP routing table）\n\n## ping\n测试与目标主机的连通性\n\n`ping www.baidu.com`\n\n`ping 112.112.112.112`\n\n## traceroute\n通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。\n输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。\n\n`traceroute www.baidu.com`\n\n## netstat\n显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。\nnetstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。\n\n`netstat -anlp |grep :9999`\n\n`netstat -s` 统计各网络信息\n\n## ss\nSocket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。\n但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。\n\n`ss -anlp|grep :9999`\n\n## telnet\n用来远程登录\n\n`telnet 127.0.0.1 9999`\n\n## rcp\n用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。\n\n`rcp test1 webserver1:/home/root/test3` 将当前目录下的 test1 复制到名为 webserver1的远程系统\n\n## scp\nsecure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。\n\n`scp local_file remote_username@remote_ip:remote_folder` 从本地服务器复制到远程服务器\n\n`scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/` 从远程服务器复制到本地服务器\n\n## wget\n一个下载文件的工具，它用在命令行下\n\n`wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 下载单个文件\n\n`wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080` 使用wget -O下载并以不同的文件名保存\n\n`wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 使用wget -c断点续传\n\n`wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 使用wget -b后台下载\n\n## tcpdump\n在调试网络通信程序是 tcpdump 是必备工具。tcpdump 很强大，可以看到网络通信的每个细节。\n如 TCP，可以看到 3 次握手，PUSH/ACK 数据推送，close4 次挥手，全部细节。包括每一次网络收包的字节数，时间等。\n\n`tcpdump -i lo -Xnlps0 tcp port 9999` 抓lo网卡，tcp协议，端口9999 通信的数据内容\n\n`tcpdump host 127.0.0.1` 指定IP\n\n[命令详解](https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html)\n\n## strace\n可以跟踪系统调用的执行情况，在程序发生问题后，可以用 strace 分析和跟踪问题。\n\n`strace -o /tmp/strace.log -f -p $PID`\n\n## gdb\nGDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具，可以用来调试 C/C++ 开发的程序，PHP 和 Swoole 是使用 C 语言开发的，\n所以可以用 GDB 来调试 PHP+Swoole 的程序。\ngdb 调试是命令行交互式的，需要掌握常用的指令。\n\n`gdb -p 进程ID`\n\n## lsof\n可以查看某个进程打开的文件句柄。可以用于跟踪 swoole 的工作进程所有打开的 socket、file、资源。\n\n`lsof -i:9999`\n\n`lsof -p [进程ID]`\n\n## pref\n非常强大的动态跟踪工具，perf top 指令可用于实时分析正在执行程序的性能问题。\n与 callgrind、xdebug、xhprof 等工具不同，perf 无需修改代码导出 profile 结果文件。\n\n`perf top -p [进程ID]`\n\n## awk\n一个数据处理工具\n\n`awk '条件类型1'{动作1} 条件类型2{动作2}... filename` \n\n```bash\n# 变量名称\n# $0 代表一整行数据\n# $1-$n 代表第几列数据\n# NF 每一行拥有的字段总数（$0）\n# NR 目前 awk 处理的是 第几行 数据\n# FS 目前的分隔符，默认是空格键\n\n# 处理流程\n# 1、读入第一行，并将第一行数据填入$0,$1,$2..$n变量中\n# 2、依据条件类型的限制，判断是否要进行后面的动作\n# 3、做完所有的动作与条件类型\n# 4、若后面还有行数据，则重复1、2、3，直到所有的行读取完毕\n\n```\n\n`cat /etc/passwd |awk 'BEGIN {FS=\":\"} $3 < 10 {print $1 \"\\t\" $3}'`\n\n## groups\n查看有效与支持的用户组\n\n## useradd\n新增用户\n\n`userass test_user`\n\n## passwd\n设置修改用户密码\n\n`passwd test_user`\n\n## su\n切换用户身份，需要输入切换用户的密码\n\n`su username` 切换成username用户，读取变量的设置方式为`non-login`shell的方式，这样方式下很多原本的环境变量不会被改变\n\n`su - username` 读取变量的设置方式为`login`shell的方式\n\n`su -c username \"cmd\"` 代表仅用此用户执行一次命令\n\n## sudo\n切换用户，输入自己的密码，需要配置 `/ect/sudoers`，可用`visudo`命令编辑\n\n`sudo -u username pwd` 不加用户参数，默认root\n\n## curl\n基于网络协议，对指定URL进行网络传输\ncurl支持的通信协议有DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SBMS, SMTP, SMTPS, TELNET 和TFTP\n\n`curl --trace-time -v https://www.baidu.com` 可以调试请求时间和具体过程\n\n## ssh\nSSH是一种网络协议，用于计算机之间的加密登录\n\n`ssh-keygen` 创建公钥\n\n`ssh-copy-id user@host` 复制本机公钥到服务器\n\n`ssh -p 2222 user@host` 登录服务器\n\n### 用来传输数据\n\n`cd && tar czv src | ssh user@host 'tar xz'` 将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录\n\n`ssh user@host 'tar cz src' | tar xzv` 将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录\n\n### 绑定本地端口\n\n可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性\n\n`ssh -D 8080 user@host` 让8080端口的数据，都通过SSH传向远程主机\n\nSSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。\n可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口\n\n### 本地端口转发\n\n有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的\"端口转发\"。\n为了区别后文的\"远程端口转发\"，我们把这种情况称为\"本地端口转发\"（Local forwarding）。\n\n假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。\n因此，很自然的想法就是，通过host3，将host1连上host2\n\n`ssh -L 2121:host2:21 host3`\n\n命令中的L参数一共接受三个值，分别是\"本地端口:目标主机:目标主机端口\"，它们之间用冒号分隔。\n这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）\n这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口\n\n\"本地端口转发\"使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为\"SSH隧道\"\n\n### 远程端口转发\n\n既然\"本地端口转发\"是指绑定本地端口的转发，那么\"远程端口转发\"（remote forwarding）当然是指绑定远程端口的转发。\n\n还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，\"本地端口转发\"就不能用了，怎么办？\n\n解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了\n\n`ssh -R 2121:host2:21 host1`\n\nR参数也是接受三个值，分别是\"远程主机端口:目标主机:目标主机端口\"。\n这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为\"远程端口绑定\"\n\n`ssh -NT -f -D 8080 host`\n\nN参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作\nf参数，表示SSH连接成功后，转入后台运行。这样一来，就可以在不中断SSH连接的情况下，在本地shell中执行其他操作\n\n## netcat\n\n调试tcp udp\n\n`netcat -u ip port` 调试udp\n\n## time\n\n显示命令执行时间\n\n`time command`\n\n参考链接：\n\n[每天一个Linux命令](https://www.cnblogs.com/peida/category/309012.html)\n\n[Swoole文档 工具使用](https://wiki.swoole.com/#/other/tools)\n\n[阮一峰 SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n","source":"_posts/tools/linux_command.md","raw":"---\nurl: /2020/03/26/linux-command.html\ntitle: \"Linux 常用命令\"\nkeywords: \"Linux 常用命令\"\ndescription: \"Linux 常用命令\"\ndate: 2020-03-26T22:53:12+08:00\ndraft: false\ntags: [\"Linux\"]\ntags_weight: 100\ncategories: [\"Linux\"]\ncategoryes_weight: 100\n---\n\n## ls\n\n`ls -alh` \n\n```\n-a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件\n-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来\n-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)\n```\n\n## cd\n\n`cd /usr/local` 使用绝对路径\n\n`cd ../` 使用相对路径\n\n`cd ~` home目录\n\n`cd -` 返回进入此目录之前所在的目录\n\n## pwd\n查看“当前工作目录”的完整路径\n\n`pwd -P`  显示出实际路径，而非使用连接（link）路径\n\n`pwd -L` 目录连接链接时，输出连接路径\n\n## rm\n删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。\n对于链接文件，只是删除了链接，原有文件均保持不变。\n\n`rm -rf /a/b/c` 我是谁，我在哪里，我做了什么？\n\n`rm -i /a/b/*.log` 可以使用通配符\n\n```\n-f, --force 忽略不存在的文件，从不给出提示。\n-i, --interactive 进行交互式删除\n-r, -R, --recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。\n```\n\n## rmdir\n删除空目录，一个目录被删除之前必须是空的。\n\n## mv\nmv命令是move的缩写，可以用来移动文件或者将文件改名。\n\n`mv test.log test1.txt` 把test.log重命名为test1.txt\n\n## cp\n复制文件或者目录\n\n`cp log1 log.bak` 复制log1为log.bak\n\n## cat\n显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。\n\n`cat filename` 显示filename的内容\n\n`cat filename1 fielname2 > filename3` 把filename1和2合并为filename3，只能创建新文件,不能编辑已有文件\n\n## less\n文件或其它输出进行分页显示，文件比较大时less不是加载整个文件\n\n## head\n显示开头\n\n`head -n 10 filename` 显示前10行\n\n## tail\n显示结尾\n\n`tail -n 10 -f filename` 循环显示结尾10行，调试监控某日志文件时经常使用\n\n## which\n查看可执行文件的位置。\n在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。\n\n## whereis \n查看文件的位置。定位可执行文件、源代码文件、帮助文件在文件系统中的位置。\n \n## locate   \n配合数据库查看文件位置。loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理\n\n## find   \n实际搜寻硬盘查询文件名称。\n\n`find . -type f -exec ls -l {} \\;` ls -l命令放在find命令的-exec选项中\n\n`find . -type f -print | xargs file` 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件\n\n`find . -name \"*.log\" -print` 在当前目录及子目录中查找所有的‘*.log’文件\n\n## chomd\n改变linux系统文件或目录的访问权限。\n\n`chomd -R 0644 /test` 递归修改目录权限\n\n`chomd +x /test/test.sh` 增加执行权限\n\n## tar\n压缩，解压缩，打包，解包等\n\n`tar xvf FileName.tar` 解包\n\n`tar cvf FileName.tar DirName` 打包\n\n`tar zxvf FileName.tar.gz` 解压\n\n`tar zcvf FileName.tar.gz DirName` 压缩\n\n`tar jxvf FileName.tar.bz2` 解压\n\n`tar jcvf FileName.tar.bz2 DirName` 压缩\n\n## chown\n将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；\n文件是以空格分开的要改变权限的文件列表，支持通配符\n\n`chown mail:mail -R /test` 递归把`/test` 目录的用户和用户组改成mail\n\n## df\n检查linux服务器的文件系统的磁盘空间占用情况。\n\n`df -h` 方便阅读方式显示\n\n## du\n文件和目录磁盘使用的空间的查看\n\n`du -h  --max-depth=1` 输出当前目录下各个子目录所使用的空间\n\n## ln\n为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，\n我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，\n然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间\n\n`ln -s log2013.log link2013` 给文件log2013.log创建软链接\n\n## diff\n用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方\n\n`diff log2014.log log2013.log`\n\n## date \n可以用来显示或设定系统的日期与时间\n\n`date '+%Y-%m-%d %T'` 2020-03-26 15:26:08\n\n## grep\n(Global Regular Expression Print)使用正则表达式搜索文本，并把匹 配的行打印出来。\n\n`ll /usr/local/bin |grep php`\n\n## wc\n(Word Count)统计指定文件中的字节数、字数、行数，并将统计结果显示输出\n\n`ps aux|grep php-fpm|wc -l` 统计php-fpm的进程数\n\n## ps\n\n`ps aux|grep php-fpm`\n\n解释：\n\nUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND\n\nUSER 进程用户 \n\nPID 进程ID\n \n%CPU 进程占用的CPU百分比\n \n%MEM 占用内存的百分比 \n\nVSZ 进程使用的虚拟内存量（KB） \n\nRSS 进程占用的固定内存量（KB）\n\nTTY 该进程在哪个终端上运行（登陆者的终端位置），若与终端无关，则显示（？）。若为pts/0等，则表示由网络连接主机进程\n\nSTAT 当前状态（D 无法中断的休眠状态、R 正在运行、S 处于休眠、T 停止或被追踪、Z 僵尸进程、< 优先级高、N 优先级较低、s 进程的领导者、l 多进程、+ 位于后台的进程组）\n\nSTART 进程被触发启动时间\n\nTIME 进程实际使用CPU运行的时间\n\nCOMMAND 命令的名称和参数\n`\n\n`ps -ef|grep php-fpm`\n\n## kill\n用来终止指定的进程\n\n`kill -9 12345` 强制杀死进程\n\n`kill -15 12345` 终止指定进程\n\n## killall\n用于杀死指定名字的进程（kill processes by name）\n\n`killall php-fpm`\n\n## pkill\npkill和killall应用方法差不多，也是直接杀死运行中的程序；如果想杀掉单个进程，请用kill来杀掉。\n\n`软件能用自己提供的命令来终止，重启最好`\n\n## top\n实时显示系统中各个进程的资源占用状况\n\n## uptime\ntop中运行时间，负载值\n\n## free\n显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer\n\n`free -m`\n\n## vmstat\nVirtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控\n\n## watch\nwatch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果\n\n`watch -n 1 -d netstat -ant` 每隔一秒高亮显示网络链接数的变化情况\n\n## crontab\n\n`crontab -u www -l` 查看\n\n`crontab -e` 编辑\n\n## ifconfig\n命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置\n\n`ifconfig eth0 up` 启动网卡\n\n`ifconfig eth0 down` 关闭网卡\n\n## route\n用于显示和操作IP路由表（show / manipulate the IP routing table）\n\n## ping\n测试与目标主机的连通性\n\n`ping www.baidu.com`\n\n`ping 112.112.112.112`\n\n## traceroute\n通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。\n输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。\n\n`traceroute www.baidu.com`\n\n## netstat\n显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。\nnetstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。\n\n`netstat -anlp |grep :9999`\n\n`netstat -s` 统计各网络信息\n\n## ss\nSocket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。\n但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。\n\n`ss -anlp|grep :9999`\n\n## telnet\n用来远程登录\n\n`telnet 127.0.0.1 9999`\n\n## rcp\n用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。\n\n`rcp test1 webserver1:/home/root/test3` 将当前目录下的 test1 复制到名为 webserver1的远程系统\n\n## scp\nsecure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。\n\n`scp local_file remote_username@remote_ip:remote_folder` 从本地服务器复制到远程服务器\n\n`scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/` 从远程服务器复制到本地服务器\n\n## wget\n一个下载文件的工具，它用在命令行下\n\n`wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 下载单个文件\n\n`wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080` 使用wget -O下载并以不同的文件名保存\n\n`wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 使用wget -c断点续传\n\n`wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip` 使用wget -b后台下载\n\n## tcpdump\n在调试网络通信程序是 tcpdump 是必备工具。tcpdump 很强大，可以看到网络通信的每个细节。\n如 TCP，可以看到 3 次握手，PUSH/ACK 数据推送，close4 次挥手，全部细节。包括每一次网络收包的字节数，时间等。\n\n`tcpdump -i lo -Xnlps0 tcp port 9999` 抓lo网卡，tcp协议，端口9999 通信的数据内容\n\n`tcpdump host 127.0.0.1` 指定IP\n\n[命令详解](https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html)\n\n## strace\n可以跟踪系统调用的执行情况，在程序发生问题后，可以用 strace 分析和跟踪问题。\n\n`strace -o /tmp/strace.log -f -p $PID`\n\n## gdb\nGDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具，可以用来调试 C/C++ 开发的程序，PHP 和 Swoole 是使用 C 语言开发的，\n所以可以用 GDB 来调试 PHP+Swoole 的程序。\ngdb 调试是命令行交互式的，需要掌握常用的指令。\n\n`gdb -p 进程ID`\n\n## lsof\n可以查看某个进程打开的文件句柄。可以用于跟踪 swoole 的工作进程所有打开的 socket、file、资源。\n\n`lsof -i:9999`\n\n`lsof -p [进程ID]`\n\n## pref\n非常强大的动态跟踪工具，perf top 指令可用于实时分析正在执行程序的性能问题。\n与 callgrind、xdebug、xhprof 等工具不同，perf 无需修改代码导出 profile 结果文件。\n\n`perf top -p [进程ID]`\n\n## awk\n一个数据处理工具\n\n`awk '条件类型1'{动作1} 条件类型2{动作2}... filename` \n\n```bash\n# 变量名称\n# $0 代表一整行数据\n# $1-$n 代表第几列数据\n# NF 每一行拥有的字段总数（$0）\n# NR 目前 awk 处理的是 第几行 数据\n# FS 目前的分隔符，默认是空格键\n\n# 处理流程\n# 1、读入第一行，并将第一行数据填入$0,$1,$2..$n变量中\n# 2、依据条件类型的限制，判断是否要进行后面的动作\n# 3、做完所有的动作与条件类型\n# 4、若后面还有行数据，则重复1、2、3，直到所有的行读取完毕\n\n```\n\n`cat /etc/passwd |awk 'BEGIN {FS=\":\"} $3 < 10 {print $1 \"\\t\" $3}'`\n\n## groups\n查看有效与支持的用户组\n\n## useradd\n新增用户\n\n`userass test_user`\n\n## passwd\n设置修改用户密码\n\n`passwd test_user`\n\n## su\n切换用户身份，需要输入切换用户的密码\n\n`su username` 切换成username用户，读取变量的设置方式为`non-login`shell的方式，这样方式下很多原本的环境变量不会被改变\n\n`su - username` 读取变量的设置方式为`login`shell的方式\n\n`su -c username \"cmd\"` 代表仅用此用户执行一次命令\n\n## sudo\n切换用户，输入自己的密码，需要配置 `/ect/sudoers`，可用`visudo`命令编辑\n\n`sudo -u username pwd` 不加用户参数，默认root\n\n## curl\n基于网络协议，对指定URL进行网络传输\ncurl支持的通信协议有DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SBMS, SMTP, SMTPS, TELNET 和TFTP\n\n`curl --trace-time -v https://www.baidu.com` 可以调试请求时间和具体过程\n\n## ssh\nSSH是一种网络协议，用于计算机之间的加密登录\n\n`ssh-keygen` 创建公钥\n\n`ssh-copy-id user@host` 复制本机公钥到服务器\n\n`ssh -p 2222 user@host` 登录服务器\n\n### 用来传输数据\n\n`cd && tar czv src | ssh user@host 'tar xz'` 将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录\n\n`ssh user@host 'tar cz src' | tar xzv` 将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录\n\n### 绑定本地端口\n\n可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性\n\n`ssh -D 8080 user@host` 让8080端口的数据，都通过SSH传向远程主机\n\nSSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。\n可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口\n\n### 本地端口转发\n\n有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的\"端口转发\"。\n为了区别后文的\"远程端口转发\"，我们把这种情况称为\"本地端口转发\"（Local forwarding）。\n\n假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。\n因此，很自然的想法就是，通过host3，将host1连上host2\n\n`ssh -L 2121:host2:21 host3`\n\n命令中的L参数一共接受三个值，分别是\"本地端口:目标主机:目标主机端口\"，它们之间用冒号分隔。\n这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）\n这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口\n\n\"本地端口转发\"使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为\"SSH隧道\"\n\n### 远程端口转发\n\n既然\"本地端口转发\"是指绑定本地端口的转发，那么\"远程端口转发\"（remote forwarding）当然是指绑定远程端口的转发。\n\n还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，\"本地端口转发\"就不能用了，怎么办？\n\n解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了\n\n`ssh -R 2121:host2:21 host1`\n\nR参数也是接受三个值，分别是\"远程主机端口:目标主机:目标主机端口\"。\n这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为\"远程端口绑定\"\n\n`ssh -NT -f -D 8080 host`\n\nN参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作\nf参数，表示SSH连接成功后，转入后台运行。这样一来，就可以在不中断SSH连接的情况下，在本地shell中执行其他操作\n\n## netcat\n\n调试tcp udp\n\n`netcat -u ip port` 调试udp\n\n## time\n\n显示命令执行时间\n\n`time command`\n\n参考链接：\n\n[每天一个Linux命令](https://www.cnblogs.com/peida/category/309012.html)\n\n[Swoole文档 工具使用](https://wiki.swoole.com/#/other/tools)\n\n[阮一峰 SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n","slug":"tools/linux_command","published":1,"updated":"2020-05-16T14:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3k002rmv050xex0m1i","content":"<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><p><code>ls -alh</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件</span><br><span class=\"line\">-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br><span class=\"line\">-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h2><p><code>cd /usr/local</code> 使用绝对路径</p>\n<p><code>cd ../</code> 使用相对路径</p>\n<p><code>cd ~</code> home目录</p>\n<p><code>cd -</code> 返回进入此目录之前所在的目录</p>\n<h2 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h2><p>查看“当前工作目录”的完整路径</p>\n<p><code>pwd -P</code>  显示出实际路径，而非使用连接（link）路径</p>\n<p><code>pwd -L</code> 目录连接链接时，输出连接路径</p>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><p>删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。<br>对于链接文件，只是删除了链接，原有文件均保持不变。</p>\n<p><code>rm -rf /a/b/c</code> 我是谁，我在哪里，我做了什么？</p>\n<p><code>rm -i /a/b/*.log</code> 可以使用通配符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f, --force 忽略不存在的文件，从不给出提示。</span><br><span class=\"line\">-i, --interactive 进行交互式删除</span><br><span class=\"line\">-r, -R, --recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h2><p>删除空目录，一个目录被删除之前必须是空的。</p>\n<h2 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h2><p>mv命令是move的缩写，可以用来移动文件或者将文件改名。</p>\n<p><code>mv test.log test1.txt</code> 把test.log重命名为test1.txt</p>\n<h2 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h2><p>复制文件或者目录</p>\n<p><code>cp log1 log.bak</code> 复制log1为log.bak</p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h2><p>显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p>\n<p><code>cat filename</code> 显示filename的内容</p>\n<p><code>cat filename1 fielname2 &gt; filename3</code> 把filename1和2合并为filename3，只能创建新文件,不能编辑已有文件</p>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>文件或其它输出进行分页显示，文件比较大时less不是加载整个文件</p>\n<h2 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h2><p>显示开头</p>\n<p><code>head -n 10 filename</code> 显示前10行</p>\n<h2 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h2><p>显示结尾</p>\n<p><code>tail -n 10 -f filename</code> 循环显示结尾10行，调试监控某日志文件时经常使用</p>\n<h2 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h2><p>查看可执行文件的位置。<br>在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p>\n<h2 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h2><p>查看文件的位置。定位可执行文件、源代码文件、帮助文件在文件系统中的位置。</p>\n<h2 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h2><p>配合数据库查看文件位置。loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理</p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><p>实际搜寻硬盘查询文件名称。</p>\n<p><code>find . -type f -exec ls -l &#123;&#125; \\;</code> ls -l命令放在find命令的-exec选项中</p>\n<p><code>find . -type f -print | xargs file</code> 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p>\n<p><code>find . -name &quot;*.log&quot; -print</code> 在当前目录及子目录中查找所有的‘*.log’文件</p>\n<h2 id=\"chomd\"><a href=\"#chomd\" class=\"headerlink\" title=\"chomd\"></a>chomd</h2><p>改变linux系统文件或目录的访问权限。</p>\n<p><code>chomd -R 0644 /test</code> 递归修改目录权限</p>\n<p><code>chomd +x /test/test.sh</code> 增加执行权限</p>\n<h2 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h2><p>压缩，解压缩，打包，解包等</p>\n<p><code>tar xvf FileName.tar</code> 解包</p>\n<p><code>tar cvf FileName.tar DirName</code> 打包</p>\n<p><code>tar zxvf FileName.tar.gz</code> 解压</p>\n<p><code>tar zcvf FileName.tar.gz DirName</code> 压缩</p>\n<p><code>tar jxvf FileName.tar.bz2</code> 解压</p>\n<p><code>tar jcvf FileName.tar.bz2 DirName</code> 压缩</p>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><p>将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；<br>文件是以空格分开的要改变权限的文件列表，支持通配符</p>\n<p><code>chown mail:mail -R /test</code> 递归把<code>/test</code> 目录的用户和用户组改成mail</p>\n<h2 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h2><p>检查linux服务器的文件系统的磁盘空间占用情况。</p>\n<p><code>df -h</code> 方便阅读方式显示</p>\n<h2 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h2><p>文件和目录磁盘使用的空间的查看</p>\n<p><code>du -h  --max-depth=1</code> 输出当前目录下各个子目录所使用的空间</p>\n<h2 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h2><p>为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，<br>我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，<br>然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间</p>\n<p><code>ln -s log2013.log link2013</code> 给文件log2013.log创建软链接</p>\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><p>用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方</p>\n<p><code>diff log2014.log log2013.log</code></p>\n<h2 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h2><p>可以用来显示或设定系统的日期与时间</p>\n<p><code>date &#39;+%Y-%m-%d %T&#39;</code> 2020-03-26 15:26:08</p>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p>(Global Regular Expression Print)使用正则表达式搜索文本，并把匹 配的行打印出来。</p>\n<p><code>ll /usr/local/bin |grep php</code></p>\n<h2 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h2><p>(Word Count)统计指定文件中的字节数、字数、行数，并将统计结果显示输出</p>\n<p><code>ps aux|grep php-fpm|wc -l</code> 统计php-fpm的进程数</p>\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p><code>ps aux|grep php-fpm</code></p>\n<p>解释：</p>\n<p>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</p>\n<p>USER 进程用户 </p>\n<p>PID 进程ID</p>\n<p>%CPU 进程占用的CPU百分比</p>\n<p>%MEM 占用内存的百分比 </p>\n<p>VSZ 进程使用的虚拟内存量（KB） </p>\n<p>RSS 进程占用的固定内存量（KB）</p>\n<p>TTY 该进程在哪个终端上运行（登陆者的终端位置），若与终端无关，则显示（？）。若为pts/0等，则表示由网络连接主机进程</p>\n<p>STAT 当前状态（D 无法中断的休眠状态、R 正在运行、S 处于休眠、T 停止或被追踪、Z 僵尸进程、&lt; 优先级高、N 优先级较低、s 进程的领导者、l 多进程、+ 位于后台的进程组）</p>\n<p>START 进程被触发启动时间</p>\n<p>TIME 进程实际使用CPU运行的时间</p>\n<p>COMMAND 命令的名称和参数<br>`</p>\n<p><code>ps -ef|grep php-fpm</code></p>\n<h2 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h2><p>用来终止指定的进程</p>\n<p><code>kill -9 12345</code> 强制杀死进程</p>\n<p><code>kill -15 12345</code> 终止指定进程</p>\n<h2 id=\"killall\"><a href=\"#killall\" class=\"headerlink\" title=\"killall\"></a>killall</h2><p>用于杀死指定名字的进程（kill processes by name）</p>\n<p><code>killall php-fpm</code></p>\n<h2 id=\"pkill\"><a href=\"#pkill\" class=\"headerlink\" title=\"pkill\"></a>pkill</h2><p>pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果想杀掉单个进程，请用kill来杀掉。</p>\n<p><code>软件能用自己提供的命令来终止，重启最好</code></p>\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><p>实时显示系统中各个进程的资源占用状况</p>\n<h2 id=\"uptime\"><a href=\"#uptime\" class=\"headerlink\" title=\"uptime\"></a>uptime</h2><p>top中运行时间，负载值</p>\n<h2 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h2><p>显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer</p>\n<p><code>free -m</code></p>\n<h2 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h2><p>Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控</p>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果</p>\n<p><code>watch -n 1 -d netstat -ant</code> 每隔一秒高亮显示网络链接数的变化情况</p>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><p><code>crontab -u www -l</code> 查看</p>\n<p><code>crontab -e</code> 编辑</p>\n<h2 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h2><p>命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置</p>\n<p><code>ifconfig eth0 up</code> 启动网卡</p>\n<p><code>ifconfig eth0 down</code> 关闭网卡</p>\n<h2 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"route\"></a>route</h2><p>用于显示和操作IP路由表（show / manipulate the IP routing table）</p>\n<h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><p>测试与目标主机的连通性</p>\n<p><code>ping www.baidu.com</code></p>\n<p><code>ping 112.112.112.112</code></p>\n<h2 id=\"traceroute\"><a href=\"#traceroute\" class=\"headerlink\" title=\"traceroute\"></a>traceroute</h2><p>通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。<br>输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p>\n<p><code>traceroute www.baidu.com</code></p>\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p>显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<br>netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>\n<p><code>netstat -anlp |grep :9999</code></p>\n<p><code>netstat -s</code> 统计各网络信息</p>\n<h2 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h2><p>Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。<br>但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p>\n<p><code>ss -anlp|grep :9999</code></p>\n<h2 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h2><p>用来远程登录</p>\n<p><code>telnet 127.0.0.1 9999</code></p>\n<h2 id=\"rcp\"><a href=\"#rcp\" class=\"headerlink\" title=\"rcp\"></a>rcp</h2><p>用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p>\n<p><code>rcp test1 webserver1:/home/root/test3</code> 将当前目录下的 test1 复制到名为 webserver1的远程系统</p>\n<h2 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h2><p>secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。</p>\n<p><code>scp local_file remote_username@remote_ip:remote_folder</code> 从本地服务器复制到远程服务器</p>\n<p><code>scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code> 从远程服务器复制到本地服务器</p>\n<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><p>一个下载文件的工具，它用在命令行下</p>\n<p><code>wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 下载单个文件</p>\n<p><code>wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080</code> 使用wget -O下载并以不同的文件名保存</p>\n<p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -c断点续传</p>\n<p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -b后台下载</p>\n<h2 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h2><p>在调试网络通信程序是 tcpdump 是必备工具。tcpdump 很强大，可以看到网络通信的每个细节。<br>如 TCP，可以看到 3 次握手，PUSH/ACK 数据推送，close4 次挥手，全部细节。包括每一次网络收包的字节数，时间等。</p>\n<p><code>tcpdump -i lo -Xnlps0 tcp port 9999</code> 抓lo网卡，tcp协议，端口9999 通信的数据内容</p>\n<p><code>tcpdump host 127.0.0.1</code> 指定IP</p>\n<p><a href=\"https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html\">命令详解</a></p>\n<h2 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h2><p>可以跟踪系统调用的执行情况，在程序发生问题后，可以用 strace 分析和跟踪问题。</p>\n<p><code>strace -o /tmp/strace.log -f -p $PID</code></p>\n<h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>GDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具，可以用来调试 C/C++ 开发的程序，PHP 和 Swoole 是使用 C 语言开发的，<br>所以可以用 GDB 来调试 PHP+Swoole 的程序。<br>gdb 调试是命令行交互式的，需要掌握常用的指令。</p>\n<p><code>gdb -p 进程ID</code></p>\n<h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><p>可以查看某个进程打开的文件句柄。可以用于跟踪 swoole 的工作进程所有打开的 socket、file、资源。</p>\n<p><code>lsof -i:9999</code></p>\n<p><code>lsof -p [进程ID]</code></p>\n<h2 id=\"pref\"><a href=\"#pref\" class=\"headerlink\" title=\"pref\"></a>pref</h2><p>非常强大的动态跟踪工具，perf top 指令可用于实时分析正在执行程序的性能问题。<br>与 callgrind、xdebug、xhprof 等工具不同，perf 无需修改代码导出 profile 结果文件。</p>\n<p><code>perf top -p [进程ID]</code></p>\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><p>一个数据处理工具</p>\n<p><code>awk &#39;条件类型1&#39;&#123;动作1&#125; 条件类型2&#123;动作2&#125;... filename</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量名称</span></span><br><span class=\"line\"><span class=\"comment\"># $0 代表一整行数据</span></span><br><span class=\"line\"><span class=\"comment\"># $1-$n 代表第几列数据</span></span><br><span class=\"line\"><span class=\"comment\"># NF 每一行拥有的字段总数（$0）</span></span><br><span class=\"line\"><span class=\"comment\"># NR 目前 awk 处理的是 第几行 数据</span></span><br><span class=\"line\"><span class=\"comment\"># FS 目前的分隔符，默认是空格键</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理流程</span></span><br><span class=\"line\"><span class=\"comment\"># 1、读入第一行，并将第一行数据填入$0,$1,$2..$n变量中</span></span><br><span class=\"line\"><span class=\"comment\"># 2、依据条件类型的限制，判断是否要进行后面的动作</span></span><br><span class=\"line\"><span class=\"comment\"># 3、做完所有的动作与条件类型</span></span><br><span class=\"line\"><span class=\"comment\"># 4、若后面还有行数据，则重复1、2、3，直到所有的行读取完毕</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>cat /etc/passwd |awk &#39;BEGIN &#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\\t&quot; $3&#125;&#39;</code></p>\n<h2 id=\"groups\"><a href=\"#groups\" class=\"headerlink\" title=\"groups\"></a>groups</h2><p>查看有效与支持的用户组</p>\n<h2 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h2><p>新增用户</p>\n<p><code>userass test_user</code></p>\n<h2 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h2><p>设置修改用户密码</p>\n<p><code>passwd test_user</code></p>\n<h2 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h2><p>切换用户身份，需要输入切换用户的密码</p>\n<p><code>su username</code> 切换成username用户，读取变量的设置方式为<code>non-login</code>shell的方式，这样方式下很多原本的环境变量不会被改变</p>\n<p><code>su - username</code> 读取变量的设置方式为<code>login</code>shell的方式</p>\n<p><code>su -c username &quot;cmd&quot;</code> 代表仅用此用户执行一次命令</p>\n<h2 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h2><p>切换用户，输入自己的密码，需要配置 <code>/ect/sudoers</code>，可用<code>visudo</code>命令编辑</p>\n<p><code>sudo -u username pwd</code> 不加用户参数，默认root</p>\n<h2 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h2><p>基于网络协议，对指定URL进行网络传输<br>curl支持的通信协议有DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SBMS, SMTP, SMTPS, TELNET 和TFTP</p>\n<p><code>curl --trace-time -v https://www.baidu.com</code> 可以调试请求时间和具体过程</p>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>SSH是一种网络协议，用于计算机之间的加密登录</p>\n<p><code>ssh-keygen</code> 创建公钥</p>\n<p><code>ssh-copy-id user@host</code> 复制本机公钥到服务器</p>\n<p><code>ssh -p 2222 user@host</code> 登录服务器</p>\n<h3 id=\"用来传输数据\"><a href=\"#用来传输数据\" class=\"headerlink\" title=\"用来传输数据\"></a>用来传输数据</h3><p><code>cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;</code> 将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录</p>\n<p><code>ssh user@host &#39;tar cz src&#39; | tar xzv</code> 将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录</p>\n<h3 id=\"绑定本地端口\"><a href=\"#绑定本地端口\" class=\"headerlink\" title=\"绑定本地端口\"></a>绑定本地端口</h3><p>可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性</p>\n<p><code>ssh -D 8080 user@host</code> 让8080端口的数据，都通过SSH传向远程主机</p>\n<p>SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。<br>可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口</p>\n<h3 id=\"本地端口转发\"><a href=\"#本地端口转发\" class=\"headerlink\" title=\"本地端口转发\"></a>本地端口转发</h3><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。<br>为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。</p>\n<p>假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。<br>因此，很自然的想法就是，通过host3，将host1连上host2</p>\n<p><code>ssh -L 2121:host2:21 host3</code></p>\n<p>命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。<br>这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）<br>这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口</p>\n<p>“本地端口转发”使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”</p>\n<h3 id=\"远程端口转发\"><a href=\"#远程端口转发\" class=\"headerlink\" title=\"远程端口转发\"></a>远程端口转发</h3><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。</p>\n<p>还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？</p>\n<p>解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了</p>\n<p><code>ssh -R 2121:host2:21 host1</code></p>\n<p>R参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。<br>这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”</p>\n<p><code>ssh -NT -f -D 8080 host</code></p>\n<p>N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作<br>f参数，表示SSH连接成功后，转入后台运行。这样一来，就可以在不中断SSH连接的情况下，在本地shell中执行其他操作</p>\n<h2 id=\"netcat\"><a href=\"#netcat\" class=\"headerlink\" title=\"netcat\"></a>netcat</h2><p>调试tcp udp</p>\n<p><code>netcat -u ip port</code> 调试udp</p>\n<h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h2><p>显示命令执行时间</p>\n<p><code>time command</code></p>\n<p>参考链接：</p>\n<p><a href=\"https://www.cnblogs.com/peida/category/309012.html\">每天一个Linux命令</a></p>\n<p><a href=\"https://wiki.swoole.com/#/other/tools\">Swoole文档 工具使用</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\">阮一峰 SSH原理与运用（二）：远程操作与端口转发</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h2><p><code>ls -alh</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a, -all 列出目录下的所有文件，包括以 . 开头的隐含文件</span><br><span class=\"line\">-l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br><span class=\"line\">-h, –human-readable 以容易理解的格式列出文件大小 (例如 1K 234M 2G)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h2><p><code>cd /usr/local</code> 使用绝对路径</p>\n<p><code>cd ../</code> 使用相对路径</p>\n<p><code>cd ~</code> home目录</p>\n<p><code>cd -</code> 返回进入此目录之前所在的目录</p>\n<h2 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h2><p>查看“当前工作目录”的完整路径</p>\n<p><code>pwd -P</code>  显示出实际路径，而非使用连接（link）路径</p>\n<p><code>pwd -L</code> 目录连接链接时，输出连接路径</p>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><p>删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。<br>对于链接文件，只是删除了链接，原有文件均保持不变。</p>\n<p><code>rm -rf /a/b/c</code> 我是谁，我在哪里，我做了什么？</p>\n<p><code>rm -i /a/b/*.log</code> 可以使用通配符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f, --force 忽略不存在的文件，从不给出提示。</span><br><span class=\"line\">-i, --interactive 进行交互式删除</span><br><span class=\"line\">-r, -R, --recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h2><p>删除空目录，一个目录被删除之前必须是空的。</p>\n<h2 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h2><p>mv命令是move的缩写，可以用来移动文件或者将文件改名。</p>\n<p><code>mv test.log test1.txt</code> 把test.log重命名为test1.txt</p>\n<h2 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h2><p>复制文件或者目录</p>\n<p><code>cp log1 log.bak</code> 复制log1为log.bak</p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h2><p>显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p>\n<p><code>cat filename</code> 显示filename的内容</p>\n<p><code>cat filename1 fielname2 &gt; filename3</code> 把filename1和2合并为filename3，只能创建新文件,不能编辑已有文件</p>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>文件或其它输出进行分页显示，文件比较大时less不是加载整个文件</p>\n<h2 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h2><p>显示开头</p>\n<p><code>head -n 10 filename</code> 显示前10行</p>\n<h2 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h2><p>显示结尾</p>\n<p><code>tail -n 10 -f filename</code> 循环显示结尾10行，调试监控某日志文件时经常使用</p>\n<h2 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h2><p>查看可执行文件的位置。<br>在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p>\n<h2 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h2><p>查看文件的位置。定位可执行文件、源代码文件、帮助文件在文件系统中的位置。</p>\n<h2 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h2><p>配合数据库查看文件位置。loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理</p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><p>实际搜寻硬盘查询文件名称。</p>\n<p><code>find . -type f -exec ls -l &#123;&#125; \\;</code> ls -l命令放在find命令的-exec选项中</p>\n<p><code>find . -type f -print | xargs file</code> 查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p>\n<p><code>find . -name &quot;*.log&quot; -print</code> 在当前目录及子目录中查找所有的‘*.log’文件</p>\n<h2 id=\"chomd\"><a href=\"#chomd\" class=\"headerlink\" title=\"chomd\"></a>chomd</h2><p>改变linux系统文件或目录的访问权限。</p>\n<p><code>chomd -R 0644 /test</code> 递归修改目录权限</p>\n<p><code>chomd +x /test/test.sh</code> 增加执行权限</p>\n<h2 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h2><p>压缩，解压缩，打包，解包等</p>\n<p><code>tar xvf FileName.tar</code> 解包</p>\n<p><code>tar cvf FileName.tar DirName</code> 打包</p>\n<p><code>tar zxvf FileName.tar.gz</code> 解压</p>\n<p><code>tar zcvf FileName.tar.gz DirName</code> 压缩</p>\n<p><code>tar jxvf FileName.tar.bz2</code> 解压</p>\n<p><code>tar jcvf FileName.tar.bz2 DirName</code> 压缩</p>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><p>将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；<br>文件是以空格分开的要改变权限的文件列表，支持通配符</p>\n<p><code>chown mail:mail -R /test</code> 递归把<code>/test</code> 目录的用户和用户组改成mail</p>\n<h2 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h2><p>检查linux服务器的文件系统的磁盘空间占用情况。</p>\n<p><code>df -h</code> 方便阅读方式显示</p>\n<h2 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h2><p>文件和目录磁盘使用的空间的查看</p>\n<p><code>du -h  --max-depth=1</code> 输出当前目录下各个子目录所使用的空间</p>\n<h2 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h2><p>为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，<br>我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，<br>然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间</p>\n<p><code>ln -s log2013.log link2013</code> 给文件log2013.log创建软链接</p>\n<h2 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h2><p>用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方</p>\n<p><code>diff log2014.log log2013.log</code></p>\n<h2 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h2><p>可以用来显示或设定系统的日期与时间</p>\n<p><code>date &#39;+%Y-%m-%d %T&#39;</code> 2020-03-26 15:26:08</p>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><p>(Global Regular Expression Print)使用正则表达式搜索文本，并把匹 配的行打印出来。</p>\n<p><code>ll /usr/local/bin |grep php</code></p>\n<h2 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h2><p>(Word Count)统计指定文件中的字节数、字数、行数，并将统计结果显示输出</p>\n<p><code>ps aux|grep php-fpm|wc -l</code> 统计php-fpm的进程数</p>\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><p><code>ps aux|grep php-fpm</code></p>\n<p>解释：</p>\n<p>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</p>\n<p>USER 进程用户 </p>\n<p>PID 进程ID</p>\n<p>%CPU 进程占用的CPU百分比</p>\n<p>%MEM 占用内存的百分比 </p>\n<p>VSZ 进程使用的虚拟内存量（KB） </p>\n<p>RSS 进程占用的固定内存量（KB）</p>\n<p>TTY 该进程在哪个终端上运行（登陆者的终端位置），若与终端无关，则显示（？）。若为pts/0等，则表示由网络连接主机进程</p>\n<p>STAT 当前状态（D 无法中断的休眠状态、R 正在运行、S 处于休眠、T 停止或被追踪、Z 僵尸进程、&lt; 优先级高、N 优先级较低、s 进程的领导者、l 多进程、+ 位于后台的进程组）</p>\n<p>START 进程被触发启动时间</p>\n<p>TIME 进程实际使用CPU运行的时间</p>\n<p>COMMAND 命令的名称和参数<br>`</p>\n<p><code>ps -ef|grep php-fpm</code></p>\n<h2 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h2><p>用来终止指定的进程</p>\n<p><code>kill -9 12345</code> 强制杀死进程</p>\n<p><code>kill -15 12345</code> 终止指定进程</p>\n<h2 id=\"killall\"><a href=\"#killall\" class=\"headerlink\" title=\"killall\"></a>killall</h2><p>用于杀死指定名字的进程（kill processes by name）</p>\n<p><code>killall php-fpm</code></p>\n<h2 id=\"pkill\"><a href=\"#pkill\" class=\"headerlink\" title=\"pkill\"></a>pkill</h2><p>pkill和killall应用方法差不多，也是直接杀死运行中的程序；如果想杀掉单个进程，请用kill来杀掉。</p>\n<p><code>软件能用自己提供的命令来终止，重启最好</code></p>\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><p>实时显示系统中各个进程的资源占用状况</p>\n<h2 id=\"uptime\"><a href=\"#uptime\" class=\"headerlink\" title=\"uptime\"></a>uptime</h2><p>top中运行时间，负载值</p>\n<h2 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h2><p>显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer</p>\n<p><code>free -m</code></p>\n<h2 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h2><p>Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控</p>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><p>watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果</p>\n<p><code>watch -n 1 -d netstat -ant</code> 每隔一秒高亮显示网络链接数的变化情况</p>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><p><code>crontab -u www -l</code> 查看</p>\n<p><code>crontab -e</code> 编辑</p>\n<h2 id=\"ifconfig\"><a href=\"#ifconfig\" class=\"headerlink\" title=\"ifconfig\"></a>ifconfig</h2><p>命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置</p>\n<p><code>ifconfig eth0 up</code> 启动网卡</p>\n<p><code>ifconfig eth0 down</code> 关闭网卡</p>\n<h2 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"route\"></a>route</h2><p>用于显示和操作IP路由表（show / manipulate the IP routing table）</p>\n<h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><p>测试与目标主机的连通性</p>\n<p><code>ping www.baidu.com</code></p>\n<p><code>ping 112.112.112.112</code></p>\n<h2 id=\"traceroute\"><a href=\"#traceroute\" class=\"headerlink\" title=\"traceroute\"></a>traceroute</h2><p>通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。<br>输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p>\n<p><code>traceroute www.baidu.com</code></p>\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p>显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。<br>netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p>\n<p><code>netstat -anlp |grep :9999</code></p>\n<p><code>netstat -s</code> 统计各网络信息</p>\n<h2 id=\"ss\"><a href=\"#ss\" class=\"headerlink\" title=\"ss\"></a>ss</h2><p>Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。<br>但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p>\n<p><code>ss -anlp|grep :9999</code></p>\n<h2 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h2><p>用来远程登录</p>\n<p><code>telnet 127.0.0.1 9999</code></p>\n<h2 id=\"rcp\"><a href=\"#rcp\" class=\"headerlink\" title=\"rcp\"></a>rcp</h2><p>用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p>\n<p><code>rcp test1 webserver1:/home/root/test3</code> 将当前目录下的 test1 复制到名为 webserver1的远程系统</p>\n<h2 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h2><p>secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。</p>\n<p><code>scp local_file remote_username@remote_ip:remote_folder</code> 从本地服务器复制到远程服务器</p>\n<p><code>scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code> 从远程服务器复制到本地服务器</p>\n<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><p>一个下载文件的工具，它用在命令行下</p>\n<p><code>wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 下载单个文件</p>\n<p><code>wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=1080</code> 使用wget -O下载并以不同的文件名保存</p>\n<p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -c断点续传</p>\n<p><code>wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code> 使用wget -b后台下载</p>\n<h2 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h2><p>在调试网络通信程序是 tcpdump 是必备工具。tcpdump 很强大，可以看到网络通信的每个细节。<br>如 TCP，可以看到 3 次握手，PUSH/ACK 数据推送，close4 次挥手，全部细节。包括每一次网络收包的字节数，时间等。</p>\n<p><code>tcpdump -i lo -Xnlps0 tcp port 9999</code> 抓lo网卡，tcp协议，端口9999 通信的数据内容</p>\n<p><code>tcpdump host 127.0.0.1</code> 指定IP</p>\n<p><a href=\"https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html\">命令详解</a></p>\n<h2 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h2><p>可以跟踪系统调用的执行情况，在程序发生问题后，可以用 strace 分析和跟踪问题。</p>\n<p><code>strace -o /tmp/strace.log -f -p $PID</code></p>\n<h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><p>GDB 是 GNU 开源组织发布的一个强大的 UNIX 下的程序调试工具，可以用来调试 C/C++ 开发的程序，PHP 和 Swoole 是使用 C 语言开发的，<br>所以可以用 GDB 来调试 PHP+Swoole 的程序。<br>gdb 调试是命令行交互式的，需要掌握常用的指令。</p>\n<p><code>gdb -p 进程ID</code></p>\n<h2 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h2><p>可以查看某个进程打开的文件句柄。可以用于跟踪 swoole 的工作进程所有打开的 socket、file、资源。</p>\n<p><code>lsof -i:9999</code></p>\n<p><code>lsof -p [进程ID]</code></p>\n<h2 id=\"pref\"><a href=\"#pref\" class=\"headerlink\" title=\"pref\"></a>pref</h2><p>非常强大的动态跟踪工具，perf top 指令可用于实时分析正在执行程序的性能问题。<br>与 callgrind、xdebug、xhprof 等工具不同，perf 无需修改代码导出 profile 结果文件。</p>\n<p><code>perf top -p [进程ID]</code></p>\n<h2 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h2><p>一个数据处理工具</p>\n<p><code>awk &#39;条件类型1&#39;&#123;动作1&#125; 条件类型2&#123;动作2&#125;... filename</code> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 变量名称</span></span><br><span class=\"line\"><span class=\"comment\"># $0 代表一整行数据</span></span><br><span class=\"line\"><span class=\"comment\"># $1-$n 代表第几列数据</span></span><br><span class=\"line\"><span class=\"comment\"># NF 每一行拥有的字段总数（$0）</span></span><br><span class=\"line\"><span class=\"comment\"># NR 目前 awk 处理的是 第几行 数据</span></span><br><span class=\"line\"><span class=\"comment\"># FS 目前的分隔符，默认是空格键</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 处理流程</span></span><br><span class=\"line\"><span class=\"comment\"># 1、读入第一行，并将第一行数据填入$0,$1,$2..$n变量中</span></span><br><span class=\"line\"><span class=\"comment\"># 2、依据条件类型的限制，判断是否要进行后面的动作</span></span><br><span class=\"line\"><span class=\"comment\"># 3、做完所有的动作与条件类型</span></span><br><span class=\"line\"><span class=\"comment\"># 4、若后面还有行数据，则重复1、2、3，直到所有的行读取完毕</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>cat /etc/passwd |awk &#39;BEGIN &#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\\t&quot; $3&#125;&#39;</code></p>\n<h2 id=\"groups\"><a href=\"#groups\" class=\"headerlink\" title=\"groups\"></a>groups</h2><p>查看有效与支持的用户组</p>\n<h2 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h2><p>新增用户</p>\n<p><code>userass test_user</code></p>\n<h2 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h2><p>设置修改用户密码</p>\n<p><code>passwd test_user</code></p>\n<h2 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h2><p>切换用户身份，需要输入切换用户的密码</p>\n<p><code>su username</code> 切换成username用户，读取变量的设置方式为<code>non-login</code>shell的方式，这样方式下很多原本的环境变量不会被改变</p>\n<p><code>su - username</code> 读取变量的设置方式为<code>login</code>shell的方式</p>\n<p><code>su -c username &quot;cmd&quot;</code> 代表仅用此用户执行一次命令</p>\n<h2 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h2><p>切换用户，输入自己的密码，需要配置 <code>/ect/sudoers</code>，可用<code>visudo</code>命令编辑</p>\n<p><code>sudo -u username pwd</code> 不加用户参数，默认root</p>\n<h2 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h2><p>基于网络协议，对指定URL进行网络传输<br>curl支持的通信协议有DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SBMS, SMTP, SMTPS, TELNET 和TFTP</p>\n<p><code>curl --trace-time -v https://www.baidu.com</code> 可以调试请求时间和具体过程</p>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>SSH是一种网络协议，用于计算机之间的加密登录</p>\n<p><code>ssh-keygen</code> 创建公钥</p>\n<p><code>ssh-copy-id user@host</code> 复制本机公钥到服务器</p>\n<p><code>ssh -p 2222 user@host</code> 登录服务器</p>\n<h3 id=\"用来传输数据\"><a href=\"#用来传输数据\" class=\"headerlink\" title=\"用来传输数据\"></a>用来传输数据</h3><p><code>cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;</code> 将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录</p>\n<p><code>ssh user@host &#39;tar cz src&#39; | tar xzv</code> 将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录</p>\n<h3 id=\"绑定本地端口\"><a href=\"#绑定本地端口\" class=\"headerlink\" title=\"绑定本地端口\"></a>绑定本地端口</h3><p>可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性</p>\n<p><code>ssh -D 8080 user@host</code> 让8080端口的数据，都通过SSH传向远程主机</p>\n<p>SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。<br>可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口</p>\n<h3 id=\"本地端口转发\"><a href=\"#本地端口转发\" class=\"headerlink\" title=\"本地端口转发\"></a>本地端口转发</h3><p>有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。<br>为了区别后文的”远程端口转发”，我们把这种情况称为”本地端口转发”（Local forwarding）。</p>\n<p>假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。<br>因此，很自然的想法就是，通过host3，将host1连上host2</p>\n<p><code>ssh -L 2121:host2:21 host3</code></p>\n<p>命令中的L参数一共接受三个值，分别是”本地端口:目标主机:目标主机端口”，它们之间用冒号分隔。<br>这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）<br>这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口</p>\n<p>“本地端口转发”使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH隧道”</p>\n<h3 id=\"远程端口转发\"><a href=\"#远程端口转发\" class=\"headerlink\" title=\"远程端口转发\"></a>远程端口转发</h3><p>既然”本地端口转发”是指绑定本地端口的转发，那么”远程端口转发”（remote forwarding）当然是指绑定远程端口的转发。</p>\n<p>还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，”本地端口转发”就不能用了，怎么办？</p>\n<p>解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了</p>\n<p><code>ssh -R 2121:host2:21 host1</code></p>\n<p>R参数也是接受三个值，分别是”远程主机端口:目标主机:目标主机端口”。<br>这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为”远程端口绑定”</p>\n<p><code>ssh -NT -f -D 8080 host</code></p>\n<p>N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作<br>f参数，表示SSH连接成功后，转入后台运行。这样一来，就可以在不中断SSH连接的情况下，在本地shell中执行其他操作</p>\n<h2 id=\"netcat\"><a href=\"#netcat\" class=\"headerlink\" title=\"netcat\"></a>netcat</h2><p>调试tcp udp</p>\n<p><code>netcat -u ip port</code> 调试udp</p>\n<h2 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h2><p>显示命令执行时间</p>\n<p><code>time command</code></p>\n<p>参考链接：</p>\n<p><a href=\"https://www.cnblogs.com/peida/category/309012.html\">每天一个Linux命令</a></p>\n<p><a href=\"https://wiki.swoole.com/#/other/tools\">Swoole文档 工具使用</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\">阮一峰 SSH原理与运用（二）：远程操作与端口转发</a></p>\n"},{"url":"/2020/04/14/markdown.html","title":"Markdown语法","keywords":"Markdown语法","description":"Markdown语法","date":"2020-04-14T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 标题2\n\n```markdown\n## 标题2\n```\n\n## 块\n\n> 这是一个块\n\n> 块嵌套\n> > 嵌套1\n> > > 嵌套2\n\n```markdown\n> 这是一个块\n\n> 块嵌套\n> > 嵌套1\n> > > 嵌套2\n ```\n\n## 无序列表\n\n- 无序列表1\n- 无序列表2\n- 无序列表3\n\n```markdown\n- 无序列表1\n- 无序列表2\n- 无序列表3\n```\n\n## 有序列表\n\n1. 有序列表1\n2. 有序列表1\n3. 有序列表1\n\n```markdown\n1. 有序列表1\n2. 有序列表1\n3. 有序列表1\n```\n\n## 表格\n\n表头1|表头2|表头3\n:---|:---:|---:\n单元1|单元2|单元3\n\n```markdown\n表头1|表头2|表头3\n:---|:---:|---:\n单元1|单元2|单元3\n```\n\n## 代码块\n\n```php\n<?php\necho 'Hello world';\n```\n\n```markdown\n```php\n<?php\necho 'Hello world';\n```多余\n```\n\n## 水平线\n***\n---\n\n```markdown\n***\n---\n```\n## 连接\n\n[连接](https://blog.wenjy.top)\n\n```markdown\n[连接](https://blog.wenjy.top)\n```\n\n## 图片\n\n![图片](https://www.baidu.com/img/bd_logo1.png \"百度的logo\")\n\n```markdown\n![图片](https://www.baidu.com/img/bd_logo1.png \"百度的logo\")\n```\n\n## 加粗\n\n*加粗1*\n\n**加粗1**\n\n```markdown\n*加粗1*\n\n**加粗1**\n```\n\n参考链接：\n\n[Markdown文档](https://markdown-zh.readthedocs.io/en/latest/)\n","source":"_posts/tools/markdown.md","raw":"---\nurl: /2020/04/14/markdown.html\ntitle: \"Markdown语法\"\nkeywords: \"Markdown语法\"\ndescription: \"Markdown语法\"\ndate: 2020-04-14T22:53:12+08:00\ndraft: false\ntags: [\"Markdown\"]\ntags_weight: 100\ncategories: [\"Markdown\"]\ncategoryes_weight: 100\n---\n\n## 标题2\n\n```markdown\n## 标题2\n```\n\n## 块\n\n> 这是一个块\n\n> 块嵌套\n> > 嵌套1\n> > > 嵌套2\n\n```markdown\n> 这是一个块\n\n> 块嵌套\n> > 嵌套1\n> > > 嵌套2\n ```\n\n## 无序列表\n\n- 无序列表1\n- 无序列表2\n- 无序列表3\n\n```markdown\n- 无序列表1\n- 无序列表2\n- 无序列表3\n```\n\n## 有序列表\n\n1. 有序列表1\n2. 有序列表1\n3. 有序列表1\n\n```markdown\n1. 有序列表1\n2. 有序列表1\n3. 有序列表1\n```\n\n## 表格\n\n表头1|表头2|表头3\n:---|:---:|---:\n单元1|单元2|单元3\n\n```markdown\n表头1|表头2|表头3\n:---|:---:|---:\n单元1|单元2|单元3\n```\n\n## 代码块\n\n```php\n<?php\necho 'Hello world';\n```\n\n```markdown\n```php\n<?php\necho 'Hello world';\n```多余\n```\n\n## 水平线\n***\n---\n\n```markdown\n***\n---\n```\n## 连接\n\n[连接](https://blog.wenjy.top)\n\n```markdown\n[连接](https://blog.wenjy.top)\n```\n\n## 图片\n\n![图片](https://www.baidu.com/img/bd_logo1.png \"百度的logo\")\n\n```markdown\n![图片](https://www.baidu.com/img/bd_logo1.png \"百度的logo\")\n```\n\n## 加粗\n\n*加粗1*\n\n**加粗1**\n\n```markdown\n*加粗1*\n\n**加粗1**\n```\n\n参考链接：\n\n[Markdown文档](https://markdown-zh.readthedocs.io/en/latest/)\n","slug":"tools/markdown","published":1,"updated":"2020-04-16T13:10:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3m002wmv0548z3251x","content":"<h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 标题2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块\"><a href=\"#块\" class=\"headerlink\" title=\"块\"></a>块</h2><blockquote>\n<p>这是一个块</p>\n</blockquote>\n<blockquote>\n<p>块嵌套</p>\n<blockquote>\n<p>嵌套1</p>\n<blockquote>\n<p>嵌套2</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 这是一个块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 块嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 嵌套1</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 嵌套2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n<li>无序列表3</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 无序列表1</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表2</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><ol>\n<li>有序列表1</li>\n<li>有序列表1</li>\n<li>有序列表1</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 有序列表1</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 有序列表1</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 有序列表1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th align=\"left\">表头1</th>\n<th align=\"center\">表头2</th>\n<th align=\"right\">表头3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元1</td>\n<td align=\"center\">单元2</td>\n<td align=\"right\">单元3</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头1|表头2|表头3</span><br><span class=\"line\">:---|:---:|---:</span><br><span class=\"line\">单元1|单元2|单元3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```php</span></span><br><span class=\"line\"><span class=\"code\">&lt;?php</span></span><br><span class=\"line\"><span class=\"code\">echo &#x27;Hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"code\">```多余</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"水平线\"><a href=\"#水平线\" class=\"headerlink\" title=\"水平线\"></a>水平线</h2><hr>\n<hr>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">---</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p><a href=\"https://blog.wenjy.top/\">连接</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">连接</span>](<span class=\"link\">https://blog.wenjy.top</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><img src=\"https://www.baidu.com/img/bd_logo1.png\" alt=\"图片\" title=\"百度的logo\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片</span>](<span class=\"link\">https://www.baidu.com/img/bd_logo1.png &quot;百度的logo&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h2><p><em>加粗1</em></p>\n<p><strong>加粗1</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*加粗1*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**加粗1**</span></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<p><a href=\"https://markdown-zh.readthedocs.io/en/latest/\">Markdown文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 标题2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块\"><a href=\"#块\" class=\"headerlink\" title=\"块\"></a>块</h2><blockquote>\n<p>这是一个块</p>\n</blockquote>\n<blockquote>\n<p>块嵌套</p>\n<blockquote>\n<p>嵌套1</p>\n<blockquote>\n<p>嵌套2</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 这是一个块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 块嵌套</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; 嵌套1</span></span><br><span class=\"line\"><span class=\"quote\">&gt; &gt; &gt; 嵌套2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n<li>无序列表3</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 无序列表1</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表2</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><ol>\n<li>有序列表1</li>\n<li>有序列表1</li>\n<li>有序列表1</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 有序列表1</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 有序列表1</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 有序列表1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><table>\n<thead>\n<tr>\n<th align=\"left\">表头1</th>\n<th align=\"center\">表头2</th>\n<th align=\"right\">表头3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元1</td>\n<td align=\"center\">单元2</td>\n<td align=\"right\">单元3</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表头1|表头2|表头3</span><br><span class=\"line\">:---|:---:|---:</span><br><span class=\"line\">单元1|单元2|单元3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Hello world&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```php</span></span><br><span class=\"line\"><span class=\"code\">&lt;?php</span></span><br><span class=\"line\"><span class=\"code\">echo &#x27;Hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"code\">```多余</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"水平线\"><a href=\"#水平线\" class=\"headerlink\" title=\"水平线\"></a>水平线</h2><hr>\n<hr>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"emphasis\">---</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p><a href=\"https://blog.wenjy.top/\">连接</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">连接</span>](<span class=\"link\">https://blog.wenjy.top</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><img src=\"https://www.baidu.com/img/bd_logo1.png\" alt=\"图片\" title=\"百度的logo\"></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片</span>](<span class=\"link\">https://www.baidu.com/img/bd_logo1.png &quot;百度的logo&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h2><p><em>加粗1</em></p>\n<p><strong>加粗1</strong></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*加粗1*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"strong\">**加粗1**</span></span><br></pre></td></tr></table></figure>\n\n<p>参考链接：</p>\n<p><a href=\"https://markdown-zh.readthedocs.io/en/latest/\">Markdown文档</a></p>\n"},{"url":"/2020/05/12/phpstorm-keymap.html","title":"Phpstorm常用快捷键","date":"2020-05-12T02:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n本文参考：[peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please](https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please)\n\n提取了一些自己常用的快捷键做记录\n\n## Mac符号\n\n符号|解释\n---|---\n⌘|Command\n⇧|Shift\n⌃|Control\n↩|Enter/Return\n⌥|Option/Alt\n\n## 编辑\n\nWin/Linux|Mac|注释\n---|---|---\nCtrl + mouse over code|⌘+mouse over code|查看到简短的函数介绍\nAlt + Insert|⌘N,⌃↩,⌃N|生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等），函数、类的注释我一般喜欢 `/**` + ↩\nCtrl + /|⌘/|以添加 “//” 的方式添加注释（单行注释）\nCtrl + Shift + /|⌘⌥/|添加 “/**/” 的方式添加注释（块注释），选中代码块，然后快捷键\nAlt + Enter|⌥↩|显示意图行动。 Show Intention Action，自动use namespace、给私有属性生成getter setter函数\nCtrl + Alt + L|⌘⌥L|格式化代码，自动缩进\nTab / Shift + Tab|tab,⇧+tab|手动缩进 / 反向缩进\nCtrl + X or Shift + Delete|⌘X|剪切\nCtrl + C or Ctrl + Insert|⌘C|复制\nCtrl + V or Shift + Insert|⌘V|粘贴\nCtrl + Shift + V|⌘⇧V|从粘贴板中选择内容进行粘贴\t\nCtrl + D|⌘D|将当前行或者选择的内容复制到下一行或光标处\nCtrl + Y|⌘del|删除光标所在的行，win上我改成了 Ctrl+Insert\nCtrl + Delete|⌥ + del|删除光标之后的部分单词\nCtrl + +/-|⌘ +,-|折叠 / 打开代码块，再次点击扩大折叠 / 打开范围\nCtrl + F4|⌘W|关闭当前页面，win上也被我设置成 Ctrl + W\nAlt + Up/Down|⌘ + 上/下方向键|上下移动代码块、行，我自己设置的\n\n## 搜索 / 替换\n\nWin/Linux|Mac|注释\n---|---|---\nCtrl + F|⌘F|查找、替换\nShift + Shift|⇧ + ⇧|可在全项目里搜索\n\n## 导航相关\nWin/Linux|Mac|注释\n---|---|---\nCtrl + E|⌘E|打开最近打开过的文件列表\nCtrl + L|⌘L|跳转到行，有时根据报错日志可以快速定位到行\nCtrl + Click|⌘ + Click|跳转到函数的声明处\nAlt + Left|⌥ + Left|返回从上次点击跳转到函数的声明处的地方\nCtrl + W|⌘ + W|关闭当前文件，自己设置的快捷键\nCtrl + Tab|⌘ + Tab|切换最近打开的文件\n\n## 重构相关\n\n重命名变量、类、函数，我一般都是用鼠标\n\n","source":"_posts/tools/phpstorm_keymap.md","raw":"---\nurl: /2020/05/12/phpstorm-keymap.html\ntitle: \"Phpstorm常用快捷键\"\ndate: 2020-05-12T18:31:57+08:00\ndraft: false\ntags: [\"Phpstorm\"]\ntags_weight: 100\ncategories: [\"Phpstorm\"]\ncategoryes_weight: 100\n---\n\n本文参考：[peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please](https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please)\n\n提取了一些自己常用的快捷键做记录\n\n## Mac符号\n\n符号|解释\n---|---\n⌘|Command\n⇧|Shift\n⌃|Control\n↩|Enter/Return\n⌥|Option/Alt\n\n## 编辑\n\nWin/Linux|Mac|注释\n---|---|---\nCtrl + mouse over code|⌘+mouse over code|查看到简短的函数介绍\nAlt + Insert|⌘N,⌃↩,⌃N|生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等），函数、类的注释我一般喜欢 `/**` + ↩\nCtrl + /|⌘/|以添加 “//” 的方式添加注释（单行注释）\nCtrl + Shift + /|⌘⌥/|添加 “/**/” 的方式添加注释（块注释），选中代码块，然后快捷键\nAlt + Enter|⌥↩|显示意图行动。 Show Intention Action，自动use namespace、给私有属性生成getter setter函数\nCtrl + Alt + L|⌘⌥L|格式化代码，自动缩进\nTab / Shift + Tab|tab,⇧+tab|手动缩进 / 反向缩进\nCtrl + X or Shift + Delete|⌘X|剪切\nCtrl + C or Ctrl + Insert|⌘C|复制\nCtrl + V or Shift + Insert|⌘V|粘贴\nCtrl + Shift + V|⌘⇧V|从粘贴板中选择内容进行粘贴\t\nCtrl + D|⌘D|将当前行或者选择的内容复制到下一行或光标处\nCtrl + Y|⌘del|删除光标所在的行，win上我改成了 Ctrl+Insert\nCtrl + Delete|⌥ + del|删除光标之后的部分单词\nCtrl + +/-|⌘ +,-|折叠 / 打开代码块，再次点击扩大折叠 / 打开范围\nCtrl + F4|⌘W|关闭当前页面，win上也被我设置成 Ctrl + W\nAlt + Up/Down|⌘ + 上/下方向键|上下移动代码块、行，我自己设置的\n\n## 搜索 / 替换\n\nWin/Linux|Mac|注释\n---|---|---\nCtrl + F|⌘F|查找、替换\nShift + Shift|⇧ + ⇧|可在全项目里搜索\n\n## 导航相关\nWin/Linux|Mac|注释\n---|---|---\nCtrl + E|⌘E|打开最近打开过的文件列表\nCtrl + L|⌘L|跳转到行，有时根据报错日志可以快速定位到行\nCtrl + Click|⌘ + Click|跳转到函数的声明处\nAlt + Left|⌥ + Left|返回从上次点击跳转到函数的声明处的地方\nCtrl + W|⌘ + W|关闭当前文件，自己设置的快捷键\nCtrl + Tab|⌘ + Tab|切换最近打开的文件\n\n## 重构相关\n\n重命名变量、类、函数，我一般都是用鼠标\n\n","slug":"tools/phpstorm_keymap","published":1,"updated":"2020-05-16T14:58:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3n002zmv05b5zq29v3","content":"<p>本文参考：<a href=\"https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please\">peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please</a></p>\n<p>提取了一些自己常用的快捷键做记录</p>\n<h2 id=\"Mac符号\"><a href=\"#Mac符号\" class=\"headerlink\" title=\"Mac符号\"></a>Mac符号</h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘</td>\n<td>Command</td>\n</tr>\n<tr>\n<td>⇧</td>\n<td>Shift</td>\n</tr>\n<tr>\n<td>⌃</td>\n<td>Control</td>\n</tr>\n<tr>\n<td>↩</td>\n<td>Enter/Return</td>\n</tr>\n<tr>\n<td>⌥</td>\n<td>Option/Alt</td>\n</tr>\n</tbody></table>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + mouse over code</td>\n<td>⌘+mouse over code</td>\n<td>查看到简短的函数介绍</td>\n</tr>\n<tr>\n<td>Alt + Insert</td>\n<td>⌘N,⌃↩,⌃N</td>\n<td>生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等），函数、类的注释我一般喜欢 <code>/**</code> + ↩</td>\n</tr>\n<tr>\n<td>Ctrl + /</td>\n<td>⌘/</td>\n<td>以添加 “//” 的方式添加注释（单行注释）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + /</td>\n<td>⌘⌥/</td>\n<td>添加 “/**/” 的方式添加注释（块注释），选中代码块，然后快捷键</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>⌥↩</td>\n<td>显示意图行动。 Show Intention Action，自动use namespace、给私有属性生成getter setter函数</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + L</td>\n<td>⌘⌥L</td>\n<td>格式化代码，自动缩进</td>\n</tr>\n<tr>\n<td>Tab / Shift + Tab</td>\n<td>tab,⇧+tab</td>\n<td>手动缩进 / 反向缩进</td>\n</tr>\n<tr>\n<td>Ctrl + X or Shift + Delete</td>\n<td>⌘X</td>\n<td>剪切</td>\n</tr>\n<tr>\n<td>Ctrl + C or Ctrl + Insert</td>\n<td>⌘C</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Ctrl + V or Shift + Insert</td>\n<td>⌘V</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + V</td>\n<td>⌘⇧V</td>\n<td>从粘贴板中选择内容进行粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>⌘D</td>\n<td>将当前行或者选择的内容复制到下一行或光标处</td>\n</tr>\n<tr>\n<td>Ctrl + Y</td>\n<td>⌘del</td>\n<td>删除光标所在的行，win上我改成了 Ctrl+Insert</td>\n</tr>\n<tr>\n<td>Ctrl + Delete</td>\n<td>⌥ + del</td>\n<td>删除光标之后的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + +/-</td>\n<td>⌘ +,-</td>\n<td>折叠 / 打开代码块，再次点击扩大折叠 / 打开范围</td>\n</tr>\n<tr>\n<td>Ctrl + F4</td>\n<td>⌘W</td>\n<td>关闭当前页面，win上也被我设置成 Ctrl + W</td>\n</tr>\n<tr>\n<td>Alt + Up/Down</td>\n<td>⌘ + 上/下方向键</td>\n<td>上下移动代码块、行，我自己设置的</td>\n</tr>\n</tbody></table>\n<h2 id=\"搜索-替换\"><a href=\"#搜索-替换\" class=\"headerlink\" title=\"搜索 / 替换\"></a>搜索 / 替换</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + F</td>\n<td>⌘F</td>\n<td>查找、替换</td>\n</tr>\n<tr>\n<td>Shift + Shift</td>\n<td>⇧ + ⇧</td>\n<td>可在全项目里搜索</td>\n</tr>\n</tbody></table>\n<h2 id=\"导航相关\"><a href=\"#导航相关\" class=\"headerlink\" title=\"导航相关\"></a>导航相关</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + E</td>\n<td>⌘E</td>\n<td>打开最近打开过的文件列表</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>⌘L</td>\n<td>跳转到行，有时根据报错日志可以快速定位到行</td>\n</tr>\n<tr>\n<td>Ctrl + Click</td>\n<td>⌘ + Click</td>\n<td>跳转到函数的声明处</td>\n</tr>\n<tr>\n<td>Alt + Left</td>\n<td>⌥ + Left</td>\n<td>返回从上次点击跳转到函数的声明处的地方</td>\n</tr>\n<tr>\n<td>Ctrl + W</td>\n<td>⌘ + W</td>\n<td>关闭当前文件，自己设置的快捷键</td>\n</tr>\n<tr>\n<td>Ctrl + Tab</td>\n<td>⌘ + Tab</td>\n<td>切换最近打开的文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"重构相关\"><a href=\"#重构相关\" class=\"headerlink\" title=\"重构相关\"></a>重构相关</h2><p>重命名变量、类、函数，我一般都是用鼠标</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文参考：<a href=\"https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please\">peryiqiao https://learnku.com/laravel/t/5420/your-keyboard-shortcuts-please</a></p>\n<p>提取了一些自己常用的快捷键做记录</p>\n<h2 id=\"Mac符号\"><a href=\"#Mac符号\" class=\"headerlink\" title=\"Mac符号\"></a>Mac符号</h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘</td>\n<td>Command</td>\n</tr>\n<tr>\n<td>⇧</td>\n<td>Shift</td>\n</tr>\n<tr>\n<td>⌃</td>\n<td>Control</td>\n</tr>\n<tr>\n<td>↩</td>\n<td>Enter/Return</td>\n</tr>\n<tr>\n<td>⌥</td>\n<td>Option/Alt</td>\n</tr>\n</tbody></table>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + mouse over code</td>\n<td>⌘+mouse over code</td>\n<td>查看到简短的函数介绍</td>\n</tr>\n<tr>\n<td>Alt + Insert</td>\n<td>⌘N,⌃↩,⌃N</td>\n<td>生成代码段（ 包括函数或类注释，版权信息，构造方法，抽象方法等），函数、类的注释我一般喜欢 <code>/**</code> + ↩</td>\n</tr>\n<tr>\n<td>Ctrl + /</td>\n<td>⌘/</td>\n<td>以添加 “//” 的方式添加注释（单行注释）</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + /</td>\n<td>⌘⌥/</td>\n<td>添加 “/**/” 的方式添加注释（块注释），选中代码块，然后快捷键</td>\n</tr>\n<tr>\n<td>Alt + Enter</td>\n<td>⌥↩</td>\n<td>显示意图行动。 Show Intention Action，自动use namespace、给私有属性生成getter setter函数</td>\n</tr>\n<tr>\n<td>Ctrl + Alt + L</td>\n<td>⌘⌥L</td>\n<td>格式化代码，自动缩进</td>\n</tr>\n<tr>\n<td>Tab / Shift + Tab</td>\n<td>tab,⇧+tab</td>\n<td>手动缩进 / 反向缩进</td>\n</tr>\n<tr>\n<td>Ctrl + X or Shift + Delete</td>\n<td>⌘X</td>\n<td>剪切</td>\n</tr>\n<tr>\n<td>Ctrl + C or Ctrl + Insert</td>\n<td>⌘C</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Ctrl + V or Shift + Insert</td>\n<td>⌘V</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + V</td>\n<td>⌘⇧V</td>\n<td>从粘贴板中选择内容进行粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>⌘D</td>\n<td>将当前行或者选择的内容复制到下一行或光标处</td>\n</tr>\n<tr>\n<td>Ctrl + Y</td>\n<td>⌘del</td>\n<td>删除光标所在的行，win上我改成了 Ctrl+Insert</td>\n</tr>\n<tr>\n<td>Ctrl + Delete</td>\n<td>⌥ + del</td>\n<td>删除光标之后的部分单词</td>\n</tr>\n<tr>\n<td>Ctrl + +/-</td>\n<td>⌘ +,-</td>\n<td>折叠 / 打开代码块，再次点击扩大折叠 / 打开范围</td>\n</tr>\n<tr>\n<td>Ctrl + F4</td>\n<td>⌘W</td>\n<td>关闭当前页面，win上也被我设置成 Ctrl + W</td>\n</tr>\n<tr>\n<td>Alt + Up/Down</td>\n<td>⌘ + 上/下方向键</td>\n<td>上下移动代码块、行，我自己设置的</td>\n</tr>\n</tbody></table>\n<h2 id=\"搜索-替换\"><a href=\"#搜索-替换\" class=\"headerlink\" title=\"搜索 / 替换\"></a>搜索 / 替换</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + F</td>\n<td>⌘F</td>\n<td>查找、替换</td>\n</tr>\n<tr>\n<td>Shift + Shift</td>\n<td>⇧ + ⇧</td>\n<td>可在全项目里搜索</td>\n</tr>\n</tbody></table>\n<h2 id=\"导航相关\"><a href=\"#导航相关\" class=\"headerlink\" title=\"导航相关\"></a>导航相关</h2><table>\n<thead>\n<tr>\n<th>Win/Linux</th>\n<th>Mac</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + E</td>\n<td>⌘E</td>\n<td>打开最近打开过的文件列表</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>⌘L</td>\n<td>跳转到行，有时根据报错日志可以快速定位到行</td>\n</tr>\n<tr>\n<td>Ctrl + Click</td>\n<td>⌘ + Click</td>\n<td>跳转到函数的声明处</td>\n</tr>\n<tr>\n<td>Alt + Left</td>\n<td>⌥ + Left</td>\n<td>返回从上次点击跳转到函数的声明处的地方</td>\n</tr>\n<tr>\n<td>Ctrl + W</td>\n<td>⌘ + W</td>\n<td>关闭当前文件，自己设置的快捷键</td>\n</tr>\n<tr>\n<td>Ctrl + Tab</td>\n<td>⌘ + Tab</td>\n<td>切换最近打开的文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"重构相关\"><a href=\"#重构相关\" class=\"headerlink\" title=\"重构相关\"></a>重构相关</h2><p>重命名变量、类、函数，我一般都是用鼠标</p>\n"},{"url":"/2020/04/14/regexp.html","title":"正则表达式","keywords":"正则表达式","description":"正则表达式","date":"2020-04-14T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 表达式集合\n\n字符|描述\n---|---\n\\\\|转义，`\\\\` 将匹配 \\\n^|匹配开始字符\n$|匹配结束字符\n.|匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符\n*|匹配前面的子表达式零次或多次。例如，`zo*`能匹配“z”以及“zoo”。*等价于{0,}\n+|匹配前面的子表达式一次或多次。例如，`zo+`能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}\n?|匹配前面的子表达式零次或一次。例如，`do(es)?`可以匹配“does”或“does”中的“do”。?等价于{0,1}\n?|当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，`o+?`将匹配单个“o”，而`o+`将匹配所有“o”\n{n}|n是一个非负整数，匹配确定的n次。例如，`o{2}`不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o\n{n,}|n是一个非负整数，至少匹配n次。例如，`o{2,}`不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。`o{1,}`等价于`o+`。`o{0,}`则等价于`o*`\n{n,m}|m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，`{1,3}`将匹配“fooooood”中的前三个o。`o{0,1}`等价于`o?`。请注意在逗号和两个数之间不能有空格\n(pattern)|匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到\n(?<group>pattern)|匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，分组匹配\nx&#124;y|匹配x或y，例如，z&#124;food能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”\nxyz|字符集合。匹配所包含的任意一个字符。例如，`[abc]`可以匹配“plain”中的“a”\n[^xyz]|负值字符集合，匹配未包含的任意字符。例如，`[^abc]`可以匹配“plain”中的“p”\n[a-z]|字符范围，匹配指定范围内的任意字符。例如，`[a-z]`可以匹配“a”到“z”范围内的任意小写字母字符\n[^a-z]|负值字符范围。匹配任何不在指定范围内的任意字符。例如，`[^a-z]`可以匹配任何不在“a”到“z”范围内的任意字符\n\\d|匹配一个数字字符。等价于`[0-9]`\n\\D|匹配一个非数字字符。等价于`[^0-9]`\n\\s|匹配任何空白字符，包括空格、制表符、换页符等等。等价于`[ \\f\\n\\r\\t\\v]`\n\\S|匹配任何非空白字符。等价于`[^ \\f\\n\\r\\t\\v]`\n\\w|匹配包括下划线的任何单词字符。等价于`[A-Za-z0-9_]`\n\\W|匹配任何非单词字符。等价于`[^A-Za-z0-9_]`\n\n## 常用正则表达式\n\n`/^[\\u2E80-\\u9FFF]+$/` 匹配中文\n\n## 常用在线调试链接\n\n[在线调试1](https://regex101.com/)\n\n参考链接：\n\n[正则表达式](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n","source":"_posts/tools/regexp.md","raw":"---\nurl: /2020/04/14/regexp.html\ntitle: \"正则表达式\"\nkeywords: \"正则表达式\"\ndescription: \"正则表达式\"\ndate: 2020-04-14T22:53:12+08:00\ndraft: false\ntags: [\"正则表达式\"]\ntags_weight: 100\ncategories: [\"正则表达式\"]\ncategoryes_weight: 100\n---\n\n## 表达式集合\n\n字符|描述\n---|---\n\\\\|转义，`\\\\` 将匹配 \\\n^|匹配开始字符\n$|匹配结束字符\n.|匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符\n*|匹配前面的子表达式零次或多次。例如，`zo*`能匹配“z”以及“zoo”。*等价于{0,}\n+|匹配前面的子表达式一次或多次。例如，`zo+`能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}\n?|匹配前面的子表达式零次或一次。例如，`do(es)?`可以匹配“does”或“does”中的“do”。?等价于{0,1}\n?|当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，`o+?`将匹配单个“o”，而`o+`将匹配所有“o”\n{n}|n是一个非负整数，匹配确定的n次。例如，`o{2}`不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o\n{n,}|n是一个非负整数，至少匹配n次。例如，`o{2,}`不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。`o{1,}`等价于`o+`。`o{0,}`则等价于`o*`\n{n,m}|m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，`{1,3}`将匹配“fooooood”中的前三个o。`o{0,1}`等价于`o?`。请注意在逗号和两个数之间不能有空格\n(pattern)|匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到\n(?<group>pattern)|匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，分组匹配\nx&#124;y|匹配x或y，例如，z&#124;food能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”\nxyz|字符集合。匹配所包含的任意一个字符。例如，`[abc]`可以匹配“plain”中的“a”\n[^xyz]|负值字符集合，匹配未包含的任意字符。例如，`[^abc]`可以匹配“plain”中的“p”\n[a-z]|字符范围，匹配指定范围内的任意字符。例如，`[a-z]`可以匹配“a”到“z”范围内的任意小写字母字符\n[^a-z]|负值字符范围。匹配任何不在指定范围内的任意字符。例如，`[^a-z]`可以匹配任何不在“a”到“z”范围内的任意字符\n\\d|匹配一个数字字符。等价于`[0-9]`\n\\D|匹配一个非数字字符。等价于`[^0-9]`\n\\s|匹配任何空白字符，包括空格、制表符、换页符等等。等价于`[ \\f\\n\\r\\t\\v]`\n\\S|匹配任何非空白字符。等价于`[^ \\f\\n\\r\\t\\v]`\n\\w|匹配包括下划线的任何单词字符。等价于`[A-Za-z0-9_]`\n\\W|匹配任何非单词字符。等价于`[^A-Za-z0-9_]`\n\n## 常用正则表达式\n\n`/^[\\u2E80-\\u9FFF]+$/` 匹配中文\n\n## 常用在线调试链接\n\n[在线调试1](https://regex101.com/)\n\n参考链接：\n\n[正则表达式](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n","slug":"tools/regexp","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3q0034mv0532rd63s5","content":"<h2 id=\"表达式集合\"><a href=\"#表达式集合\" class=\"headerlink\" title=\"表达式集合\"></a>表达式集合</h2><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\</td>\n<td>转义，<code>\\\\</code> 将匹配 \\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配开始字符</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配结束字符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配“z”以及“zoo”。*等价于{0,}</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配“does”或“does”中的“do”。?等价于{0,1}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，<code>o+?</code>将匹配单个“o”，而<code>o+</code>将匹配所有“o”</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数，匹配确定的n次。例如，<code>o&#123;2&#125;</code>不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n是一个非负整数，至少匹配n次。例如，<code>o&#123;2,&#125;</code>不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。<code>o&#123;1,&#125;</code>等价于<code>o+</code>。<code>o&#123;0,&#125;</code>则等价于<code>o*</code></td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，<code>&#123;1,3&#125;</code>将匹配“fooooood”中的前三个o。<code>o&#123;0,1&#125;</code>等价于<code>o?</code>。请注意在逗号和两个数之间不能有空格</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到</td>\n</tr>\n<tr>\n<td>(?<group>pattern)</td>\n<td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，分组匹配</td>\n</tr>\n<tr>\n<td>x&#124;y</td>\n<td>匹配x或y，例如，z&#124;food能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”</td>\n</tr>\n<tr>\n<td>xyz</td>\n<td>字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配“plain”中的“a”</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合，匹配未包含的任意字符。例如，<code>[^abc]</code>可以匹配“plain”中的“p”</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围，匹配指定范围内的任意字符。例如，<code>[a-z]</code>可以匹配“a”到“z”范围内的任意小写字母字符</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在“a”到“z”范围内的任意字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于<code>[0-9]</code></td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于<code>[^0-9]</code></td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于<code>[^ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><p><code>/^[\\u2E80-\\u9FFF]+$/</code> 匹配中文</p>\n<h2 id=\"常用在线调试链接\"><a href=\"#常用在线调试链接\" class=\"headerlink\" title=\"常用在线调试链接\"></a>常用在线调试链接</h2><p><a href=\"https://regex101.com/\">在线调试1</a></p>\n<p>参考链接：</p>\n<p><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"表达式集合\"><a href=\"#表达式集合\" class=\"headerlink\" title=\"表达式集合\"></a>表达式集合</h2><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\</td>\n<td>转义，<code>\\\\</code> 将匹配 \\</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配开始字符</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配结束字符</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除“\\n”之外的任何单个字符。要匹配包括“\\n”在内的任何字符</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配“z”以及“zoo”。*等价于{0,}</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配“does”或“does”中的“do”。?等价于{0,1}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“oooo”，<code>o+?</code>将匹配单个“o”，而<code>o+</code>将匹配所有“o”</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数，匹配确定的n次。例如，<code>o&#123;2&#125;</code>不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n是一个非负整数，至少匹配n次。例如，<code>o&#123;2,&#125;</code>不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。<code>o&#123;1,&#125;</code>等价于<code>o+</code>。<code>o&#123;0,&#125;</code>则等价于<code>o*</code></td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，<code>&#123;1,3&#125;</code>将匹配“fooooood”中的前三个o。<code>o&#123;0,1&#125;</code>等价于<code>o?</code>。请注意在逗号和两个数之间不能有空格</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到</td>\n</tr>\n<tr>\n<td>(?<group>pattern)</td>\n<td>匹配pattern并获取这一匹配，所获取的匹配可以从产生的Matches集合得到，分组匹配</td>\n</tr>\n<tr>\n<td>x&#124;y</td>\n<td>匹配x或y，例如，z&#124;food能匹配“z”或“food”。“(z&#124;f)ood”则匹配“zood”或“food”</td>\n</tr>\n<tr>\n<td>xyz</td>\n<td>字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配“plain”中的“a”</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合，匹配未包含的任意字符。例如，<code>[^abc]</code>可以匹配“plain”中的“p”</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围，匹配指定范围内的任意字符。例如，<code>[a-z]</code>可以匹配“a”到“z”范围内的任意小写字母字符</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在“a”到“z”范围内的任意字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于<code>[0-9]</code></td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于<code>[^0-9]</code></td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于<code>[^ \\f\\n\\r\\t\\v]</code></td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><p><code>/^[\\u2E80-\\u9FFF]+$/</code> 匹配中文</p>\n<h2 id=\"常用在线调试链接\"><a href=\"#常用在线调试链接\" class=\"headerlink\" title=\"常用在线调试链接\"></a>常用在线调试链接</h2><p><a href=\"https://regex101.com/\">在线调试1</a></p>\n<p>参考链接：</p>\n<p><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\">正则表达式</a></p>\n"},{"url":"/2020/08/02/mysql-common-sql.html","title":"Mysql 常用的查询","keywords":"Mysql","description":"Mysql","date":"2020-08-02T06:30:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 查看数据版本\n```mysql\nselect version();\n\nselect @@version;\n\nSHOW VARIABLES LIKE \"version\";\n```\n## 查看当前会话隔离级别\n\n```mysql\nselect @@tx_isolation;\n```\n\n## 查看系统当前隔离级别\n\n```mysql\nselect @@global.tx_isolation;\n```\n\n## 查看当前的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;\n```\n\n## 查看当前锁定的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;\n```\n\n## 查看当前等锁的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;\n```\n\n## 启用标准InnoDB监视器\n```mysql\nSET GLOBAL innodb_status_output=ON;\n```\n\n## 启用InnoDB锁定监视器\n```mysql\nSET GLOBAL innodb_status_output_locks=ON;\n```\n\n## 显示加锁信息\n```mysql\nSHOW ENGINE INNODB STATUS;\n```\n\n## 新建用户\n```mysql\nCREATE USER 'test1'@'127.0.0.1' IDENTIFIED BY '123456';\n```\n\n## 修改用户\n```mysql\nRENAME USER 'test1'@'127.0.0.1' TO 'test1'@'127.0.0.2';\n\nSET PASSWORD FOR 'test1'@'127.0.0.2' = PASSWORD('1234567');\nupdate user set password = password('123456') where user = 'test1';\ngrant all privileges on test_dadabase.* to 'test1'@'127.0.0.2' identified by '1234567';\n\nflush privileges;\n```\n","source":"_posts/mysql/common.md","raw":"---\nurl: /2020/08/02/mysql-common-sql.html\ntitle: \"Mysql 常用的查询\"\nkeywords: \"Mysql\"\ndescription: \"Mysql\"\ndate: 2020-08-02T22:30:57+08:00\ndraft: false\ntags: [\"MySQL\"]\ntags_weight: 100\ncategories: [\"MySQL\"]\ncategoryes_weight: 100\n---\n\n## 查看数据版本\n```mysql\nselect version();\n\nselect @@version;\n\nSHOW VARIABLES LIKE \"version\";\n```\n## 查看当前会话隔离级别\n\n```mysql\nselect @@tx_isolation;\n```\n\n## 查看系统当前隔离级别\n\n```mysql\nselect @@global.tx_isolation;\n```\n\n## 查看当前的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;\n```\n\n## 查看当前锁定的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;\n```\n\n## 查看当前等锁的事务\n\n```mysql\nSELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;\n```\n\n## 启用标准InnoDB监视器\n```mysql\nSET GLOBAL innodb_status_output=ON;\n```\n\n## 启用InnoDB锁定监视器\n```mysql\nSET GLOBAL innodb_status_output_locks=ON;\n```\n\n## 显示加锁信息\n```mysql\nSHOW ENGINE INNODB STATUS;\n```\n\n## 新建用户\n```mysql\nCREATE USER 'test1'@'127.0.0.1' IDENTIFIED BY '123456';\n```\n\n## 修改用户\n```mysql\nRENAME USER 'test1'@'127.0.0.1' TO 'test1'@'127.0.0.2';\n\nSET PASSWORD FOR 'test1'@'127.0.0.2' = PASSWORD('1234567');\nupdate user set password = password('123456') where user = 'test1';\ngrant all privileges on test_dadabase.* to 'test1'@'127.0.0.2' identified by '1234567';\n\nflush privileges;\n```\n","slug":"mysql/common","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3r0037mv05bbhacny6","content":"<h2 id=\"查看数据版本\"><a href=\"#查看数据版本\" class=\"headerlink\" title=\"查看数据版本\"></a>查看数据版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select version();</span><br><span class=\"line\"></span><br><span class=\"line\">select @@version;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW VARIABLES LIKE &quot;version&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前会话隔离级别\"><a href=\"#查看当前会话隔离级别\" class=\"headerlink\" title=\"查看当前会话隔离级别\"></a>查看当前会话隔离级别</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看系统当前隔离级别\"><a href=\"#查看系统当前隔离级别\" class=\"headerlink\" title=\"查看系统当前隔离级别\"></a>查看系统当前隔离级别</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前的事务\"><a href=\"#查看当前的事务\" class=\"headerlink\" title=\"查看当前的事务\"></a>查看当前的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前锁定的事务\"><a href=\"#查看当前锁定的事务\" class=\"headerlink\" title=\"查看当前锁定的事务\"></a>查看当前锁定的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前等锁的事务\"><a href=\"#查看当前等锁的事务\" class=\"headerlink\" title=\"查看当前等锁的事务\"></a>查看当前等锁的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用标准InnoDB监视器\"><a href=\"#启用标准InnoDB监视器\" class=\"headerlink\" title=\"启用标准InnoDB监视器\"></a>启用标准InnoDB监视器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_status_output&#x3D;ON;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用InnoDB锁定监视器\"><a href=\"#启用InnoDB锁定监视器\" class=\"headerlink\" title=\"启用InnoDB锁定监视器\"></a>启用InnoDB锁定监视器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_status_output_locks&#x3D;ON;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示加锁信息\"><a href=\"#显示加锁信息\" class=\"headerlink\" title=\"显示加锁信息\"></a>显示加锁信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#39;test1&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RENAME USER &#39;test1&#39;@&#39;127.0.0.1&#39; TO &#39;test1&#39;@&#39;127.0.0.2&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">SET PASSWORD FOR &#39;test1&#39;@&#39;127.0.0.2&#39; &#x3D; PASSWORD(&#39;1234567&#39;);</span><br><span class=\"line\">update user set password &#x3D; password(&#39;123456&#39;) where user &#x3D; &#39;test1&#39;;</span><br><span class=\"line\">grant all privileges on test_dadabase.* to &#39;test1&#39;@&#39;127.0.0.2&#39; identified by &#39;1234567&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看数据版本\"><a href=\"#查看数据版本\" class=\"headerlink\" title=\"查看数据版本\"></a>查看数据版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select version();</span><br><span class=\"line\"></span><br><span class=\"line\">select @@version;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW VARIABLES LIKE &quot;version&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前会话隔离级别\"><a href=\"#查看当前会话隔离级别\" class=\"headerlink\" title=\"查看当前会话隔离级别\"></a>查看当前会话隔离级别</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看系统当前隔离级别\"><a href=\"#查看系统当前隔离级别\" class=\"headerlink\" title=\"查看系统当前隔离级别\"></a>查看系统当前隔离级别</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前的事务\"><a href=\"#查看当前的事务\" class=\"headerlink\" title=\"查看当前的事务\"></a>查看当前的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前锁定的事务\"><a href=\"#查看当前锁定的事务\" class=\"headerlink\" title=\"查看当前锁定的事务\"></a>查看当前锁定的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前等锁的事务\"><a href=\"#查看当前等锁的事务\" class=\"headerlink\" title=\"查看当前等锁的事务\"></a>查看当前等锁的事务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用标准InnoDB监视器\"><a href=\"#启用标准InnoDB监视器\" class=\"headerlink\" title=\"启用标准InnoDB监视器\"></a>启用标准InnoDB监视器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_status_output&#x3D;ON;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用InnoDB锁定监视器\"><a href=\"#启用InnoDB锁定监视器\" class=\"headerlink\" title=\"启用InnoDB锁定监视器\"></a>启用InnoDB锁定监视器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET GLOBAL innodb_status_output_locks&#x3D;ON;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显示加锁信息\"><a href=\"#显示加锁信息\" class=\"headerlink\" title=\"显示加锁信息\"></a>显示加锁信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#39;test1&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RENAME USER &#39;test1&#39;@&#39;127.0.0.1&#39; TO &#39;test1&#39;@&#39;127.0.0.2&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">SET PASSWORD FOR &#39;test1&#39;@&#39;127.0.0.2&#39; &#x3D; PASSWORD(&#39;1234567&#39;);</span><br><span class=\"line\">update user set password &#x3D; password(&#39;123456&#39;) where user &#x3D; &#39;test1&#39;;</span><br><span class=\"line\">grant all privileges on test_dadabase.* to &#39;test1&#39;@&#39;127.0.0.2&#39; identified by &#39;1234567&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2019/10/11/mysql-index-optimize.html","title":"Mysql 索引学习","keywords":"Mysql,索引优化","description":"Mysql 索引优化","date":"2019-10-11T06:30:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 一、索引\n### 索引的类型（数据结构）\n#### 1. B-Tree\n```\n所有引擎都支持\nInnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引和数据是不同的文件)\n```\n- 多列索引\n```\n需要满足最左原则，where条件必须和索引的顺序一致，如果只用到单列则必须是最左列\n```\n\n- InnoDB使用聚簇索引（一种数据存储方式）\n```\n聚簇索引的表现形式为，二级索引里包含了主键列（二级索引的行指针是指向行的主键值而不是行的物理地址），所以使用InnoDB时应该尽可能建一个递增的（顺序主键）如果没有则会隐式定义一个主键来作为聚簇索引\n```\n\n- 覆盖索引\n```\n如果一个索引包含所有需要查询的字段的值\n```\n\n- 使用索引扫描来做排序\n```\n只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。也需要满足索引的最左前缀要求（例外：前导列为常量的时候）。\n```\n\n- 建如下表测试索引排序\n```mysql\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `realname` varchar(10) NOT NULL DEFAULT '',\n  `sex` tinyint(4) NOT NULL DEFAULT '0',\n  `age` tinyint(4) NOT NULL DEFAULT '0',\n  `job` varchar(10) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  KEY `test_realname_sex_age_index` (`realname`,`sex`,`age`),\n  KEY `sex_index` (`sex`),\n  KEY `age_index` (`age`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n#### 1. 使用两种不同的排序方向排序\n\n- 能使用索引排序\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age DESC;\n```\n\n- 不能使用索引排序\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age ASC;\n```\n#### 2. 用了一个不在索引中的列\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex,job;\n```\n#### 3. where order by中的列无法组合成索引的最左前缀\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY age;\n```\n- 能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex;\n```\n#### 4. 查询在索引第一列上是范围条件\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname > 'wen' ORDER BY sex,age;\n\nEXPLAIN SELECT * FROM test WHERE realname BETWEEN 'wen1' AND 'wen2' ORDER BY sex,age;\n```\n#### 5. 索引上有多个等于条件\n\n- 不能\n```\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' AND sex IN (1,2) ORDER BY  age;\n```\n#### 6. 前导列不为常量，并且使用范围条件\n\n不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname > 'qqq' ORDER BY realname;\n```\n\n能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'qqq' ORDER BY realname;\n```\n- 选择合适的索引顺序\n\n一般来说：将选择性最高的列放到索引的最前列。计算方法\n```mysql\nSELECT count(DISTINCT realname)/COUNT(\\*) realname_selectivity,count(DISTINCT sex)/COUNT(\\*) sex_selectivity,count(DISTINCT age)/COUNT(\\*) age_selectivity,count(\\*) total FROM test;\n```\n\n- 单索引排序\n\n#### 1. where条件和排序的列不一致\n\n不能使用索引排序 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY age;\n```\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY sex;\n```\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;\n```\n#### 2. 没有where条件直接排序\n\n主键可以排序 \n```mysql\nEXPLAIN SELECT * FROM test ORDER BY id;\n```\n不能 \n```mysql\nEXPLAIN SELECT * FROM test ORDER BY sex;\n```\n#### 3. 多where条件\n\n不能，不满足左前缀 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 AND age > 17 ORDER BY age;\n```\n不能，不满足左前缀 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY age;\n```\n\n不能，没有建多列索引 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 18 ORDER BY sex,age;\n```\n\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;\n```\n\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY sex;\n```\n- 优化排序分页\n\n排序分页达到一定数量时（使用ORDER BY LIMIT），越往后面翻页越卡，可以通过使用覆盖索引查询返回需要的主键，再根据主键关联原表获得所需要的行\n```mysql\nSELECT * FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10;\n\nSELECT * FROM test INNER JOIN (SELECT id FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10) t USING (id);\n```\n\n#### 2. 哈希索引\nMemory引擎显式支持\n\n#### 3. 空间数据索引（R-Tree）\n\n#### 4. 全文索引(Full-text)\n同列可创建全文索引和B-Tree索引\n\n## 二、查询优化\n","source":"_posts/mysql/index-optimize.md","raw":"---\nurl: /2019/10/11/mysql-index-optimize.html\ntitle: \"Mysql 索引学习\"\nkeywords: \"Mysql,索引优化\"\ndescription: \"Mysql 索引优化\"\ndate: 2019-10-11T22:30:57+08:00\ndraft: false\ntags: [\"MySQL\"]\ntags_weight: 100\ncategories: [\"MySQL\"]\ncategoryes_weight: 100\n---\n\n## 一、索引\n### 索引的类型（数据结构）\n#### 1. B-Tree\n```\n所有引擎都支持\nInnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引和数据是不同的文件)\n```\n- 多列索引\n```\n需要满足最左原则，where条件必须和索引的顺序一致，如果只用到单列则必须是最左列\n```\n\n- InnoDB使用聚簇索引（一种数据存储方式）\n```\n聚簇索引的表现形式为，二级索引里包含了主键列（二级索引的行指针是指向行的主键值而不是行的物理地址），所以使用InnoDB时应该尽可能建一个递增的（顺序主键）如果没有则会隐式定义一个主键来作为聚簇索引\n```\n\n- 覆盖索引\n```\n如果一个索引包含所有需要查询的字段的值\n```\n\n- 使用索引扫描来做排序\n```\n只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。也需要满足索引的最左前缀要求（例外：前导列为常量的时候）。\n```\n\n- 建如下表测试索引排序\n```mysql\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `realname` varchar(10) NOT NULL DEFAULT '',\n  `sex` tinyint(4) NOT NULL DEFAULT '0',\n  `age` tinyint(4) NOT NULL DEFAULT '0',\n  `job` varchar(10) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  KEY `test_realname_sex_age_index` (`realname`,`sex`,`age`),\n  KEY `sex_index` (`sex`),\n  KEY `age_index` (`age`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n#### 1. 使用两种不同的排序方向排序\n\n- 能使用索引排序\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age DESC;\n```\n\n- 不能使用索引排序\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex DESC ,age ASC;\n```\n#### 2. 用了一个不在索引中的列\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex,job;\n```\n#### 3. where order by中的列无法组合成索引的最左前缀\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY age;\n```\n- 能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' ORDER BY sex;\n```\n#### 4. 查询在索引第一列上是范围条件\n\n- 不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname > 'wen' ORDER BY sex,age;\n\nEXPLAIN SELECT * FROM test WHERE realname BETWEEN 'wen1' AND 'wen2' ORDER BY sex,age;\n```\n#### 5. 索引上有多个等于条件\n\n- 不能\n```\nEXPLAIN SELECT * FROM test WHERE realname = 'wen' AND sex IN (1,2) ORDER BY  age;\n```\n#### 6. 前导列不为常量，并且使用范围条件\n\n不能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname > 'qqq' ORDER BY realname;\n```\n\n能\n```mysql\nEXPLAIN SELECT * FROM test WHERE realname = 'qqq' ORDER BY realname;\n```\n- 选择合适的索引顺序\n\n一般来说：将选择性最高的列放到索引的最前列。计算方法\n```mysql\nSELECT count(DISTINCT realname)/COUNT(\\*) realname_selectivity,count(DISTINCT sex)/COUNT(\\*) sex_selectivity,count(DISTINCT age)/COUNT(\\*) age_selectivity,count(\\*) total FROM test;\n```\n\n- 单索引排序\n\n#### 1. where条件和排序的列不一致\n\n不能使用索引排序 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY age;\n```\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 ORDER BY sex;\n```\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;\n```\n#### 2. 没有where条件直接排序\n\n主键可以排序 \n```mysql\nEXPLAIN SELECT * FROM test ORDER BY id;\n```\n不能 \n```mysql\nEXPLAIN SELECT * FROM test ORDER BY sex;\n```\n#### 3. 多where条件\n\n不能，不满足左前缀 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex = 1 AND age > 17 ORDER BY age;\n```\n不能，不满足左前缀 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY age;\n```\n\n不能，没有建多列索引 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 18 ORDER BY sex,age;\n```\n\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE age > 17 ORDER BY age;\n```\n\n能 \n```mysql\nEXPLAIN SELECT * FROM test WHERE sex > 1 AND age > 17 ORDER BY sex;\n```\n- 优化排序分页\n\n排序分页达到一定数量时（使用ORDER BY LIMIT），越往后面翻页越卡，可以通过使用覆盖索引查询返回需要的主键，再根据主键关联原表获得所需要的行\n```mysql\nSELECT * FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10;\n\nSELECT * FROM test INNER JOIN (SELECT id FROM test WHERE realname = 'wen' ORDER BY sex LIMIT 100000,10) t USING (id);\n```\n\n#### 2. 哈希索引\nMemory引擎显式支持\n\n#### 3. 空间数据索引（R-Tree）\n\n#### 4. 全文索引(Full-text)\n同列可创建全文索引和B-Tree索引\n\n## 二、查询优化\n","slug":"mysql/index-optimize","published":1,"updated":"2020-04-02T13:04:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3v003cmv05blpt05io","content":"<h2 id=\"一、索引\"><a href=\"#一、索引\" class=\"headerlink\" title=\"一、索引\"></a>一、索引</h2><h3 id=\"索引的类型（数据结构）\"><a href=\"#索引的类型（数据结构）\" class=\"headerlink\" title=\"索引的类型（数据结构）\"></a>索引的类型（数据结构）</h3><h4 id=\"1-B-Tree\"><a href=\"#1-B-Tree\" class=\"headerlink\" title=\"1. B-Tree\"></a>1. B-Tree</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有引擎都支持</span><br><span class=\"line\">InnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引和数据是不同的文件)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>多列索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要满足最左原则，where条件必须和索引的顺序一致，如果只用到单列则必须是最左列</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>InnoDB使用聚簇索引（一种数据存储方式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">聚簇索引的表现形式为，二级索引里包含了主键列（二级索引的行指针是指向行的主键值而不是行的物理地址），所以使用InnoDB时应该尽可能建一个递增的（顺序主键）如果没有则会隐式定义一个主键来作为聚簇索引</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>覆盖索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一个索引包含所有需要查询的字段的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用索引扫描来做排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。也需要满足索引的最左前缀要求（例外：前导列为常量的时候）。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建如下表测试索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;test&#96; (</span><br><span class=\"line\">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  &#96;realname&#96; varchar(10) NOT NULL DEFAULT &#39;&#39;,</span><br><span class=\"line\">  &#96;sex&#96; tinyint(4) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class=\"line\">  &#96;age&#96; tinyint(4) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class=\"line\">  &#96;job&#96; varchar(10) NOT NULL DEFAULT &#39;&#39;,</span><br><span class=\"line\">  PRIMARY KEY (&#96;id&#96;),</span><br><span class=\"line\">  KEY &#96;test_realname_sex_age_index&#96; (&#96;realname&#96;,&#96;sex&#96;,&#96;age&#96;),</span><br><span class=\"line\">  KEY &#96;sex_index&#96; (&#96;sex&#96;),</span><br><span class=\"line\">  KEY &#96;age_index&#96; (&#96;age&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-使用两种不同的排序方向排序\"><a href=\"#1-使用两种不同的排序方向排序\" class=\"headerlink\" title=\"1. 使用两种不同的排序方向排序\"></a>1. 使用两种不同的排序方向排序</h4></li>\n<li><p>能使用索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex DESC ,age DESC;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不能使用索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex DESC ,age ASC;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-用了一个不在索引中的列\"><a href=\"#2-用了一个不在索引中的列\" class=\"headerlink\" title=\"2. 用了一个不在索引中的列\"></a>2. 用了一个不在索引中的列</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex,job;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-where-order-by中的列无法组合成索引的最左前缀\"><a href=\"#3-where-order-by中的列无法组合成索引的最左前缀\" class=\"headerlink\" title=\"3. where order by中的列无法组合成索引的最左前缀\"></a>3. where order by中的列无法组合成索引的最左前缀</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY age;</span><br></pre></td></tr></table></figure></li>\n<li><p>能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查询在索引第一列上是范围条件\"><a href=\"#4-查询在索引第一列上是范围条件\" class=\"headerlink\" title=\"4. 查询在索引第一列上是范围条件\"></a>4. 查询在索引第一列上是范围条件</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &gt; &#39;wen&#39; ORDER BY sex,age;</span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname BETWEEN &#39;wen1&#39; AND &#39;wen2&#39; ORDER BY sex,age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-索引上有多个等于条件\"><a href=\"#5-索引上有多个等于条件\" class=\"headerlink\" title=\"5. 索引上有多个等于条件\"></a>5. 索引上有多个等于条件</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; AND sex IN (1,2) ORDER BY  age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-前导列不为常量，并且使用范围条件\"><a href=\"#6-前导列不为常量，并且使用范围条件\" class=\"headerlink\" title=\"6. 前导列不为常量，并且使用范围条件\"></a>6. 前导列不为常量，并且使用范围条件</h4></li>\n</ul>\n<p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &gt; &#39;qqq&#39; ORDER BY realname;</span><br></pre></td></tr></table></figure>\n\n<p>能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;qqq&#39; ORDER BY realname;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择合适的索引顺序</li>\n</ul>\n<p>一般来说：将选择性最高的列放到索引的最前列。计算方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT count(DISTINCT realname)&#x2F;COUNT(\\*) realname_selectivity,count(DISTINCT sex)&#x2F;COUNT(\\*) sex_selectivity,count(DISTINCT age)&#x2F;COUNT(\\*) age_selectivity,count(\\*) total FROM test;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单索引排序</li>\n</ul>\n<h4 id=\"1-where条件和排序的列不一致\"><a href=\"#1-where条件和排序的列不一致\" class=\"headerlink\" title=\"1. where条件和排序的列不一致\"></a>1. where条件和排序的列不一致</h4><p>不能使用索引排序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-没有where条件直接排序\"><a href=\"#2-没有where条件直接排序\" class=\"headerlink\" title=\"2. 没有where条件直接排序\"></a>2. 没有where条件直接排序</h4><p>主键可以排序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test ORDER BY id;</span><br></pre></td></tr></table></figure>\n<p>不能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-多where条件\"><a href=\"#3-多where条件\" class=\"headerlink\" title=\"3. 多where条件\"></a>3. 多where条件</h4><p>不能，不满足左前缀 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 AND age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<p>不能，不满足左前缀 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n\n<p>不能，没有建多列索引 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 18 ORDER BY sex,age;</span><br></pre></td></tr></table></figure>\n\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 17 ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化排序分页</li>\n</ul>\n<p>排序分页达到一定数量时（使用ORDER BY LIMIT），越往后面翻页越卡，可以通过使用覆盖索引查询返回需要的主键，再根据主键关联原表获得所需要的行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex LIMIT 100000,10;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM test INNER JOIN (SELECT id FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex LIMIT 100000,10) t USING (id);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-哈希索引\"><a href=\"#2-哈希索引\" class=\"headerlink\" title=\"2. 哈希索引\"></a>2. 哈希索引</h4><p>Memory引擎显式支持</p>\n<h4 id=\"3-空间数据索引（R-Tree）\"><a href=\"#3-空间数据索引（R-Tree）\" class=\"headerlink\" title=\"3. 空间数据索引（R-Tree）\"></a>3. 空间数据索引（R-Tree）</h4><h4 id=\"4-全文索引-Full-text\"><a href=\"#4-全文索引-Full-text\" class=\"headerlink\" title=\"4. 全文索引(Full-text)\"></a>4. 全文索引(Full-text)</h4><p>同列可创建全文索引和B-Tree索引</p>\n<h2 id=\"二、查询优化\"><a href=\"#二、查询优化\" class=\"headerlink\" title=\"二、查询优化\"></a>二、查询优化</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、索引\"><a href=\"#一、索引\" class=\"headerlink\" title=\"一、索引\"></a>一、索引</h2><h3 id=\"索引的类型（数据结构）\"><a href=\"#索引的类型（数据结构）\" class=\"headerlink\" title=\"索引的类型（数据结构）\"></a>索引的类型（数据结构）</h3><h4 id=\"1-B-Tree\"><a href=\"#1-B-Tree\" class=\"headerlink\" title=\"1. B-Tree\"></a>1. B-Tree</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有引擎都支持</span><br><span class=\"line\">InnoDB(根据主键引用被索引的行，索引和数据同一个文件)、MyISAM(通过数据的物理位置应用被索引的行，索引和数据是不同的文件)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>多列索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要满足最左原则，where条件必须和索引的顺序一致，如果只用到单列则必须是最左列</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>InnoDB使用聚簇索引（一种数据存储方式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">聚簇索引的表现形式为，二级索引里包含了主键列（二级索引的行指针是指向行的主键值而不是行的物理地址），所以使用InnoDB时应该尽可能建一个递增的（顺序主键）如果没有则会隐式定义一个主键来作为聚簇索引</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>覆盖索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一个索引包含所有需要查询的字段的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用索引扫描来做排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当ORDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。也需要满足索引的最左前缀要求（例外：前导列为常量的时候）。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建如下表测试索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &#96;test&#96; (</span><br><span class=\"line\">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  &#96;realname&#96; varchar(10) NOT NULL DEFAULT &#39;&#39;,</span><br><span class=\"line\">  &#96;sex&#96; tinyint(4) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class=\"line\">  &#96;age&#96; tinyint(4) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class=\"line\">  &#96;job&#96; varchar(10) NOT NULL DEFAULT &#39;&#39;,</span><br><span class=\"line\">  PRIMARY KEY (&#96;id&#96;),</span><br><span class=\"line\">  KEY &#96;test_realname_sex_age_index&#96; (&#96;realname&#96;,&#96;sex&#96;,&#96;age&#96;),</span><br><span class=\"line\">  KEY &#96;sex_index&#96; (&#96;sex&#96;),</span><br><span class=\"line\">  KEY &#96;age_index&#96; (&#96;age&#96;)</span><br><span class=\"line\">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-使用两种不同的排序方向排序\"><a href=\"#1-使用两种不同的排序方向排序\" class=\"headerlink\" title=\"1. 使用两种不同的排序方向排序\"></a>1. 使用两种不同的排序方向排序</h4></li>\n<li><p>能使用索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex DESC ,age DESC;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不能使用索引排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex DESC ,age ASC;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-用了一个不在索引中的列\"><a href=\"#2-用了一个不在索引中的列\" class=\"headerlink\" title=\"2. 用了一个不在索引中的列\"></a>2. 用了一个不在索引中的列</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex,job;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-where-order-by中的列无法组合成索引的最左前缀\"><a href=\"#3-where-order-by中的列无法组合成索引的最左前缀\" class=\"headerlink\" title=\"3. where order by中的列无法组合成索引的最左前缀\"></a>3. where order by中的列无法组合成索引的最左前缀</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY age;</span><br></pre></td></tr></table></figure></li>\n<li><p>能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查询在索引第一列上是范围条件\"><a href=\"#4-查询在索引第一列上是范围条件\" class=\"headerlink\" title=\"4. 查询在索引第一列上是范围条件\"></a>4. 查询在索引第一列上是范围条件</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &gt; &#39;wen&#39; ORDER BY sex,age;</span><br><span class=\"line\"></span><br><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname BETWEEN &#39;wen1&#39; AND &#39;wen2&#39; ORDER BY sex,age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-索引上有多个等于条件\"><a href=\"#5-索引上有多个等于条件\" class=\"headerlink\" title=\"5. 索引上有多个等于条件\"></a>5. 索引上有多个等于条件</h4></li>\n<li><p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; AND sex IN (1,2) ORDER BY  age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-前导列不为常量，并且使用范围条件\"><a href=\"#6-前导列不为常量，并且使用范围条件\" class=\"headerlink\" title=\"6. 前导列不为常量，并且使用范围条件\"></a>6. 前导列不为常量，并且使用范围条件</h4></li>\n</ul>\n<p>不能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &gt; &#39;qqq&#39; ORDER BY realname;</span><br></pre></td></tr></table></figure>\n\n<p>能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE realname &#x3D; &#39;qqq&#39; ORDER BY realname;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择合适的索引顺序</li>\n</ul>\n<p>一般来说：将选择性最高的列放到索引的最前列。计算方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT count(DISTINCT realname)&#x2F;COUNT(\\*) realname_selectivity,count(DISTINCT sex)&#x2F;COUNT(\\*) sex_selectivity,count(DISTINCT age)&#x2F;COUNT(\\*) age_selectivity,count(\\*) total FROM test;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单索引排序</li>\n</ul>\n<h4 id=\"1-where条件和排序的列不一致\"><a href=\"#1-where条件和排序的列不一致\" class=\"headerlink\" title=\"1. where条件和排序的列不一致\"></a>1. where条件和排序的列不一致</h4><p>不能使用索引排序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-没有where条件直接排序\"><a href=\"#2-没有where条件直接排序\" class=\"headerlink\" title=\"2. 没有where条件直接排序\"></a>2. 没有where条件直接排序</h4><p>主键可以排序 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test ORDER BY id;</span><br></pre></td></tr></table></figure>\n<p>不能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-多where条件\"><a href=\"#3-多where条件\" class=\"headerlink\" title=\"3. 多where条件\"></a>3. 多where条件</h4><p>不能，不满足左前缀 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &#x3D; 1 AND age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n<p>不能，不满足左前缀 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n\n<p>不能，没有建多列索引 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 18 ORDER BY sex,age;</span><br></pre></td></tr></table></figure>\n\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE age &gt; 17 ORDER BY age;</span><br></pre></td></tr></table></figure>\n\n<p>能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM test WHERE sex &gt; 1 AND age &gt; 17 ORDER BY sex;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化排序分页</li>\n</ul>\n<p>排序分页达到一定数量时（使用ORDER BY LIMIT），越往后面翻页越卡，可以通过使用覆盖索引查询返回需要的主键，再根据主键关联原表获得所需要的行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex LIMIT 100000,10;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM test INNER JOIN (SELECT id FROM test WHERE realname &#x3D; &#39;wen&#39; ORDER BY sex LIMIT 100000,10) t USING (id);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-哈希索引\"><a href=\"#2-哈希索引\" class=\"headerlink\" title=\"2. 哈希索引\"></a>2. 哈希索引</h4><p>Memory引擎显式支持</p>\n<h4 id=\"3-空间数据索引（R-Tree）\"><a href=\"#3-空间数据索引（R-Tree）\" class=\"headerlink\" title=\"3. 空间数据索引（R-Tree）\"></a>3. 空间数据索引（R-Tree）</h4><h4 id=\"4-全文索引-Full-text\"><a href=\"#4-全文索引-Full-text\" class=\"headerlink\" title=\"4. 全文索引(Full-text)\"></a>4. 全文索引(Full-text)</h4><p>同列可创建全文索引和B-Tree索引</p>\n<h2 id=\"二、查询优化\"><a href=\"#二、查询优化\" class=\"headerlink\" title=\"二、查询优化\"></a>二、查询优化</h2>"},{"url":"/2020/05/16/mysql-lock-transaction.html","title":"MySQL 锁和事务机制","keywords":"MySQL锁机制,事务机制","description":"MySQL锁机制,事务机制","date":"2020-05-16T05:31:57.000Z","draft":true,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 锁简介\n\n想要控制并发读写，就离不开锁\n在处理并发读或者写时，可以通过实现一个由两种类型锁组成的锁系统来解决问题。\n这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）.\n\n读锁是共享的，互不阻塞的；写锁是排他的，一个写锁会阻塞其他的写锁和读锁；这样才能确保在给定的时间只有一个用户能执行写入，\n并防止其他客户读取正在写入的同一资源。\n\nMySQL最重要的两种锁策略：\n\n1. 表锁（table lock）\n\n表锁是MySQL中最基本的锁策略，并且是开销最小的的策略\n\n2. 行锁（row lock）\n","source":"_posts/mysql/lock_transaction.md","raw":"---\nurl: /2020/05/16/mysql-lock-transaction.html\ntitle: \"MySQL 锁和事务机制\"\nkeywords: \"MySQL锁机制,事务机制\"\ndescription: \"MySQL锁机制,事务机制\"\ndate: 2020-05-16T21:31:57+08:00\ndraft: true\ntags: [\"MySQL\"]\ntags_weight: 100\ncategories: [\"MySQL\"]\ncategoryes_weight: 100\n---\n\n## 锁简介\n\n想要控制并发读写，就离不开锁\n在处理并发读或者写时，可以通过实现一个由两种类型锁组成的锁系统来解决问题。\n这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）.\n\n读锁是共享的，互不阻塞的；写锁是排他的，一个写锁会阻塞其他的写锁和读锁；这样才能确保在给定的时间只有一个用户能执行写入，\n并防止其他客户读取正在写入的同一资源。\n\nMySQL最重要的两种锁策略：\n\n1. 表锁（table lock）\n\n表锁是MySQL中最基本的锁策略，并且是开销最小的的策略\n\n2. 行锁（row lock）\n","slug":"mysql/lock_transaction","published":1,"updated":"2020-07-16T14:03:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3w003fmv05d1qmfa8c","content":"<h2 id=\"锁简介\"><a href=\"#锁简介\" class=\"headerlink\" title=\"锁简介\"></a>锁简介</h2><p>想要控制并发读写，就离不开锁<br>在处理并发读或者写时，可以通过实现一个由两种类型锁组成的锁系统来解决问题。<br>这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）.</p>\n<p>读锁是共享的，互不阻塞的；写锁是排他的，一个写锁会阻塞其他的写锁和读锁；这样才能确保在给定的时间只有一个用户能执行写入，<br>并防止其他客户读取正在写入的同一资源。</p>\n<p>MySQL最重要的两种锁策略：</p>\n<ol>\n<li>表锁（table lock）</li>\n</ol>\n<p>表锁是MySQL中最基本的锁策略，并且是开销最小的的策略</p>\n<ol start=\"2\">\n<li>行锁（row lock）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"锁简介\"><a href=\"#锁简介\" class=\"headerlink\" title=\"锁简介\"></a>锁简介</h2><p>想要控制并发读写，就离不开锁<br>在处理并发读或者写时，可以通过实现一个由两种类型锁组成的锁系统来解决问题。<br>这两种类型的锁通常被称为共享锁（shared lock）和排他锁（exclusive lock），也叫读锁（read lock）和写锁（write lock）.</p>\n<p>读锁是共享的，互不阻塞的；写锁是排他的，一个写锁会阻塞其他的写锁和读锁；这样才能确保在给定的时间只有一个用户能执行写入，<br>并防止其他客户读取正在写入的同一资源。</p>\n<p>MySQL最重要的两种锁策略：</p>\n<ol>\n<li>表锁（table lock）</li>\n</ol>\n<p>表锁是MySQL中最基本的锁策略，并且是开销最小的的策略</p>\n<ol start=\"2\">\n<li>行锁（row lock）</li>\n</ol>\n"},{"url":"/2018/10/01/design-patten-readme.html","title":"设计模式-学习《大话设计模式》的整理","date":"2018-10-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 单一职责\n\n- **就一个类而言，应该仅有一个引起它变化的原因。**\n\n```\n如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。\n这种耦合会导致脆弱的设计，当变化产生时，设计会遭到意想不到的破坏。\n\n软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。\n如果你能够想到多余一个的动机去改变一个类，那么这个类就具有多余一个的职责。\n```\n\n## 开放-封闭原则\n\n- **软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。**\n\n```\n对于扩展是开放的，对于更改是封闭的。\n\n怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？\n\n无论模块是多么的封闭，都会存在一些无法对之封闭的变化。即然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。\n他必须先猜测出最有可能发生变化的种类，然后构造抽象来隔离那些变化。\n\n我们可以在发生小变化时，就及早去想办法应对发生更大变化的可能。\n等到变化发生时立即采取行动。在我们最初编程写代码时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离以后发生的同类变化。\n\n面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码。\n\n我们希望的是在开发工作展开不久就可以知道能发生的变化。\n查明可能发生的变化所等待的时间越长，要创建正确的抽象就越难。\n\n开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。\n拒绝不成熟的抽象和抽象本身一样重要。\n```\n\n## 依赖倒转原则\n\n- **高层模块不应该依赖低层模块，两个都应该依赖抽象。**\n- **抽象不应该依赖细节，细节应该依赖抽象。**\n\n```\n针对接口编程，不要对现实编程。\n\n依赖倒转其实可以说是面向对象设计的标志，用那种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，\n即程序中所有的依赖关系都是终止于抽象类或者接口，那么就是面向对象的设计，反之那就是过程化的设计了。\n\n1. 依赖注入时，我们应该依赖接口，而不是某个具体的类，由高层直接绑定依赖关系。\n2. 测试驱动开发，先写好单元测试类，测试类依赖的是接口，具体的实现可以后面开发。\n```\n\n## 里氏代换原则\n\n- **子类型必须能够替换掉它们的父类型。**\n\n```\n一个软件实体如果使用的是一个父类的话，那么一定适用于子类，而它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，\n把父类都替换成它的子类，程序的行为没有变化。\n\n只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。\n\n正是由于子类型的可替换性才使得使用父类类型的模块在无修改的情况下就可以扩展。\n\n1. 子类必须完全实现父类的方法\n2. 子类可以有自己的个性\n```\n\n## 迪米特法则（最少知识原则）\n\n```\n如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。\n如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n\n在类的结构设计上，每一个类都应当尽量降低成员的访问权限。\n\n迪米特法则其根本思想，是强调了类之间的松耦合。\n\n类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。\n```\n## 合成/聚合复用原则\n\n- **尽量使用合成/聚合，尽量不要使用类继承**\n\n```\n子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。\n当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它更适合的类替换，\n这中依赖关系限制了灵活性并最终限制了复用性。\n\n聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强拥有关系，体现了严格\n的部分和整体的关系，部分和整体的生命周期一样。\n\n优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承的层次会保持较小规模，\n并且不太可能增长为不可控制的庞然大物。\n```\n","source":"_posts/design_patten/README.md","raw":"---\nurl: /2018/10/01/design-patten-readme.html\ntitle: \"设计模式-学习《大话设计模式》的整理\"\ndate: 2018-10-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n## 单一职责\n\n- **就一个类而言，应该仅有一个引起它变化的原因。**\n\n```\n如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。\n这种耦合会导致脆弱的设计，当变化产生时，设计会遭到意想不到的破坏。\n\n软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。\n如果你能够想到多余一个的动机去改变一个类，那么这个类就具有多余一个的职责。\n```\n\n## 开放-封闭原则\n\n- **软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。**\n\n```\n对于扩展是开放的，对于更改是封闭的。\n\n怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？\n\n无论模块是多么的封闭，都会存在一些无法对之封闭的变化。即然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。\n他必须先猜测出最有可能发生变化的种类，然后构造抽象来隔离那些变化。\n\n我们可以在发生小变化时，就及早去想办法应对发生更大变化的可能。\n等到变化发生时立即采取行动。在我们最初编程写代码时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离以后发生的同类变化。\n\n面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码。\n\n我们希望的是在开发工作展开不久就可以知道能发生的变化。\n查明可能发生的变化所等待的时间越长，要创建正确的抽象就越难。\n\n开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。\n拒绝不成熟的抽象和抽象本身一样重要。\n```\n\n## 依赖倒转原则\n\n- **高层模块不应该依赖低层模块，两个都应该依赖抽象。**\n- **抽象不应该依赖细节，细节应该依赖抽象。**\n\n```\n针对接口编程，不要对现实编程。\n\n依赖倒转其实可以说是面向对象设计的标志，用那种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，\n即程序中所有的依赖关系都是终止于抽象类或者接口，那么就是面向对象的设计，反之那就是过程化的设计了。\n\n1. 依赖注入时，我们应该依赖接口，而不是某个具体的类，由高层直接绑定依赖关系。\n2. 测试驱动开发，先写好单元测试类，测试类依赖的是接口，具体的实现可以后面开发。\n```\n\n## 里氏代换原则\n\n- **子类型必须能够替换掉它们的父类型。**\n\n```\n一个软件实体如果使用的是一个父类的话，那么一定适用于子类，而它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，\n把父类都替换成它的子类，程序的行为没有变化。\n\n只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。\n\n正是由于子类型的可替换性才使得使用父类类型的模块在无修改的情况下就可以扩展。\n\n1. 子类必须完全实现父类的方法\n2. 子类可以有自己的个性\n```\n\n## 迪米特法则（最少知识原则）\n\n```\n如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。\n如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n\n在类的结构设计上，每一个类都应当尽量降低成员的访问权限。\n\n迪米特法则其根本思想，是强调了类之间的松耦合。\n\n类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。\n```\n## 合成/聚合复用原则\n\n- **尽量使用合成/聚合，尽量不要使用类继承**\n\n```\n子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。\n当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它更适合的类替换，\n这中依赖关系限制了灵活性并最终限制了复用性。\n\n聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强拥有关系，体现了严格\n的部分和整体的关系，部分和整体的生命周期一样。\n\n优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承的层次会保持较小规模，\n并且不太可能增长为不可控制的庞然大物。\n```\n","slug":"design_patten/README","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf3y003kmv05azfub5pm","content":"<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><ul>\n<li><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。</span><br><span class=\"line\">这种耦合会导致脆弱的设计，当变化产生时，设计会遭到意想不到的破坏。</span><br><span class=\"line\"></span><br><span class=\"line\">软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。</span><br><span class=\"line\">如果你能够想到多余一个的动机去改变一个类，那么这个类就具有多余一个的职责。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h2><ul>\n<li><strong>软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于扩展是开放的，对于更改是封闭的。</span><br><span class=\"line\"></span><br><span class=\"line\">怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？</span><br><span class=\"line\"></span><br><span class=\"line\">无论模块是多么的封闭，都会存在一些无法对之封闭的变化。即然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。</span><br><span class=\"line\">他必须先猜测出最有可能发生变化的种类，然后构造抽象来隔离那些变化。</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以在发生小变化时，就及早去想办法应对发生更大变化的可能。</span><br><span class=\"line\">等到变化发生时立即采取行动。在我们最初编程写代码时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离以后发生的同类变化。</span><br><span class=\"line\"></span><br><span class=\"line\">面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">我们希望的是在开发工作展开不久就可以知道能发生的变化。</span><br><span class=\"line\">查明可能发生的变化所等待的时间越长，要创建正确的抽象就越难。</span><br><span class=\"line\"></span><br><span class=\"line\">开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。</span><br><span class=\"line\">拒绝不成熟的抽象和抽象本身一样重要。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><ul>\n<li><strong>高层模块不应该依赖低层模块，两个都应该依赖抽象。</strong></li>\n<li><strong>抽象不应该依赖细节，细节应该依赖抽象。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">针对接口编程，不要对现实编程。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖倒转其实可以说是面向对象设计的标志，用那种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，</span><br><span class=\"line\">即程序中所有的依赖关系都是终止于抽象类或者接口，那么就是面向对象的设计，反之那就是过程化的设计了。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 依赖注入时，我们应该依赖接口，而不是某个具体的类，由高层直接绑定依赖关系。</span><br><span class=\"line\">2. 测试驱动开发，先写好单元测试类，测试类依赖的是接口，具体的实现可以后面开发。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"里氏代换原则\"><a href=\"#里氏代换原则\" class=\"headerlink\" title=\"里氏代换原则\"></a>里氏代换原则</h2><ul>\n<li><strong>子类型必须能够替换掉它们的父类型。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个软件实体如果使用的是一个父类的话，那么一定适用于子类，而它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，</span><br><span class=\"line\">把父类都替换成它的子类，程序的行为没有变化。</span><br><span class=\"line\"></span><br><span class=\"line\">只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。</span><br><span class=\"line\"></span><br><span class=\"line\">正是由于子类型的可替换性才使得使用父类类型的模块在无修改的情况下就可以扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 子类必须完全实现父类的方法</span><br><span class=\"line\">2. 子类可以有自己的个性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迪米特法则（最少知识原则）\"><a href=\"#迪米特法则（最少知识原则）\" class=\"headerlink\" title=\"迪米特法则（最少知识原则）\"></a>迪米特法则（最少知识原则）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。</span><br><span class=\"line\">如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</span><br><span class=\"line\"></span><br><span class=\"line\">在类的结构设计上，每一个类都应当尽量降低成员的访问权限。</span><br><span class=\"line\"></span><br><span class=\"line\">迪米特法则其根本思想，是强调了类之间的松耦合。</span><br><span class=\"line\"></span><br><span class=\"line\">类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。</span><br></pre></td></tr></table></figure>\n<h2 id=\"合成-聚合复用原则\"><a href=\"#合成-聚合复用原则\" class=\"headerlink\" title=\"合成/聚合复用原则\"></a>合成/聚合复用原则</h2><ul>\n<li><strong>尽量使用合成/聚合，尽量不要使用类继承</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。</span><br><span class=\"line\">当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它更适合的类替换，</span><br><span class=\"line\">这中依赖关系限制了灵活性并最终限制了复用性。</span><br><span class=\"line\"></span><br><span class=\"line\">聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强拥有关系，体现了严格</span><br><span class=\"line\">的部分和整体的关系，部分和整体的生命周期一样。</span><br><span class=\"line\"></span><br><span class=\"line\">优先使用对象的合成&#x2F;聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承的层次会保持较小规模，</span><br><span class=\"line\">并且不太可能增长为不可控制的庞然大物。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><ul>\n<li><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。</span><br><span class=\"line\">这种耦合会导致脆弱的设计，当变化产生时，设计会遭到意想不到的破坏。</span><br><span class=\"line\"></span><br><span class=\"line\">软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。</span><br><span class=\"line\">如果你能够想到多余一个的动机去改变一个类，那么这个类就具有多余一个的职责。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h2><ul>\n<li><strong>软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于扩展是开放的，对于更改是封闭的。</span><br><span class=\"line\"></span><br><span class=\"line\">怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？</span><br><span class=\"line\"></span><br><span class=\"line\">无论模块是多么的封闭，都会存在一些无法对之封闭的变化。即然不可能完全封闭，设计人员必须对于他设计的模块应该对那种变化封闭做出选择。</span><br><span class=\"line\">他必须先猜测出最有可能发生变化的种类，然后构造抽象来隔离那些变化。</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以在发生小变化时，就及早去想办法应对发生更大变化的可能。</span><br><span class=\"line\">等到变化发生时立即采取行动。在我们最初编程写代码时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离以后发生的同类变化。</span><br><span class=\"line\"></span><br><span class=\"line\">面对需求，对程序的改动是通过增加新的代码进行的，而不是更改现有的代码。</span><br><span class=\"line\"></span><br><span class=\"line\">我们希望的是在开发工作展开不久就可以知道能发生的变化。</span><br><span class=\"line\">查明可能发生的变化所等待的时间越长，要创建正确的抽象就越难。</span><br><span class=\"line\"></span><br><span class=\"line\">开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。</span><br><span class=\"line\">拒绝不成熟的抽象和抽象本身一样重要。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><ul>\n<li><strong>高层模块不应该依赖低层模块，两个都应该依赖抽象。</strong></li>\n<li><strong>抽象不应该依赖细节，细节应该依赖抽象。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">针对接口编程，不要对现实编程。</span><br><span class=\"line\"></span><br><span class=\"line\">依赖倒转其实可以说是面向对象设计的标志，用那种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，</span><br><span class=\"line\">即程序中所有的依赖关系都是终止于抽象类或者接口，那么就是面向对象的设计，反之那就是过程化的设计了。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 依赖注入时，我们应该依赖接口，而不是某个具体的类，由高层直接绑定依赖关系。</span><br><span class=\"line\">2. 测试驱动开发，先写好单元测试类，测试类依赖的是接口，具体的实现可以后面开发。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"里氏代换原则\"><a href=\"#里氏代换原则\" class=\"headerlink\" title=\"里氏代换原则\"></a>里氏代换原则</h2><ul>\n<li><strong>子类型必须能够替换掉它们的父类型。</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个软件实体如果使用的是一个父类的话，那么一定适用于子类，而它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，</span><br><span class=\"line\">把父类都替换成它的子类，程序的行为没有变化。</span><br><span class=\"line\"></span><br><span class=\"line\">只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。</span><br><span class=\"line\"></span><br><span class=\"line\">正是由于子类型的可替换性才使得使用父类类型的模块在无修改的情况下就可以扩展。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 子类必须完全实现父类的方法</span><br><span class=\"line\">2. 子类可以有自己的个性</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"迪米特法则（最少知识原则）\"><a href=\"#迪米特法则（最少知识原则）\" class=\"headerlink\" title=\"迪米特法则（最少知识原则）\"></a>迪米特法则（最少知识原则）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。</span><br><span class=\"line\">如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</span><br><span class=\"line\"></span><br><span class=\"line\">在类的结构设计上，每一个类都应当尽量降低成员的访问权限。</span><br><span class=\"line\"></span><br><span class=\"line\">迪米特法则其根本思想，是强调了类之间的松耦合。</span><br><span class=\"line\"></span><br><span class=\"line\">类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。</span><br></pre></td></tr></table></figure>\n<h2 id=\"合成-聚合复用原则\"><a href=\"#合成-聚合复用原则\" class=\"headerlink\" title=\"合成/聚合复用原则\"></a>合成/聚合复用原则</h2><ul>\n<li><strong>尽量使用合成/聚合，尽量不要使用类继承</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。</span><br><span class=\"line\">当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它更适合的类替换，</span><br><span class=\"line\">这中依赖关系限制了灵活性并最终限制了复用性。</span><br><span class=\"line\"></span><br><span class=\"line\">聚合表示一种弱的拥有关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强拥有关系，体现了严格</span><br><span class=\"line\">的部分和整体的关系，部分和整体的生命周期一样。</span><br><span class=\"line\"></span><br><span class=\"line\">优先使用对象的合成&#x2F;聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承的层次会保持较小规模，</span><br><span class=\"line\">并且不太可能增长为不可控制的庞然大物。</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/01/design-patten-abstract-factory.html","title":"设计模式(1)-抽象工厂模式","keywords":"设计模式,抽象工厂模式","description":"抽象工厂模式","date":"2018-10-01T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[抽象工厂模式](https://github.com/wenjy/design_patten_php/blob/master/src/AbstractFactory.php)\n\n## 简介\n\n```\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\n```\n\n## 代码示例\n\n```php\n<?php\ninterface IDepartment\n{\n    public function insert(Department $department);\n\n    public function getDepartment($id);\n}\n\nclass MySqlDepartment implements IDepartment\n{\n    public function insert(Department $department)\n    {\n        echo 'mysql 新增记录' . PHP_EOL;\n    }\n\n    public function getDepartment($id)\n    {\n        echo 'mysql 查询一条记录' . PHP_EOL;\n    }\n}\n\nclass SqlServerDepartment implements IDepartment\n{\n    public function insert(Department $department)\n    {\n        echo 'sqlServer 新增记录' . PHP_EOL;\n    }\n\n    public function getDepartment($id)\n    {\n        echo 'sqlServer 查询一条记录' . PHP_EOL;\n    }\n}\n\ninterface InterfaceFactory\n{\n    public function createDepartment();\n}\n\nclass SqlServerFactory implements InterfaceFactory\n{\n    public function createDepartment()\n    {\n        return new SqlServerDepartment();\n    }\n}\n\nclass MySqlFactory implements InterfaceFactory\n{\n    public function createDepartment()\n    {\n        return new MySqlDepartment();\n    }\n}\n\nclass Department\n{\n\n}\n\n$department = new Department();\n\n$iDepartment = (new MySqlFactory())->createDepartment();\n$iDepartment->insert($department);\n$iDepartment->getDepartment(1);\n\n$iDepartment = (new SqlServerFactory())->createDepartment();\n$iDepartment->insert($department);\n$iDepartment->getDepartment(1);\n```\n","source":"_posts/design_patten/abstract_factory.md","raw":"---\nurl: /2018/10/01/design-patten-abstract-factory.html\ntitle: \"设计模式(1)-抽象工厂模式\"\nkeywords: \"设计模式,抽象工厂模式\"\ndescription: \"抽象工厂模式\"\ndate: 2018-10-01T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[抽象工厂模式](https://github.com/wenjy/design_patten_php/blob/master/src/AbstractFactory.php)\n\n## 简介\n\n```\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\n```\n\n## 代码示例\n\n```php\n<?php\ninterface IDepartment\n{\n    public function insert(Department $department);\n\n    public function getDepartment($id);\n}\n\nclass MySqlDepartment implements IDepartment\n{\n    public function insert(Department $department)\n    {\n        echo 'mysql 新增记录' . PHP_EOL;\n    }\n\n    public function getDepartment($id)\n    {\n        echo 'mysql 查询一条记录' . PHP_EOL;\n    }\n}\n\nclass SqlServerDepartment implements IDepartment\n{\n    public function insert(Department $department)\n    {\n        echo 'sqlServer 新增记录' . PHP_EOL;\n    }\n\n    public function getDepartment($id)\n    {\n        echo 'sqlServer 查询一条记录' . PHP_EOL;\n    }\n}\n\ninterface InterfaceFactory\n{\n    public function createDepartment();\n}\n\nclass SqlServerFactory implements InterfaceFactory\n{\n    public function createDepartment()\n    {\n        return new SqlServerDepartment();\n    }\n}\n\nclass MySqlFactory implements InterfaceFactory\n{\n    public function createDepartment()\n    {\n        return new MySqlDepartment();\n    }\n}\n\nclass Department\n{\n\n}\n\n$department = new Department();\n\n$iDepartment = (new MySqlFactory())->createDepartment();\n$iDepartment->insert($department);\n$iDepartment->getDepartment(1);\n\n$iDepartment = (new SqlServerFactory())->createDepartment();\n$iDepartment->insert($department);\n$iDepartment->getDepartment(1);\n```\n","slug":"design_patten/abstract_factory","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf40003nmv051782633g","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/AbstractFactory.php\">抽象工厂模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;mysql 新增记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;mysql 查询一条记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlServerDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;sqlServer 新增记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;sqlServer 查询一条记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlServerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlServerDepartment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MySqlDepartment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\"></span><br><span class=\"line\">$iDepartment = (<span class=\"keyword\">new</span> MySqlFactory())-&gt;createDepartment();</span><br><span class=\"line\">$iDepartment-&gt;insert($department);</span><br><span class=\"line\">$iDepartment-&gt;getDepartment(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$iDepartment = (<span class=\"keyword\">new</span> SqlServerFactory())-&gt;createDepartment();</span><br><span class=\"line\">$iDepartment-&gt;insert($department);</span><br><span class=\"line\">$iDepartment-&gt;getDepartment(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/AbstractFactory.php\">抽象工厂模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;mysql 新增记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;mysql 查询一条记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlServerDepartment</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDepartment</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">Department $department</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;sqlServer 新增记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDepartment</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;sqlServer 查询一条记录&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlServerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlServerDepartment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySqlFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterfaceFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDepartment</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MySqlDepartment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\"></span><br><span class=\"line\">$iDepartment = (<span class=\"keyword\">new</span> MySqlFactory())-&gt;createDepartment();</span><br><span class=\"line\">$iDepartment-&gt;insert($department);</span><br><span class=\"line\">$iDepartment-&gt;getDepartment(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$iDepartment = (<span class=\"keyword\">new</span> SqlServerFactory())-&gt;createDepartment();</span><br><span class=\"line\">$iDepartment-&gt;insert($department);</span><br><span class=\"line\">$iDepartment-&gt;getDepartment(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/02/design-patten-adapter.html","title":"设计模式(2)-适配器模式","keywords":"设计模式,适配器模式","description":"适配器模式","date":"2018-10-02T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[适配器模式](https://github.com/wenjy/design_patten_php/blob/master/src/Adapter.php)\n\n## 简介\n\n```\n将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n系统的数据和行为都正确，但是接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。\n适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。\n\n想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式。\n或者说两个类所做的事情相同或相似，但是具有 不同的接口时要使用它\n\n在双方都不太容易修改的时候再使用适配器模式\n\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 这个是我们所需要的东西，但是它的接口和普通的接口不一致\n *\n * Class Adaptee\n */\nclass Adaptee\n{\n    public function specificRequest()\n    {\n        echo '特殊请求' . PHP_EOL;\n    }\n}\n\n/**\n * 这是一个普通的接口\n *\n * Class Target\n */\nclass Target\n{\n    public function request()\n    {\n        echo '普通请求' . PHP_EOL;\n    }\n}\n\n/**\n * 我们定义一个新的类 Adapter 继承 Target\n * 并且复写 request() 方法，使之实际调用的是 Adaptee 的方法，这样就保持了接口的一致\n * Class Adapter\n */\nclass Adapter extends Target\n{\n    /**\n     * @var Adaptee\n     */\n    private $adaptee;\n\n    public function __construct()\n    {\n        $this->adaptee = new Adaptee();\n    }\n\n    public function request()\n    {\n        $this->adaptee->specificRequest();\n    }\n}\n\n$target = new Adapter();\n$target->request();\n```\n","source":"_posts/design_patten/adapter.md","raw":"---\nurl: /2018/10/02/design-patten-adapter.html\ntitle: \"设计模式(2)-适配器模式\"\nkeywords: \"设计模式,适配器模式\"\ndescription: \"适配器模式\"\ndate: 2018-10-02T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[适配器模式](https://github.com/wenjy/design_patten_php/blob/master/src/Adapter.php)\n\n## 简介\n\n```\n将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n\n系统的数据和行为都正确，但是接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。\n适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。\n\n想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式。\n或者说两个类所做的事情相同或相似，但是具有 不同的接口时要使用它\n\n在双方都不太容易修改的时候再使用适配器模式\n\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 这个是我们所需要的东西，但是它的接口和普通的接口不一致\n *\n * Class Adaptee\n */\nclass Adaptee\n{\n    public function specificRequest()\n    {\n        echo '特殊请求' . PHP_EOL;\n    }\n}\n\n/**\n * 这是一个普通的接口\n *\n * Class Target\n */\nclass Target\n{\n    public function request()\n    {\n        echo '普通请求' . PHP_EOL;\n    }\n}\n\n/**\n * 我们定义一个新的类 Adapter 继承 Target\n * 并且复写 request() 方法，使之实际调用的是 Adaptee 的方法，这样就保持了接口的一致\n * Class Adapter\n */\nclass Adapter extends Target\n{\n    /**\n     * @var Adaptee\n     */\n    private $adaptee;\n\n    public function __construct()\n    {\n        $this->adaptee = new Adaptee();\n    }\n\n    public function request()\n    {\n        $this->adaptee->specificRequest();\n    }\n}\n\n$target = new Adapter();\n$target->request();\n```\n","slug":"design_patten/adapter","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf42003smv050ei7gnlg","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Adapter.php\">适配器模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</span><br><span class=\"line\"></span><br><span class=\"line\">系统的数据和行为都正确，但是接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。</span><br><span class=\"line\">适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。</span><br><span class=\"line\"></span><br><span class=\"line\">想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式。</span><br><span class=\"line\">或者说两个类所做的事情相同或相似，但是具有 不同的接口时要使用它</span><br><span class=\"line\"></span><br><span class=\"line\">在双方都不太容易修改的时候再使用适配器模式</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个是我们所需要的东西，但是它的接口和普通的接口不一致</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Adaptee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;特殊请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个普通的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;普通请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们定义一个新的类 Adapter 继承 Target</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且复写 request() 方法，使之实际调用的是 Adaptee 的方法，这样就保持了接口的一致</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Adapter</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Target</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Adaptee</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $adaptee;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;adaptee = <span class=\"keyword\">new</span> Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;adaptee-&gt;specificRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$target = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">$target-&gt;request();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Adapter.php\">适配器模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个类的接口转换成客户所希望的另外的接口。 Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</span><br><span class=\"line\"></span><br><span class=\"line\">系统的数据和行为都正确，但是接口不符合时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。</span><br><span class=\"line\">适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。</span><br><span class=\"line\"></span><br><span class=\"line\">想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不相同时，就应该考虑用适配器模式。</span><br><span class=\"line\">或者说两个类所做的事情相同或相似，但是具有 不同的接口时要使用它</span><br><span class=\"line\"></span><br><span class=\"line\">在双方都不太容易修改的时候再使用适配器模式</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个是我们所需要的东西，但是它的接口和普通的接口不一致</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Adaptee</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">specificRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;特殊请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个普通的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Target</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;普通请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们定义一个新的类 Adapter 继承 Target</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且复写 request() 方法，使之实际调用的是 Adaptee 的方法，这样就保持了接口的一致</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Adapter</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Target</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Adaptee</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $adaptee;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;adaptee = <span class=\"keyword\">new</span> Adaptee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;adaptee-&gt;specificRequest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$target = <span class=\"keyword\">new</span> Adapter();</span><br><span class=\"line\">$target-&gt;request();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/03/design-patten-bridge.html","title":"设计模式(3)-桥接模式","keywords":"设计模式,桥接模式","description":"桥接模式","date":"2018-10-03T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[桥接模式](https://github.com/wenjy/design_patten_php/blob/master/src/Bridge.php)\n\n## 简介\n\n```\n将抽象部分与它的实现部分分离，使它们都可以独立地变化\n\n什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义\n实现指的是抽象类和它的派生类用来实现自己的对象\n手机可以按品牌分类，也可以按照功能分类，这样可以把手机品牌和软件分别抽象出来，手机品牌聚合软件\n由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自的变化。\n这使得每种实现的变化不会影响其它的实现，从而达到应对变化的目的\n\n实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合\n\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 定义具体实现类的抽象接口\n *\n * Class Implementor\n */\nabstract class Implementor\n{\n    abstract public function operation();\n}\n\n/**\n * 具体实现类A，实现接口\n *\n * Class ConcreteImplementorA\n */\nclass ConcreteImplementorA extends Implementor\n{\n    public function operation()\n    {\n        echo '具体实现A的方法执行' . PHP_EOL;\n    }\n}\n\n/**\n * 具体实现类B，实现接口\n *\n * Class ConcreteImplementorB\n */\nclass ConcreteImplementorB extends Implementor\n{\n    public function operation()\n    {\n        echo '具体实现B的方法执行' . PHP_EOL;\n    }\n}\n\n/**\n * 负责保存实现者，并调用实现者的实现接口\n *\n * Class Abstraction\n */\nclass Abstraction\n{\n    /**\n     * @var Implementor\n     */\n    protected $implementor;\n\n    public function setImplementor(Implementor $implementor)\n    {\n        $this->implementor = $implementor;\n    }\n\n    /**\n     * 这里调用具体的实现者\n     * @author jiangyi\n     */\n    public function operation()\n    {\n        $this->implementor->operation();\n    }\n}\n\n/**\n * 具体的抽象\n * Class RefinedAbstraction\n */\nclass RefinedAbstraction extends Abstraction\n{\n    public function operation()\n    {\n        $this->implementor->operation();\n    }\n}\n\n$ab = new RefinedAbstraction();\n\n$ab->setImplementor(new ConcreteImplementorA());\n$ab->operation();\n\n$ab->setImplementor(new ConcreteImplementorB());\n$ab->operation();\n```\n","source":"_posts/design_patten/bridge.md","raw":"---\nurl: /2018/10/03/design-patten-bridge.html\ntitle: \"设计模式(3)-桥接模式\"\nkeywords: \"设计模式,桥接模式\"\ndescription: \"桥接模式\"\ndate: 2018-10-03T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[桥接模式](https://github.com/wenjy/design_patten_php/blob/master/src/Bridge.php)\n\n## 简介\n\n```\n将抽象部分与它的实现部分分离，使它们都可以独立地变化\n\n什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义\n实现指的是抽象类和它的派生类用来实现自己的对象\n手机可以按品牌分类，也可以按照功能分类，这样可以把手机品牌和软件分别抽象出来，手机品牌聚合软件\n由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自的变化。\n这使得每种实现的变化不会影响其它的实现，从而达到应对变化的目的\n\n实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合\n\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 定义具体实现类的抽象接口\n *\n * Class Implementor\n */\nabstract class Implementor\n{\n    abstract public function operation();\n}\n\n/**\n * 具体实现类A，实现接口\n *\n * Class ConcreteImplementorA\n */\nclass ConcreteImplementorA extends Implementor\n{\n    public function operation()\n    {\n        echo '具体实现A的方法执行' . PHP_EOL;\n    }\n}\n\n/**\n * 具体实现类B，实现接口\n *\n * Class ConcreteImplementorB\n */\nclass ConcreteImplementorB extends Implementor\n{\n    public function operation()\n    {\n        echo '具体实现B的方法执行' . PHP_EOL;\n    }\n}\n\n/**\n * 负责保存实现者，并调用实现者的实现接口\n *\n * Class Abstraction\n */\nclass Abstraction\n{\n    /**\n     * @var Implementor\n     */\n    protected $implementor;\n\n    public function setImplementor(Implementor $implementor)\n    {\n        $this->implementor = $implementor;\n    }\n\n    /**\n     * 这里调用具体的实现者\n     * @author jiangyi\n     */\n    public function operation()\n    {\n        $this->implementor->operation();\n    }\n}\n\n/**\n * 具体的抽象\n * Class RefinedAbstraction\n */\nclass RefinedAbstraction extends Abstraction\n{\n    public function operation()\n    {\n        $this->implementor->operation();\n    }\n}\n\n$ab = new RefinedAbstraction();\n\n$ab->setImplementor(new ConcreteImplementorA());\n$ab->operation();\n\n$ab->setImplementor(new ConcreteImplementorB());\n$ab->operation();\n```\n","slug":"design_patten/bridge","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf43003vmv050jrmeefz","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Bridge.php\">桥接模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将抽象部分与它的实现部分分离，使它们都可以独立地变化</span><br><span class=\"line\"></span><br><span class=\"line\">什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义</span><br><span class=\"line\">实现指的是抽象类和它的派生类用来实现自己的对象</span><br><span class=\"line\">手机可以按品牌分类，也可以按照功能分类，这样可以把手机品牌和软件分别抽象出来，手机品牌聚合软件</span><br><span class=\"line\">由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自的变化。</span><br><span class=\"line\">这使得每种实现的变化不会影响其它的实现，从而达到应对变化的目的</span><br><span class=\"line\"></span><br><span class=\"line\">实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义具体实现类的抽象接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Implementor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体实现类A，实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteImplementorA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体实现A的方法执行&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体实现类B，实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteImplementorB</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体实现B的方法执行&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责保存实现者，并调用实现者的实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Abstraction</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Implementor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $implementor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setImplementor</span>(<span class=\"params\">Implementor $implementor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor = $implementor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里调用具体的实现者</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor-&gt;operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的抽象</span></span><br><span class=\"line\"><span class=\"comment\"> * Class RefinedAbstraction</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor-&gt;operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ab = <span class=\"keyword\">new</span> RefinedAbstraction();</span><br><span class=\"line\"></span><br><span class=\"line\">$ab-&gt;setImplementor(<span class=\"keyword\">new</span> ConcreteImplementorA());</span><br><span class=\"line\">$ab-&gt;operation();</span><br><span class=\"line\"></span><br><span class=\"line\">$ab-&gt;setImplementor(<span class=\"keyword\">new</span> ConcreteImplementorB());</span><br><span class=\"line\">$ab-&gt;operation();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Bridge.php\">桥接模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将抽象部分与它的实现部分分离，使它们都可以独立地变化</span><br><span class=\"line\"></span><br><span class=\"line\">什么叫抽象与它的实现分离，这并不是说，让抽象类与其派生类分离，因为这没有任何意义</span><br><span class=\"line\">实现指的是抽象类和它的派生类用来实现自己的对象</span><br><span class=\"line\">手机可以按品牌分类，也可以按照功能分类，这样可以把手机品牌和软件分别抽象出来，手机品牌聚合软件</span><br><span class=\"line\">由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自的变化。</span><br><span class=\"line\">这使得每种实现的变化不会影响其它的实现，从而达到应对变化的目的</span><br><span class=\"line\"></span><br><span class=\"line\">实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义具体实现类的抽象接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Implementor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体实现类A，实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteImplementorA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体实现A的方法执行&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体实现类B，实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteImplementorB</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体实现B的方法执行&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责保存实现者，并调用实现者的实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Abstraction</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Implementor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $implementor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setImplementor</span>(<span class=\"params\">Implementor $implementor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor = $implementor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里调用具体的实现者</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor-&gt;operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的抽象</span></span><br><span class=\"line\"><span class=\"comment\"> * Class RefinedAbstraction</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;implementor-&gt;operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ab = <span class=\"keyword\">new</span> RefinedAbstraction();</span><br><span class=\"line\"></span><br><span class=\"line\">$ab-&gt;setImplementor(<span class=\"keyword\">new</span> ConcreteImplementorA());</span><br><span class=\"line\">$ab-&gt;operation();</span><br><span class=\"line\"></span><br><span class=\"line\">$ab-&gt;setImplementor(<span class=\"keyword\">new</span> ConcreteImplementorB());</span><br><span class=\"line\">$ab-&gt;operation();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/04/design-patten-builder.html","title":"设计模式(4)-建造者模式","keywords":"设计模式,建造者模式","description":"建造者模式","date":"2018-10-04T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[建造者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Builder.php)\n\n## 简介\n\n```\n将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程\n\n主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。\n\n建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，\n所以若需要改变一个产品的内部表示，只需要定义一个具体的建造者就可以了。\n\n建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 产品类，由多个部件组成\n *\n * Class Product\n */\nclass Product\n{\n    /**\n     * @var array 保存所有的部件\n     */\n    public $parts = [];\n\n    public function add($part)\n    {\n        $this->parts[] = $part;\n    }\n\n    /**\n     * 循环创建产品的所有部件\n     *\n     * @author jiangyi\n     */\n    public function show()\n    {\n        echo '产品创建' . PHP_EOL;\n        foreach ($this->parts as $part) {\n            echo $part . PHP_EOL;\n        }\n    }\n}\n\n/**\n * Builder 是为了创建一个 Product 对象的各个部分指定的抽象接口。\n * 也就是 Product 的各个部件组成，和返回 Product\n *\n * Class Builder\n */\nabstract class Builder\n{\n    abstract public function buildPartA();\n\n    abstract public function buildPartB();\n\n    /**\n     * 这里不一定使用抽象方法，可以先实现\n     * @return mixed\n     * @author jiangyi\n     */\n    abstract public function getResult();\n}\n\n/**\n * 具体建造者，实现 Builder 接口，构造和装配各个部件\n *\n * Class ConcreteBuilder1\n */\nclass ConcreteBuilder1 extends Builder\n{\n    /**\n     * 此属性可搬移至父类\n     * @var Product\n     */\n    private $product;\n\n    /**\n     * ConcreteBuilder1 constructor.\n     */\n    public function __construct()\n    {\n        $this->product = new Product();\n    }\n\n    public function buildPartA()\n    {\n        $this->product->add('部件A');\n    }\n\n    public function buildPartB()\n    {\n        $this->product->add('部件B');\n    }\n\n    public function getResult()\n    {\n        return $this->product;\n    }\n}\n\nclass ConcreteBuilder2 extends Builder\n{\n    private $product;\n\n    /**\n     * ConcreteBuilder2 constructor.\n     */\n    public function __construct()\n    {\n        $this->product = new Product();\n    }\n\n    public function buildPartA()\n    {\n        $this->product->add('部件X');\n    }\n\n    public function buildPartB()\n    {\n        $this->product->add('部件Y');\n    }\n\n    public function getResult()\n    {\n        return $this->product;\n    }\n}\n\n/**\n * 指挥者，构建一个使用 Builder 的对象\n *\n * Class Director\n */\nclass Director\n{\n    /**\n     * 指挥者必须知道建造者的所有方法，然后调用具体的方法建造\n     *\n     * @param Builder $builder\n     * @author jiangyi\n     */\n    public function construct(Builder $builder)\n    {\n        $builder->buildPartA();\n        $builder->buildPartB();\n    }\n}\n\n// 调用端不需要知道具体的建造过程\n\n$director = new Director();\n$b1 = new ConcreteBuilder1();\n$b2 = new ConcreteBuilder2();\n\n$director->construct($b1);\n$p1 = $b1->getResult();\n$p1->show();\n\n$director->construct($b2);\n$p2 = $b2->getResult();\n$p2->show();\n```\n","source":"_posts/design_patten/builder.md","raw":"---\nurl: /2018/10/04/design-patten-builder.html\ntitle: \"设计模式(4)-建造者模式\"\nkeywords: \"设计模式,建造者模式\"\ndescription: \"建造者模式\"\ndate: 2018-10-04T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[建造者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Builder.php)\n\n## 简介\n\n```\n将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程\n\n主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。\n\n建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，\n所以若需要改变一个产品的内部表示，只需要定义一个具体的建造者就可以了。\n\n建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 产品类，由多个部件组成\n *\n * Class Product\n */\nclass Product\n{\n    /**\n     * @var array 保存所有的部件\n     */\n    public $parts = [];\n\n    public function add($part)\n    {\n        $this->parts[] = $part;\n    }\n\n    /**\n     * 循环创建产品的所有部件\n     *\n     * @author jiangyi\n     */\n    public function show()\n    {\n        echo '产品创建' . PHP_EOL;\n        foreach ($this->parts as $part) {\n            echo $part . PHP_EOL;\n        }\n    }\n}\n\n/**\n * Builder 是为了创建一个 Product 对象的各个部分指定的抽象接口。\n * 也就是 Product 的各个部件组成，和返回 Product\n *\n * Class Builder\n */\nabstract class Builder\n{\n    abstract public function buildPartA();\n\n    abstract public function buildPartB();\n\n    /**\n     * 这里不一定使用抽象方法，可以先实现\n     * @return mixed\n     * @author jiangyi\n     */\n    abstract public function getResult();\n}\n\n/**\n * 具体建造者，实现 Builder 接口，构造和装配各个部件\n *\n * Class ConcreteBuilder1\n */\nclass ConcreteBuilder1 extends Builder\n{\n    /**\n     * 此属性可搬移至父类\n     * @var Product\n     */\n    private $product;\n\n    /**\n     * ConcreteBuilder1 constructor.\n     */\n    public function __construct()\n    {\n        $this->product = new Product();\n    }\n\n    public function buildPartA()\n    {\n        $this->product->add('部件A');\n    }\n\n    public function buildPartB()\n    {\n        $this->product->add('部件B');\n    }\n\n    public function getResult()\n    {\n        return $this->product;\n    }\n}\n\nclass ConcreteBuilder2 extends Builder\n{\n    private $product;\n\n    /**\n     * ConcreteBuilder2 constructor.\n     */\n    public function __construct()\n    {\n        $this->product = new Product();\n    }\n\n    public function buildPartA()\n    {\n        $this->product->add('部件X');\n    }\n\n    public function buildPartB()\n    {\n        $this->product->add('部件Y');\n    }\n\n    public function getResult()\n    {\n        return $this->product;\n    }\n}\n\n/**\n * 指挥者，构建一个使用 Builder 的对象\n *\n * Class Director\n */\nclass Director\n{\n    /**\n     * 指挥者必须知道建造者的所有方法，然后调用具体的方法建造\n     *\n     * @param Builder $builder\n     * @author jiangyi\n     */\n    public function construct(Builder $builder)\n    {\n        $builder->buildPartA();\n        $builder->buildPartB();\n    }\n}\n\n// 调用端不需要知道具体的建造过程\n\n$director = new Director();\n$b1 = new ConcreteBuilder1();\n$b2 = new ConcreteBuilder2();\n\n$director->construct($b1);\n$p1 = $b1->getResult();\n$p1->show();\n\n$director->construct($b2);\n$p2 = $b2->getResult();\n$p2->show();\n```\n","slug":"design_patten/builder","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf450040mv053crhgpwx","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Builder.php\">建造者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程</span><br><span class=\"line\"></span><br><span class=\"line\">主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。</span><br><span class=\"line\"></span><br><span class=\"line\">建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，</span><br><span class=\"line\">所以若需要改变一个产品的内部表示，只需要定义一个具体的建造者就可以了。</span><br><span class=\"line\"></span><br><span class=\"line\">建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 产品类，由多个部件组成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Product</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有的部件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">$part</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;parts[] = $part;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环创建产品的所有部件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;产品创建&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;parts <span class=\"keyword\">as</span> $part) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> $part . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Builder 是为了创建一个 Product 对象的各个部分指定的抽象接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * 也就是 Product 的各个部件组成，和返回 Product</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Builder</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里不一定使用抽象方法，可以先实现</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体建造者，实现 Builder 接口，构造和装配各个部件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteBuilder1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 此属性可搬移至父类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Product</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $product;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteBuilder1 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $product;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteBuilder2 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件X&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件Y&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 指挥者，构建一个使用 Builder 的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Director</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指挥者必须知道建造者的所有方法，然后调用具体的方法建造</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Builder $builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">construct</span>(<span class=\"params\">Builder $builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $builder-&gt;buildPartA();</span><br><span class=\"line\">        $builder-&gt;buildPartB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用端不需要知道具体的建造过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">$director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">$b1 = <span class=\"keyword\">new</span> ConcreteBuilder1();</span><br><span class=\"line\">$b2 = <span class=\"keyword\">new</span> ConcreteBuilder2();</span><br><span class=\"line\"></span><br><span class=\"line\">$director-&gt;construct($b1);</span><br><span class=\"line\">$p1 = $b1-&gt;getResult();</span><br><span class=\"line\">$p1-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\">$director-&gt;construct($b2);</span><br><span class=\"line\">$p2 = $b2-&gt;getResult();</span><br><span class=\"line\">$p2-&gt;show();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Builder.php\">建造者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个复杂的对象的结构与它的表示分离，使得同样的构建过程可以创建不同的表示，而不需要知道具体的建造过程</span><br><span class=\"line\"></span><br><span class=\"line\">主要用于创建一些复杂的对象，这些对象内部构建的建造顺序通常是稳定的，但对象内部的构建通常面临复杂的变化。</span><br><span class=\"line\"></span><br><span class=\"line\">建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，</span><br><span class=\"line\">所以若需要改变一个产品的内部表示，只需要定义一个具体的建造者就可以了。</span><br><span class=\"line\"></span><br><span class=\"line\">建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 产品类，由多个部件组成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Product</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有的部件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">$part</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;parts[] = $part;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环创建产品的所有部件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;产品创建&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;parts <span class=\"keyword\">as</span> $part) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> $part . PHP_EOL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Builder 是为了创建一个 Product 对象的各个部分指定的抽象接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * 也就是 Product 的各个部件组成，和返回 Product</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Builder</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里不一定使用抽象方法，可以先实现</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体建造者，实现 Builder 接口，构造和装配各个部件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteBuilder1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 此属性可搬移至父类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Product</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $product;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteBuilder1 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $product;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteBuilder2 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product = <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件X&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildPartB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;product-&gt;add(<span class=\"string\">&#x27;部件Y&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 指挥者，构建一个使用 Builder 的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Director</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指挥者必须知道建造者的所有方法，然后调用具体的方法建造</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Builder $builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">construct</span>(<span class=\"params\">Builder $builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $builder-&gt;buildPartA();</span><br><span class=\"line\">        $builder-&gt;buildPartB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用端不需要知道具体的建造过程</span></span><br><span class=\"line\"></span><br><span class=\"line\">$director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">$b1 = <span class=\"keyword\">new</span> ConcreteBuilder1();</span><br><span class=\"line\">$b2 = <span class=\"keyword\">new</span> ConcreteBuilder2();</span><br><span class=\"line\"></span><br><span class=\"line\">$director-&gt;construct($b1);</span><br><span class=\"line\">$p1 = $b1-&gt;getResult();</span><br><span class=\"line\">$p1-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\">$director-&gt;construct($b2);</span><br><span class=\"line\">$p2 = $b2-&gt;getResult();</span><br><span class=\"line\">$p2-&gt;show();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/05/design-patten-chain-of-responsibility.html","title":"设计模式(5)-职责链模式","keywords":"设计模式,职责链模式","description":"职责链模式","date":"2018-10-05T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[职责链模式](https://github.com/wenjy/design_patten_php/blob/master/src/ChainOfResponsibility.php)\n\n## 简介\n\n```\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系\n将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n当客户提交一个请求时，请求时沿链传递直至有一个 Handler 对象负责处理它。\n\n接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。\n结果是职责链可简化对象的相互连接，它们仅需要保证一个指向其后继者的引用，而不需要保持它所有的候选者的引用。\n\n可以随时地增加或修改处理一个请求的结构，增强了给对象指派职责的灵活性\n\n一个请求极有可能到了链末都得不到处理，或者因为没有正确配置而得不到处理。需要事先考虑清楚\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n  * 定义一个处理请示的接口\n  *\n  * Class Handler\n  */\n abstract class Handler\n {\n     /**\n      * @var static\n      */\n     protected $successor;\n \n     public function setSuccessor(Handler $successor)\n     {\n         $this->successor = $successor;\n     }\n \n     /**\n      * 抽象处理请求接口\n      *\n      * @param $request\n      * @return mixed\n      * @author jiangyi\n      */\n     abstract public function handleRequest($request);\n }\n \n class ConcreteHandler1 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 0 && $request < 10) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n class ConcreteHandler2 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 10 && $request < 20) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n class ConcreteHandler3 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 20 && $request < 30) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n $h1 = new ConcreteHandler1();\n $h2 = new ConcreteHandler2();\n $h3 = new ConcreteHandler3();\n \n // 设置下一级\n $h1->setSuccessor($h2);\n $h2->setSuccessor($h3);\n \n // 31 无人处理\n $requests = [1, 3, 15, 18, 22, 25, 14, 2, 16, 27, 31];\n \n foreach ($requests as $v) {\n     $h1->handleRequest($v);\n }\n```\n","source":"_posts/design_patten/chain_of_responsibility.md","raw":"---\nurl: /2018/10/05/design-patten-chain-of-responsibility.html\ntitle: \"设计模式(5)-职责链模式\"\nkeywords: \"设计模式,职责链模式\"\ndescription: \"职责链模式\"\ndate: 2018-10-05T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[职责链模式](https://github.com/wenjy/design_patten_php/blob/master/src/ChainOfResponsibility.php)\n\n## 简介\n\n```\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系\n将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n当客户提交一个请求时，请求时沿链传递直至有一个 Handler 对象负责处理它。\n\n接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。\n结果是职责链可简化对象的相互连接，它们仅需要保证一个指向其后继者的引用，而不需要保持它所有的候选者的引用。\n\n可以随时地增加或修改处理一个请求的结构，增强了给对象指派职责的灵活性\n\n一个请求极有可能到了链末都得不到处理，或者因为没有正确配置而得不到处理。需要事先考虑清楚\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n  * 定义一个处理请示的接口\n  *\n  * Class Handler\n  */\n abstract class Handler\n {\n     /**\n      * @var static\n      */\n     protected $successor;\n \n     public function setSuccessor(Handler $successor)\n     {\n         $this->successor = $successor;\n     }\n \n     /**\n      * 抽象处理请求接口\n      *\n      * @param $request\n      * @return mixed\n      * @author jiangyi\n      */\n     abstract public function handleRequest($request);\n }\n \n class ConcreteHandler1 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 0 && $request < 10) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n class ConcreteHandler2 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 10 && $request < 20) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n class ConcreteHandler3 extends Handler\n {\n     public function handleRequest($request)\n     {\n         if ($request >= 20 && $request < 30) {\n             echo get_class($this) . '处理请求' . $request . PHP_EOL;\n         } elseif ($this->successor != null) {\n             $this->successor->handleRequest($request);\n         }\n     }\n }\n \n $h1 = new ConcreteHandler1();\n $h2 = new ConcreteHandler2();\n $h3 = new ConcreteHandler3();\n \n // 设置下一级\n $h1->setSuccessor($h2);\n $h2->setSuccessor($h3);\n \n // 31 无人处理\n $requests = [1, 3, 15, 18, 22, 25, 14, 2, 16, 27, 31];\n \n foreach ($requests as $v) {\n     $h1->handleRequest($v);\n }\n```\n","slug":"design_patten/chain_of_responsibility","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf470043mv05c96bdx7r","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/ChainOfResponsibility.php\">职责链模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系</span><br><span class=\"line\">将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</span><br><span class=\"line\"></span><br><span class=\"line\">当客户提交一个请求时，请求时沿链传递直至有一个 Handler 对象负责处理它。</span><br><span class=\"line\"></span><br><span class=\"line\">接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。</span><br><span class=\"line\">结果是职责链可简化对象的相互连接，它们仅需要保证一个指向其后继者的引用，而不需要保持它所有的候选者的引用。</span><br><span class=\"line\"></span><br><span class=\"line\">可以随时地增加或修改处理一个请求的结构，增强了给对象指派职责的灵活性</span><br><span class=\"line\"></span><br><span class=\"line\">一个请求极有可能到了链末都得不到处理，或者因为没有正确配置而得不到处理。需要事先考虑清楚</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 定义一个处理请示的接口</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * Class Handler</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@var</span> static</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">protected</span> $successor;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSuccessor</span>(<span class=\"params\">Handler $successor</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">$this</span>-&gt;successor = $successor;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 抽象处理请求接口</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> $request</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">0</span> &amp;&amp; $request &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">10</span> &amp;&amp; $request &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">20</span> &amp;&amp; $request &lt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> $h1 = <span class=\"keyword\">new</span> ConcreteHandler1();</span><br><span class=\"line\"> $h2 = <span class=\"keyword\">new</span> ConcreteHandler2();</span><br><span class=\"line\"> $h3 = <span class=\"keyword\">new</span> ConcreteHandler3();</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 设置下一级</span></span><br><span class=\"line\"> $h1-&gt;setSuccessor($h2);</span><br><span class=\"line\"> $h2-&gt;setSuccessor($h3);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 31 无人处理</span></span><br><span class=\"line\"> $requests = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">25</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">27</span>, <span class=\"number\">31</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">foreach</span> ($requests <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">     $h1-&gt;handleRequest($v);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/ChainOfResponsibility.php\">职责链模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系</span><br><span class=\"line\">将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</span><br><span class=\"line\"></span><br><span class=\"line\">当客户提交一个请求时，请求时沿链传递直至有一个 Handler 对象负责处理它。</span><br><span class=\"line\"></span><br><span class=\"line\">接受者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。</span><br><span class=\"line\">结果是职责链可简化对象的相互连接，它们仅需要保证一个指向其后继者的引用，而不需要保持它所有的候选者的引用。</span><br><span class=\"line\"></span><br><span class=\"line\">可以随时地增加或修改处理一个请求的结构，增强了给对象指派职责的灵活性</span><br><span class=\"line\"></span><br><span class=\"line\">一个请求极有可能到了链末都得不到处理，或者因为没有正确配置而得不到处理。需要事先考虑清楚</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 定义一个处理请示的接口</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * Class Handler</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@var</span> static</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">protected</span> $successor;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSuccessor</span>(<span class=\"params\">Handler $successor</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">$this</span>-&gt;successor = $successor;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * 抽象处理请求接口</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> $request</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">0</span> &amp;&amp; $request &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">10</span> &amp;&amp; $request &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">$request</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ($request &gt;= <span class=\"number\">20</span> &amp;&amp; $request &lt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">echo</span> get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;处理请求&#x27;</span> . $request . PHP_EOL;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;successor != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;successor-&gt;handleRequest($request);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> $h1 = <span class=\"keyword\">new</span> ConcreteHandler1();</span><br><span class=\"line\"> $h2 = <span class=\"keyword\">new</span> ConcreteHandler2();</span><br><span class=\"line\"> $h3 = <span class=\"keyword\">new</span> ConcreteHandler3();</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 设置下一级</span></span><br><span class=\"line\"> $h1-&gt;setSuccessor($h2);</span><br><span class=\"line\"> $h2-&gt;setSuccessor($h3);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 31 无人处理</span></span><br><span class=\"line\"> $requests = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"number\">18</span>, <span class=\"number\">22</span>, <span class=\"number\">25</span>, <span class=\"number\">14</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">27</span>, <span class=\"number\">31</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">foreach</span> ($requests <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">     $h1-&gt;handleRequest($v);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/06/design-patten-command.html","title":"设计模式(6)-命令模式","keywords":"设计模式,命令模式","description":"命令模式","date":"2018-10-06T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[命令模式](https://github.com/wenjy/design_patten_php/blob/master/src/Command.php)\n\n## 简介\n\n```\n将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化；\n对请求排队或记录请求日志，以及支持可撤销的操作\n\n第一，它能较容易地设计一个命令队列；\n第二，在需要的情况下，可以较容易的将命令计入日志；\n第三，允许接收请求的一方决定是否要否决请求；\n第四，可以容易的实现对请求的撤销和重做；\n第五，由于加进新的具体命令不能影响其他的类，因此增加新的具体命令很容易\n\n命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开\n\n敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。\n如果不清楚一个系统是否需要命令模式，就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式\n并不困难，只有在真正需要如撤销/恢复操作等功能时，把原来的代码重构为命令模式才有意义。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 用来声明执行操作的接口\n */\nabstract class Command\n{\n    /**\n     * @var Receiver\n     */\n    protected $receiver;\n\n    /**\n     * Command constructor.\n     * @param $receiver\n     */\n    public function __construct(Receiver $receiver)\n    {\n        $this->receiver = $receiver;\n    }\n\n    /**\n     * 抽象执行命令接口\n     *\n     * @return mixed\n     * @author jiangyi\n     */\n    abstract public function execute();\n\n}\n\n/**\n * 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现 execute\n *\n * Class ConcreteCommand\n */\nclass ConcreteCommand extends Command\n{\n    /**\n     * ConcreteCommand constructor.\n     */\n    public function __construct(Receiver $receiver)\n    {\n        parent::__construct($receiver);\n    }\n\n    public function execute()\n    {\n        $this->receiver->action();\n    }\n}\n\n/**\n * 要求该命令执行这个请求\n *\n * Class Invoker\n */\nclass Invoker\n{\n    /**\n     * @var Command\n     */\n    private $command;\n\n    /**\n     * @param mixed $command\n     */\n    public function setCommand($command)\n    {\n        $this->command = $command;\n    }\n\n    public function executeCommand()\n    {\n        $this->command->execute();\n    }\n}\n\n/**\n * 具体的命令执行者，知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接受者\n * 命令执行者知道所有的命令执行\n * 或者这里可以定义一个抽象接口，实现不同的命令执行者执行不同的命令，这样更利于扩展\n *\n * Class Receiver\n */\nabstract class Receiver\n{\n    public function action()\n    {\n        echo '执行请求' . PHP_EOL;\n    }\n\n    public function action1()\n    {\n        echo '执行请求2' . PHP_EOL;\n    }\n\n    abstract function absAction();\n}\n\nclass ReceiverA extends Receiver\n{\n    function absAction()\n    {\n        echo 'A执行请求' . PHP_EOL;\n    }\n}\n\nclass ReceiverB extends Receiver\n{\n    function absAction()\n    {\n        echo 'B执行请求' . PHP_EOL;\n    }\n}\n\n// 实例化执行者\n$r = new ReceiverA();\n// 指定该命令的执行者\n$c = new ConcreteCommand($r);\n\n// 要求指定的执行者执行命令\n$i = new Invoker();\n$i->setCommand($c);\n$i->executeCommand();\n```\n","source":"_posts/design_patten/command.md","raw":"---\nurl: /2018/10/06/design-patten-command.html\ntitle: \"设计模式(6)-命令模式\"\nkeywords: \"设计模式,命令模式\"\ndescription: \"命令模式\"\ndate: 2018-10-06T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[命令模式](https://github.com/wenjy/design_patten_php/blob/master/src/Command.php)\n\n## 简介\n\n```\n将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化；\n对请求排队或记录请求日志，以及支持可撤销的操作\n\n第一，它能较容易地设计一个命令队列；\n第二，在需要的情况下，可以较容易的将命令计入日志；\n第三，允许接收请求的一方决定是否要否决请求；\n第四，可以容易的实现对请求的撤销和重做；\n第五，由于加进新的具体命令不能影响其他的类，因此增加新的具体命令很容易\n\n命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开\n\n敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。\n如果不清楚一个系统是否需要命令模式，就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式\n并不困难，只有在真正需要如撤销/恢复操作等功能时，把原来的代码重构为命令模式才有意义。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 用来声明执行操作的接口\n */\nabstract class Command\n{\n    /**\n     * @var Receiver\n     */\n    protected $receiver;\n\n    /**\n     * Command constructor.\n     * @param $receiver\n     */\n    public function __construct(Receiver $receiver)\n    {\n        $this->receiver = $receiver;\n    }\n\n    /**\n     * 抽象执行命令接口\n     *\n     * @return mixed\n     * @author jiangyi\n     */\n    abstract public function execute();\n\n}\n\n/**\n * 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现 execute\n *\n * Class ConcreteCommand\n */\nclass ConcreteCommand extends Command\n{\n    /**\n     * ConcreteCommand constructor.\n     */\n    public function __construct(Receiver $receiver)\n    {\n        parent::__construct($receiver);\n    }\n\n    public function execute()\n    {\n        $this->receiver->action();\n    }\n}\n\n/**\n * 要求该命令执行这个请求\n *\n * Class Invoker\n */\nclass Invoker\n{\n    /**\n     * @var Command\n     */\n    private $command;\n\n    /**\n     * @param mixed $command\n     */\n    public function setCommand($command)\n    {\n        $this->command = $command;\n    }\n\n    public function executeCommand()\n    {\n        $this->command->execute();\n    }\n}\n\n/**\n * 具体的命令执行者，知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接受者\n * 命令执行者知道所有的命令执行\n * 或者这里可以定义一个抽象接口，实现不同的命令执行者执行不同的命令，这样更利于扩展\n *\n * Class Receiver\n */\nabstract class Receiver\n{\n    public function action()\n    {\n        echo '执行请求' . PHP_EOL;\n    }\n\n    public function action1()\n    {\n        echo '执行请求2' . PHP_EOL;\n    }\n\n    abstract function absAction();\n}\n\nclass ReceiverA extends Receiver\n{\n    function absAction()\n    {\n        echo 'A执行请求' . PHP_EOL;\n    }\n}\n\nclass ReceiverB extends Receiver\n{\n    function absAction()\n    {\n        echo 'B执行请求' . PHP_EOL;\n    }\n}\n\n// 实例化执行者\n$r = new ReceiverA();\n// 指定该命令的执行者\n$c = new ConcreteCommand($r);\n\n// 要求指定的执行者执行命令\n$i = new Invoker();\n$i->setCommand($c);\n$i->executeCommand();\n```\n","slug":"design_patten/command","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf490048mv0527ms67mu","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Command.php\">命令模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化；</span><br><span class=\"line\">对请求排队或记录请求日志，以及支持可撤销的操作</span><br><span class=\"line\"></span><br><span class=\"line\">第一，它能较容易地设计一个命令队列；</span><br><span class=\"line\">第二，在需要的情况下，可以较容易的将命令计入日志；</span><br><span class=\"line\">第三，允许接收请求的一方决定是否要否决请求；</span><br><span class=\"line\">第四，可以容易的实现对请求的撤销和重做；</span><br><span class=\"line\">第五，由于加进新的具体命令不能影响其他的类，因此增加新的具体命令很容易</span><br><span class=\"line\"></span><br><span class=\"line\">命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开</span><br><span class=\"line\"></span><br><span class=\"line\">敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。</span><br><span class=\"line\">如果不清楚一个系统是否需要命令模式，就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式</span><br><span class=\"line\">并不困难，只有在真正需要如撤销&#x2F;恢复操作等功能时，把原来的代码重构为命令模式才有意义。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用来声明执行操作的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Receiver</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Command constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $receiver</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Receiver $receiver</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;receiver = $receiver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 抽象执行命令接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现 execute</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteCommand</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteCommand constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Receiver $receiver</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;receiver-&gt;action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 要求该命令执行这个请求</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Invoker</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Command</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $command;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $command</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCommand</span>(<span class=\"params\">$command</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;command = $command;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCommand</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;command-&gt;execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的命令执行者，知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接受者</span></span><br><span class=\"line\"><span class=\"comment\"> * 命令执行者知道所有的命令执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 或者这里可以定义一个抽象接口，实现不同的命令执行者执行不同的命令，这样更利于扩展</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Receiver</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;执行请求2&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReceiverA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;A执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReceiverB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;B执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化执行者</span></span><br><span class=\"line\">$r = <span class=\"keyword\">new</span> ReceiverA();</span><br><span class=\"line\"><span class=\"comment\">// 指定该命令的执行者</span></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ConcreteCommand($r);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要求指定的执行者执行命令</span></span><br><span class=\"line\">$i = <span class=\"keyword\">new</span> Invoker();</span><br><span class=\"line\">$i-&gt;setCommand($c);</span><br><span class=\"line\">$i-&gt;executeCommand();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Command.php\">命令模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化；</span><br><span class=\"line\">对请求排队或记录请求日志，以及支持可撤销的操作</span><br><span class=\"line\"></span><br><span class=\"line\">第一，它能较容易地设计一个命令队列；</span><br><span class=\"line\">第二，在需要的情况下，可以较容易的将命令计入日志；</span><br><span class=\"line\">第三，允许接收请求的一方决定是否要否决请求；</span><br><span class=\"line\">第四，可以容易的实现对请求的撤销和重做；</span><br><span class=\"line\">第五，由于加进新的具体命令不能影响其他的类，因此增加新的具体命令很容易</span><br><span class=\"line\"></span><br><span class=\"line\">命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开</span><br><span class=\"line\"></span><br><span class=\"line\">敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。</span><br><span class=\"line\">如果不清楚一个系统是否需要命令模式，就不要急着去实现它，事实上，在需要的时候通过重构实现这个模式</span><br><span class=\"line\">并不困难，只有在真正需要如撤销&#x2F;恢复操作等功能时，把原来的代码重构为命令模式才有意义。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用来声明执行操作的接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Receiver</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Command constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $receiver</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Receiver $receiver</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;receiver = $receiver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 抽象执行命令接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个接受者对象绑定于一个动作，调用接受者相应的操作，以实现 execute</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteCommand</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteCommand constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Receiver $receiver</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;receiver-&gt;action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 要求该命令执行这个请求</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Invoker</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Command</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $command;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $command</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCommand</span>(<span class=\"params\">$command</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;command = $command;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCommand</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;command-&gt;execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的命令执行者，知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接受者</span></span><br><span class=\"line\"><span class=\"comment\"> * 命令执行者知道所有的命令执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 或者这里可以定义一个抽象接口，实现不同的命令执行者执行不同的命令，这样更利于扩展</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Receiver</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;执行请求2&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReceiverA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;A执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReceiverB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Receiver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absAction</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;B执行请求&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化执行者</span></span><br><span class=\"line\">$r = <span class=\"keyword\">new</span> ReceiverA();</span><br><span class=\"line\"><span class=\"comment\">// 指定该命令的执行者</span></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ConcreteCommand($r);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要求指定的执行者执行命令</span></span><br><span class=\"line\">$i = <span class=\"keyword\">new</span> Invoker();</span><br><span class=\"line\">$i-&gt;setCommand($c);</span><br><span class=\"line\">$i-&gt;executeCommand();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/07/design-patten-composite.html","title":"设计模式(7)-组合模式","keywords":"设计模式,组合模式","description":"组合模式","date":"2018-10-07T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[组合模式](https://github.com/wenjy/design_patten_php/blob/master/src/Composite.php)\n\n## 简介\n\n```\n将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n当你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，\n统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。\n\n基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去\n在客户代码中，任何用到基本对象的地方都可以使用组合对象了。\n\n用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义只而写一些选择判断语句了。\n\n组合模式让客户可以一致的使用组合结构和单个对象。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。\n * 声明一个接口用于访问和管理 Component 的子部件\n *\n * Class Component\n */\nabstract class Component\n{\n    protected $name;\n\n    /**\n     * Component constructor.\n     * @param $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    abstract public function add(Component $c);\n\n    abstract public function remove(Component $c);\n\n    abstract public function display($depth);\n\n}\n\n/**\n * 在组合中表示叶节点对象，叶节点没有子节点\n *\n * Class Leaf\n */\nclass Leaf extends Component\n{\n\n    /**\n     * Leaf constructor.\n     */\n    public function __construct($name)\n    {\n        parent::__construct($name);\n    }\n\n    public function add(Component $c)\n    {\n        echo '不能添加' . PHP_EOL;\n    }\n\n    public function remove(Component $c)\n    {\n        echo '不能删除' . PHP_EOL;\n    }\n\n    public function display($depth)\n    {\n        echo str_repeat('-', $depth) . $this->name . PHP_EOL;\n    }\n}\n\n/**\n * 定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，\n * 比如增加、删除\n *\n * Class Composite\n */\nclass Composite extends Component\n{\n    /**\n     * @var Component[]\n     */\n    private $list = [];\n\n    /**\n     * Composite constructor.\n     */\n    public function __construct($name)\n    {\n        parent::__construct($name);\n    }\n\n    public function add(Component $c)\n    {\n        $this->list[] = $c;\n    }\n\n    public function remove(Component $c)\n    {\n        $key = array_search($c, $this->list);\n        if ($key !== false && array_key_exists($key, $this->list)) {\n            unset($this->list[$key]);\n        }\n    }\n\n    public function display($depth)\n    {\n        echo str_repeat('-', $depth) . $this->name . PHP_EOL;\n        foreach ($this->list as $children) {\n            $children->display($depth + 1);\n        }\n    }\n\n}\n\n$root = new Composite('root');\n$root->add(new Leaf('leaf a'));\n$root->add(new Leaf('left b'));\n\n$comp = new Composite('x');\n$comp->add(new Leaf('x a'));\n$comp->add(new Leaf('x b'));\n\n$root->add($comp);\n\n$comp2 = new Composite('xy');\n$comp2->add(new Leaf('xy a'));\n$comp2->add(new Leaf('xy b'));\n\n$root->add(new Leaf('leaf c'));\n$leafd = new Leaf('leaf d');\n$root->add($leafd);\n$root->remove($leafd);\n\n$root->add($comp2);\n$root->display(0);\n```\n","source":"_posts/design_patten/composite.md","raw":"---\nurl: /2018/10/07/design-patten-composite.html\ntitle: \"设计模式(7)-组合模式\"\nkeywords: \"设计模式,组合模式\"\ndescription: \"组合模式\"\ndate: 2018-10-07T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[组合模式](https://github.com/wenjy/design_patten_php/blob/master/src/Composite.php)\n\n## 简介\n\n```\n将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n当你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，\n统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。\n\n基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去\n在客户代码中，任何用到基本对象的地方都可以使用组合对象了。\n\n用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义只而写一些选择判断语句了。\n\n组合模式让客户可以一致的使用组合结构和单个对象。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。\n * 声明一个接口用于访问和管理 Component 的子部件\n *\n * Class Component\n */\nabstract class Component\n{\n    protected $name;\n\n    /**\n     * Component constructor.\n     * @param $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    abstract public function add(Component $c);\n\n    abstract public function remove(Component $c);\n\n    abstract public function display($depth);\n\n}\n\n/**\n * 在组合中表示叶节点对象，叶节点没有子节点\n *\n * Class Leaf\n */\nclass Leaf extends Component\n{\n\n    /**\n     * Leaf constructor.\n     */\n    public function __construct($name)\n    {\n        parent::__construct($name);\n    }\n\n    public function add(Component $c)\n    {\n        echo '不能添加' . PHP_EOL;\n    }\n\n    public function remove(Component $c)\n    {\n        echo '不能删除' . PHP_EOL;\n    }\n\n    public function display($depth)\n    {\n        echo str_repeat('-', $depth) . $this->name . PHP_EOL;\n    }\n}\n\n/**\n * 定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，\n * 比如增加、删除\n *\n * Class Composite\n */\nclass Composite extends Component\n{\n    /**\n     * @var Component[]\n     */\n    private $list = [];\n\n    /**\n     * Composite constructor.\n     */\n    public function __construct($name)\n    {\n        parent::__construct($name);\n    }\n\n    public function add(Component $c)\n    {\n        $this->list[] = $c;\n    }\n\n    public function remove(Component $c)\n    {\n        $key = array_search($c, $this->list);\n        if ($key !== false && array_key_exists($key, $this->list)) {\n            unset($this->list[$key]);\n        }\n    }\n\n    public function display($depth)\n    {\n        echo str_repeat('-', $depth) . $this->name . PHP_EOL;\n        foreach ($this->list as $children) {\n            $children->display($depth + 1);\n        }\n    }\n\n}\n\n$root = new Composite('root');\n$root->add(new Leaf('leaf a'));\n$root->add(new Leaf('left b'));\n\n$comp = new Composite('x');\n$comp->add(new Leaf('x a'));\n$comp->add(new Leaf('x b'));\n\n$root->add($comp);\n\n$comp2 = new Composite('xy');\n$comp2->add(new Leaf('xy a'));\n$comp2->add(new Leaf('xy b'));\n\n$root->add(new Leaf('leaf c'));\n$leafd = new Leaf('leaf d');\n$root->add($leafd);\n$root->remove($leafd);\n\n$root->add($comp2);\n$root->display(0);\n```\n","slug":"design_patten/composite","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4a004bmv055gx32sh9","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Composite.php\">组合模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</span><br><span class=\"line\"></span><br><span class=\"line\">当你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，</span><br><span class=\"line\">统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。</span><br><span class=\"line\"></span><br><span class=\"line\">基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去</span><br><span class=\"line\">在客户代码中，任何用到基本对象的地方都可以使用组合对象了。</span><br><span class=\"line\"></span><br><span class=\"line\">用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义只而写一些选择判断语句了。</span><br><span class=\"line\"></span><br><span class=\"line\">组合模式让客户可以一致的使用组合结构和单个对象。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明一个接口用于访问和管理 Component 的子部件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Component</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Component constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在组合中表示叶节点对象，叶节点没有子节点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Leaf</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Leaf constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;不能添加&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;不能删除&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> str_repeat(<span class=\"string\">&#x27;-&#x27;</span>, $depth) . <span class=\"keyword\">$this</span>-&gt;name . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，</span></span><br><span class=\"line\"><span class=\"comment\"> * 比如增加、删除</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Composite</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Component[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Composite constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;list[] = $c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = array_search($c, <span class=\"keyword\">$this</span>-&gt;list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($key !== <span class=\"literal\">false</span> &amp;&amp; array_key_exists($key, <span class=\"keyword\">$this</span>-&gt;list)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;list[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> str_repeat(<span class=\"string\">&#x27;-&#x27;</span>, $depth) . <span class=\"keyword\">$this</span>-&gt;name . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;list <span class=\"keyword\">as</span> $children) &#123;</span><br><span class=\"line\">            $children-&gt;display($depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$root = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;root&#x27;</span>);</span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf a&#x27;</span>));</span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;left b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$comp = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\">$comp-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;x a&#x27;</span>));</span><br><span class=\"line\">$comp-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;x b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add($comp);</span><br><span class=\"line\"></span><br><span class=\"line\">$comp2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;xy&#x27;</span>);</span><br><span class=\"line\">$comp2-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;xy a&#x27;</span>));</span><br><span class=\"line\">$comp2-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;xy b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf c&#x27;</span>));</span><br><span class=\"line\">$leafd = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf d&#x27;</span>);</span><br><span class=\"line\">$root-&gt;add($leafd);</span><br><span class=\"line\">$root-&gt;remove($leafd);</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add($comp2);</span><br><span class=\"line\">$root-&gt;display(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Composite.php\">组合模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将对象组合成树形结构已表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</span><br><span class=\"line\"></span><br><span class=\"line\">当你发现需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，</span><br><span class=\"line\">统一地使用组合结构中的所有对象时，就应该考虑使用组合模式了。</span><br><span class=\"line\"></span><br><span class=\"line\">基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的递归下去</span><br><span class=\"line\">在客户代码中，任何用到基本对象的地方都可以使用组合对象了。</span><br><span class=\"line\"></span><br><span class=\"line\">用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就是用不着为定义只而写一些选择判断语句了。</span><br><span class=\"line\"></span><br><span class=\"line\">组合模式让客户可以一致的使用组合结构和单个对象。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明一个接口用于访问和管理 Component 的子部件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Component</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Component constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在组合中表示叶节点对象，叶节点没有子节点</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Leaf</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Leaf constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;不能添加&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;不能删除&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> str_repeat(<span class=\"string\">&#x27;-&#x27;</span>, $depth) . <span class=\"keyword\">$this</span>-&gt;name . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，</span></span><br><span class=\"line\"><span class=\"comment\"> * 比如增加、删除</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Composite</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Component[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Composite constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;list[] = $c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">Component $c</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = array_search($c, <span class=\"keyword\">$this</span>-&gt;list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($key !== <span class=\"literal\">false</span> &amp;&amp; array_key_exists($key, <span class=\"keyword\">$this</span>-&gt;list)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;list[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\">$depth</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> str_repeat(<span class=\"string\">&#x27;-&#x27;</span>, $depth) . <span class=\"keyword\">$this</span>-&gt;name . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;list <span class=\"keyword\">as</span> $children) &#123;</span><br><span class=\"line\">            $children-&gt;display($depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$root = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;root&#x27;</span>);</span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf a&#x27;</span>));</span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;left b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$comp = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\">$comp-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;x a&#x27;</span>));</span><br><span class=\"line\">$comp-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;x b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add($comp);</span><br><span class=\"line\"></span><br><span class=\"line\">$comp2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">&#x27;xy&#x27;</span>);</span><br><span class=\"line\">$comp2-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;xy a&#x27;</span>));</span><br><span class=\"line\">$comp2-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;xy b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf c&#x27;</span>));</span><br><span class=\"line\">$leafd = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">&#x27;leaf d&#x27;</span>);</span><br><span class=\"line\">$root-&gt;add($leafd);</span><br><span class=\"line\">$root-&gt;remove($leafd);</span><br><span class=\"line\"></span><br><span class=\"line\">$root-&gt;add($comp2);</span><br><span class=\"line\">$root-&gt;display(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/08/design-patten-decorator.html","title":"设计模式(8)-装饰模式","keywords":"设计模式,装饰模式","description":"装饰模式","date":"2018-10-08T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[装饰模式](https://github.com/wenjy/design_patten_php/blob/master/src/Decorator.php)\n\n## 简介\n\n```\n动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活\n\n当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或者主要行为；\n在主类中加入了新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足\n一些只在某种特定情况下才会执行的特殊行为的需要。\n\n为已有的功能动态地添加更多功能的一种方式\n把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效地把类的核心职责和装饰功能区分开，\n而且可以去除相关类中重复的装饰逻辑\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 定义一个对象接口，可以给这些对象动态的添加职责\n *\n * Class Component\n */\nabstract class Component\n{\n    public abstract function operation();\n}\n\n/**\n * 定义了一个具体的对象，也可以给这个对象添加一些职责\n *\n * 如果只有一个 ConcreteComponent 类而没有抽象的 Component 类，那么 Decorator 类\n * 可以是 ConcreteComponent 的一个子类。同样的道理，如果只有一个 Decorator 类，那么就没有必要\n * 建立一个单独的 Decorator 类，而可以把 Decorator 类和 ConcreteComponent 的责任合并成一个类。\n *\n * Class ConcreteComponent\n */\nclass ConcreteComponent extends Component\n{\n    public function operation()\n    {\n        echo '具体对象的操作' . PHP_EOL;\n    }\n\n    public function test()\n    {\n\n    }\n}\n\n/**\n * 装饰抽象类，继承了 Component ，从外类来扩展 Component 类的功能，但对于 Component 来说，\n * 是无需知道 Decorator 的存在的\n * 利用 setComponent 来对对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了，\n * 每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中\n *\n * Class Decorator\n */\nclass Decorator extends Component\n{\n    /**\n     * @var Component\n     */\n    protected $component;\n\n    /**\n     * 设置要装饰的对象\n     *\n     * @param Component $component\n     * @author jiangyi\n     */\n    public function setComponent(Component $component)\n    {\n        $this->component = $component;\n    }\n\n    public function operation()\n    {\n        if ($this->component != null) {\n            $this->component->operation();\n        }\n    }\n}\n\n/**\n * 具体的装饰对象，起到给 Component 添加职责的功能\n *\n * Class DecoratorA\n */\nclass DecoratorA extends Decorator\n{\n    private $addedState;\n\n    public function operation()\n    {\n        parent::operation();\n        $this->addedState = 'New State';\n        echo '具体装饰对象A的操作' . PHP_EOL;\n    }\n}\n\nclass DecoratorB extends Decorator\n{\n    public function operation()\n    {\n        parent::operation();\n        $this->addedBehavior();\n        echo '具体装饰对象B的操作' . PHP_EOL;\n    }\n\n    private function addedBehavior()\n    {\n\n    }\n}\n\nclass DecoratorC extends Decorator\n{\n    public function operation()\n    {\n        parent::operation();\n        $this->addedBehavior();\n        echo '具体装饰对象C的操作' . PHP_EOL;\n    }\n\n    private function addedBehavior()\n    {\n\n    }\n}\n\n$c = new ConcreteComponent();\n$d1 = new DecoratorA();\n$d2 = new DecoratorB();\n$d3 = new DecoratorC();\n\n// 从最里面开始执行\n// d1装饰c\n$d1->setComponent($c);\n// d2装饰d1\n$d2->setComponent($d1);\n// d3装饰d2\n$d3->setComponent($d2);\n//var_dump($d3);\n$d3->operation();\n```\n","source":"_posts/design_patten/decorator.md","raw":"---\nurl: /2018/10/08/design-patten-decorator.html\ntitle: \"设计模式(8)-装饰模式\"\nkeywords: \"设计模式,装饰模式\"\ndescription: \"装饰模式\"\ndate: 2018-10-08T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[装饰模式](https://github.com/wenjy/design_patten_php/blob/master/src/Decorator.php)\n\n## 简介\n\n```\n动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活\n\n当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或者主要行为；\n在主类中加入了新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足\n一些只在某种特定情况下才会执行的特殊行为的需要。\n\n为已有的功能动态地添加更多功能的一种方式\n把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效地把类的核心职责和装饰功能区分开，\n而且可以去除相关类中重复的装饰逻辑\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 定义一个对象接口，可以给这些对象动态的添加职责\n *\n * Class Component\n */\nabstract class Component\n{\n    public abstract function operation();\n}\n\n/**\n * 定义了一个具体的对象，也可以给这个对象添加一些职责\n *\n * 如果只有一个 ConcreteComponent 类而没有抽象的 Component 类，那么 Decorator 类\n * 可以是 ConcreteComponent 的一个子类。同样的道理，如果只有一个 Decorator 类，那么就没有必要\n * 建立一个单独的 Decorator 类，而可以把 Decorator 类和 ConcreteComponent 的责任合并成一个类。\n *\n * Class ConcreteComponent\n */\nclass ConcreteComponent extends Component\n{\n    public function operation()\n    {\n        echo '具体对象的操作' . PHP_EOL;\n    }\n\n    public function test()\n    {\n\n    }\n}\n\n/**\n * 装饰抽象类，继承了 Component ，从外类来扩展 Component 类的功能，但对于 Component 来说，\n * 是无需知道 Decorator 的存在的\n * 利用 setComponent 来对对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了，\n * 每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中\n *\n * Class Decorator\n */\nclass Decorator extends Component\n{\n    /**\n     * @var Component\n     */\n    protected $component;\n\n    /**\n     * 设置要装饰的对象\n     *\n     * @param Component $component\n     * @author jiangyi\n     */\n    public function setComponent(Component $component)\n    {\n        $this->component = $component;\n    }\n\n    public function operation()\n    {\n        if ($this->component != null) {\n            $this->component->operation();\n        }\n    }\n}\n\n/**\n * 具体的装饰对象，起到给 Component 添加职责的功能\n *\n * Class DecoratorA\n */\nclass DecoratorA extends Decorator\n{\n    private $addedState;\n\n    public function operation()\n    {\n        parent::operation();\n        $this->addedState = 'New State';\n        echo '具体装饰对象A的操作' . PHP_EOL;\n    }\n}\n\nclass DecoratorB extends Decorator\n{\n    public function operation()\n    {\n        parent::operation();\n        $this->addedBehavior();\n        echo '具体装饰对象B的操作' . PHP_EOL;\n    }\n\n    private function addedBehavior()\n    {\n\n    }\n}\n\nclass DecoratorC extends Decorator\n{\n    public function operation()\n    {\n        parent::operation();\n        $this->addedBehavior();\n        echo '具体装饰对象C的操作' . PHP_EOL;\n    }\n\n    private function addedBehavior()\n    {\n\n    }\n}\n\n$c = new ConcreteComponent();\n$d1 = new DecoratorA();\n$d2 = new DecoratorB();\n$d3 = new DecoratorC();\n\n// 从最里面开始执行\n// d1装饰c\n$d1->setComponent($c);\n// d2装饰d1\n$d2->setComponent($d1);\n// d3装饰d2\n$d3->setComponent($d2);\n//var_dump($d3);\n$d3->operation();\n```\n","slug":"design_patten/decorator","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4c004emv055ihk2e9i","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Decorator.php\">装饰模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活</span><br><span class=\"line\"></span><br><span class=\"line\">当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或者主要行为；</span><br><span class=\"line\">在主类中加入了新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足</span><br><span class=\"line\">一些只在某种特定情况下才会执行的特殊行为的需要。</span><br><span class=\"line\"></span><br><span class=\"line\">为已有的功能动态地添加更多功能的一种方式</span><br><span class=\"line\">把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效地把类的核心职责和装饰功能区分开，</span><br><span class=\"line\">而且可以去除相关类中重复的装饰逻辑</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个对象接口，可以给这些对象动态的添加职责</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Component</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个具体的对象，也可以给这个对象添加一些职责</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果只有一个 ConcreteComponent 类而没有抽象的 Component 类，那么 Decorator 类</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以是 ConcreteComponent 的一个子类。同样的道理，如果只有一个 Decorator 类，那么就没有必要</span></span><br><span class=\"line\"><span class=\"comment\"> * 建立一个单独的 Decorator 类，而可以把 Decorator 类和 ConcreteComponent 的责任合并成一个类。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteComponent</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体对象的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 装饰抽象类，继承了 Component ，从外类来扩展 Component 类的功能，但对于 Component 来说，</span></span><br><span class=\"line\"><span class=\"comment\"> * 是无需知道 Decorator 的存在的</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用 setComponent 来对对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了，</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Decorator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Component</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $component;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置要装饰的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Component $component</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setComponent</span>(<span class=\"params\">Component $component</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;component = $component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;component != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;component-&gt;operation();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的装饰对象，起到给 Component 添加职责的功能</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class DecoratorA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $addedState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedState = <span class=\"string\">&#x27;New State&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象A的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedBehavior();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象B的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedBehavior</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedBehavior();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象C的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedBehavior</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ConcreteComponent();</span><br><span class=\"line\">$d1 = <span class=\"keyword\">new</span> DecoratorA();</span><br><span class=\"line\">$d2 = <span class=\"keyword\">new</span> DecoratorB();</span><br><span class=\"line\">$d3 = <span class=\"keyword\">new</span> DecoratorC();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从最里面开始执行</span></span><br><span class=\"line\"><span class=\"comment\">// d1装饰c</span></span><br><span class=\"line\">$d1-&gt;setComponent($c);</span><br><span class=\"line\"><span class=\"comment\">// d2装饰d1</span></span><br><span class=\"line\">$d2-&gt;setComponent($d1);</span><br><span class=\"line\"><span class=\"comment\">// d3装饰d2</span></span><br><span class=\"line\">$d3-&gt;setComponent($d2);</span><br><span class=\"line\"><span class=\"comment\">//var_dump($d3);</span></span><br><span class=\"line\">$d3-&gt;operation();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Decorator.php\">装饰模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活</span><br><span class=\"line\"></span><br><span class=\"line\">当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或者主要行为；</span><br><span class=\"line\">在主类中加入了新的字段、新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足</span><br><span class=\"line\">一些只在某种特定情况下才会执行的特殊行为的需要。</span><br><span class=\"line\"></span><br><span class=\"line\">为已有的功能动态地添加更多功能的一种方式</span><br><span class=\"line\">把类中的装饰功能从类中搬移出去，这样可以简化原有的类，有效地把类的核心职责和装饰功能区分开，</span><br><span class=\"line\">而且可以去除相关类中重复的装饰逻辑</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个对象接口，可以给这些对象动态的添加职责</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Component</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个具体的对象，也可以给这个对象添加一些职责</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果只有一个 ConcreteComponent 类而没有抽象的 Component 类，那么 Decorator 类</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以是 ConcreteComponent 的一个子类。同样的道理，如果只有一个 Decorator 类，那么就没有必要</span></span><br><span class=\"line\"><span class=\"comment\"> * 建立一个单独的 Decorator 类，而可以把 Decorator 类和 ConcreteComponent 的责任合并成一个类。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteComponent</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体对象的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 装饰抽象类，继承了 Component ，从外类来扩展 Component 类的功能，但对于 Component 来说，</span></span><br><span class=\"line\"><span class=\"comment\"> * 是无需知道 Decorator 的存在的</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用 setComponent 来对对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了，</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个装饰对象只关心自己的功能，不需要关心如何被添加到对象链当中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Decorator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Component</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $component;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置要装饰的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Component $component</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setComponent</span>(<span class=\"params\">Component $component</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;component = $component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;component != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;component-&gt;operation();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体的装饰对象，起到给 Component 添加职责的功能</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class DecoratorA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $addedState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedState = <span class=\"string\">&#x27;New State&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象A的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedBehavior();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象B的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedBehavior</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::operation();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;addedBehavior();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体装饰对象C的操作&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addedBehavior</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ConcreteComponent();</span><br><span class=\"line\">$d1 = <span class=\"keyword\">new</span> DecoratorA();</span><br><span class=\"line\">$d2 = <span class=\"keyword\">new</span> DecoratorB();</span><br><span class=\"line\">$d3 = <span class=\"keyword\">new</span> DecoratorC();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从最里面开始执行</span></span><br><span class=\"line\"><span class=\"comment\">// d1装饰c</span></span><br><span class=\"line\">$d1-&gt;setComponent($c);</span><br><span class=\"line\"><span class=\"comment\">// d2装饰d1</span></span><br><span class=\"line\">$d2-&gt;setComponent($d1);</span><br><span class=\"line\"><span class=\"comment\">// d3装饰d2</span></span><br><span class=\"line\">$d3-&gt;setComponent($d2);</span><br><span class=\"line\"><span class=\"comment\">//var_dump($d3);</span></span><br><span class=\"line\">$d3-&gt;operation();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/09/design-patten-facade.html","title":"设计模式(9)-外观模式","keywords":"设计模式,外观模式","description":"外观模式","date":"2018-10-09T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[外观模式](https://github.com/wenjy/design_patten_php/blob/master/src/Facade.php)\n\n## 简介\n\n```\n为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，\n这个接口使得这一子系统更加容易使用\n\n首先，在设计初期阶段，应该要有意识的将不同的两个层分离，比如经典的MVC三层架构\n层与层之间建立外观 Facade\n\n其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade\n可以提供一个简单的接口，减少它们之间的依赖。\n\n第三，在维护一个遗留的大型系统时，可能这个系统以及非常难以维护和扩展了，可以为新系统开发一个外观 Facade 类，\n来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与 Facade 对象交互，\nFacade 与遗留代码交互所有复杂的工作\n```\n\n## 代码示例\n\n```php\n<?php\nclass SubSystemOne\n{\n    public function methodOne()\n    {\n        echo '子系统方法一'.PHP_EOL;\n    }\n}\n\nclass SubSystemTwo\n{\n    public function methodTwo()\n    {\n        echo '子系统方法二'.PHP_EOL;\n    }\n}\n\nclass SubSystemThree\n{\n    public function methodThree()\n    {\n        echo '子系统方法三'.PHP_EOL;\n    }\n}\n\nclass SubSystemFour\n{\n    public function methodFour()\n    {\n        echo '子系统方法四' .PHP_EOL;\n    }\n}\n\n/**\n * 外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统对象\n *\n * Class Facade\n */\nclass Facade\n{\n    public $one;\n    public $two;\n    public $three;\n    public $four;\n\n    /**\n     * Facade constructor.\n     */\n    public function __construct()\n    {\n        $this->one = new SubSystemOne();\n        $this->two = new  SubSystemTwo();\n        $this->three = new SubSystemThree();\n        $this->four = new SubSystemFour();\n    }\n\n    public function methodA()\n    {\n        echo '方法组A:' . PHP_EOL;\n        $this->one->methodOne();\n        $this->three->methodThree();\n    }\n\n    public function methodB()\n    {\n        echo '方法组B:' . PHP_EOL;\n        $this->four->methodFour();\n        $this->two->methodTwo();\n    }\n\n}\n\n$facade = new Facade();\n$facade->methodA();\n$facade->methodB();\n```\n","source":"_posts/design_patten/facade.md","raw":"---\nurl: /2018/10/09/design-patten-facade.html\ntitle: \"设计模式(9)-外观模式\"\nkeywords: \"设计模式,外观模式\"\ndescription: \"外观模式\"\ndate: 2018-10-09T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[外观模式](https://github.com/wenjy/design_patten_php/blob/master/src/Facade.php)\n\n## 简介\n\n```\n为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，\n这个接口使得这一子系统更加容易使用\n\n首先，在设计初期阶段，应该要有意识的将不同的两个层分离，比如经典的MVC三层架构\n层与层之间建立外观 Facade\n\n其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade\n可以提供一个简单的接口，减少它们之间的依赖。\n\n第三，在维护一个遗留的大型系统时，可能这个系统以及非常难以维护和扩展了，可以为新系统开发一个外观 Facade 类，\n来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与 Facade 对象交互，\nFacade 与遗留代码交互所有复杂的工作\n```\n\n## 代码示例\n\n```php\n<?php\nclass SubSystemOne\n{\n    public function methodOne()\n    {\n        echo '子系统方法一'.PHP_EOL;\n    }\n}\n\nclass SubSystemTwo\n{\n    public function methodTwo()\n    {\n        echo '子系统方法二'.PHP_EOL;\n    }\n}\n\nclass SubSystemThree\n{\n    public function methodThree()\n    {\n        echo '子系统方法三'.PHP_EOL;\n    }\n}\n\nclass SubSystemFour\n{\n    public function methodFour()\n    {\n        echo '子系统方法四' .PHP_EOL;\n    }\n}\n\n/**\n * 外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统对象\n *\n * Class Facade\n */\nclass Facade\n{\n    public $one;\n    public $two;\n    public $three;\n    public $four;\n\n    /**\n     * Facade constructor.\n     */\n    public function __construct()\n    {\n        $this->one = new SubSystemOne();\n        $this->two = new  SubSystemTwo();\n        $this->three = new SubSystemThree();\n        $this->four = new SubSystemFour();\n    }\n\n    public function methodA()\n    {\n        echo '方法组A:' . PHP_EOL;\n        $this->one->methodOne();\n        $this->three->methodThree();\n    }\n\n    public function methodB()\n    {\n        echo '方法组B:' . PHP_EOL;\n        $this->four->methodFour();\n        $this->two->methodTwo();\n    }\n\n}\n\n$facade = new Facade();\n$facade->methodA();\n$facade->methodB();\n```\n","slug":"design_patten/facade","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4d004hmv056vv4dzg0","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Facade.php\">外观模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，</span><br><span class=\"line\">这个接口使得这一子系统更加容易使用</span><br><span class=\"line\"></span><br><span class=\"line\">首先，在设计初期阶段，应该要有意识的将不同的两个层分离，比如经典的MVC三层架构</span><br><span class=\"line\">层与层之间建立外观 Facade</span><br><span class=\"line\"></span><br><span class=\"line\">其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade</span><br><span class=\"line\">可以提供一个简单的接口，减少它们之间的依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">第三，在维护一个遗留的大型系统时，可能这个系统以及非常难以维护和扩展了，可以为新系统开发一个外观 Facade 类，</span><br><span class=\"line\">来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与 Facade 对象交互，</span><br><span class=\"line\">Facade 与遗留代码交互所有复杂的工作</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemOne</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodOne</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法一&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemTwo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodTwo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法二&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemThree</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodThree</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法三&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemFour</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodFour</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法四&#x27;</span> .PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Facade</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $one;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $two;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $three;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $four;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Facade constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;one = <span class=\"keyword\">new</span> SubSystemOne();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;two = <span class=\"keyword\">new</span>  SubSystemTwo();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;three = <span class=\"keyword\">new</span> SubSystemThree();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;four = <span class=\"keyword\">new</span> SubSystemFour();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;方法组A:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;one-&gt;methodOne();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;three-&gt;methodThree();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;方法组B:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;four-&gt;methodFour();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;two-&gt;methodTwo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$facade = <span class=\"keyword\">new</span> Facade();</span><br><span class=\"line\">$facade-&gt;methodA();</span><br><span class=\"line\">$facade-&gt;methodB();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Facade.php\">外观模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，</span><br><span class=\"line\">这个接口使得这一子系统更加容易使用</span><br><span class=\"line\"></span><br><span class=\"line\">首先，在设计初期阶段，应该要有意识的将不同的两个层分离，比如经典的MVC三层架构</span><br><span class=\"line\">层与层之间建立外观 Facade</span><br><span class=\"line\"></span><br><span class=\"line\">其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观 Facade</span><br><span class=\"line\">可以提供一个简单的接口，减少它们之间的依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">第三，在维护一个遗留的大型系统时，可能这个系统以及非常难以维护和扩展了，可以为新系统开发一个外观 Facade 类，</span><br><span class=\"line\">来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与 Facade 对象交互，</span><br><span class=\"line\">Facade 与遗留代码交互所有复杂的工作</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemOne</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodOne</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法一&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemTwo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodTwo</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法二&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemThree</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodThree</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法三&#x27;</span>.PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubSystemFour</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodFour</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;子系统方法四&#x27;</span> .PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 外观类，知道哪些子系统负责处理请求，将客户的请求代理给适当的子系统对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Facade</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $one;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $two;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $three;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $four;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Facade constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;one = <span class=\"keyword\">new</span> SubSystemOne();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;two = <span class=\"keyword\">new</span>  SubSystemTwo();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;three = <span class=\"keyword\">new</span> SubSystemThree();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;four = <span class=\"keyword\">new</span> SubSystemFour();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;方法组A:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;one-&gt;methodOne();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;three-&gt;methodThree();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;方法组B:&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;four-&gt;methodFour();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;two-&gt;methodTwo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$facade = <span class=\"keyword\">new</span> Facade();</span><br><span class=\"line\">$facade-&gt;methodA();</span><br><span class=\"line\">$facade-&gt;methodB();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/10/design-patten-factory-method.html","title":"设计模式(10)-工厂方法模式","keywords":"设计模式,工厂方法模式","description":"工厂方法模式","date":"2018-10-10T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[工厂方法模式](https://github.com/wenjy/design_patten_php/blob/master/src/FactoryMethod.php)\n\n## 简介\n\n```\n定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。\n\n工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持了封装对象创建过程的优点。\n工厂方法模式是简单工厂的进一步抽象和推广\n```\n\n## 代码示例\n\n```php\n<?php\nclass LeiFeng\n{\n    public function sweep()\n    {\n        echo '扫地' . PHP_EOL;\n    }\n\n    public function wash()\n    {\n        echo '洗衣' . PHP_EOL;\n    }\n\n    public function buyRice()\n    {\n        echo '买米' . PHP_EOL;\n    }\n}\n\n/**\n * 雷锋的继承者\n * 也可以有更多的方法\n *\n * Class Undergraduate\n */\nclass Undergraduate extends LeiFeng\n{\n    public function sweep()\n    {\n        parent::sweep();\n        echo '扫地后休息一会' . PHP_EOL;\n    }\n\n}\n\nclass Volunteer extends LeiFeng\n{\n\n}\n\n/**\n * 创建雷锋的接口\n *\n * Interface IFactory\n */\ninterface IFactory\n{\n    public function createLeiFeng();\n}\n\n/**\n * 实现创建雷锋\n *\n * Class UndergraduateFactory\n */\nclass UndergraduateFactory implements IFactory\n{\n    public function createLeiFeng()\n    {\n        return new Undergraduate();\n    }\n}\n\nclass VolunteerFactory implements IFactory\n{\n    public function createLeiFeng()\n    {\n        return new Volunteer();\n    }\n}\n\n$factory = new UndergraduateFactory();\n$student = $factory->createLeiFeng();\n\n$student->buyRice();\n$student->sweep();\n$student->wash();\n```\n","source":"_posts/design_patten/factory_method.md","raw":"---\nurl: /2018/10/10/design-patten-factory-method.html\ntitle: \"设计模式(10)-工厂方法模式\"\nkeywords: \"设计模式,工厂方法模式\"\ndescription: \"工厂方法模式\"\ndate: 2018-10-10T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[工厂方法模式](https://github.com/wenjy/design_patten_php/blob/master/src/FactoryMethod.php)\n\n## 简介\n\n```\n定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。\n\n工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持了封装对象创建过程的优点。\n工厂方法模式是简单工厂的进一步抽象和推广\n```\n\n## 代码示例\n\n```php\n<?php\nclass LeiFeng\n{\n    public function sweep()\n    {\n        echo '扫地' . PHP_EOL;\n    }\n\n    public function wash()\n    {\n        echo '洗衣' . PHP_EOL;\n    }\n\n    public function buyRice()\n    {\n        echo '买米' . PHP_EOL;\n    }\n}\n\n/**\n * 雷锋的继承者\n * 也可以有更多的方法\n *\n * Class Undergraduate\n */\nclass Undergraduate extends LeiFeng\n{\n    public function sweep()\n    {\n        parent::sweep();\n        echo '扫地后休息一会' . PHP_EOL;\n    }\n\n}\n\nclass Volunteer extends LeiFeng\n{\n\n}\n\n/**\n * 创建雷锋的接口\n *\n * Interface IFactory\n */\ninterface IFactory\n{\n    public function createLeiFeng();\n}\n\n/**\n * 实现创建雷锋\n *\n * Class UndergraduateFactory\n */\nclass UndergraduateFactory implements IFactory\n{\n    public function createLeiFeng()\n    {\n        return new Undergraduate();\n    }\n}\n\nclass VolunteerFactory implements IFactory\n{\n    public function createLeiFeng()\n    {\n        return new Volunteer();\n    }\n}\n\n$factory = new UndergraduateFactory();\n$student = $factory->createLeiFeng();\n\n$student->buyRice();\n$student->sweep();\n$student->wash();\n```\n","slug":"design_patten/factory_method","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4f004jmv05cejo4u0x","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/FactoryMethod.php\">工厂方法模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。</span><br><span class=\"line\"></span><br><span class=\"line\">工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持了封装对象创建过程的优点。</span><br><span class=\"line\">工厂方法模式是简单工厂的进一步抽象和推广</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sweep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;扫地&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wash</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;洗衣&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buyRice</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;买米&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 雷锋的继承者</span></span><br><span class=\"line\"><span class=\"comment\"> * 也可以有更多的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Undergraduate</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Undergraduate</span> <span class=\"keyword\">extends</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sweep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::sweep();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;扫地后休息一会&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volunteer</span> <span class=\"keyword\">extends</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建雷锋的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface IFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现创建雷锋</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class UndergraduateFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndergraduateFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Undergraduate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolunteerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Volunteer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$factory = <span class=\"keyword\">new</span> UndergraduateFactory();</span><br><span class=\"line\">$student = $factory-&gt;createLeiFeng();</span><br><span class=\"line\"></span><br><span class=\"line\">$student-&gt;buyRice();</span><br><span class=\"line\">$student-&gt;sweep();</span><br><span class=\"line\">$student-&gt;wash();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/FactoryMethod.php\">工厂方法模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到子类。</span><br><span class=\"line\"></span><br><span class=\"line\">工厂方法克服了简单工厂违背了开放-封闭原则的缺点，又保持了封装对象创建过程的优点。</span><br><span class=\"line\">工厂方法模式是简单工厂的进一步抽象和推广</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sweep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;扫地&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wash</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;洗衣&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buyRice</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;买米&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 雷锋的继承者</span></span><br><span class=\"line\"><span class=\"comment\"> * 也可以有更多的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Undergraduate</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Undergraduate</span> <span class=\"keyword\">extends</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sweep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::sweep();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;扫地后休息一会&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volunteer</span> <span class=\"keyword\">extends</span> <span class=\"title\">LeiFeng</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建雷锋的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface IFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现创建雷锋</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class UndergraduateFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndergraduateFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Undergraduate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolunteerFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">IFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLeiFeng</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Volunteer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$factory = <span class=\"keyword\">new</span> UndergraduateFactory();</span><br><span class=\"line\">$student = $factory-&gt;createLeiFeng();</span><br><span class=\"line\"></span><br><span class=\"line\">$student-&gt;buyRice();</span><br><span class=\"line\">$student-&gt;sweep();</span><br><span class=\"line\">$student-&gt;wash();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/12/design-patten-interpreter.html","title":"设计模式(12)-解释器模式","keywords":"设计模式,解释器模式","description":"解释器模式","date":"2018-10-12T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[解释器模式](https://github.com/wenjy/design_patten_php/blob/master/src/Interpreter.php)\n\n## 简介\n\n```\n给定一个语言，定义它的文法的一种表示，并定义一个解释器，\n这个解释器使用该表示来解释语言中的句子\n\n当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象表达式，声明一个抽象的解释操作，这个接口为抽象的语法树中所有的节点共享\n * Class AbstractExpression\n */\nabstract class AbstractExpression\n{\n    abstract public function interpret(Context $context);\n}\n\nclass TerminalExpression extends AbstractExpression\n{\n    public function interpret(Context $context)\n    {\n        echo '终端解释器' . PHP_EOL;\n    }\n}\n\nclass NonTerminalExpression extends AbstractExpression\n{\n    public function interpret(Context $context)\n    {\n        echo '非终端解释器' . PHP_EOL;\n    }\n}\n\n/**\n * 包含解释器之外的一些全局信息\n *\n * Class Context\n */\nclass Context\n{\n    private $input;\n\n    private $output;\n\n    /**\n     * @return mixed\n     */\n    public function getOutput()\n    {\n        return $this->output;\n    }\n\n    /**\n     * @param mixed $output\n     */\n    public function setOutput($output)\n    {\n        $this->output = $output;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getInput()\n    {\n        return $this->input;\n    }\n\n    /**\n     * @param mixed $input\n     */\n    public function setInput($input)\n    {\n        $this->input = $input;\n    }\n\n}\n\n$context = new Context();\n\n$list[] = new NonTerminalExpression();\n$list[] = new NonTerminalExpression();\n$list[] = new TerminalExpression();\n\n/* @var $v AbstractExpression */\nforeach ($list as $v) {\n    $v->interpret($context);\n}\n```\n","source":"_posts/design_patten/interperter.md","raw":"---\nurl: /2018/10/12/design-patten-interpreter.html\ntitle: \"设计模式(12)-解释器模式\"\nkeywords: \"设计模式,解释器模式\"\ndescription: \"解释器模式\"\ndate: 2018-10-12T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[解释器模式](https://github.com/wenjy/design_patten_php/blob/master/src/Interpreter.php)\n\n## 简介\n\n```\n给定一个语言，定义它的文法的一种表示，并定义一个解释器，\n这个解释器使用该表示来解释语言中的句子\n\n当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象表达式，声明一个抽象的解释操作，这个接口为抽象的语法树中所有的节点共享\n * Class AbstractExpression\n */\nabstract class AbstractExpression\n{\n    abstract public function interpret(Context $context);\n}\n\nclass TerminalExpression extends AbstractExpression\n{\n    public function interpret(Context $context)\n    {\n        echo '终端解释器' . PHP_EOL;\n    }\n}\n\nclass NonTerminalExpression extends AbstractExpression\n{\n    public function interpret(Context $context)\n    {\n        echo '非终端解释器' . PHP_EOL;\n    }\n}\n\n/**\n * 包含解释器之外的一些全局信息\n *\n * Class Context\n */\nclass Context\n{\n    private $input;\n\n    private $output;\n\n    /**\n     * @return mixed\n     */\n    public function getOutput()\n    {\n        return $this->output;\n    }\n\n    /**\n     * @param mixed $output\n     */\n    public function setOutput($output)\n    {\n        $this->output = $output;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getInput()\n    {\n        return $this->input;\n    }\n\n    /**\n     * @param mixed $input\n     */\n    public function setInput($input)\n    {\n        $this->input = $input;\n    }\n\n}\n\n$context = new Context();\n\n$list[] = new NonTerminalExpression();\n$list[] = new NonTerminalExpression();\n$list[] = new TerminalExpression();\n\n/* @var $v AbstractExpression */\nforeach ($list as $v) {\n    $v->interpret($context);\n}\n```\n","slug":"design_patten/interperter","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4g004nmv053ifya413","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Interpreter.php\">解释器模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个语言，定义它的文法的一种表示，并定义一个解释器，</span><br><span class=\"line\">这个解释器使用该表示来解释语言中的句子</span><br><span class=\"line\"></span><br><span class=\"line\">当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象表达式，声明一个抽象的解释操作，这个接口为抽象的语法树中所有的节点共享</span></span><br><span class=\"line\"><span class=\"comment\"> * Class AbstractExpression</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;终端解释器&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonTerminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;非终端解释器&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 包含解释器之外的一些全局信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $input;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $output;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOutput</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $output</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setOutput</span>(<span class=\"params\">$output</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;output = $output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInput</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;input;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $input</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setInput</span>(<span class=\"params\">$input</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;input = $input;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\"></span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> NonTerminalExpression();</span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> NonTerminalExpression();</span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> TerminalExpression();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* <span class=\"doctag\">@var</span> $v AbstractExpression */</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($list <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $v-&gt;interpret($context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Interpreter.php\">解释器模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个语言，定义它的文法的一种表示，并定义一个解释器，</span><br><span class=\"line\">这个解释器使用该表示来解释语言中的句子</span><br><span class=\"line\"></span><br><span class=\"line\">当有一个语言需要解释执行，并且你可以将该语言中的句子表示为一个抽象语法树时，可以使用解释器模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象表达式，声明一个抽象的解释操作，这个接口为抽象的语法树中所有的节点共享</span></span><br><span class=\"line\"><span class=\"comment\"> * Class AbstractExpression</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;终端解释器&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonTerminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpret</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;非终端解释器&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 包含解释器之外的一些全局信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $input;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $output;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOutput</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $output</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setOutput</span>(<span class=\"params\">$output</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;output = $output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInput</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;input;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $input</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setInput</span>(<span class=\"params\">$input</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;input = $input;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\"></span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> NonTerminalExpression();</span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> NonTerminalExpression();</span><br><span class=\"line\">$list[] = <span class=\"keyword\">new</span> TerminalExpression();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* <span class=\"doctag\">@var</span> $v AbstractExpression */</span></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($list <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $v-&gt;interpret($context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/13/design-patten-mediator.html","title":"设计模式(13)-中介者模式","keywords":"设计模式,中介者模式","description":"中介者模式","date":"2018-10-13T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[中介者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Mediator.php)\n\n## 简介\n\n```\n用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，\n从而使其耦合松散，而且可以独立地改变它们之间的交互\n\n中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了多对多交互复杂的对象群时，\n不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理\n\n中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象中介者，定义了同事对象到中介者对象的接口\n *\n * Class Mediator\n */\nabstract class Mediator\n{\n    /**\n     * 定义一个抽象方法，得到同事对象和发送消息\n     * @param $message\n     * @param Colleague $colleague\n     * @return mixed\n     */\n    abstract public function send($message, Colleague $colleague);\n}\n\n/**\n * 抽象同事类\n *\n * Class Colleague\n */\nabstract class Colleague\n{\n    /**\n     * @var Mediator\n     */\n    protected $mediator;\n\n    /**\n     * Colleague constructor.\n     * @param $mediator\n     */\n    public function __construct(Mediator $mediator)\n    {\n        $this->mediator = $mediator;\n    }\n\n}\n\n/**\n * 具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类，\n * 并从具体同事接收消息，向具体同事对象发出命令\n *\n * Class ConcreteMediator\n */\nclass ConcreteMediator extends Mediator\n{\n    /**\n     * @var ConcreteColleague1\n     */\n    private $colleague1;\n\n    /**\n     * @var ConcreteColleague2\n     */\n    private $colleague2;\n\n    /**\n     * @param mixed $colleague1\n     */\n    public function setColleague1($colleague1)\n    {\n        $this->colleague1 = $colleague1;\n    }\n\n    /**\n     * @param mixed $colleague2\n     */\n    public function setColleague2($colleague2)\n    {\n        $this->colleague2 = $colleague2;\n    }\n\n    public function send($message, Colleague $colleague)\n    {\n        if ($colleague === $this->colleague1) {\n            $this->colleague2->notify($message);\n        } else {\n            $this->colleague1->notify($message);\n        }\n    }\n\n    /**\n     * @var array 保存所有 Colleague 以对象类名为键\n     */\n    private $colleagueList = [];\n\n    public function setColleague(Colleague $colleague)\n    {\n        $this->colleagueList[get_class($colleague)] = $colleague;\n    }\n\n    public function send1($message, Colleague $colleague)\n    {\n        //$this->colleagueList[get_class($colleague)]->notify($message);\n        $colleague->notify($message);\n    }\n}\n\n/**\n * 具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况\n * 但他们却都认识中介者对象\n *\n * Class ConcreteColleague1\n */\nclass ConcreteColleague1 extends Colleague\n{\n\n    /**\n     * ConcreteColleague1 constructor.\n     */\n    public function __construct(Mediator $mediator)\n    {\n        parent::__construct($mediator);\n    }\n\n    public function send($message)\n    {\n        $this->mediator->send1($message, $this);\n    }\n\n    public function notify($message)\n    {\n        echo '同事1得到消息：' . $message . PHP_EOL;\n    }\n}\n\nclass ConcreteColleague2 extends Colleague\n{\n    /**\n     * ConcreteColleague2 constructor.\n     */\n    public function __construct(Mediator $mediator)\n    {\n        parent::__construct($mediator);\n    }\n\n    public function send($message)\n    {\n        $this->mediator->send1($message, $this);\n    }\n\n    public function notify($message)\n    {\n        echo '同事2得到消息：' . $message . PHP_EOL;\n    }\n}\n\n$m = new ConcreteMediator();\n\n// 让两个具体同事类认识中介者对象\n$c1 = new ConcreteColleague1($m);\n$c2 = new ConcreteColleague2($m);\n\n// 让中介者认识各个具体同事类\n//$m->setColleague1($c1);\n//$m->setColleague2($c2);\n$m->setColleague($c1);\n$m->setColleague($c2);\n\n// 具体同事类发送信息都是通过中介者转发\n$c1->send('吃饭了没');\n$c2->send('没有，你要请客吗');\n\n```\n","source":"_posts/design_patten/mediator.md","raw":"---\nurl: /2018/10/13/design-patten-mediator.html\ntitle: \"设计模式(13)-中介者模式\"\nkeywords: \"设计模式,中介者模式\"\ndescription: \"中介者模式\"\ndate: 2018-10-13T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[中介者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Mediator.php)\n\n## 简介\n\n```\n用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，\n从而使其耦合松散，而且可以独立地改变它们之间的交互\n\n中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了多对多交互复杂的对象群时，\n不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理\n\n中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象中介者，定义了同事对象到中介者对象的接口\n *\n * Class Mediator\n */\nabstract class Mediator\n{\n    /**\n     * 定义一个抽象方法，得到同事对象和发送消息\n     * @param $message\n     * @param Colleague $colleague\n     * @return mixed\n     */\n    abstract public function send($message, Colleague $colleague);\n}\n\n/**\n * 抽象同事类\n *\n * Class Colleague\n */\nabstract class Colleague\n{\n    /**\n     * @var Mediator\n     */\n    protected $mediator;\n\n    /**\n     * Colleague constructor.\n     * @param $mediator\n     */\n    public function __construct(Mediator $mediator)\n    {\n        $this->mediator = $mediator;\n    }\n\n}\n\n/**\n * 具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类，\n * 并从具体同事接收消息，向具体同事对象发出命令\n *\n * Class ConcreteMediator\n */\nclass ConcreteMediator extends Mediator\n{\n    /**\n     * @var ConcreteColleague1\n     */\n    private $colleague1;\n\n    /**\n     * @var ConcreteColleague2\n     */\n    private $colleague2;\n\n    /**\n     * @param mixed $colleague1\n     */\n    public function setColleague1($colleague1)\n    {\n        $this->colleague1 = $colleague1;\n    }\n\n    /**\n     * @param mixed $colleague2\n     */\n    public function setColleague2($colleague2)\n    {\n        $this->colleague2 = $colleague2;\n    }\n\n    public function send($message, Colleague $colleague)\n    {\n        if ($colleague === $this->colleague1) {\n            $this->colleague2->notify($message);\n        } else {\n            $this->colleague1->notify($message);\n        }\n    }\n\n    /**\n     * @var array 保存所有 Colleague 以对象类名为键\n     */\n    private $colleagueList = [];\n\n    public function setColleague(Colleague $colleague)\n    {\n        $this->colleagueList[get_class($colleague)] = $colleague;\n    }\n\n    public function send1($message, Colleague $colleague)\n    {\n        //$this->colleagueList[get_class($colleague)]->notify($message);\n        $colleague->notify($message);\n    }\n}\n\n/**\n * 具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况\n * 但他们却都认识中介者对象\n *\n * Class ConcreteColleague1\n */\nclass ConcreteColleague1 extends Colleague\n{\n\n    /**\n     * ConcreteColleague1 constructor.\n     */\n    public function __construct(Mediator $mediator)\n    {\n        parent::__construct($mediator);\n    }\n\n    public function send($message)\n    {\n        $this->mediator->send1($message, $this);\n    }\n\n    public function notify($message)\n    {\n        echo '同事1得到消息：' . $message . PHP_EOL;\n    }\n}\n\nclass ConcreteColleague2 extends Colleague\n{\n    /**\n     * ConcreteColleague2 constructor.\n     */\n    public function __construct(Mediator $mediator)\n    {\n        parent::__construct($mediator);\n    }\n\n    public function send($message)\n    {\n        $this->mediator->send1($message, $this);\n    }\n\n    public function notify($message)\n    {\n        echo '同事2得到消息：' . $message . PHP_EOL;\n    }\n}\n\n$m = new ConcreteMediator();\n\n// 让两个具体同事类认识中介者对象\n$c1 = new ConcreteColleague1($m);\n$c2 = new ConcreteColleague2($m);\n\n// 让中介者认识各个具体同事类\n//$m->setColleague1($c1);\n//$m->setColleague2($c2);\n$m->setColleague($c1);\n$m->setColleague($c2);\n\n// 具体同事类发送信息都是通过中介者转发\n$c1->send('吃饭了没');\n$c2->send('没有，你要请客吗');\n\n```\n","slug":"design_patten/mediator","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4h004pmv05ajy5006d","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Mediator.php\">中介者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，</span><br><span class=\"line\">从而使其耦合松散，而且可以独立地改变它们之间的交互</span><br><span class=\"line\"></span><br><span class=\"line\">中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了多对多交互复杂的对象群时，</span><br><span class=\"line\">不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理</span><br><span class=\"line\"></span><br><span class=\"line\">中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象中介者，定义了同事对象到中介者对象的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Mediator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个抽象方法，得到同事对象和发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $message</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Colleague $colleague</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象同事类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Colleague</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Mediator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Colleague constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $mediator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator = $mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类，</span></span><br><span class=\"line\"><span class=\"comment\"> * 并从具体同事接收消息，向具体同事对象发出命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteMediator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteColleague1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleague1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteColleague2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleague2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $colleague1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague1</span>(<span class=\"params\">$colleague1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleague1 = $colleague1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $colleague2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague2</span>(<span class=\"params\">$colleague2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleague2 = $colleague2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($colleague === <span class=\"keyword\">$this</span>-&gt;colleague1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;colleague2-&gt;notify($message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;colleague1-&gt;notify($message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有 Colleague 以对象类名为键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleagueList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague</span>(<span class=\"params\">Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleagueList[get_class($colleague)] = $colleague;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send1</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//$this-&gt;colleagueList[get_class($colleague)]-&gt;notify($message);</span></span><br><span class=\"line\">        $colleague-&gt;notify($message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况</span></span><br><span class=\"line\"><span class=\"comment\"> * 但他们却都认识中介者对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteColleague1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteColleague1 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator-&gt;send1($message, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;同事1得到消息：&#x27;</span> . $message . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteColleague2 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator-&gt;send1($message, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;同事2得到消息：&#x27;</span> . $message . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$m = <span class=\"keyword\">new</span> ConcreteMediator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让两个具体同事类认识中介者对象</span></span><br><span class=\"line\">$c1 = <span class=\"keyword\">new</span> ConcreteColleague1($m);</span><br><span class=\"line\">$c2 = <span class=\"keyword\">new</span> ConcreteColleague2($m);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让中介者认识各个具体同事类</span></span><br><span class=\"line\"><span class=\"comment\">//$m-&gt;setColleague1($c1);</span></span><br><span class=\"line\"><span class=\"comment\">//$m-&gt;setColleague2($c2);</span></span><br><span class=\"line\">$m-&gt;setColleague($c1);</span><br><span class=\"line\">$m-&gt;setColleague($c2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体同事类发送信息都是通过中介者转发</span></span><br><span class=\"line\">$c1-&gt;send(<span class=\"string\">&#x27;吃饭了没&#x27;</span>);</span><br><span class=\"line\">$c2-&gt;send(<span class=\"string\">&#x27;没有，你要请客吗&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Mediator.php\">中介者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，</span><br><span class=\"line\">从而使其耦合松散，而且可以独立地改变它们之间的交互</span><br><span class=\"line\"></span><br><span class=\"line\">中介者模式很容易在系统中应用，也很容易在系统中误用。当系统出现了多对多交互复杂的对象群时，</span><br><span class=\"line\">不要急于使用中介者模式，而要先反思你的系统在设计上是不是合理</span><br><span class=\"line\"></span><br><span class=\"line\">中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象中介者，定义了同事对象到中介者对象的接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Mediator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个抽象方法，得到同事对象和发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $message</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Colleague $colleague</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象同事类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Colleague</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Mediator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Colleague constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $mediator</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator = $mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类，</span></span><br><span class=\"line\"><span class=\"comment\"> * 并从具体同事接收消息，向具体同事对象发出命令</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteMediator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteColleague1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleague1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteColleague2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleague2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $colleague1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague1</span>(<span class=\"params\">$colleague1</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleague1 = $colleague1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $colleague2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague2</span>(<span class=\"params\">$colleague2</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleague2 = $colleague2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($colleague === <span class=\"keyword\">$this</span>-&gt;colleague1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;colleague2-&gt;notify($message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;colleague1-&gt;notify($message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有 Colleague 以对象类名为键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $colleagueList = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setColleague</span>(<span class=\"params\">Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;colleagueList[get_class($colleague)] = $colleague;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send1</span>(<span class=\"params\">$message, Colleague $colleague</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//$this-&gt;colleagueList[get_class($colleague)]-&gt;notify($message);</span></span><br><span class=\"line\">        $colleague-&gt;notify($message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况</span></span><br><span class=\"line\"><span class=\"comment\"> * 但他们却都认识中介者对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteColleague1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteColleague1 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator-&gt;send1($message, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;同事1得到消息：&#x27;</span> . $message . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteColleague2 constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Mediator $mediator</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;mediator-&gt;send1($message, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\">$message</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;同事2得到消息：&#x27;</span> . $message . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$m = <span class=\"keyword\">new</span> ConcreteMediator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让两个具体同事类认识中介者对象</span></span><br><span class=\"line\">$c1 = <span class=\"keyword\">new</span> ConcreteColleague1($m);</span><br><span class=\"line\">$c2 = <span class=\"keyword\">new</span> ConcreteColleague2($m);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让中介者认识各个具体同事类</span></span><br><span class=\"line\"><span class=\"comment\">//$m-&gt;setColleague1($c1);</span></span><br><span class=\"line\"><span class=\"comment\">//$m-&gt;setColleague2($c2);</span></span><br><span class=\"line\">$m-&gt;setColleague($c1);</span><br><span class=\"line\">$m-&gt;setColleague($c2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体同事类发送信息都是通过中介者转发</span></span><br><span class=\"line\">$c1-&gt;send(<span class=\"string\">&#x27;吃饭了没&#x27;</span>);</span><br><span class=\"line\">$c2-&gt;send(<span class=\"string\">&#x27;没有，你要请客吗&#x27;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/11/design-patten-flyweight.html","title":"设计模式(11)-享元模式","keywords":"设计模式,享元模式","description":"享元模式","date":"2018-10-11T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[享元模式](https://github.com/wenjy/design_patten_php/blob/master/src/Flyweight.php)\n\n## 简介\n\n```\n运用共享技术有效地支持大量细粒度的对象\n\n享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。\n如果发现这些实例除了几个参数外基本都是相同的，有时就能够大幅度地减少需要实例化的类的数量。\n如果能把那些参数移到类实例外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。\n\n如果一个应用程序使用了大量的对象，而大量的对象造成了很大的存储开销时，就应该考虑使用；\n还有就是对象大多数状态可以外部状态，如果删除对象的外部状态，那么可以使用相当较少的共享对象取代很多组对象。\n此时可以考虑使用享元模式。\n```\n\n## 代码示例\n\n```php\n<?php\nclass User\n{\n    private $name;\n\n    /**\n     * User constructor.\n     * @param $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n}\n\n/**\n * 所有具体享元类的超类或接口\n *\n * Class WebSite\n */\nabstract class WebSite\n{\n    abstract public function use1(User $user);\n}\n\nclass ConcreteWebSite extends WebSite\n{\n    private $name = '';\n\n    /**\n     * WebSite constructor.\n     * @param string $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function use1(User $user)\n    {\n        echo '网站分类：' . $this->name . '用户：' . $user->getName() . PHP_EOL;\n    }\n}\n\n/**\n * 一个享元工厂，用来创建并管理 WebSite 对象。它主要是用来确保合理的共享 WebSite\n * 当用户请求一个 WebSite 对象时，提供一个已创建的实例（不存在则创建）\n *\n * Class WebSiteFactory\n */\nclass WebSiteFactory\n{\n    /**\n     * @var array 保存所有的对象\n     */\n    private $flyweights = [];\n\n    public function getWebSiteCategory($key)\n    {\n        if (!isset($this->flyweights[$key])) {\n            $this->flyweights[$key] = new ConcreteWebSite($key);\n            return $this->flyweights[$key];\n        }\n        return null;\n    }\n\n    public function getWebSiteCount()\n    {\n        return count($this->flyweights);\n    }\n}\n\n$f = new WebSiteFactory();\n\n$fx = $f->getWebSiteCategory('产品展示');\n$fx->use1(new User('小菜'));\n```\n","source":"_posts/design_patten/flyweight.md","raw":"---\nurl: /2018/10/11/design-patten-flyweight.html\ntitle: \"设计模式(11)-享元模式\"\nkeywords: \"设计模式,享元模式\"\ndescription: \"享元模式\"\ndate: 2018-10-11T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[享元模式](https://github.com/wenjy/design_patten_php/blob/master/src/Flyweight.php)\n\n## 简介\n\n```\n运用共享技术有效地支持大量细粒度的对象\n\n享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。\n如果发现这些实例除了几个参数外基本都是相同的，有时就能够大幅度地减少需要实例化的类的数量。\n如果能把那些参数移到类实例外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。\n\n如果一个应用程序使用了大量的对象，而大量的对象造成了很大的存储开销时，就应该考虑使用；\n还有就是对象大多数状态可以外部状态，如果删除对象的外部状态，那么可以使用相当较少的共享对象取代很多组对象。\n此时可以考虑使用享元模式。\n```\n\n## 代码示例\n\n```php\n<?php\nclass User\n{\n    private $name;\n\n    /**\n     * User constructor.\n     * @param $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n}\n\n/**\n * 所有具体享元类的超类或接口\n *\n * Class WebSite\n */\nabstract class WebSite\n{\n    abstract public function use1(User $user);\n}\n\nclass ConcreteWebSite extends WebSite\n{\n    private $name = '';\n\n    /**\n     * WebSite constructor.\n     * @param string $name\n     */\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function use1(User $user)\n    {\n        echo '网站分类：' . $this->name . '用户：' . $user->getName() . PHP_EOL;\n    }\n}\n\n/**\n * 一个享元工厂，用来创建并管理 WebSite 对象。它主要是用来确保合理的共享 WebSite\n * 当用户请求一个 WebSite 对象时，提供一个已创建的实例（不存在则创建）\n *\n * Class WebSiteFactory\n */\nclass WebSiteFactory\n{\n    /**\n     * @var array 保存所有的对象\n     */\n    private $flyweights = [];\n\n    public function getWebSiteCategory($key)\n    {\n        if (!isset($this->flyweights[$key])) {\n            $this->flyweights[$key] = new ConcreteWebSite($key);\n            return $this->flyweights[$key];\n        }\n        return null;\n    }\n\n    public function getWebSiteCount()\n    {\n        return count($this->flyweights);\n    }\n}\n\n$f = new WebSiteFactory();\n\n$fx = $f->getWebSiteCategory('产品展示');\n$fx->use1(new User('小菜'));\n```\n","slug":"design_patten/flyweight","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4j004tmv054qplcegt","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Flyweight.php\">享元模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运用共享技术有效地支持大量细粒度的对象</span><br><span class=\"line\"></span><br><span class=\"line\">享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。</span><br><span class=\"line\">如果发现这些实例除了几个参数外基本都是相同的，有时就能够大幅度地减少需要实例化的类的数量。</span><br><span class=\"line\">如果能把那些参数移到类实例外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。</span><br><span class=\"line\"></span><br><span class=\"line\">如果一个应用程序使用了大量的对象，而大量的对象造成了很大的存储开销时，就应该考虑使用；</span><br><span class=\"line\">还有就是对象大多数状态可以外部状态，如果删除对象的外部状态，那么可以使用相当较少的共享对象取代很多组对象。</span><br><span class=\"line\">此时可以考虑使用享元模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * User constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有具体享元类的超类或接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class WebSite</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSite</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">use1</span>(<span class=\"params\">User $user</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteWebSite</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSite</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * WebSite constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">use1</span>(<span class=\"params\">User $user</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;网站分类：&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;用户：&#x27;</span> . $user-&gt;getName() . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个享元工厂，用来创建并管理 WebSite 对象。它主要是用来确保合理的共享 WebSite</span></span><br><span class=\"line\"><span class=\"comment\"> * 当用户请求一个 WebSite 对象时，提供一个已创建的实例（不存在则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class WebSiteFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSiteFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $flyweights = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebSiteCategory</span>(<span class=\"params\">$key</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;flyweights[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;flyweights[$key] = <span class=\"keyword\">new</span> ConcreteWebSite($key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;flyweights[$key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebSiteCount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count(<span class=\"keyword\">$this</span>-&gt;flyweights);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f = <span class=\"keyword\">new</span> WebSiteFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">$fx = $f-&gt;getWebSiteCategory(<span class=\"string\">&#x27;产品展示&#x27;</span>);</span><br><span class=\"line\">$fx-&gt;use1(<span class=\"keyword\">new</span> User(<span class=\"string\">&#x27;小菜&#x27;</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Flyweight.php\">享元模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运用共享技术有效地支持大量细粒度的对象</span><br><span class=\"line\"></span><br><span class=\"line\">享元模式可以避免大量非常相似类的开销，在程序设计中，有时需要生成大量细粒度的类实例来展示数据。</span><br><span class=\"line\">如果发现这些实例除了几个参数外基本都是相同的，有时就能够大幅度地减少需要实例化的类的数量。</span><br><span class=\"line\">如果能把那些参数移到类实例外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。</span><br><span class=\"line\"></span><br><span class=\"line\">如果一个应用程序使用了大量的对象，而大量的对象造成了很大的存储开销时，就应该考虑使用；</span><br><span class=\"line\">还有就是对象大多数状态可以外部状态，如果删除对象的外部状态，那么可以使用相当较少的共享对象取代很多组对象。</span><br><span class=\"line\">此时可以考虑使用享元模式。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * User constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有具体享元类的超类或接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class WebSite</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSite</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">use1</span>(<span class=\"params\">User $user</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteWebSite</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSite</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * WebSite constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">use1</span>(<span class=\"params\">User $user</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;网站分类：&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;用户：&#x27;</span> . $user-&gt;getName() . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个享元工厂，用来创建并管理 WebSite 对象。它主要是用来确保合理的共享 WebSite</span></span><br><span class=\"line\"><span class=\"comment\"> * 当用户请求一个 WebSite 对象时，提供一个已创建的实例（不存在则创建）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class WebSiteFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSiteFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array 保存所有的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $flyweights = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebSiteCategory</span>(<span class=\"params\">$key</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;flyweights[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;flyweights[$key] = <span class=\"keyword\">new</span> ConcreteWebSite($key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;flyweights[$key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWebSiteCount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count(<span class=\"keyword\">$this</span>-&gt;flyweights);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$f = <span class=\"keyword\">new</span> WebSiteFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">$fx = $f-&gt;getWebSiteCategory(<span class=\"string\">&#x27;产品展示&#x27;</span>);</span><br><span class=\"line\">$fx-&gt;use1(<span class=\"keyword\">new</span> User(<span class=\"string\">&#x27;小菜&#x27;</span>));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/14/design-patten-memento.html","title":"设计模式(14)-备忘录模式","keywords":"设计模式,备忘录模式","description":"备忘录模式","date":"2018-10-14T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[备忘录模式](https://github.com/wenjy/design_patten_php/blob/master/src/Memento.php)\n\n## 简介\n\n```\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。\n这样以后就可以将该对象恢复都原先保存的状态。\n\n备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性\n只是众多属性中的一小部分时， Originator 可以根据保存的 Memento 信息还原到前一状态。\n\n如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储\n可撤销操作的状态。\n\n当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时储存起来的备忘录将状态复原\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 负责创建一个备忘录 Memento 用以记录当前时刻它的内部状态，并可以使用备忘录恢复内部状态\n *\n * Class Originator\n */\nclass Originator\n{\n    private $state;\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n    /**\n     * @param mixed $state\n     */\n    public function setState($state)\n    {\n        $this->state = $state;\n    }\n\n    public function createMemento()\n    {\n        return (new Memento($this->state));\n    }\n\n    public function setMemento(Memento $memento)\n    {\n        $this->state = $memento->getState();\n    }\n\n    public function show()\n    {\n        echo 'State:' . $this->state . PHP_EOL;\n    }\n}\n\n/**\n * 负责存储 Originator 对象的内部状态，并可以防止 Originator 以外的其他对象访问备忘录 Memento\n *\n * Class Memento\n */\nclass Memento\n{\n    private $state;\n\n    /**\n     * Memento constructor.\n     * @param $state\n     */\n    public function __construct($state)\n    {\n        $this->state = $state;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n}\n\n/**\n * 负责保存备忘录 Memento\n *\n * Class Caretaker\n */\nclass Caretaker\n{\n    private $memento;\n\n    /**\n     * @return mixed\n     */\n    public function getMemento()\n    {\n        return $this->memento;\n    }\n\n    /**\n     * @param mixed $memento\n     */\n    public function setMemento($memento)\n    {\n        $this->memento = $memento;\n    }\n\n}\n\n// 初始状态\n$o = new Originator();\n$o->setState('on');\n$o->show();\n\n// 保存备忘录\n$c = new Caretaker();\n$c->setMemento($o->createMemento());\n\n// 结束状态\n$o->setState('off');\n$o->show();\n\n// 还原状态\n$o->setMemento($c->getMemento());\n$o->show();\n```\n","source":"_posts/design_patten/memento.md","raw":"---\nurl: /2018/10/14/design-patten-memento.html\ntitle: \"设计模式(14)-备忘录模式\"\nkeywords: \"设计模式,备忘录模式\"\ndescription: \"备忘录模式\"\ndate: 2018-10-14T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[备忘录模式](https://github.com/wenjy/design_patten_php/blob/master/src/Memento.php)\n\n## 简介\n\n```\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。\n这样以后就可以将该对象恢复都原先保存的状态。\n\n备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性\n只是众多属性中的一小部分时， Originator 可以根据保存的 Memento 信息还原到前一状态。\n\n如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储\n可撤销操作的状态。\n\n当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时储存起来的备忘录将状态复原\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 负责创建一个备忘录 Memento 用以记录当前时刻它的内部状态，并可以使用备忘录恢复内部状态\n *\n * Class Originator\n */\nclass Originator\n{\n    private $state;\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n    /**\n     * @param mixed $state\n     */\n    public function setState($state)\n    {\n        $this->state = $state;\n    }\n\n    public function createMemento()\n    {\n        return (new Memento($this->state));\n    }\n\n    public function setMemento(Memento $memento)\n    {\n        $this->state = $memento->getState();\n    }\n\n    public function show()\n    {\n        echo 'State:' . $this->state . PHP_EOL;\n    }\n}\n\n/**\n * 负责存储 Originator 对象的内部状态，并可以防止 Originator 以外的其他对象访问备忘录 Memento\n *\n * Class Memento\n */\nclass Memento\n{\n    private $state;\n\n    /**\n     * Memento constructor.\n     * @param $state\n     */\n    public function __construct($state)\n    {\n        $this->state = $state;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n}\n\n/**\n * 负责保存备忘录 Memento\n *\n * Class Caretaker\n */\nclass Caretaker\n{\n    private $memento;\n\n    /**\n     * @return mixed\n     */\n    public function getMemento()\n    {\n        return $this->memento;\n    }\n\n    /**\n     * @param mixed $memento\n     */\n    public function setMemento($memento)\n    {\n        $this->memento = $memento;\n    }\n\n}\n\n// 初始状态\n$o = new Originator();\n$o->setState('on');\n$o->show();\n\n// 保存备忘录\n$c = new Caretaker();\n$c->setMemento($o->createMemento());\n\n// 结束状态\n$o->setState('off');\n$o->show();\n\n// 还原状态\n$o->setMemento($c->getMemento());\n$o->show();\n```\n","slug":"design_patten/memento","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4k004umv055mol7hfj","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Memento.php\">备忘录模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</span><br><span class=\"line\">这样以后就可以将该对象恢复都原先保存的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性</span><br><span class=\"line\">只是众多属性中的一小部分时， Originator 可以根据保存的 Memento 信息还原到前一状态。</span><br><span class=\"line\"></span><br><span class=\"line\">如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储</span><br><span class=\"line\">可撤销操作的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时储存起来的备忘录将状态复原</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责创建一个备忘录 Memento 用以记录当前时刻它的内部状态，并可以使用备忘录恢复内部状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Originator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Originator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMemento</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Memento(<span class=\"keyword\">$this</span>-&gt;state));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMemento</span>(<span class=\"params\">Memento $memento</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $memento-&gt;getState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;State:&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;state . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责存储 Originator 对象的内部状态，并可以防止 Originator 以外的其他对象访问备忘录 Memento</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Memento</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Memento constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责保存备忘录 Memento</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Caretaker</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Caretaker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $memento;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMemento</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $memento</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMemento</span>(<span class=\"params\">$memento</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;memento = $memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> Originator();</span><br><span class=\"line\">$o-&gt;setState(<span class=\"string\">&#x27;on&#x27;</span>);</span><br><span class=\"line\">$o-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存备忘录</span></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> Caretaker();</span><br><span class=\"line\">$c-&gt;setMemento($o-&gt;createMemento());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结束状态</span></span><br><span class=\"line\">$o-&gt;setState(<span class=\"string\">&#x27;off&#x27;</span>);</span><br><span class=\"line\">$o-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还原状态</span></span><br><span class=\"line\">$o-&gt;setMemento($c-&gt;getMemento());</span><br><span class=\"line\">$o-&gt;show();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Memento.php\">备忘录模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</span><br><span class=\"line\">这样以后就可以将该对象恢复都原先保存的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性</span><br><span class=\"line\">只是众多属性中的一小部分时， Originator 可以根据保存的 Memento 信息还原到前一状态。</span><br><span class=\"line\"></span><br><span class=\"line\">如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储</span><br><span class=\"line\">可撤销操作的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">当角色的状态改变的时候，有可能这个状态无效，这时候就可以使用暂时储存起来的备忘录将状态复原</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责创建一个备忘录 Memento 用以记录当前时刻它的内部状态，并可以使用备忘录恢复内部状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Originator</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Originator</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMemento</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> Memento(<span class=\"keyword\">$this</span>-&gt;state));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMemento</span>(<span class=\"params\">Memento $memento</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $memento-&gt;getState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;State:&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;state . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责存储 Originator 对象的内部状态，并可以防止 Originator 以外的其他对象访问备忘录 Memento</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Memento</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Memento constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 负责保存备忘录 Memento</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Caretaker</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Caretaker</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $memento;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMemento</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $memento</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setMemento</span>(<span class=\"params\">$memento</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;memento = $memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> Originator();</span><br><span class=\"line\">$o-&gt;setState(<span class=\"string\">&#x27;on&#x27;</span>);</span><br><span class=\"line\">$o-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存备忘录</span></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> Caretaker();</span><br><span class=\"line\">$c-&gt;setMemento($o-&gt;createMemento());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结束状态</span></span><br><span class=\"line\">$o-&gt;setState(<span class=\"string\">&#x27;off&#x27;</span>);</span><br><span class=\"line\">$o-&gt;show();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还原状态</span></span><br><span class=\"line\">$o-&gt;setMemento($c-&gt;getMemento());</span><br><span class=\"line\">$o-&gt;show();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/15/design-patten-observer.html","title":"设计模式(15)-观察者模式","keywords":"设计模式,观察者模式","description":"观察者模式","date":"2018-10-15T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[观察者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Observer.php)\n\n## 简介\n\n```\n定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。\n这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\nSubject 类，它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者，\n抽象主题提供一个接口，可以增加和删除观察对象\n\n将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。\n而我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用带来不便。\n\n当一个对象改变需要同时改变其他对象的时候，而且他不知道具体有多少对象有待改变时，应该考虑使用此模式。\n\n当一个抽象模型有两个方面，其中一方面依赖另一方面，这时用观察者模式可以将这两者封装在独立地对象中\n使它们各自独立地改变和复用。\n\n观察者模式所做得工作其实就是在解除耦合，让耦合的双方都能依赖于抽象。而不是依赖具体\n从而使得各自的变化都不会影响另一边的变化。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。\n * 抽象主题提供一个接口，可以增加和删除观察者对象\n *\n * Class MySubject\n */\nabstract class MySubject\n{\n    private $list = [];\n\n    public function attach($observer)\n    {\n        $this->list[] = $observer;\n    }\n\n    public function detach($observer)\n    {\n        $key = array_search($observer, $this->list);\n        if ($key !== false && array_key_exists($key, $this->list)) {\n            unset($this->list[$key]);\n        }\n    }\n\n    public function notify()\n    {\n        foreach ($this->list as $observer) {\n            $observer->update();\n        }\n    }\n}\n\n/**\n * Observer 类，抽象观察者，为所有的具体观察者对象定义一个接口，在得到主题的通知时更新自己\n *\n * Class Observer\n */\nabstract class Observer\n{\n    abstract public function update();\n}\n\n/**\n * 具体主题，将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知\n *\n * Class ConcreteSubject\n */\nclass ConcreteSubject extends MySubject\n{\n    /**\n     * 具体被观察者状态\n     */\n    private $subjectState;\n\n    /**\n     * @return mixed\n     */\n    public function getSubjectState()\n    {\n        return $this->subjectState;\n    }\n\n    /**\n     * @param mixed $subjectState\n     */\n    public function setSubjectState($subjectState)\n    {\n        $this->subjectState = $subjectState;\n    }\n\n}\n\n/**\n * 具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调\n *\n * Class ConcreteObserver\n */\nclass ConcreteObserver extends Observer\n{\n    private $name;\n    private $observerState;\n\n    /**\n     * @var ConcreteSubject\n     */\n    private $subject;\n\n    /**\n     * ConcreteObserver constructor.\n     * @param $name\n     */\n    public function __construct(ConcreteSubject $subject, $name)\n    {\n        $this->subject = $subject;\n        $this->name = $name;\n    }\n\n    public function update()\n    {\n        $this->observerState = $this->subject->getSubjectState();\n        echo '观察者' . $this->name . '的新状态是' . $this->observerState . PHP_EOL;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getSubject()\n    {\n        return $this->subject;\n    }\n\n    /**\n     * @param mixed $subject\n     */\n    public function setSubject($subject)\n    {\n        $this->subject = $subject;\n    }\n\n}\n\n// 实例化主题\n$s = new ConcreteSubject();\n// 给主题添加观察者\n$s->attach(new ConcreteObserver($s, 'X'));\n$s->attach(new ConcreteObserver($s, 'Y'));\n$s->attach(new ConcreteObserver($s, 'Z'));\n\n// 设置主题状态\n$s->setSubjectState('ABC');\n// 通知所有观察者\n$s->notify();\n\n/**\n * PHP spl\n * Class MySplSubject\n */\nclass MySplSubject implements SplSubject\n{\n    private $subjectState;\n    private $observers;\n\n    public function __construct()\n    {\n        $this->observers = new SplObjectStorage();\n    }\n\n    public function attach(SplObserver $observer)\n    {\n        $this->observers->attach($observer);\n    }\n\n    public function detach(SplObserver $observer)\n    {\n        $this->observers->detach($observer);\n    }\n\n    public function notify()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n        }\n    }\n\n    public function getSubjectState()\n    {\n        return $this->subjectState;\n    }\n\n    public function setSubjectState($subjectState)\n    {\n        $this->subjectState = $subjectState;\n    }\n}\n\nclass MySplObserver implements SplObserver\n{\n    private $name;\n    private $observerState;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function setObserverState($observerState)\n    {\n        $this->observerState = $observerState;\n    }\n\n    public function update(SplSubject $subject)\n    {\n\n        $this->observerState = $subject->getSubjectState();\n        echo '观察者' . $this->name . '的新状态是' . $this->observerState . PHP_EOL;\n    }\n}\n\n// 实例化主题\n$s = new MySplSubject();\n// 给主题添加观察者\n$s->attach(new MySplObserver('X'));\n$s->attach(new MySplObserver('Y'));\n$s->attach(new MySplObserver('Z'));\n\n// 设置主题状态\n$s->setSubjectState('ABC');\n// 通知所有观察者\n$s->notify();\n```\n","source":"_posts/design_patten/observer.md","raw":"---\nurl: /2018/10/15/design-patten-observer.html\ntitle: \"设计模式(15)-观察者模式\"\nkeywords: \"设计模式,观察者模式\"\ndescription: \"观察者模式\"\ndate: 2018-10-15T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[观察者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Observer.php)\n\n## 简介\n\n```\n定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。\n这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\nSubject 类，它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者，\n抽象主题提供一个接口，可以增加和删除观察对象\n\n将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。\n而我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用带来不便。\n\n当一个对象改变需要同时改变其他对象的时候，而且他不知道具体有多少对象有待改变时，应该考虑使用此模式。\n\n当一个抽象模型有两个方面，其中一方面依赖另一方面，这时用观察者模式可以将这两者封装在独立地对象中\n使它们各自独立地改变和复用。\n\n观察者模式所做得工作其实就是在解除耦合，让耦合的双方都能依赖于抽象。而不是依赖具体\n从而使得各自的变化都不会影响另一边的变化。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。\n * 抽象主题提供一个接口，可以增加和删除观察者对象\n *\n * Class MySubject\n */\nabstract class MySubject\n{\n    private $list = [];\n\n    public function attach($observer)\n    {\n        $this->list[] = $observer;\n    }\n\n    public function detach($observer)\n    {\n        $key = array_search($observer, $this->list);\n        if ($key !== false && array_key_exists($key, $this->list)) {\n            unset($this->list[$key]);\n        }\n    }\n\n    public function notify()\n    {\n        foreach ($this->list as $observer) {\n            $observer->update();\n        }\n    }\n}\n\n/**\n * Observer 类，抽象观察者，为所有的具体观察者对象定义一个接口，在得到主题的通知时更新自己\n *\n * Class Observer\n */\nabstract class Observer\n{\n    abstract public function update();\n}\n\n/**\n * 具体主题，将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知\n *\n * Class ConcreteSubject\n */\nclass ConcreteSubject extends MySubject\n{\n    /**\n     * 具体被观察者状态\n     */\n    private $subjectState;\n\n    /**\n     * @return mixed\n     */\n    public function getSubjectState()\n    {\n        return $this->subjectState;\n    }\n\n    /**\n     * @param mixed $subjectState\n     */\n    public function setSubjectState($subjectState)\n    {\n        $this->subjectState = $subjectState;\n    }\n\n}\n\n/**\n * 具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调\n *\n * Class ConcreteObserver\n */\nclass ConcreteObserver extends Observer\n{\n    private $name;\n    private $observerState;\n\n    /**\n     * @var ConcreteSubject\n     */\n    private $subject;\n\n    /**\n     * ConcreteObserver constructor.\n     * @param $name\n     */\n    public function __construct(ConcreteSubject $subject, $name)\n    {\n        $this->subject = $subject;\n        $this->name = $name;\n    }\n\n    public function update()\n    {\n        $this->observerState = $this->subject->getSubjectState();\n        echo '观察者' . $this->name . '的新状态是' . $this->observerState . PHP_EOL;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getSubject()\n    {\n        return $this->subject;\n    }\n\n    /**\n     * @param mixed $subject\n     */\n    public function setSubject($subject)\n    {\n        $this->subject = $subject;\n    }\n\n}\n\n// 实例化主题\n$s = new ConcreteSubject();\n// 给主题添加观察者\n$s->attach(new ConcreteObserver($s, 'X'));\n$s->attach(new ConcreteObserver($s, 'Y'));\n$s->attach(new ConcreteObserver($s, 'Z'));\n\n// 设置主题状态\n$s->setSubjectState('ABC');\n// 通知所有观察者\n$s->notify();\n\n/**\n * PHP spl\n * Class MySplSubject\n */\nclass MySplSubject implements SplSubject\n{\n    private $subjectState;\n    private $observers;\n\n    public function __construct()\n    {\n        $this->observers = new SplObjectStorage();\n    }\n\n    public function attach(SplObserver $observer)\n    {\n        $this->observers->attach($observer);\n    }\n\n    public function detach(SplObserver $observer)\n    {\n        $this->observers->detach($observer);\n    }\n\n    public function notify()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n        }\n    }\n\n    public function getSubjectState()\n    {\n        return $this->subjectState;\n    }\n\n    public function setSubjectState($subjectState)\n    {\n        $this->subjectState = $subjectState;\n    }\n}\n\nclass MySplObserver implements SplObserver\n{\n    private $name;\n    private $observerState;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function setObserverState($observerState)\n    {\n        $this->observerState = $observerState;\n    }\n\n    public function update(SplSubject $subject)\n    {\n\n        $this->observerState = $subject->getSubjectState();\n        echo '观察者' . $this->name . '的新状态是' . $this->observerState . PHP_EOL;\n    }\n}\n\n// 实例化主题\n$s = new MySplSubject();\n// 给主题添加观察者\n$s->attach(new MySplObserver('X'));\n$s->attach(new MySplObserver('Y'));\n$s->attach(new MySplObserver('Z'));\n\n// 设置主题状态\n$s->setSubjectState('ABC');\n// 通知所有观察者\n$s->notify();\n```\n","slug":"design_patten/observer","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4m004zmv054hg4h7cb","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Observer.php\">观察者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。</span><br><span class=\"line\">这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</span><br><span class=\"line\"></span><br><span class=\"line\">Subject 类，它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者，</span><br><span class=\"line\">抽象主题提供一个接口，可以增加和删除观察对象</span><br><span class=\"line\"></span><br><span class=\"line\">将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。</span><br><span class=\"line\">而我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用带来不便。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个对象改变需要同时改变其他对象的时候，而且他不知道具体有多少对象有待改变时，应该考虑使用此模式。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个抽象模型有两个方面，其中一方面依赖另一方面，这时用观察者模式可以将这两者封装在独立地对象中</span><br><span class=\"line\">使它们各自独立地改变和复用。</span><br><span class=\"line\"></span><br><span class=\"line\">观察者模式所做得工作其实就是在解除耦合，让耦合的双方都能依赖于抽象。而不是依赖具体</span><br><span class=\"line\">从而使得各自的变化都不会影响另一边的变化。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象主题提供一个接口，可以增加和删除观察者对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class MySubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\">$observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;list[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\">$observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = array_search($observer, <span class=\"keyword\">$this</span>-&gt;list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($key !== <span class=\"literal\">false</span> &amp;&amp; array_key_exists($key, <span class=\"keyword\">$this</span>-&gt;list)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;list[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;list <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Observer 类，抽象观察者，为所有的具体观察者对象定义一个接口，在得到主题的通知时更新自己</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Observer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体主题，将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">MySubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体被观察者状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subjectState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubjectState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $subjectState</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubjectState</span>(<span class=\"params\">$subjectState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subjectState = $subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteObserver</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observerState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteSubject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteObserver constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">ConcreteSubject $subject, $name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subject = $subject;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = <span class=\"keyword\">$this</span>-&gt;subject-&gt;getSubjectState();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;观察者&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;的新状态是&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;observerState . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubject</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $subject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubject</span>(<span class=\"params\">$subject</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subject = $subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化主题</span></span><br><span class=\"line\">$s = <span class=\"keyword\">new</span> ConcreteSubject();</span><br><span class=\"line\"><span class=\"comment\">// 给主题添加观察者</span></span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;X&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;Y&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;Z&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置主题状态</span></span><br><span class=\"line\">$s-&gt;setSubjectState(<span class=\"string\">&#x27;ABC&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 通知所有观察者</span></span><br><span class=\"line\">$s-&gt;notify();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP spl</span></span><br><span class=\"line\"><span class=\"comment\"> * Class MySplSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySplSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">SplSubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subjectState;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers = <span class=\"keyword\">new</span> <span class=\"built_in\">SplObjectStorage</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\"><span class=\"built_in\">SplObserver</span> $observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers-&gt;attach($observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\"><span class=\"built_in\">SplObserver</span> $observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers-&gt;detach($observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;observers <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubjectState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubjectState</span>(<span class=\"params\">$subjectState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subjectState = $subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySplObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">SplObserver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observerState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setObserverState</span>(<span class=\"params\">$observerState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = $observerState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"><span class=\"built_in\">SplSubject</span> $subject</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = $subject-&gt;getSubjectState();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;观察者&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;的新状态是&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;observerState . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化主题</span></span><br><span class=\"line\">$s = <span class=\"keyword\">new</span> MySplSubject();</span><br><span class=\"line\"><span class=\"comment\">// 给主题添加观察者</span></span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;X&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;Y&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;Z&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置主题状态</span></span><br><span class=\"line\">$s-&gt;setSubjectState(<span class=\"string\">&#x27;ABC&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 通知所有观察者</span></span><br><span class=\"line\">$s-&gt;notify();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Observer.php\">观察者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象。</span><br><span class=\"line\">这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</span><br><span class=\"line\"></span><br><span class=\"line\">Subject 类，它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者，</span><br><span class=\"line\">抽象主题提供一个接口，可以增加和删除观察对象</span><br><span class=\"line\"></span><br><span class=\"line\">将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。</span><br><span class=\"line\">而我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用带来不便。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个对象改变需要同时改变其他对象的时候，而且他不知道具体有多少对象有待改变时，应该考虑使用此模式。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个抽象模型有两个方面，其中一方面依赖另一方面，这时用观察者模式可以将这两者封装在独立地对象中</span><br><span class=\"line\">使它们各自独立地改变和复用。</span><br><span class=\"line\"></span><br><span class=\"line\">观察者模式所做得工作其实就是在解除耦合，让耦合的双方都能依赖于抽象。而不是依赖具体</span><br><span class=\"line\">从而使得各自的变化都不会影响另一边的变化。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 它把所有对观察者对象的引用保存在一个聚集里，每个主题都可以有任何数量的观察者。</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象主题提供一个接口，可以增加和删除观察者对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class MySubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $list = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\">$observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;list[] = $observer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\">$observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = array_search($observer, <span class=\"keyword\">$this</span>-&gt;list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($key !== <span class=\"literal\">false</span> &amp;&amp; array_key_exists($key, <span class=\"keyword\">$this</span>-&gt;list)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;list[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;list <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Observer 类，抽象观察者，为所有的具体观察者对象定义一个接口，在得到主题的通知时更新自己</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Observer</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体主题，将有关状态存入具体观察者对象，在具体主题的内部状态改变时，给所有登记过的观察者发出通知</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">MySubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体被观察者状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subjectState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubjectState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $subjectState</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubjectState</span>(<span class=\"params\">$subjectState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subjectState = $subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体观察者，实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteObserver</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observerState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> ConcreteSubject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ConcreteObserver constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">ConcreteSubject $subject, $name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subject = $subject;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = <span class=\"keyword\">$this</span>-&gt;subject-&gt;getSubjectState();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;观察者&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;的新状态是&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;observerState . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubject</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $subject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubject</span>(<span class=\"params\">$subject</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subject = $subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化主题</span></span><br><span class=\"line\">$s = <span class=\"keyword\">new</span> ConcreteSubject();</span><br><span class=\"line\"><span class=\"comment\">// 给主题添加观察者</span></span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;X&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;Y&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> ConcreteObserver($s, <span class=\"string\">&#x27;Z&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置主题状态</span></span><br><span class=\"line\">$s-&gt;setSubjectState(<span class=\"string\">&#x27;ABC&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 通知所有观察者</span></span><br><span class=\"line\">$s-&gt;notify();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * PHP spl</span></span><br><span class=\"line\"><span class=\"comment\"> * Class MySplSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySplSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">SplSubject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $subjectState;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers = <span class=\"keyword\">new</span> <span class=\"built_in\">SplObjectStorage</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\"><span class=\"built_in\">SplObserver</span> $observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers-&gt;attach($observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\"><span class=\"built_in\">SplObserver</span> $observer</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observers-&gt;detach($observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;observers <span class=\"keyword\">as</span> $observer) &#123;</span><br><span class=\"line\">            $observer-&gt;update(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubjectState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setSubjectState</span>(<span class=\"params\">$subjectState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subjectState = $subjectState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySplObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">SplObserver</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $observerState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$name</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setObserverState</span>(<span class=\"params\">$observerState</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = $observerState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"><span class=\"built_in\">SplSubject</span> $subject</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;observerState = $subject-&gt;getSubjectState();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;观察者&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">&#x27;的新状态是&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;observerState . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化主题</span></span><br><span class=\"line\">$s = <span class=\"keyword\">new</span> MySplSubject();</span><br><span class=\"line\"><span class=\"comment\">// 给主题添加观察者</span></span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;X&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;Y&#x27;</span>));</span><br><span class=\"line\">$s-&gt;attach(<span class=\"keyword\">new</span> MySplObserver(<span class=\"string\">&#x27;Z&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置主题状态</span></span><br><span class=\"line\">$s-&gt;setSubjectState(<span class=\"string\">&#x27;ABC&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 通知所有观察者</span></span><br><span class=\"line\">$s-&gt;notify();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/16/design-patten-operation.html","title":"设计模式(16)-简单工厂模式","keywords":"设计模式,简单工厂模式","description":"简单工厂模式","date":"2018-10-16T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[简单工厂模式](https://github.com/wenjy/design_patten_php/blob/master/src/Operation.php)\n\n## 简介\n\n```\n根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 简单工厂模式\n *\n * 用一个工厂来创建我们所需要的类\n *\n * Class Operation\n */\nclass Operation\n{\n    /**\n     * @var int\n     */\n    private $numberA = 0;\n\n    /**\n     * @var int\n     */\n    private $numberB = 0;\n\n    /**\n     * @return int\n     */\n    public function getNumberA()\n    {\n        return $this->numberA;\n    }\n\n    /**\n     * @param int $numberA\n     */\n    public function setNumberA($numberA)\n    {\n        $this->numberA = $numberA;\n    }\n\n    /**\n     * @return int\n     */\n    public function getNumberB()\n    {\n        return $this->numberB;\n    }\n\n    /**\n     * @param int $numberB\n     */\n    public function setNumberB($numberB)\n    {\n        $this->numberB = $numberB;\n    }\n\n    /**\n     * 这是要被子类覆写的方法\n     *\n     * @return int\n     * @author jiangyi\n     */\n    public function getResult()\n    {\n        return 0;\n    }\n}\n\n/**\n * 加法实现\n *\n * Class OperationAdd\n */\nclass OperationAdd extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() + $this->getNumberB();\n    }\n}\n\n/**\n * 减法实现\n *\n * Class OperationSub\n */\nclass OperationSub extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() - $this->getNumberB();\n    }\n}\n\n/**\n * 乘法实现\n *\n * Class OperationMul\n */\nclass OperationMul extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() * $this->getNumberB();\n    }\n}\n\n/**\n * 除法实现\n *\n * Class OperationDiv\n *\n */\nclass OperationDiv extends Operation\n{\n    public function getResult()\n    {\n        if ($this->getNumberB() == 0) {\n            throw new Exception('除数不能为0');\n        }\n        return $this->getNumberA() / $this->getNumberB();\n    }\n}\n\n/**\n * 工厂类\n * 根据相应的运算符new出想要的对象\n *\n * Class OperationFactory\n */\nclass OperationFactory\n{\n    /**\n     * @param $operate\n     * @return null|OperationAdd|OperationDiv|OperationMul|OperationSub\n     */\n    public static function createOperate($operate)\n    {\n        $operateObject = null;\n        switch ($operate) {\n            case '+':\n                $operateObject = new OperationAdd();\n                break;\n            case '-':\n                $operateObject = new OperationSub();\n                break;\n            case '*':\n                $operateObject = new OperationMul();\n                break;\n            case '/':\n                $operateObject = new OperationDiv();\n                break;\n        }\n        return $operateObject;\n    }\n}\n\n$oper = OperationFactory::createOperate('+');\n$oper->setNumberA(1);\n$oper->setNumberB(4);\n$result = $oper->getResult();\necho $result;\n```\n","source":"_posts/design_patten/operation.md","raw":"---\nurl: /2018/10/16/design-patten-operation.html\ntitle: \"设计模式(16)-简单工厂模式\"\nkeywords: \"设计模式,简单工厂模式\"\ndescription: \"简单工厂模式\"\ndate: 2018-10-16T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[简单工厂模式](https://github.com/wenjy/design_patten_php/blob/master/src/Operation.php)\n\n## 简介\n\n```\n根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 简单工厂模式\n *\n * 用一个工厂来创建我们所需要的类\n *\n * Class Operation\n */\nclass Operation\n{\n    /**\n     * @var int\n     */\n    private $numberA = 0;\n\n    /**\n     * @var int\n     */\n    private $numberB = 0;\n\n    /**\n     * @return int\n     */\n    public function getNumberA()\n    {\n        return $this->numberA;\n    }\n\n    /**\n     * @param int $numberA\n     */\n    public function setNumberA($numberA)\n    {\n        $this->numberA = $numberA;\n    }\n\n    /**\n     * @return int\n     */\n    public function getNumberB()\n    {\n        return $this->numberB;\n    }\n\n    /**\n     * @param int $numberB\n     */\n    public function setNumberB($numberB)\n    {\n        $this->numberB = $numberB;\n    }\n\n    /**\n     * 这是要被子类覆写的方法\n     *\n     * @return int\n     * @author jiangyi\n     */\n    public function getResult()\n    {\n        return 0;\n    }\n}\n\n/**\n * 加法实现\n *\n * Class OperationAdd\n */\nclass OperationAdd extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() + $this->getNumberB();\n    }\n}\n\n/**\n * 减法实现\n *\n * Class OperationSub\n */\nclass OperationSub extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() - $this->getNumberB();\n    }\n}\n\n/**\n * 乘法实现\n *\n * Class OperationMul\n */\nclass OperationMul extends Operation\n{\n    public function getResult()\n    {\n        return $this->getNumberA() * $this->getNumberB();\n    }\n}\n\n/**\n * 除法实现\n *\n * Class OperationDiv\n *\n */\nclass OperationDiv extends Operation\n{\n    public function getResult()\n    {\n        if ($this->getNumberB() == 0) {\n            throw new Exception('除数不能为0');\n        }\n        return $this->getNumberA() / $this->getNumberB();\n    }\n}\n\n/**\n * 工厂类\n * 根据相应的运算符new出想要的对象\n *\n * Class OperationFactory\n */\nclass OperationFactory\n{\n    /**\n     * @param $operate\n     * @return null|OperationAdd|OperationDiv|OperationMul|OperationSub\n     */\n    public static function createOperate($operate)\n    {\n        $operateObject = null;\n        switch ($operate) {\n            case '+':\n                $operateObject = new OperationAdd();\n                break;\n            case '-':\n                $operateObject = new OperationSub();\n                break;\n            case '*':\n                $operateObject = new OperationMul();\n                break;\n            case '/':\n                $operateObject = new OperationDiv();\n                break;\n        }\n        return $operateObject;\n    }\n}\n\n$oper = OperationFactory::createOperate('+');\n$oper->setNumberA(1);\n$oper->setNumberB(4);\n$result = $oper->getResult();\necho $result;\n```\n","slug":"design_patten/operation","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4n0051mv05dy0c4b6o","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Operation.php\">简单工厂模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个工厂来创建我们所需要的类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Operation</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $numberA = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $numberB = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNumberA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;numberA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $numberA</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNumberA</span>(<span class=\"params\">$numberA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;numberA = $numberA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNumberB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;numberB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $numberB</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNumberB</span>(<span class=\"params\">$numberB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;numberB = $numberB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这是要被子类覆写的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationAdd</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationAdd</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() + <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 减法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationSub</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationSub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() - <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 乘法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationMul</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationMul</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() * <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 除法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationDiv</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationDiv</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getNumberB() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;除数不能为0&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() / <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据相应的运算符new出想要的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $operate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null|OperationAdd|OperationDiv|OperationMul|OperationSub</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createOperate</span>(<span class=\"params\">$operate</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $operateObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ($operate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationAdd();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationSub();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationMul();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationDiv();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $operateObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$oper = OperationFactory::createOperate(<span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\">$oper-&gt;setNumberA(<span class=\"number\">1</span>);</span><br><span class=\"line\">$oper-&gt;setNumberB(<span class=\"number\">4</span>);</span><br><span class=\"line\">$result = $oper-&gt;getResult();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $result;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Operation.php\">简单工厂模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根据工厂的类型，实例化出类，通常采用swith结构，缺点是对修改没有封闭。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个工厂来创建我们所需要的类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Operation</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $numberA = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $numberB = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNumberA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;numberA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $numberA</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNumberA</span>(<span class=\"params\">$numberA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;numberA = $numberA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNumberB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;numberB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $numberB</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setNumberB</span>(<span class=\"params\">$numberB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;numberB = $numberB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这是要被子类覆写的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 加法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationAdd</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationAdd</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() + <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 减法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationSub</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationSub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() - <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 乘法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationMul</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationMul</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() * <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 除法实现</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationDiv</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationDiv</span> <span class=\"keyword\">extends</span> <span class=\"title\">Operation</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getNumberB() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;除数不能为0&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;getNumberA() / <span class=\"keyword\">$this</span>-&gt;getNumberB();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据相应的运算符new出想要的对象</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class OperationFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $operate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null|OperationAdd|OperationDiv|OperationMul|OperationSub</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createOperate</span>(<span class=\"params\">$operate</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $operateObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ($operate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationAdd();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationSub();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationMul();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                $operateObject = <span class=\"keyword\">new</span> OperationDiv();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $operateObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$oper = OperationFactory::createOperate(<span class=\"string\">&#x27;+&#x27;</span>);</span><br><span class=\"line\">$oper-&gt;setNumberA(<span class=\"number\">1</span>);</span><br><span class=\"line\">$oper-&gt;setNumberB(<span class=\"number\">4</span>);</span><br><span class=\"line\">$result = $oper-&gt;getResult();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $result;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/17/design-patten-prototype.html","title":"设计模式(17)-原型模式","keywords":"设计模式,原型模式","description":"原型模式","date":"2018-10-17T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[原型模式](https://github.com/wenjy/design_patten_php/blob/master/src/Prototype.php)\n\n## 简介\n\n```\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象\n\n从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节\n```\n\n## 代码示例\n\n```php\n<?php\nabstract class Prototype\n{\n    private $id;\n\n    public function __construct($id)\n    {\n        $this->id = $id;\n    }\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    public function setId($id)\n    {\n        $this->id = $id;\n    }\n\n    public abstract function cloneOne();\n}\n\nclass ConcretePrototype extends Prototype\n{\n    public function __construct($id)\n    {\n        parent::__construct($id);\n    }\n\n    public function cloneOne()\n    {\n        return clone $this;\n    }\n}\n\n$p1 = new ConcretePrototype('a');\n$p1->setId('p1');\n$c1 = $p1->cloneOne();\n//var_dump($p1 === $c1);\n$c1->setId('c1');\necho $p1->getId() . PHP_EOL;\necho $c1->getId() . PHP_EOL;\n```\n","source":"_posts/design_patten/prototype.md","raw":"---\nurl: /2018/10/17/design-patten-prototype.html\ntitle: \"设计模式(17)-原型模式\"\nkeywords: \"设计模式,原型模式\"\ndescription: \"原型模式\"\ndate: 2018-10-17T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[原型模式](https://github.com/wenjy/design_patten_php/blob/master/src/Prototype.php)\n\n## 简介\n\n```\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象\n\n从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节\n```\n\n## 代码示例\n\n```php\n<?php\nabstract class Prototype\n{\n    private $id;\n\n    public function __construct($id)\n    {\n        $this->id = $id;\n    }\n\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    public function setId($id)\n    {\n        $this->id = $id;\n    }\n\n    public abstract function cloneOne();\n}\n\nclass ConcretePrototype extends Prototype\n{\n    public function __construct($id)\n    {\n        parent::__construct($id);\n    }\n\n    public function cloneOne()\n    {\n        return clone $this;\n    }\n}\n\n$p1 = new ConcretePrototype('a');\n$p1->setId('p1');\n$c1 = $p1->cloneOne();\n//var_dump($p1 === $c1);\n$c1->setId('c1');\necho $p1->getId() . PHP_EOL;\necho $c1->getId() . PHP_EOL;\n```\n","slug":"design_patten/prototype","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4r0054mv05cg6udjde","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Prototype.php\">原型模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</span><br><span class=\"line\"></span><br><span class=\"line\">从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;id = $id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getId</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setId</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;id = $id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOne</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOne</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">clone</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$p1 = <span class=\"keyword\">new</span> ConcretePrototype(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$p1-&gt;setId(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">$c1 = $p1-&gt;cloneOne();</span><br><span class=\"line\"><span class=\"comment\">//var_dump($p1 === $c1);</span></span><br><span class=\"line\">$c1-&gt;setId(<span class=\"string\">&#x27;c1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $p1-&gt;getId() . PHP_EOL;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $c1-&gt;getId() . PHP_EOL;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Prototype.php\">原型模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</span><br><span class=\"line\"></span><br><span class=\"line\">从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;id = $id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getId</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setId</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;id = $id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOne</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$id</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct($id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneOne</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">clone</span> <span class=\"keyword\">$this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$p1 = <span class=\"keyword\">new</span> ConcretePrototype(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">$p1-&gt;setId(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">$c1 = $p1-&gt;cloneOne();</span><br><span class=\"line\"><span class=\"comment\">//var_dump($p1 === $c1);</span></span><br><span class=\"line\">$c1-&gt;setId(<span class=\"string\">&#x27;c1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $p1-&gt;getId() . PHP_EOL;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $c1-&gt;getId() . PHP_EOL;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/18/design-patten-proxy.html","title":"设计模式(18)-代理模式","keywords":"设计模式,代理模式","description":"代理模式","date":"2018-10-18T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[代理模式](https://github.com/wenjy/design_patten_php/blob/master/src/Proxy.php)\n\n## 简介\n\n```\n为其他对象提供一种代理以控制对这个对象的访问\n\n远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实\n\n虚拟代理：是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，如html里面的图片路径\n\n安全代理：用来控制真实对象访问时的权限\n\n智能指引：是指当调用真实对象时，代理处理另外一些事\n\n代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * Subject 类，定义了 RealSubject 和 Proxy 的共同接口，\n * 这样就在任何使用 RealSubject 的地方都可以使用 Proxy\n *\n * Interface Subject\n */\ninterface Subject\n{\n    public function request();\n}\n\n/**\n * 定义 Proxy 所代表的真实实体\n *\n * Class RealSubject\n */\nclass RealSubject implements Subject\n{\n    public function request()\n    {\n        echo '真实的请求';\n    }\n}\n\n/**\n * 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口，\n * 这样代理就可以用来代替实体\n *\n * Class Proxy\n */\nclass Proxy implements Subject\n{\n    /**\n     * @var Subject\n     */\n    public $realSubject;\n\n    public function Request()\n    {\n        if ($this->realSubject == null) {\n            $this->realSubject = new RealSubject();\n        }\n        $this->realSubject->request();\n    }\n}\n\n$proxy = new Proxy();\n$proxy->request();\n```\n","source":"_posts/design_patten/proxy.md","raw":"---\nurl: /2018/10/18/design-patten-proxy.html\ntitle: \"设计模式(18)-代理模式\"\nkeywords: \"设计模式,代理模式\"\ndescription: \"代理模式\"\ndate: 2018-10-18T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[代理模式](https://github.com/wenjy/design_patten_php/blob/master/src/Proxy.php)\n\n## 简介\n\n```\n为其他对象提供一种代理以控制对这个对象的访问\n\n远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实\n\n虚拟代理：是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，如html里面的图片路径\n\n安全代理：用来控制真实对象访问时的权限\n\n智能指引：是指当调用真实对象时，代理处理另外一些事\n\n代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * Subject 类，定义了 RealSubject 和 Proxy 的共同接口，\n * 这样就在任何使用 RealSubject 的地方都可以使用 Proxy\n *\n * Interface Subject\n */\ninterface Subject\n{\n    public function request();\n}\n\n/**\n * 定义 Proxy 所代表的真实实体\n *\n * Class RealSubject\n */\nclass RealSubject implements Subject\n{\n    public function request()\n    {\n        echo '真实的请求';\n    }\n}\n\n/**\n * 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口，\n * 这样代理就可以用来代替实体\n *\n * Class Proxy\n */\nclass Proxy implements Subject\n{\n    /**\n     * @var Subject\n     */\n    public $realSubject;\n\n    public function Request()\n    {\n        if ($this->realSubject == null) {\n            $this->realSubject = new RealSubject();\n        }\n        $this->realSubject->request();\n    }\n}\n\n$proxy = new Proxy();\n$proxy->request();\n```\n","slug":"design_patten/proxy","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4v0056mv052cswegqf","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Proxy.php\">代理模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为其他对象提供一种代理以控制对这个对象的访问</span><br><span class=\"line\"></span><br><span class=\"line\">远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实</span><br><span class=\"line\"></span><br><span class=\"line\">虚拟代理：是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，如html里面的图片路径</span><br><span class=\"line\"></span><br><span class=\"line\">安全代理：用来控制真实对象访问时的权限</span><br><span class=\"line\"></span><br><span class=\"line\">智能指引：是指当调用真实对象时，代理处理另外一些事</span><br><span class=\"line\"></span><br><span class=\"line\">代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Subject 类，定义了 RealSubject 和 Proxy 的共同接口，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样就在任何使用 RealSubject 的地方都可以使用 Proxy</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface Subject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义 Proxy 所代表的真实实体</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class RealSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;真实的请求&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样代理就可以用来代替实体</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Proxy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Subject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $realSubject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;realSubject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;realSubject = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;realSubject-&gt;request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy = <span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">$proxy-&gt;request();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Proxy.php\">代理模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为其他对象提供一种代理以控制对这个对象的访问</span><br><span class=\"line\"></span><br><span class=\"line\">远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象纯在于不同地址空间的事实</span><br><span class=\"line\"></span><br><span class=\"line\">虚拟代理：是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象，如html里面的图片路径</span><br><span class=\"line\"></span><br><span class=\"line\">安全代理：用来控制真实对象访问时的权限</span><br><span class=\"line\"></span><br><span class=\"line\">智能指引：是指当调用真实对象时，代理处理另外一些事</span><br><span class=\"line\"></span><br><span class=\"line\">代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Subject 类，定义了 RealSubject 和 Proxy 的共同接口，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样就在任何使用 RealSubject 的地方都可以使用 Proxy</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Interface Subject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义 Proxy 所代表的真实实体</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class RealSubject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;真实的请求&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存一个引用使得代理可以访问实体，并提供一个与 Subject 的接口相同的接口，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这样代理就可以用来代替实体</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Proxy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Subject</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $realSubject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;realSubject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;realSubject = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;realSubject-&gt;request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy = <span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">$proxy-&gt;request();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/19/design-patten-singleton.html","title":"设计模式(19)-单例模式","keywords":"设计模式,单例模式","description":"单例模式","date":"2018-10-19T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[单例模式](https://github.com/wenjy/design_patten_php/blob/master/src/Singleton.php)\n\n## 简介\n\n```\n保证一个类仅有一个实例，并提供一个访问它的全局访问点\n\n通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。\n一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例可以被创建，\n并且它可以提供一个访问该实例的方法。\n```\n\n## 代码示例\n\n```php\n<?php\nclass Singleton\n{\n    private static $instance;\n\n    private function __construct()\n    {\n    }\n\n    private function __clone()\n    {\n    }\n\n    public static function getInstance()\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n}\n\n$s1 = Singleton::getInstance();\n$s2 = Singleton::getInstance();\n\nif ($s1 === $s2) {\n    echo '一样的';\n}\n```\n","source":"_posts/design_patten/singleton.md","raw":"---\nurl: /2018/10/19/design-patten-singleton.html\ntitle: \"设计模式(19)-单例模式\"\nkeywords: \"设计模式,单例模式\"\ndescription: \"单例模式\"\ndate: 2018-10-19T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[单例模式](https://github.com/wenjy/design_patten_php/blob/master/src/Singleton.php)\n\n## 简介\n\n```\n保证一个类仅有一个实例，并提供一个访问它的全局访问点\n\n通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。\n一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例可以被创建，\n并且它可以提供一个访问该实例的方法。\n```\n\n## 代码示例\n\n```php\n<?php\nclass Singleton\n{\n    private static $instance;\n\n    private function __construct()\n    {\n    }\n\n    private function __clone()\n    {\n    }\n\n    public static function getInstance()\n    {\n        if (self::$instance === null) {\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n}\n\n$s1 = Singleton::getInstance();\n$s2 = Singleton::getInstance();\n\nif ($s1 === $s2) {\n    echo '一样的';\n}\n```\n","slug":"design_patten/singleton","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4w0058mv054frgf0lb","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Singleton.php\">单例模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保证一个类仅有一个实例，并提供一个访问它的全局访问点</span><br><span class=\"line\"></span><br><span class=\"line\">通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。</span><br><span class=\"line\">一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例可以被创建，</span><br><span class=\"line\">并且它可以提供一个访问该实例的方法。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> $instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">self</span>::$instance === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::$instance = <span class=\"keyword\">new</span> <span class=\"built_in\">self</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::$instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$s1 = Singleton::getInstance();</span><br><span class=\"line\">$s2 = Singleton::getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($s1 === $s2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;一样的&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Singleton.php\">单例模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">保证一个类仅有一个实例，并提供一个访问它的全局访问点</span><br><span class=\"line\"></span><br><span class=\"line\">通常我们可以让一个全局变量使得一个对象被访问，但它不能防止你实例化多个对象。</span><br><span class=\"line\">一个最好的办法就是，让类自身保存它的唯一实例。这个类可以保证没有其他实例可以被创建，</span><br><span class=\"line\">并且它可以提供一个访问该实例的方法。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> $instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">self</span>::$instance === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::$instance = <span class=\"keyword\">new</span> <span class=\"built_in\">self</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::$instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$s1 = Singleton::getInstance();</span><br><span class=\"line\">$s2 = Singleton::getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($s1 === $s2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;一样的&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/20/design-patten-state.html","title":"设计模式(20)-状态模式","keywords":"设计模式,状态模式","description":"状态模式","date":"2018-10-20T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[状态模式](https://github.com/wenjy/design_patten_php/blob/master/src/State.php)\n\n## 简介\n\n```\n当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类\n\n状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑\n转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化\n\n将与特定状态相关的行为局部化，并且将不同状态的行为分割开来\n\n将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个 State 子类中\n所有通过定义新的子类可以很容易地增加新的状态和转换，可以消除庞大的条件分支语句\n\n状态模式通过把各种状态转移逻辑分布到 State 子类之间，来减少相互依赖\n\n当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑状态模式了\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象状态类，定义一个接口以封装与 Context 的一个特定状态相关的行为\n *\n * Class State\n */\nabstract class State\n{\n    abstract public function handle(Context $context);\n}\n\n/**\n * 具体状态，每一个子类实现一个与 Context 的一个状态相关的行为\n *\n * Class ConcreteStateA\n */\nclass ConcreteStateA extends State\n{\n    public function handle(Context $context)\n    {\n        // 设置下一状态\n        $context->setState(new ConcreteStateB());\n    }\n}\n\nclass ConcreteStateB extends State\n{\n    public function handle(Context $context)\n    {\n        $context->setState(new ConcreteStateA());\n    }\n}\n\n/**\n * 维护一个 State 子类的实例，这个实例定义当前的状态\n *\n * Class Context\n */\nclass Context\n{\n    private $state;\n\n    /**\n     * Context constructor.\n     * @param $state\n     */\n    public function __construct(State $state)\n    {\n        $this->state = $state;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n    /**\n     * @param mixed $state\n     */\n    public function setState($state)\n    {\n        $this->state = $state;\n        echo '当前状态：' . get_class($this->state) . PHP_EOL;\n    }\n\n    public function request()\n    {\n        // 对请求做处理，并设置下一状态\n        $this->state->handle($this);\n    }\n\n}\n\n$c = new Context(new ConcreteStateA());\n\n$c->request();\n$c->request();\n$c->request();\n$c->request();\n```\n","source":"_posts/design_patten/state.md","raw":"---\nurl: /2018/10/20/design-patten-state.html\ntitle: \"设计模式(20)-状态模式\"\nkeywords: \"设计模式,状态模式\"\ndescription: \"状态模式\"\ndate: 2018-10-20T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[状态模式](https://github.com/wenjy/design_patten_php/blob/master/src/State.php)\n\n## 简介\n\n```\n当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类\n\n状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑\n转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化\n\n将与特定状态相关的行为局部化，并且将不同状态的行为分割开来\n\n将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个 State 子类中\n所有通过定义新的子类可以很容易地增加新的状态和转换，可以消除庞大的条件分支语句\n\n状态模式通过把各种状态转移逻辑分布到 State 子类之间，来减少相互依赖\n\n当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑状态模式了\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 抽象状态类，定义一个接口以封装与 Context 的一个特定状态相关的行为\n *\n * Class State\n */\nabstract class State\n{\n    abstract public function handle(Context $context);\n}\n\n/**\n * 具体状态，每一个子类实现一个与 Context 的一个状态相关的行为\n *\n * Class ConcreteStateA\n */\nclass ConcreteStateA extends State\n{\n    public function handle(Context $context)\n    {\n        // 设置下一状态\n        $context->setState(new ConcreteStateB());\n    }\n}\n\nclass ConcreteStateB extends State\n{\n    public function handle(Context $context)\n    {\n        $context->setState(new ConcreteStateA());\n    }\n}\n\n/**\n * 维护一个 State 子类的实例，这个实例定义当前的状态\n *\n * Class Context\n */\nclass Context\n{\n    private $state;\n\n    /**\n     * Context constructor.\n     * @param $state\n     */\n    public function __construct(State $state)\n    {\n        $this->state = $state;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getState()\n    {\n        return $this->state;\n    }\n\n    /**\n     * @param mixed $state\n     */\n    public function setState($state)\n    {\n        $this->state = $state;\n        echo '当前状态：' . get_class($this->state) . PHP_EOL;\n    }\n\n    public function request()\n    {\n        // 对请求做处理，并设置下一状态\n        $this->state->handle($this);\n    }\n\n}\n\n$c = new Context(new ConcreteStateA());\n\n$c->request();\n$c->request();\n$c->request();\n$c->request();\n```\n","slug":"design_patten/state","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4x005cmv057kwuguhk","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/State.php\">状态模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类</span><br><span class=\"line\"></span><br><span class=\"line\">状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑</span><br><span class=\"line\">转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化</span><br><span class=\"line\"></span><br><span class=\"line\">将与特定状态相关的行为局部化，并且将不同状态的行为分割开来</span><br><span class=\"line\"></span><br><span class=\"line\">将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个 State 子类中</span><br><span class=\"line\">所有通过定义新的子类可以很容易地增加新的状态和转换，可以消除庞大的条件分支语句</span><br><span class=\"line\"></span><br><span class=\"line\">状态模式通过把各种状态转移逻辑分布到 State 子类之间，来减少相互依赖</span><br><span class=\"line\"></span><br><span class=\"line\">当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑状态模式了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象状态类，定义一个接口以封装与 Context 的一个特定状态相关的行为</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class State</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体状态，每一个子类实现一个与 Context 的一个状态相关的行为</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteStateA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置下一状态</span></span><br><span class=\"line\">        $context-&gt;setState(<span class=\"keyword\">new</span> ConcreteStateB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $context-&gt;setState(<span class=\"keyword\">new</span> ConcreteStateA());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个 State 子类的实例，这个实例定义当前的状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Context constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">State $state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前状态：&#x27;</span> . get_class(<span class=\"keyword\">$this</span>-&gt;state) . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对请求做处理，并设置下一状态</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;handle(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreteStateA());</span><br><span class=\"line\"></span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/State.php\">状态模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对象的内在状态改变时允许改变其行为，这个对象看起来是改变了其类</span><br><span class=\"line\"></span><br><span class=\"line\">状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑</span><br><span class=\"line\">转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化</span><br><span class=\"line\"></span><br><span class=\"line\">将与特定状态相关的行为局部化，并且将不同状态的行为分割开来</span><br><span class=\"line\"></span><br><span class=\"line\">将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个 State 子类中</span><br><span class=\"line\">所有通过定义新的子类可以很容易地增加新的状态和转换，可以消除庞大的条件分支语句</span><br><span class=\"line\"></span><br><span class=\"line\">状态模式通过把各种状态转移逻辑分布到 State 子类之间，来减少相互依赖</span><br><span class=\"line\"></span><br><span class=\"line\">当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑状态模式了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象状态类，定义一个接口以封装与 Context 的一个特定状态相关的行为</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class State</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体状态，每一个子类实现一个与 Context 的一个状态相关的行为</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteStateA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置下一状态</span></span><br><span class=\"line\">        $context-&gt;setState(<span class=\"keyword\">new</span> ConcreteStateB());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\">Context $context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $context-&gt;setState(<span class=\"keyword\">new</span> ConcreteStateA());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个 State 子类的实例，这个实例定义当前的状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Context constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">State $state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getState</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">$state</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state = $state;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前状态：&#x27;</span> . get_class(<span class=\"keyword\">$this</span>-&gt;state) . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对请求做处理，并设置下一状态</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;state-&gt;handle(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreteStateA());</span><br><span class=\"line\"></span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br><span class=\"line\">$c-&gt;request();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/20/design-patten-state-work.html","title":"设计模式(20)-状态模式2","keywords":"设计模式,状态模式","description":"状态模式","date":"2018-10-20T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[状态模式2](https://github.com/wenjy/design_patten_php/blob/master/src/StateWork.php)\n\n## 简介\n\n```\n简单实现一个表示工作状态的类。\n```\n\n## 代码示例\n\n```php\n<?php\nabstract class StateWork\n{\n    abstract public function writeProgram(Work $w);\n}\n\nclass ForenoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 12) {\n            echo '当前时间：' . $w->getHour() . '点，上午工作，精神百倍';\n        } else {\n            $w->setState(new NoonState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass NoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 13) {\n            echo '当前时间：' . $w->getHour() . '点，午饭，午休';\n        } else {\n            $w->setState(new AfternoonState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass AfternoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 17) {\n            echo '当前时间：' . $w->getHour() . '点，下午，继续工作';\n        } else {\n            $w->setState(new EveningState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass EveningState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getFinish()) {\n            $w->setState(new RestState());\n            $w->writeProgram();\n        } else {\n            if ($w->getHour() < 21) {\n                echo '当前时间：' . $w->getHour() . '点，加班，好累';\n            } else {\n                $w->setState(new SleepingState());\n                $w->writeProgram();\n            }\n        }\n    }\n}\n\nclass SleepingState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        echo '当前时间：' . $w->getHour() . '点，洗澡，睡觉';\n    }\n}\n\nclass RestState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        echo '当前时间：' . $w->getHour() . '点，下班，下班';\n    }\n}\n\nclass Work\n{\n    private $current;\n    private $hour;\n    private $finish;\n\n    /**\n     * Work constructor.\n     */\n    public function __construct()\n    {\n        $this->current = new ForenoonState();\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getCurrent()\n    {\n        return $this->current;\n    }\n\n    /**\n     * @param mixed $current\n     */\n    public function setCurrent($current)\n    {\n        $this->current = $current;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getHour()\n    {\n        return $this->hour;\n    }\n\n    /**\n     * @param mixed $hour\n     */\n    public function setHour($hour)\n    {\n        $this->hour = $hour;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getFinish()\n    {\n        return $this->finish;\n    }\n\n    /**\n     * @param mixed $finish\n     */\n    public function setFinish($finish)\n    {\n        $this->finish = $finish;\n    }\n\n    public function setState(StateWork $s)\n    {\n        $this->current = $s;\n    }\n\n    public function writeProgram()\n    {\n        $this->current->writeProgram($this);\n    }\n}\n\n$work = new Work();\n$work->setHour(22);\n$work->writeProgram();\n```\n","source":"_posts/design_patten/state_work.md","raw":"---\nurl: /2018/10/20/design-patten-state-work.html\ntitle: \"设计模式(20)-状态模式2\"\nkeywords: \"设计模式,状态模式\"\ndescription: \"状态模式\"\ndate: 2018-10-20T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[状态模式2](https://github.com/wenjy/design_patten_php/blob/master/src/StateWork.php)\n\n## 简介\n\n```\n简单实现一个表示工作状态的类。\n```\n\n## 代码示例\n\n```php\n<?php\nabstract class StateWork\n{\n    abstract public function writeProgram(Work $w);\n}\n\nclass ForenoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 12) {\n            echo '当前时间：' . $w->getHour() . '点，上午工作，精神百倍';\n        } else {\n            $w->setState(new NoonState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass NoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 13) {\n            echo '当前时间：' . $w->getHour() . '点，午饭，午休';\n        } else {\n            $w->setState(new AfternoonState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass AfternoonState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getHour() < 17) {\n            echo '当前时间：' . $w->getHour() . '点，下午，继续工作';\n        } else {\n            $w->setState(new EveningState());\n            $w->writeProgram();\n        }\n    }\n}\n\nclass EveningState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        if ($w->getFinish()) {\n            $w->setState(new RestState());\n            $w->writeProgram();\n        } else {\n            if ($w->getHour() < 21) {\n                echo '当前时间：' . $w->getHour() . '点，加班，好累';\n            } else {\n                $w->setState(new SleepingState());\n                $w->writeProgram();\n            }\n        }\n    }\n}\n\nclass SleepingState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        echo '当前时间：' . $w->getHour() . '点，洗澡，睡觉';\n    }\n}\n\nclass RestState extends StateWork\n{\n    public function writeProgram(Work $w)\n    {\n        echo '当前时间：' . $w->getHour() . '点，下班，下班';\n    }\n}\n\nclass Work\n{\n    private $current;\n    private $hour;\n    private $finish;\n\n    /**\n     * Work constructor.\n     */\n    public function __construct()\n    {\n        $this->current = new ForenoonState();\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getCurrent()\n    {\n        return $this->current;\n    }\n\n    /**\n     * @param mixed $current\n     */\n    public function setCurrent($current)\n    {\n        $this->current = $current;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getHour()\n    {\n        return $this->hour;\n    }\n\n    /**\n     * @param mixed $hour\n     */\n    public function setHour($hour)\n    {\n        $this->hour = $hour;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getFinish()\n    {\n        return $this->finish;\n    }\n\n    /**\n     * @param mixed $finish\n     */\n    public function setFinish($finish)\n    {\n        $this->finish = $finish;\n    }\n\n    public function setState(StateWork $s)\n    {\n        $this->current = $s;\n    }\n\n    public function writeProgram()\n    {\n        $this->current->writeProgram($this);\n    }\n}\n\n$work = new Work();\n$work->setHour(22);\n$work->writeProgram();\n```\n","slug":"design_patten/state_work","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf4y005fmv053aq254dl","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/StateWork.php\">状态模式2</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单实现一个表示工作状态的类。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForenoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，上午工作，精神百倍&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> NoonState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，午饭，午休&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> AfternoonState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AfternoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">17</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，下午，继续工作&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> EveningState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EveningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getFinish()) &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> RestState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">21</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，加班，好累&#x27;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $w-&gt;setState(<span class=\"keyword\">new</span> SleepingState());</span><br><span class=\"line\">                $w-&gt;writeProgram();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，洗澡，睡觉&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，下班，下班&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Work</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $current;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $hour;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $finish;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Work constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = <span class=\"keyword\">new</span> ForenoonState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $current</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurrent</span>(<span class=\"params\">$current</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = $current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHour</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $hour</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHour</span>(<span class=\"params\">$hour</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;hour = $hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFinish</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;finish;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $finish</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFinish</span>(<span class=\"params\">$finish</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;finish = $finish;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">StateWork $s</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = $s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current-&gt;writeProgram(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$work = <span class=\"keyword\">new</span> Work();</span><br><span class=\"line\">$work-&gt;setHour(<span class=\"number\">22</span>);</span><br><span class=\"line\">$work-&gt;writeProgram();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/StateWork.php\">状态模式2</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单实现一个表示工作状态的类。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForenoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，上午工作，精神百倍&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> NoonState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，午饭，午休&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> AfternoonState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AfternoonState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">17</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，下午，继续工作&#x27;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> EveningState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EveningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($w-&gt;getFinish()) &#123;</span><br><span class=\"line\">            $w-&gt;setState(<span class=\"keyword\">new</span> RestState());</span><br><span class=\"line\">            $w-&gt;writeProgram();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($w-&gt;getHour() &lt; <span class=\"number\">21</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，加班，好累&#x27;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $w-&gt;setState(<span class=\"keyword\">new</span> SleepingState());</span><br><span class=\"line\">                $w-&gt;writeProgram();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，洗澡，睡觉&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestState</span> <span class=\"keyword\">extends</span> <span class=\"title\">StateWork</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\">Work $w</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;当前时间：&#x27;</span> . $w-&gt;getHour() . <span class=\"string\">&#x27;点，下班，下班&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Work</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $current;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $hour;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $finish;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Work constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = <span class=\"keyword\">new</span> ForenoonState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $current</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurrent</span>(<span class=\"params\">$current</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = $current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getHour</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $hour</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHour</span>(<span class=\"params\">$hour</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;hour = $hour;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFinish</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;finish;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $finish</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFinish</span>(<span class=\"params\">$finish</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;finish = $finish;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setState</span>(<span class=\"params\">StateWork $s</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current = $s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeProgram</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;current-&gt;writeProgram(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$work = <span class=\"keyword\">new</span> Work();</span><br><span class=\"line\">$work-&gt;setHour(<span class=\"number\">22</span>);</span><br><span class=\"line\">$work-&gt;writeProgram();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/21/design-patten-strategy.html","title":"设计模式(21)-策略模式","keywords":"设计模式,策略模式","description":"策略模式","date":"2018-10-21T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[策略模式](https://github.com/wenjy/design_patten_php/blob/master/src/Strategy.php)\n\n## 简介\n\n```\n它定义了算法家族，分别封装起来，让它们之间可以相互替换，\n此模式让算法的变化，不会影响到使用算法的客户。\n\n策略模式是一种定义一系列算法的方法，从概念上来看，所有的这些算法完成的都是相同的工作，只是实现不同，\n它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n策略模式的 Strategy 类为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中\n公共的功能。\n\n策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。\n\n当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的\nStrategy 类中，可以在使用这些行为的类中消除条件语句。\n\n策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析的过程\n中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 策略类，定义所有支持的算法的公共接口\n *\n * Class Strategy\n */\nabstract class Strategy\n{\n    /**\n     * 定义算法的接口\n     *\n     * @return mixed\n     */\n    public abstract function algorithmInterface();\n}\n\n/**\n * 具体策略类，封装了具体的算法或行为\n * Class StrategyA\n */\nclass StrategyA extends Strategy\n{\n    public function algorithmInterface()\n    {\n        echo '算法A实现' . PHP_EOL;\n    }\n}\n\nclass StrategyB extends Strategy\n{\n    public function algorithmInterface()\n    {\n        echo '算法B实现' . PHP_EOL;\n    }\n}\n\nclass StrategyC extends Strategy\n{\n    public function AlgorithmInterface()\n    {\n        echo '算法C实现' . PHP_EOL;\n    }\n}\n\n/**\n * Class Context\n * 用一个contextInterface来配置，维护一个对Strategy对象的引用\n */\nclass Context\n{\n    /**\n     * 保存具体的算法对象\n     *\n     * @var Strategy\n     */\n    private $strategy;\n\n    /**\n     * Context constructor.\n     * @param $strategy\n     */\n    public function __construct($strategy)\n    {\n        $this->strategy = $strategy;\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n// 此处也算是依赖注入\n$context = new Context(new StrategyA());\n$context->contextInterface();\n\n/**\n * 结合简单工厂模式\n *\n */\nclass CashContext\n{\n    /**\n     * @var Strategy\n     */\n    public $strategy;\n\n    /**\n     * CashContext constructor.\n     * 构造函数里通过参数实例化对应的算法类，把注入的类整合为一个工厂\n     * @param $type\n     * @throws Exception\n     */\n    public function __construct($type)\n    {\n        switch (strtoupper($type)) {\n            case 'A':\n                $this->strategy = new StrategyA();\n                break;\n            case 'B':\n                $this->strategy = new StrategyB();\n                break;\n            case 'C':\n                $this->strategy = new StrategyC();\n                break;\n            default:\n                throw new Exception('类型错误');\n                break;\n        }\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n$cashContext = new CashContext('B');\n$cashContext->contextInterface();\n\nclass MyContext\n{\n    /**\n     * @var Strategy\n     */\n    public $strategy;\n\n    /**\n     * 可以把所有类型配置到一个数组中\n     * @var array\n     */\n    protected $config = [\n        'A' => StrategyA::class,\n        'B' => StrategyB::class,\n        'C' => StrategyC::class,\n    ];\n\n    /**\n     * MyContext constructor.\n     * @param $type\n     * @throws Exception\n     */\n    public function __construct($type)\n    {\n        if (!isset($this->config[strtoupper($type)])) {\n            throw new Exception('类型错误');\n        }\n        $this->strategy = new $this->config[strtoupper($type)];\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n$cashContext = new MyContext('c');\n$cashContext->contextInterface();\n```\n","source":"_posts/design_patten/strategy.md","raw":"---\nurl: /2018/10/21/design-patten-strategy.html\ntitle: \"设计模式(21)-策略模式\"\nkeywords: \"设计模式,策略模式\"\ndescription: \"策略模式\"\ndate: 2018-10-21T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[策略模式](https://github.com/wenjy/design_patten_php/blob/master/src/Strategy.php)\n\n## 简介\n\n```\n它定义了算法家族，分别封装起来，让它们之间可以相互替换，\n此模式让算法的变化，不会影响到使用算法的客户。\n\n策略模式是一种定义一系列算法的方法，从概念上来看，所有的这些算法完成的都是相同的工作，只是实现不同，\n它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n策略模式的 Strategy 类为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中\n公共的功能。\n\n策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。\n\n当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的\nStrategy 类中，可以在使用这些行为的类中消除条件语句。\n\n策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析的过程\n中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 策略类，定义所有支持的算法的公共接口\n *\n * Class Strategy\n */\nabstract class Strategy\n{\n    /**\n     * 定义算法的接口\n     *\n     * @return mixed\n     */\n    public abstract function algorithmInterface();\n}\n\n/**\n * 具体策略类，封装了具体的算法或行为\n * Class StrategyA\n */\nclass StrategyA extends Strategy\n{\n    public function algorithmInterface()\n    {\n        echo '算法A实现' . PHP_EOL;\n    }\n}\n\nclass StrategyB extends Strategy\n{\n    public function algorithmInterface()\n    {\n        echo '算法B实现' . PHP_EOL;\n    }\n}\n\nclass StrategyC extends Strategy\n{\n    public function AlgorithmInterface()\n    {\n        echo '算法C实现' . PHP_EOL;\n    }\n}\n\n/**\n * Class Context\n * 用一个contextInterface来配置，维护一个对Strategy对象的引用\n */\nclass Context\n{\n    /**\n     * 保存具体的算法对象\n     *\n     * @var Strategy\n     */\n    private $strategy;\n\n    /**\n     * Context constructor.\n     * @param $strategy\n     */\n    public function __construct($strategy)\n    {\n        $this->strategy = $strategy;\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n// 此处也算是依赖注入\n$context = new Context(new StrategyA());\n$context->contextInterface();\n\n/**\n * 结合简单工厂模式\n *\n */\nclass CashContext\n{\n    /**\n     * @var Strategy\n     */\n    public $strategy;\n\n    /**\n     * CashContext constructor.\n     * 构造函数里通过参数实例化对应的算法类，把注入的类整合为一个工厂\n     * @param $type\n     * @throws Exception\n     */\n    public function __construct($type)\n    {\n        switch (strtoupper($type)) {\n            case 'A':\n                $this->strategy = new StrategyA();\n                break;\n            case 'B':\n                $this->strategy = new StrategyB();\n                break;\n            case 'C':\n                $this->strategy = new StrategyC();\n                break;\n            default:\n                throw new Exception('类型错误');\n                break;\n        }\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n$cashContext = new CashContext('B');\n$cashContext->contextInterface();\n\nclass MyContext\n{\n    /**\n     * @var Strategy\n     */\n    public $strategy;\n\n    /**\n     * 可以把所有类型配置到一个数组中\n     * @var array\n     */\n    protected $config = [\n        'A' => StrategyA::class,\n        'B' => StrategyB::class,\n        'C' => StrategyC::class,\n    ];\n\n    /**\n     * MyContext constructor.\n     * @param $type\n     * @throws Exception\n     */\n    public function __construct($type)\n    {\n        if (!isset($this->config[strtoupper($type)])) {\n            throw new Exception('类型错误');\n        }\n        $this->strategy = new $this->config[strtoupper($type)];\n    }\n\n    /**\n     * 调用对应的子类方法\n     *\n     * @author jiangyi\n     */\n    public function contextInterface()\n    {\n        $this->strategy->algorithmInterface();\n    }\n}\n\n$cashContext = new MyContext('c');\n$cashContext->contextInterface();\n```\n","slug":"design_patten/strategy","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf50005imv05djfw38wd","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Strategy.php\">策略模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">它定义了算法家族，分别封装起来，让它们之间可以相互替换，</span><br><span class=\"line\">此模式让算法的变化，不会影响到使用算法的客户。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式是一种定义一系列算法的方法，从概念上来看，所有的这些算法完成的都是相同的工作，只是实现不同，</span><br><span class=\"line\">它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式的 Strategy 类为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中</span><br><span class=\"line\">公共的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。</span><br><span class=\"line\"></span><br><span class=\"line\">当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的</span><br><span class=\"line\">Strategy 类中，可以在使用这些行为的类中消除条件语句。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析的过程</span><br><span class=\"line\">中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略类，定义所有支持的算法的公共接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Strategy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义算法的接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体策略类，封装了具体的算法或行为</span></span><br><span class=\"line\"><span class=\"comment\"> * Class StrategyA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法A实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法B实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法C实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个contextInterface来配置，维护一个对Strategy对象的引用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存具体的算法对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Context constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$strategy</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy = $strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此处也算是依赖注入</span></span><br><span class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> StrategyA());</span><br><span class=\"line\">$context-&gt;contextInterface();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 结合简单工厂模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashContext</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * CashContext constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数里通过参数实例化对应的算法类，把注入的类整合为一个工厂</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $type</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$type</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (strtoupper($type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyA();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyB();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyC();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;类型错误&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cashContext = <span class=\"keyword\">new</span> CashContext(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">$cashContext-&gt;contextInterface();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyContext</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以把所有类型配置到一个数组中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $config = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;A&#x27;</span> =&gt; StrategyA::class,</span><br><span class=\"line\">        <span class=\"string\">&#x27;B&#x27;</span> =&gt; StrategyB::class,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span> =&gt; StrategyC::class,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * MyContext constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $type</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$type</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;config[strtoupper($type)])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;类型错误&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> <span class=\"keyword\">$this</span>-&gt;config[strtoupper($type)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cashContext = <span class=\"keyword\">new</span> MyContext(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">$cashContext-&gt;contextInterface();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Strategy.php\">策略模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">它定义了算法家族，分别封装起来，让它们之间可以相互替换，</span><br><span class=\"line\">此模式让算法的变化，不会影响到使用算法的客户。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式是一种定义一系列算法的方法，从概念上来看，所有的这些算法完成的都是相同的工作，只是实现不同，</span><br><span class=\"line\">它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式的 Strategy 类为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中</span><br><span class=\"line\">公共的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式的优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。</span><br><span class=\"line\"></span><br><span class=\"line\">当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的</span><br><span class=\"line\">Strategy 类中，可以在使用这些行为的类中消除条件语句。</span><br><span class=\"line\"></span><br><span class=\"line\">策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型的规则，只要在分析的过程</span><br><span class=\"line\">中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 策略类，定义所有支持的算法的公共接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Strategy</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义算法的接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体策略类，封装了具体的算法或行为</span></span><br><span class=\"line\"><span class=\"comment\"> * Class StrategyA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法A实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">algorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法B实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;算法C实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Context</span></span><br><span class=\"line\"><span class=\"comment\"> * 用一个contextInterface来配置，维护一个对Strategy对象的引用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存具体的算法对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Context constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$strategy</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy = $strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此处也算是依赖注入</span></span><br><span class=\"line\">$context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> StrategyA());</span><br><span class=\"line\">$context-&gt;contextInterface();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 结合简单工厂模式</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CashContext</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * CashContext constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数里通过参数实例化对应的算法类，把注入的类整合为一个工厂</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $type</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$type</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (strtoupper($type)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyA();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyB();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> StrategyC();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;类型错误&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cashContext = <span class=\"keyword\">new</span> CashContext(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">$cashContext-&gt;contextInterface();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyContext</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Strategy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 可以把所有类型配置到一个数组中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $config = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;A&#x27;</span> =&gt; StrategyA::class,</span><br><span class=\"line\">        <span class=\"string\">&#x27;B&#x27;</span> =&gt; StrategyB::class,</span><br><span class=\"line\">        <span class=\"string\">&#x27;C&#x27;</span> =&gt; StrategyC::class,</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * MyContext constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> $type</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">$type</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;config[strtoupper($type)])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&#x27;类型错误&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy = <span class=\"keyword\">new</span> <span class=\"keyword\">$this</span>-&gt;config[strtoupper($type)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用对应的子类方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> jiangyi</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contextInterface</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;strategy-&gt;algorithmInterface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$cashContext = <span class=\"keyword\">new</span> MyContext(<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\">$cashContext-&gt;contextInterface();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/22/design-patten-template-method.html","title":"设计模式(22)-模板方法模式","keywords":"设计模式,模板方法模式","description":"模板方法模式","date":"2018-10-22T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[模板方法模式](https://github.com/wenjy/design_patten_php/blob/master/src/TemplateMethod.php)\n\n## 简介\n\n```\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。\n模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤\n\n当我们要完成在某一细节层次一致的一个过程或一系列步骤，\n但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑使用模板方法模式处理。\n\n模板方法模式是通过把不变的行为搬移到父类，去除子类中的重复代码来体现它的优势。\n模板方法模式提供了一个很好的代码复用平台\n当不变的和可变的行为在方法的子类实现中混合在一起时，不变的行为就会在子类中重复出现。\n我们通过模板方法模式把这些行为搬移到单一对多地方，这样就帮助子类摆脱重复的不变行为的纠缠。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 实现了一个模板方法，定义了算法的骨架，具体子类将重定义抽象方法以实现一个算法的步骤\n *\n * Class AbstractClass\n */\nabstract class AbstractClass\n{\n    public abstract function operation1();\n\n    public abstract function operation2();\n\n    public function templateMethod()\n    {\n        $this->operation1();\n        $this->operation2();\n    }\n}\n\n/**\n * 子类实现具体的算法\n *\n * Class ClassA\n */\nclass ClassA extends AbstractClass\n{\n    public function operation1()\n    {\n        echo '具体类A 方法1 实现' . PHP_EOL;\n    }\n\n    public function operation2()\n    {\n        echo '具体类A 方法2 实现' . PHP_EOL;\n    }\n}\n\nclass ClassB extends AbstractClass\n{\n    public function operation1()\n    {\n        echo '具体类B 方法1 实现' . PHP_EOL;\n    }\n\n    public function operation2()\n    {\n        echo '具体类B 方法2 实现' . PHP_EOL;\n    }\n}\n\n$c = new ClassA();\n$c->templateMethod();\n\n$c = new ClassB();\n$c->templateMethod();\n```\n","source":"_posts/design_patten/template_method.md","raw":"---\nurl: /2018/10/22/design-patten-template-method.html\ntitle: \"设计模式(22)-模板方法模式\"\nkeywords: \"设计模式,模板方法模式\"\ndescription: \"模板方法模式\"\ndate: 2018-10-22T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[模板方法模式](https://github.com/wenjy/design_patten_php/blob/master/src/TemplateMethod.php)\n\n## 简介\n\n```\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。\n模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤\n\n当我们要完成在某一细节层次一致的一个过程或一系列步骤，\n但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑使用模板方法模式处理。\n\n模板方法模式是通过把不变的行为搬移到父类，去除子类中的重复代码来体现它的优势。\n模板方法模式提供了一个很好的代码复用平台\n当不变的和可变的行为在方法的子类实现中混合在一起时，不变的行为就会在子类中重复出现。\n我们通过模板方法模式把这些行为搬移到单一对多地方，这样就帮助子类摆脱重复的不变行为的纠缠。\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 实现了一个模板方法，定义了算法的骨架，具体子类将重定义抽象方法以实现一个算法的步骤\n *\n * Class AbstractClass\n */\nabstract class AbstractClass\n{\n    public abstract function operation1();\n\n    public abstract function operation2();\n\n    public function templateMethod()\n    {\n        $this->operation1();\n        $this->operation2();\n    }\n}\n\n/**\n * 子类实现具体的算法\n *\n * Class ClassA\n */\nclass ClassA extends AbstractClass\n{\n    public function operation1()\n    {\n        echo '具体类A 方法1 实现' . PHP_EOL;\n    }\n\n    public function operation2()\n    {\n        echo '具体类A 方法2 实现' . PHP_EOL;\n    }\n}\n\nclass ClassB extends AbstractClass\n{\n    public function operation1()\n    {\n        echo '具体类B 方法1 实现' . PHP_EOL;\n    }\n\n    public function operation2()\n    {\n        echo '具体类B 方法2 实现' . PHP_EOL;\n    }\n}\n\n$c = new ClassA();\n$c->templateMethod();\n\n$c = new ClassB();\n$c->templateMethod();\n```\n","slug":"design_patten/template_method","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf51005kmv055qg940mg","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/TemplateMethod.php\">模板方法模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。</span><br><span class=\"line\">模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤</span><br><span class=\"line\"></span><br><span class=\"line\">当我们要完成在某一细节层次一致的一个过程或一系列步骤，</span><br><span class=\"line\">但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑使用模板方法模式处理。</span><br><span class=\"line\"></span><br><span class=\"line\">模板方法模式是通过把不变的行为搬移到父类，去除子类中的重复代码来体现它的优势。</span><br><span class=\"line\">模板方法模式提供了一个很好的代码复用平台</span><br><span class=\"line\">当不变的和可变的行为在方法的子类实现中混合在一起时，不变的行为就会在子类中重复出现。</span><br><span class=\"line\">我们通过模板方法模式把这些行为搬移到单一对多地方，这样就帮助子类摆脱重复的不变行为的纠缠。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了一个模板方法，定义了算法的骨架，具体子类将重定义抽象方法以实现一个算法的步骤</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class AbstractClass</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">templateMethod</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;operation1();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;operation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类实现具体的算法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ClassA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类A 方法1 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类A 方法2 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类B 方法1 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类B 方法2 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ClassA();</span><br><span class=\"line\">$c-&gt;templateMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ClassB();</span><br><span class=\"line\">$c-&gt;templateMethod();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/TemplateMethod.php\">模板方法模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。</span><br><span class=\"line\">模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤</span><br><span class=\"line\"></span><br><span class=\"line\">当我们要完成在某一细节层次一致的一个过程或一系列步骤，</span><br><span class=\"line\">但其个别步骤在更详细的层次上的实现可能不同时，我们通常考虑使用模板方法模式处理。</span><br><span class=\"line\"></span><br><span class=\"line\">模板方法模式是通过把不变的行为搬移到父类，去除子类中的重复代码来体现它的优势。</span><br><span class=\"line\">模板方法模式提供了一个很好的代码复用平台</span><br><span class=\"line\">当不变的和可变的行为在方法的子类实现中混合在一起时，不变的行为就会在子类中重复出现。</span><br><span class=\"line\">我们通过模板方法模式把这些行为搬移到单一对多地方，这样就帮助子类摆脱重复的不变行为的纠缠。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了一个模板方法，定义了算法的骨架，具体子类将重定义抽象方法以实现一个算法的步骤</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class AbstractClass</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">templateMethod</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;operation1();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;operation2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类实现具体的算法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ClassA</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类A 方法1 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类A 方法2 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类B 方法1 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operation2</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;具体类B 方法2 实现&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ClassA();</span><br><span class=\"line\">$c-&gt;templateMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">$c = <span class=\"keyword\">new</span> ClassB();</span><br><span class=\"line\">$c-&gt;templateMethod();</span><br></pre></td></tr></table></figure>\n"},{"url":"/2018/10/23/design-patten-visitor.html","title":"设计模式(23)-访问者模式","keywords":"设计模式,访问者模式","description":"访问者模式","date":"2018-10-23T06:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n[访问者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Visitor.php)\n\n## 简介\n\n```\n表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下\n定义作用于这些元素的新操作\n\n访问者模式适用于数据结构相对稳定的系统\n它把数据结构和作用于结构上的操作之间的耦合脱开，使得操作合集可以相对自由地演化\n\n访问者模式的目的是要把处理从数据结构中分离出来\n如果系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，\n因为访问者模式使得算法操作的增加变得容易\n\n访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，\n访问者模式将有关的行为集中到一个访问者对象中\n访问者模式的缺点其实也就是使增加新的数据结构变得困难了\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 为该对象结构中的 ConcreteElement 的每一个类声明一个 Visit 操作\n * Class Visitor\n */\nabstract class Visitor\n{\n    // 总的数据\n    abstract public function visitConcreteElementA(ConcreteElementA $concreteElementA);\n\n    abstract public function visitConcreteElementB(ConcreteElementB $concreteElementB);\n}\n\n/**\n * 具体访问者，实现每个由 Visitor 声明的操作。\n * 每个操作实现算法的一部分，而该算法片段乃是对应于结构中对象的类\n *\n * Class ConcreteVisitor1\n */\nclass ConcreteVisitor1 extends Visitor\n{\n    public function visitConcreteElementA(ConcreteElementA $concreteElementA)\n    {\n        echo get_class($concreteElementA) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n\n    public function visitConcreteElementB(ConcreteElementB $concreteElementB)\n    {\n        echo get_class($concreteElementB) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor\n{\n    public function visitConcreteElementA(ConcreteElementA $concreteElementA)\n    {\n        echo get_class($concreteElementA) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n\n    public function visitConcreteElementB(ConcreteElementB $concreteElementB)\n    {\n        echo get_class($concreteElementB) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n}\n\n/**\n * 定义一个 accept 操作，它以一个访问者为参数\n *\n * Class Element\n */\nabstract class Element\n{\n    abstract public function accept(Visitor $visitor);\n}\n\nclass ConcreteElementA extends Element\n{\n    public function accept(Visitor $visitor)\n    {\n        $visitor->visitConcreteElementA($this);\n    }\n\n    public function operationA()\n    {\n\n    }\n}\n\nclass ConcreteElementB extends Element\n{\n    public function accept(Visitor $visitor)\n    {\n        $visitor->visitConcreteElementB($this);\n    }\n\n    public function operationB()\n    {\n\n    }\n}\n\n/**\n * 能枚举它的元素，可以提供一个高层的接口以允许访问者访问它的元素\n *\n * Class ObjectStructure\n */\nclass ObjectStructure\n{\n    /**\n     * @var Element[]\n     */\n    private $elements;\n\n    public function attach(Element $element)\n    {\n        $key = get_class($element);\n        $this->elements[$key] = $element;\n    }\n\n    public function detach(Element $element)\n    {\n        $key = get_class($element);\n        if (isset($this->elements[$key])) {\n            unset($this->elements[$key]);\n        }\n    }\n\n    public function accept(Visitor $visitor)\n    {\n        foreach ($this->elements as $v) {\n            $v->accept($visitor);\n        }\n    }\n}\n\n$o = new ObjectStructure();\n\n// 添加要被访问的元素\n$o->attach(new ConcreteElementA());\n$o->attach(new ConcreteElementB());\n\n// 每个访问者循环访问元素\n$o->accept(new ConcreteVisitor1());\n$o->accept(new ConcreteVisitor2());\n```\n","source":"_posts/design_patten/visitor.md","raw":"---\nurl: /2018/10/23/design-patten-visitor.html\ntitle: \"设计模式(23)-访问者模式\"\nkeywords: \"设计模式,访问者模式\"\ndescription: \"访问者模式\"\ndate: 2018-10-23T22:31:57+08:00\ndraft: false\ntags: [\"PHP\", \"设计模式\"]\ntags_weight: 100\ncategories: [\"PHP\", \"设计模式\"]\ncategoryes_weight: 100\n---\n\n[访问者模式](https://github.com/wenjy/design_patten_php/blob/master/src/Visitor.php)\n\n## 简介\n\n```\n表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下\n定义作用于这些元素的新操作\n\n访问者模式适用于数据结构相对稳定的系统\n它把数据结构和作用于结构上的操作之间的耦合脱开，使得操作合集可以相对自由地演化\n\n访问者模式的目的是要把处理从数据结构中分离出来\n如果系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，\n因为访问者模式使得算法操作的增加变得容易\n\n访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，\n访问者模式将有关的行为集中到一个访问者对象中\n访问者模式的缺点其实也就是使增加新的数据结构变得困难了\n```\n\n## 代码示例\n\n```php\n<?php\n/**\n * 为该对象结构中的 ConcreteElement 的每一个类声明一个 Visit 操作\n * Class Visitor\n */\nabstract class Visitor\n{\n    // 总的数据\n    abstract public function visitConcreteElementA(ConcreteElementA $concreteElementA);\n\n    abstract public function visitConcreteElementB(ConcreteElementB $concreteElementB);\n}\n\n/**\n * 具体访问者，实现每个由 Visitor 声明的操作。\n * 每个操作实现算法的一部分，而该算法片段乃是对应于结构中对象的类\n *\n * Class ConcreteVisitor1\n */\nclass ConcreteVisitor1 extends Visitor\n{\n    public function visitConcreteElementA(ConcreteElementA $concreteElementA)\n    {\n        echo get_class($concreteElementA) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n\n    public function visitConcreteElementB(ConcreteElementB $concreteElementB)\n    {\n        echo get_class($concreteElementB) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor\n{\n    public function visitConcreteElementA(ConcreteElementA $concreteElementA)\n    {\n        echo get_class($concreteElementA) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n\n    public function visitConcreteElementB(ConcreteElementB $concreteElementB)\n    {\n        echo get_class($concreteElementB) . '被' . get_class($this) . '访问' . PHP_EOL;\n    }\n}\n\n/**\n * 定义一个 accept 操作，它以一个访问者为参数\n *\n * Class Element\n */\nabstract class Element\n{\n    abstract public function accept(Visitor $visitor);\n}\n\nclass ConcreteElementA extends Element\n{\n    public function accept(Visitor $visitor)\n    {\n        $visitor->visitConcreteElementA($this);\n    }\n\n    public function operationA()\n    {\n\n    }\n}\n\nclass ConcreteElementB extends Element\n{\n    public function accept(Visitor $visitor)\n    {\n        $visitor->visitConcreteElementB($this);\n    }\n\n    public function operationB()\n    {\n\n    }\n}\n\n/**\n * 能枚举它的元素，可以提供一个高层的接口以允许访问者访问它的元素\n *\n * Class ObjectStructure\n */\nclass ObjectStructure\n{\n    /**\n     * @var Element[]\n     */\n    private $elements;\n\n    public function attach(Element $element)\n    {\n        $key = get_class($element);\n        $this->elements[$key] = $element;\n    }\n\n    public function detach(Element $element)\n    {\n        $key = get_class($element);\n        if (isset($this->elements[$key])) {\n            unset($this->elements[$key]);\n        }\n    }\n\n    public function accept(Visitor $visitor)\n    {\n        foreach ($this->elements as $v) {\n            $v->accept($visitor);\n        }\n    }\n}\n\n$o = new ObjectStructure();\n\n// 添加要被访问的元素\n$o->attach(new ConcreteElementA());\n$o->attach(new ConcreteElementB());\n\n// 每个访问者循环访问元素\n$o->accept(new ConcreteVisitor1());\n$o->accept(new ConcreteVisitor2());\n```\n","slug":"design_patten/visitor","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf52005nmv055xkydwoq","content":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Visitor.php\">访问者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下</span><br><span class=\"line\">定义作用于这些元素的新操作</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式适用于数据结构相对稳定的系统</span><br><span class=\"line\">它把数据结构和作用于结构上的操作之间的耦合脱开，使得操作合集可以相对自由地演化</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式的目的是要把处理从数据结构中分离出来</span><br><span class=\"line\">如果系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，</span><br><span class=\"line\">因为访问者模式使得算法操作的增加变得容易</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，</span><br><span class=\"line\">访问者模式将有关的行为集中到一个访问者对象中</span><br><span class=\"line\">访问者模式的缺点其实也就是使增加新的数据结构变得困难了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为该对象结构中的 ConcreteElement 的每一个类声明一个 Visit 操作</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Visitor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 总的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体访问者，实现每个由 Visitor 声明的操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个操作实现算法的一部分，而该算法片段乃是对应于结构中对象的类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteVisitor1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementA) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementB) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementA) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementB) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个 accept 操作，它以一个访问者为参数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Element</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $visitor-&gt;visitConcreteElementA(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $visitor-&gt;visitConcreteElementB(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 能枚举它的元素，可以提供一个高层的接口以允许访问者访问它的元素</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ObjectStructure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Element[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $elements;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\">Element $element</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = get_class($element);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;elements[$key] = $element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\">Element $element</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = get_class($element);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;elements[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;elements[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;elements <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">            $v-&gt;accept($visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> ObjectStructure();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加要被访问的元素</span></span><br><span class=\"line\">$o-&gt;attach(<span class=\"keyword\">new</span> ConcreteElementA());</span><br><span class=\"line\">$o-&gt;attach(<span class=\"keyword\">new</span> ConcreteElementB());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个访问者循环访问元素</span></span><br><span class=\"line\">$o-&gt;accept(<span class=\"keyword\">new</span> ConcreteVisitor1());</span><br><span class=\"line\">$o-&gt;accept(<span class=\"keyword\">new</span> ConcreteVisitor2());</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/wenjy/design_patten_php/blob/master/src/Visitor.php\">访问者模式</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下</span><br><span class=\"line\">定义作用于这些元素的新操作</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式适用于数据结构相对稳定的系统</span><br><span class=\"line\">它把数据结构和作用于结构上的操作之间的耦合脱开，使得操作合集可以相对自由地演化</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式的目的是要把处理从数据结构中分离出来</span><br><span class=\"line\">如果系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，</span><br><span class=\"line\">因为访问者模式使得算法操作的增加变得容易</span><br><span class=\"line\"></span><br><span class=\"line\">访问者模式的优点就是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，</span><br><span class=\"line\">访问者模式将有关的行为集中到一个访问者对象中</span><br><span class=\"line\">访问者模式的缺点其实也就是使增加新的数据结构变得困难了</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为该对象结构中的 ConcreteElement 的每一个类声明一个 Visit 操作</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Visitor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 总的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 具体访问者，实现每个由 Visitor 声明的操作。</span></span><br><span class=\"line\"><span class=\"comment\"> * 每个操作实现算法的一部分，而该算法片段乃是对应于结构中对象的类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ConcreteVisitor1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementA) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementB) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementA</span>(<span class=\"params\">ConcreteElementA $concreteElementA</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementA) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">visitConcreteElementB</span>(<span class=\"params\">ConcreteElementB $concreteElementB</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> get_class($concreteElementB) . <span class=\"string\">&#x27;被&#x27;</span> . get_class(<span class=\"keyword\">$this</span>) . <span class=\"string\">&#x27;访问&#x27;</span> . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义一个 accept 操作，它以一个访问者为参数</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class Element</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $visitor-&gt;visitConcreteElementA(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationA</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $visitor-&gt;visitConcreteElementB(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">operationB</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 能枚举它的元素，可以提供一个高层的接口以允许访问者访问它的元素</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Class ObjectStructure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Element[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $elements;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">attach</span>(<span class=\"params\">Element $element</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = get_class($element);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;elements[$key] = $element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detach</span>(<span class=\"params\">Element $element</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $key = get_class($element);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;elements[$key])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;elements[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accept</span>(<span class=\"params\">Visitor $visitor</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;elements <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">            $v-&gt;accept($visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$o = <span class=\"keyword\">new</span> ObjectStructure();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加要被访问的元素</span></span><br><span class=\"line\">$o-&gt;attach(<span class=\"keyword\">new</span> ConcreteElementA());</span><br><span class=\"line\">$o-&gt;attach(<span class=\"keyword\">new</span> ConcreteElementB());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每个访问者循环访问元素</span></span><br><span class=\"line\">$o-&gt;accept(<span class=\"keyword\">new</span> ConcreteVisitor1());</span><br><span class=\"line\">$o-&gt;accept(<span class=\"keyword\">new</span> ConcreteVisitor2());</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/08/18/binary-tree.html","title":"二叉搜索树","keywords":"二叉树","description":"二叉树","date":"2020-08-18T04:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 二叉树简介\n\n二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点\n\n二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字`<`这个父节点，右子节点关键字`>=`这个父节点\n\n## 代码示例\n\n```php\n/**\n * 表示节点\n */\nclass Node\n{\n    /**\n     * @var int 表示索引\n     */\n    private $index;\n    /**\n     * @var Node 左节点\n     */\n    private $leftNode;\n    /**\n     * @var Node 又节点\n     */\n    private $rightNode;\n\n    /**\n     * Node constructor.\n     * @param int $index\n     */\n    public function __construct(int $index)\n    {\n        $this->index = $index;\n    }\n\n    /**\n     * @return int\n     */\n    public function getIndex(): int\n    {\n        return $this->index;\n    }\n\n    /**\n     * @return Node\n     */\n    public function getLeftNode(): ?Node\n    {\n        return $this->leftNode;\n    }\n\n    /**\n     * @return Node\n     */\n    public function getRightNode(): ?Node\n    {\n        return $this->rightNode;\n    }\n\n    /**\n     * @param Node $leftNode\n     */\n    public function setLeftNode(Node $leftNode): void\n    {\n        $this->leftNode = $leftNode;\n    }\n\n    /**\n     * @param Node $rightNode\n     */\n    public function setRightNode(Node $rightNode): void\n    {\n        $this->rightNode = $rightNode;\n    }\n}\n\n/**\n * 表示树\n */\nclass Tree\n{\n    /**\n     * @var Node 树的根节点\n     */\n    private $root;\n\n    /**\n     * 插入一个索引节点\n     * @param int $index\n     */\n    public function insert(int $index)\n    {\n        $node = new Node($index);\n        if (is_null($this->root)) {\n            $this->root = $node;\n        } else {\n            $current = $this->root;\n            $parent = null;\n            while (true) {\n                $parent = $current; // 保存当current变为null之前的那一个父节点\n                // 插入左节点\n                if ($index < $current->getIndex()) {\n                    $current = $current->getLeftNode();\n                    if (is_null($current)) {\n                        $parent->setLeftNode($node);\n                        return;\n                    }\n                } else {\n                    $current = $current->getRightNode();\n                    if (is_null($current)) {\n                        $parent->setRightNode($node);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 查找索引节点\n     * @param int $index\n     * @return Node|null\n     */\n    public function find(int $index): ?Node\n    {\n        $current = $this->root;\n        if (is_null($current)) {\n            return null;\n        }\n\n        while ($current->getIndex() != $index) {\n            if ($current->getIndex() > $index) {\n                $current = $current->getLeftNode();\n            } else {\n                $current = $current->getRightNode();\n            }\n            if (is_null($current)) {\n                return null;\n            }\n        }\n        return $current;\n    }\n}\n\n$tree = new Tree();\n$tree->insert(3);\n$tree->insert(2);\n$tree->insert(6);\n$tree->insert(4);\n$tree->insert(5);\n$tree->insert(1);\nvar_dump($tree->find(1));\n```\n","source":"_posts/algorithms/tree/binary_tree.md","raw":"---\nurl: /2020/08/18/binary-tree.html\ntitle: \"二叉搜索树\"\nkeywords: \"二叉树\"\ndescription: \"二叉树\"\ndate: 2020-08-18T20:31:57+08:00\ndraft: false\ntags: [\"算法\"]\ntags_weight: 100\ncategories: [\"算法\"]\ncategoryes_weight: 100\n---\n\n## 二叉树简介\n\n二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点\n\n二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字`<`这个父节点，右子节点关键字`>=`这个父节点\n\n## 代码示例\n\n```php\n/**\n * 表示节点\n */\nclass Node\n{\n    /**\n     * @var int 表示索引\n     */\n    private $index;\n    /**\n     * @var Node 左节点\n     */\n    private $leftNode;\n    /**\n     * @var Node 又节点\n     */\n    private $rightNode;\n\n    /**\n     * Node constructor.\n     * @param int $index\n     */\n    public function __construct(int $index)\n    {\n        $this->index = $index;\n    }\n\n    /**\n     * @return int\n     */\n    public function getIndex(): int\n    {\n        return $this->index;\n    }\n\n    /**\n     * @return Node\n     */\n    public function getLeftNode(): ?Node\n    {\n        return $this->leftNode;\n    }\n\n    /**\n     * @return Node\n     */\n    public function getRightNode(): ?Node\n    {\n        return $this->rightNode;\n    }\n\n    /**\n     * @param Node $leftNode\n     */\n    public function setLeftNode(Node $leftNode): void\n    {\n        $this->leftNode = $leftNode;\n    }\n\n    /**\n     * @param Node $rightNode\n     */\n    public function setRightNode(Node $rightNode): void\n    {\n        $this->rightNode = $rightNode;\n    }\n}\n\n/**\n * 表示树\n */\nclass Tree\n{\n    /**\n     * @var Node 树的根节点\n     */\n    private $root;\n\n    /**\n     * 插入一个索引节点\n     * @param int $index\n     */\n    public function insert(int $index)\n    {\n        $node = new Node($index);\n        if (is_null($this->root)) {\n            $this->root = $node;\n        } else {\n            $current = $this->root;\n            $parent = null;\n            while (true) {\n                $parent = $current; // 保存当current变为null之前的那一个父节点\n                // 插入左节点\n                if ($index < $current->getIndex()) {\n                    $current = $current->getLeftNode();\n                    if (is_null($current)) {\n                        $parent->setLeftNode($node);\n                        return;\n                    }\n                } else {\n                    $current = $current->getRightNode();\n                    if (is_null($current)) {\n                        $parent->setRightNode($node);\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 查找索引节点\n     * @param int $index\n     * @return Node|null\n     */\n    public function find(int $index): ?Node\n    {\n        $current = $this->root;\n        if (is_null($current)) {\n            return null;\n        }\n\n        while ($current->getIndex() != $index) {\n            if ($current->getIndex() > $index) {\n                $current = $current->getLeftNode();\n            } else {\n                $current = $current->getRightNode();\n            }\n            if (is_null($current)) {\n                return null;\n            }\n        }\n        return $current;\n    }\n}\n\n$tree = new Tree();\n$tree->insert(3);\n$tree->insert(2);\n$tree->insert(6);\n$tree->insert(4);\n$tree->insert(5);\n$tree->insert(1);\nvar_dump($tree->find(1));\n```\n","slug":"algorithms/tree/binary_tree","published":1,"updated":"2020-09-22T14:31:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf53005pmv056ohsb767","content":"<h2 id=\"二叉树简介\"><a href=\"#二叉树简介\" class=\"headerlink\" title=\"二叉树简介\"></a>二叉树简介</h2><p>二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点</p>\n<p>二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字<code>&lt;</code>这个父节点，右子节点关键字<code>&gt;=</code>这个父节点</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 表示节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int 表示索引</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $index;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 左节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $leftNode;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 又节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $rightNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;index = $index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndex</span>(<span class=\"params\"></span>): <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeftNode</span>(<span class=\"params\"></span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRightNode</span>(<span class=\"params\"></span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $leftNode</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">Node $leftNode</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;leftNode = $leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $rightNode</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">Node $rightNode</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;rightNode = $rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 表示树</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 树的根节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一个索引节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">new</span> Node($index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">$this</span>-&gt;root)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;root = $node;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $current = <span class=\"keyword\">$this</span>-&gt;root;</span><br><span class=\"line\">            $parent = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                $parent = $current; <span class=\"comment\">// 保存当current变为null之前的那一个父节点</span></span><br><span class=\"line\">                <span class=\"comment\">// 插入左节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($index &lt; $current-&gt;getIndex()) &#123;</span><br><span class=\"line\">                    $current = $current-&gt;getLeftNode();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                        $parent-&gt;setLeftNode($node);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    $current = $current-&gt;getRightNode();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                        $parent-&gt;setRightNode($node);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找索引节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node|null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $current = <span class=\"keyword\">$this</span>-&gt;root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($current-&gt;getIndex() != $index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($current-&gt;getIndex() &gt; $index) &#123;</span><br><span class=\"line\">                $current = $current-&gt;getLeftNode();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $current = $current-&gt;getRightNode();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$tree = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">2</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">6</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">5</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">var_dump($tree-&gt;find(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二叉树简介\"><a href=\"#二叉树简介\" class=\"headerlink\" title=\"二叉树简介\"></a>二叉树简介</h2><p>二叉树由节点（node）和边组成。节点分为根节点、父节点、子节点</p>\n<p>二叉树的父节点最多有两个子节点，二叉树一个节点左子节点关键字<code>&lt;</code>这个父节点，右子节点关键字<code>&gt;=</code>这个父节点</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 表示节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> int 表示索引</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $index;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 左节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $leftNode;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 又节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $rightNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node constructor.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;index = $index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndex</span>(<span class=\"params\"></span>): <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeftNode</span>(<span class=\"params\"></span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRightNode</span>(<span class=\"params\"></span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $leftNode</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">Node $leftNode</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;leftNode = $leftNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> Node $rightNode</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">Node $rightNode</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;rightNode = $rightNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 表示树</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Node 树的根节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入一个索引节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $node = <span class=\"keyword\">new</span> Node($index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null(<span class=\"keyword\">$this</span>-&gt;root)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;root = $node;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $current = <span class=\"keyword\">$this</span>-&gt;root;</span><br><span class=\"line\">            $parent = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                $parent = $current; <span class=\"comment\">// 保存当current变为null之前的那一个父节点</span></span><br><span class=\"line\">                <span class=\"comment\">// 插入左节点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ($index &lt; $current-&gt;getIndex()) &#123;</span><br><span class=\"line\">                    $current = $current-&gt;getLeftNode();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                        $parent-&gt;setLeftNode($node);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    $current = $current-&gt;getRightNode();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                        $parent-&gt;setRightNode($node);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找索引节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $index</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Node|null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\"><span class=\"keyword\">int</span> $index</span>): ?<span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $current = <span class=\"keyword\">$this</span>-&gt;root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($current-&gt;getIndex() != $index) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($current-&gt;getIndex() &gt; $index) &#123;</span><br><span class=\"line\">                $current = $current-&gt;getLeftNode();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                $current = $current-&gt;getRightNode();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (is_null($current)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$tree = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">3</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">2</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">6</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">4</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">5</span>);</span><br><span class=\"line\">$tree-&gt;insert(<span class=\"number\">1</span>);</span><br><span class=\"line\">var_dump($tree-&gt;find(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n"},{"url":"/2020/08/18/binary-tree.html","title":"平衡二叉树","keywords":"二叉树","description":"二叉树","date":"2020-08-25T04:31:57.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"\n## 平衡二叉树\n\n是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树\n平衡二叉树要求对于每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，\n就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化成链表的问题，\n把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。\n但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。\n","source":"_posts/algorithms/tree/balanced_binary_tree.md","raw":"---\nurl: /2020/08/18/binary-tree.html\ntitle: \"平衡二叉树\"\nkeywords: \"二叉树\"\ndescription: \"二叉树\"\ndate: 2020-08-25T20:31:57+08:00\ndraft: false\ntags: [\"Algorithms\"]\ntags_weight: 100\ncategories: [\"Algorithms\"]\ncategoryes_weight: 100\n---\n\n## 平衡二叉树\n\n是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树\n平衡二叉树要求对于每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，\n就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化成链表的问题，\n把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。\n但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。\n","slug":"algorithms/tree/balanced_binary_tree","published":1,"updated":"2020-08-25T14:35:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf55005tmv053f1u3xse","content":"<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树<br>平衡二叉树要求对于每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，<br>就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化成链表的问题，<br>把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。<br>但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>是二叉查找树的一个进化体，也是第一个引入平衡概念的二叉树<br>平衡二叉树要求对于每一个节点来说，它的左右子树的高度之差不能超过1，如果插入或者删除一个节点使得高度之差大于1，<br>就要进行节点之间的旋转，将二叉树重新维持在一个平衡状态。这个方案很好的解决了二叉查找树退化成链表的问题，<br>把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在O(logN)。<br>但是频繁旋转会使插入和删除牺牲掉O(logN)左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p>\n"},{"url":"/2020/04/01/http-response-status-codes.html","title":"HTTP 响应状态码","keywords":"HTTP响应状态码","description":"HTTP 响应状态码","date":"2020-04-01T06:53:12.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"_content":"## 1xx\n\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。\n由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。\n\n### 100 CONTINUE\n\n服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送body的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。\n服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，\n并在发送正文之前接收100 Continue状态代码。如果客户端收到一个错误代码，如403(禁止)或405(方法不允许)，那么它不应该发送请求的主体。\n响应代码417期望失败表示请求不应继续，因为它表明服务器不支持预期(这种情况下例如HTTP/1.0的服务器)。\n\n### 101 SWITCHING_PROTOCOLS\n\n服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。\n在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。\n例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。\n\n### 102 PROCESSING\n\n一个WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。\n该响应表明服务器已经收到并正在处理请求，但无响应可用。这可以防止客户端超时并假设请求丢失。\n\n### 103 EARLY_HINTS\n\n用于在最终HTTP消息之前返回一些响应头。\n\n## 2xx\n\n这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。\n\n### 200 OK\n\n请求已成功，请求所希望的响应头或数据体将随此响应返回，实际的响应将取决于所使用的请求方法。\n在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n\n### 201 CREATED\n\n请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其URI已经随Location头信息返回。\n假如需要的资源无法及时创建的话，应当返回`202 Accepted`。\n\n### 202 ACCEPTED\n\n请求已被接受处理，但处理尚未完成。请求可能最终会被处理，也可能不会被处理，在处理发生时可能会被拒绝。\n\n### 203 NON_AUTHORITATIVE_INFORMATION\n\n服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。\n\n### 204 NO_CONTENT\n\n服务器成功处理了请求，没有返回任何内容。\n\n### 205 RESET_CONTENT\n\n服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。\n\n### 206 PARTIAL_CONTENT\n\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n\n### 207 MULTI_STATUS\n\n代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。\n\n### 208 ALREADY_REPORTED\n\nDAV绑定的成员已经在(多状态 multistatus)响应的前面部分中列举过，并且不再包含。\n\n### 226 IM_USED\n\n服务器已经完成了对资源的请求，响应是应用于当前实例的一个或多个实例操作的结果的表示。\n\n## 3xx\n\n此类状态代码指示客户端必须采取附加操作来完成请求。其中许多状态码用于URL重定向，后续的请求地址（重定向目标）在本次响应的`Location`域中指明。\n当且仅当后续的请求所使用的方法是`GET`或者`HEAD`时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。\n客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。\n按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。\n\n### 300 MULTIPLE_CHOICES\n\n被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。\n除非这是一个`HEAD`请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。\n这个实体的格式由`Content-Type`定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。\n当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在`Location`中应当指明这个回馈的URI，\n浏览器可能会将这个`Location`值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。\n\n### 301 MOVED_PERMANENTLY\n\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。\n如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的`Location`域中返回。除非这是一个`HEAD`请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个`GET`或者`HEAD`请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n### 302 FOUND\n\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。\n只有在`Cache-Control`或`Expires`中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI应当在响应的`Location`域中返回。\n除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。 \n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 \n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。\n因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n### 303 SEE_OTHER\n\n对应当前请求的响应可以在另一个`URI`上被找到，当响应于`POST`（或`PUT` / `DELETE`）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。\n这个方法的存在主要是为了允许由脚本激活的`POST`请求输出重定向到一个新的资源。\n这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 \n新的URI应当在响应的`Location`域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。 \n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。\n如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n### 304 NOT_MODIFIED\n\n表示资源在由请求头中的`If-Modified-Since`或`If-None-Match`参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n### 305 USE_PROXY\n\n被请求的资源必须通过指定的代理才能被访问。`Location`域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。\n只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla Firefox和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。\n注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。\n\n### 306 RESERVED\n\n在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。\n\n### 307 TEMPORARY_REDIRECT\n\n在这种情况下，请求应该与另一个`URI`重复，但后续的请求应仍使用原始的`URI`。 与`302`相反，当重新发出原始请求时，不允许更改请求方法。 \n例如，应该使用另一个`POST`请求来重复`POST`请求。\n\n### 308 PERMANENTLY_REDIRECT\n\n请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。\n\n## 4xx\n\n这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，\n否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。\n这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。\n\n如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。\n如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，\n以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。\n\n### 400 BAD_REQUEST\n\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。\n\n### 401 UNAUTHORIZED\n\n参见：HTTP基本认证、HTTP摘要认证 类似于`403 Forbidden`，`401`语义即“未认证”，即用户没有必要的凭据。\n该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的`WWW-Authenticate`信息头用以询问用户信息。\n客户端可以重复提交一个包含恰当的`Authorization`头信息的请求。如果当前请求已经包含了`Authorization`证书，那么`401`响应代表着服务器验证已经拒绝了那些证书。\n如果`401`响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。 \n注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。\n\n### 402 PAYMENT_REQUIRED\n\n该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。\n如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。\n如果帐户没有足够的资金启动调用，Sipgate将使用此代码。\n当商店没有支付他们的费用并且暂时被禁用时，Shopify使用这个代码。\nStripe将此代码用于参数正确的失败支付，例如阻止欺诈支付。\n\n### 403 FORBIDDEN\n\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。\n如果这不是一个`HEAD`请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个`404`响应，假如它不希望让客户端获得任何信息。\n\n### 404 NOT_FOUND\n\n请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。\n假如服务器知道情况的话，应当使用`410`状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。\n404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n### 405 METHOD_NOT_ALLOWED\n\n请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个`Allow`头信息用以表示出当前资源能够接受的请求方法的列表。\n例如，需要通过`POST`呈现数据的表单上的`GET`请求，或只读资源上的`PUT`请求。 \n鉴于`PUT`，`DELETE`方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回`405`错误。\n\n### 406 NOT_ACCEPTABLE\n\n内容协商 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。\n除非这是一个`HEAD`请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。\n实体的格式由`Content-Type`头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。\n\n### 407 PROXY_AUTHENTICATION_REQUIRED\n\n与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个`Proxy-Authenticate`用以进行身份询问。\n客户端可以返回一个`Proxy-Authorization`信息头用以验证。\n\n### 408 REQUEST_TIMEOUT\n\n请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。\n\n### 409 CONFLICT\n\n表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。\n\n### 410 GONE\n\n表示所请求的资源不再可用，以后也不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。\n在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。\n\n### 411 LENGTH_REQUIRED\n\n服务器拒绝在没有定义`Content-Length`头的情况下接受请求。在添加了表明请求消息体长度的有效`Content-Length`头之后，客户端可以再次提交该请求。\n\n### 412 PRECONDITION_FAILED\n\n服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。\n这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。\n\n### 413 REQUEST_ENTITY_TOO_LARGE\n\n表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。\n此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个`Retry-After`的响应头，以告知客户端可以在多少时间以后重新尝试。\n\n### 414 REQUEST_URI_TOO_LONG\n\n表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。\n这比较少见，通常的情况包括： 本应使用`POST`方法的表单提交变成了`GET`方法，导致查询字符串过长。 \n重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。\n这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。\n\n### 415 UNSUPPORTED_MEDIA_TYPE\n\n对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。\n例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。\n\n### 416 REQUESTED_RANGE_NOT_SATISFIABLE\n\n客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。\n\n### 417 EXPECTATION_FAILED\n\n在请求头`Expect`中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，`Expect`的内容无法被满足。\n\n### 418 I_AM_A_TEAPOT\n\n该状态码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议'中定义的，并不需要在真实的HTTP服务器中定义。\n当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。\n\n### 421 MISDIRECTED_REQUEST\n\n该请求针对的是无法产生响应的服务器（例如因为连接重用）。\n\n### 422 UNPROCESSABLE_ENTITY\n\n请求格式正确，但是由于含有语义错误，无法响应。\n\n### 423 LOCKED\n\n当前资源被锁定。\n\n### 424 FAILED_DEPENDENCY\n\n请求失败是因为它依赖于另一个请求，而那个请求失败了，例如PROPPATCH。\n\n### 425 TOO_EARLY\n\n表示服务器不愿冒险处理可能重播的请求。\n\n### 426 UPGRADE_REQUIRED\n\n客户端应当切换到TLS/1.0，并在HTTP/1.1 `Upgrade`头中给出。\n\n### 428 PRECONDITION_REQUIRED\n\n原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，\n但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。\n\n### 429 TOO_MANY_REQUESTS\n\n用户在给定的时间内发送了太多的请求。旨在用于网络限速。\n\n### 431 REQUEST_HEADER_FIELDS_TOO_LARGE\n\n服务器不愿处理请求，因为一个或多个头字段过大。\n\n### 451 UNAVAILABLE_FOR_LEGAL_REASONS\n\n该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。\n\n## 5xx\n\n表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。\n除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。\n浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。\n\n### 500 INTERNAL_SERVER_ERROR\n\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n### 501 NOT_IMPLEMENTED\n\n服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）\n\n### 502 BAD_GATEWAY\n\n作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。\n\n### 503 SERVICE_UNAVAILABLE\n\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。\n如果能够预计延迟时间，那么响应中可以包含一个`Retry-After`头用以标明这个延迟时间。如果没有给出这个`Retry-After`信息，那么客户端应当以处理500响应的方式处理它。\n\n### 504 GATEWAY_TIMEOUT\n\n作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。\n注意：某些代理服务器在DNS查询超时时会返回400或者500错误。\n\n### 505 VERSION_NOT_SUPPORTED\n\n服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。\n\n### 506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL\n\n请求的透明内容协商将产生一个循环引用。\n\n### 507 INSUFFICIENT_STORAGE\n\n服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。\n\n### 508 LOOP_DETECTED\n\n服务器在处理请求时陷入死循环。（可代替 208状态码）\n\n### 510 NOT_EXTENDED\n\n获取资源所需要的策略并没有被满足。服务器需要对请求进行进一步扩展来满足它。\n\n### 511 NETWORK_AUTHENTICATION_REQUIRED\n\n客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）\n\n参考链接：\n\n[维基百科](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n[飞雪无情的博客](https://www.flysnow.org/tools/table/http-status-codes/)\n","source":"_posts/tools/http_response_status_codes.md","raw":"---\nurl: /2020/04/01/http-response-status-codes.html\ntitle: \"HTTP 响应状态码\"\nkeywords: \"HTTP响应状态码\"\ndescription: \"HTTP 响应状态码\"\ndate: 2020-04-01T22:53:12+08:00\ndraft: false\ntags: [\"Http\"]\ntags_weight: 100\ncategories: [\"Http\"]\ncategoryes_weight: 100\n---\n## 1xx\n\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。\n由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。\n这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。\n\n### 100 CONTINUE\n\n服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送body的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。\n服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，\n并在发送正文之前接收100 Continue状态代码。如果客户端收到一个错误代码，如403(禁止)或405(方法不允许)，那么它不应该发送请求的主体。\n响应代码417期望失败表示请求不应继续，因为它表明服务器不支持预期(这种情况下例如HTTP/1.0的服务器)。\n\n### 101 SWITCHING_PROTOCOLS\n\n服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。\n在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。\n例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。\n\n### 102 PROCESSING\n\n一个WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。\n该响应表明服务器已经收到并正在处理请求，但无响应可用。这可以防止客户端超时并假设请求丢失。\n\n### 103 EARLY_HINTS\n\n用于在最终HTTP消息之前返回一些响应头。\n\n## 2xx\n\n这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。\n\n### 200 OK\n\n请求已成功，请求所希望的响应头或数据体将随此响应返回，实际的响应将取决于所使用的请求方法。\n在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。\n\n### 201 CREATED\n\n请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其URI已经随Location头信息返回。\n假如需要的资源无法及时创建的话，应当返回`202 Accepted`。\n\n### 202 ACCEPTED\n\n请求已被接受处理，但处理尚未完成。请求可能最终会被处理，也可能不会被处理，在处理发生时可能会被拒绝。\n\n### 203 NON_AUTHORITATIVE_INFORMATION\n\n服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。\n\n### 204 NO_CONTENT\n\n服务器成功处理了请求，没有返回任何内容。\n\n### 205 RESET_CONTENT\n\n服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。\n\n### 206 PARTIAL_CONTENT\n\n服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。\n\n### 207 MULTI_STATUS\n\n代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。\n\n### 208 ALREADY_REPORTED\n\nDAV绑定的成员已经在(多状态 multistatus)响应的前面部分中列举过，并且不再包含。\n\n### 226 IM_USED\n\n服务器已经完成了对资源的请求，响应是应用于当前实例的一个或多个实例操作的结果的表示。\n\n## 3xx\n\n此类状态代码指示客户端必须采取附加操作来完成请求。其中许多状态码用于URL重定向，后续的请求地址（重定向目标）在本次响应的`Location`域中指明。\n当且仅当后续的请求所使用的方法是`GET`或者`HEAD`时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。\n客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。\n按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。\n\n### 300 MULTIPLE_CHOICES\n\n被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。\n除非这是一个`HEAD`请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。\n这个实体的格式由`Content-Type`定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。\n当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在`Location`中应当指明这个回馈的URI，\n浏览器可能会将这个`Location`值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。\n\n### 301 MOVED_PERMANENTLY\n\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。\n如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。\n新的永久性的URI应当在响应的`Location`域中返回。除非这是一个`HEAD`请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。\n如果这不是一个`GET`或者`HEAD`请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。\n\n### 302 FOUND\n\n要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。\n只有在`Cache-Control`或`Expires`中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI应当在响应的`Location`域中返回。\n除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。 \n如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 \n注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。\n因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。\n\n### 303 SEE_OTHER\n\n对应当前请求的响应可以在另一个`URI`上被找到，当响应于`POST`（或`PUT` / `DELETE`）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。\n这个方法的存在主要是为了允许由脚本激活的`POST`请求输出重定向到一个新的资源。\n这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 \n新的URI应当在响应的`Location`域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。 \n注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。\n如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。\n\n### 304 NOT_MODIFIED\n\n表示资源在由请求头中的`If-Modified-Since`或`If-None-Match`参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。\n\n### 305 USE_PROXY\n\n被请求的资源必须通过指定的代理才能被访问。`Location`域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。\n只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla Firefox和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。\n注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。\n\n### 306 RESERVED\n\n在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。\n\n### 307 TEMPORARY_REDIRECT\n\n在这种情况下，请求应该与另一个`URI`重复，但后续的请求应仍使用原始的`URI`。 与`302`相反，当重新发出原始请求时，不允许更改请求方法。 \n例如，应该使用另一个`POST`请求来重复`POST`请求。\n\n### 308 PERMANENTLY_REDIRECT\n\n请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。\n\n## 4xx\n\n这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，\n否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。\n这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。\n\n如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。\n如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，\n以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。\n\n### 400 BAD_REQUEST\n\n由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。\n\n### 401 UNAUTHORIZED\n\n参见：HTTP基本认证、HTTP摘要认证 类似于`403 Forbidden`，`401`语义即“未认证”，即用户没有必要的凭据。\n该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的`WWW-Authenticate`信息头用以询问用户信息。\n客户端可以重复提交一个包含恰当的`Authorization`头信息的请求。如果当前请求已经包含了`Authorization`证书，那么`401`响应代表着服务器验证已经拒绝了那些证书。\n如果`401`响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。 \n注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。\n\n### 402 PAYMENT_REQUIRED\n\n该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。\n如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。\n如果帐户没有足够的资金启动调用，Sipgate将使用此代码。\n当商店没有支付他们的费用并且暂时被禁用时，Shopify使用这个代码。\nStripe将此代码用于参数正确的失败支付，例如阻止欺诈支付。\n\n### 403 FORBIDDEN\n\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。\n如果这不是一个`HEAD`请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个`404`响应，假如它不希望让客户端获得任何信息。\n\n### 404 NOT_FOUND\n\n请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。\n假如服务器知道情况的话，应当使用`410`状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。\n404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。\n\n### 405 METHOD_NOT_ALLOWED\n\n请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个`Allow`头信息用以表示出当前资源能够接受的请求方法的列表。\n例如，需要通过`POST`呈现数据的表单上的`GET`请求，或只读资源上的`PUT`请求。 \n鉴于`PUT`，`DELETE`方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回`405`错误。\n\n### 406 NOT_ACCEPTABLE\n\n内容协商 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。\n除非这是一个`HEAD`请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。\n实体的格式由`Content-Type`头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。\n\n### 407 PROXY_AUTHENTICATION_REQUIRED\n\n与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个`Proxy-Authenticate`用以进行身份询问。\n客户端可以返回一个`Proxy-Authorization`信息头用以验证。\n\n### 408 REQUEST_TIMEOUT\n\n请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。\n\n### 409 CONFLICT\n\n表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。\n\n### 410 GONE\n\n表示所请求的资源不再可用，以后也不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。\n在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。\n\n### 411 LENGTH_REQUIRED\n\n服务器拒绝在没有定义`Content-Length`头的情况下接受请求。在添加了表明请求消息体长度的有效`Content-Length`头之后，客户端可以再次提交该请求。\n\n### 412 PRECONDITION_FAILED\n\n服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。\n这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。\n\n### 413 REQUEST_ENTITY_TOO_LARGE\n\n表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。\n此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个`Retry-After`的响应头，以告知客户端可以在多少时间以后重新尝试。\n\n### 414 REQUEST_URI_TOO_LONG\n\n表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。\n这比较少见，通常的情况包括： 本应使用`POST`方法的表单提交变成了`GET`方法，导致查询字符串过长。 \n重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。\n这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。\n\n### 415 UNSUPPORTED_MEDIA_TYPE\n\n对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。\n例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。\n\n### 416 REQUESTED_RANGE_NOT_SATISFIABLE\n\n客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。\n\n### 417 EXPECTATION_FAILED\n\n在请求头`Expect`中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，`Expect`的内容无法被满足。\n\n### 418 I_AM_A_TEAPOT\n\n该状态码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议'中定义的，并不需要在真实的HTTP服务器中定义。\n当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。\n\n### 421 MISDIRECTED_REQUEST\n\n该请求针对的是无法产生响应的服务器（例如因为连接重用）。\n\n### 422 UNPROCESSABLE_ENTITY\n\n请求格式正确，但是由于含有语义错误，无法响应。\n\n### 423 LOCKED\n\n当前资源被锁定。\n\n### 424 FAILED_DEPENDENCY\n\n请求失败是因为它依赖于另一个请求，而那个请求失败了，例如PROPPATCH。\n\n### 425 TOO_EARLY\n\n表示服务器不愿冒险处理可能重播的请求。\n\n### 426 UPGRADE_REQUIRED\n\n客户端应当切换到TLS/1.0，并在HTTP/1.1 `Upgrade`头中给出。\n\n### 428 PRECONDITION_REQUIRED\n\n原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，\n但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。\n\n### 429 TOO_MANY_REQUESTS\n\n用户在给定的时间内发送了太多的请求。旨在用于网络限速。\n\n### 431 REQUEST_HEADER_FIELDS_TOO_LARGE\n\n服务器不愿处理请求，因为一个或多个头字段过大。\n\n### 451 UNAVAILABLE_FOR_LEGAL_REASONS\n\n该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。\n\n## 5xx\n\n表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。\n除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。\n浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。\n\n### 500 INTERNAL_SERVER_ERROR\n\n通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。\n\n### 501 NOT_IMPLEMENTED\n\n服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）\n\n### 502 BAD_GATEWAY\n\n作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。\n\n### 503 SERVICE_UNAVAILABLE\n\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。\n如果能够预计延迟时间，那么响应中可以包含一个`Retry-After`头用以标明这个延迟时间。如果没有给出这个`Retry-After`信息，那么客户端应当以处理500响应的方式处理它。\n\n### 504 GATEWAY_TIMEOUT\n\n作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。\n注意：某些代理服务器在DNS查询超时时会返回400或者500错误。\n\n### 505 VERSION_NOT_SUPPORTED\n\n服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。\n\n### 506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL\n\n请求的透明内容协商将产生一个循环引用。\n\n### 507 INSUFFICIENT_STORAGE\n\n服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。\n\n### 508 LOOP_DETECTED\n\n服务器在处理请求时陷入死循环。（可代替 208状态码）\n\n### 510 NOT_EXTENDED\n\n获取资源所需要的策略并没有被满足。服务器需要对请求进行进一步扩展来满足它。\n\n### 511 NETWORK_AUTHENTICATION_REQUIRED\n\n客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）\n\n参考链接：\n\n[维基百科](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n[飞雪无情的博客](https://www.flysnow.org/tools/table/http-status-codes/)\n","slug":"tools/http_response_status_codes","published":1,"updated":"2020-04-02T13:50:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf6e00armv059q4d73pd","content":"<h2 id=\"1xx\"><a href=\"#1xx\" class=\"headerlink\" title=\"1xx\"></a>1xx</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。<br>由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。<br>这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>\n<h3 id=\"100-CONTINUE\"><a href=\"#100-CONTINUE\" class=\"headerlink\" title=\"100 CONTINUE\"></a>100 CONTINUE</h3><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送body的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。<br>服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，<br>并在发送正文之前接收100 Continue状态代码。如果客户端收到一个错误代码，如403(禁止)或405(方法不允许)，那么它不应该发送请求的主体。<br>响应代码417期望失败表示请求不应继续，因为它表明服务器不支持预期(这种情况下例如HTTP/1.0的服务器)。</p>\n<h3 id=\"101-SWITCHING-PROTOCOLS\"><a href=\"#101-SWITCHING-PROTOCOLS\" class=\"headerlink\" title=\"101 SWITCHING_PROTOCOLS\"></a>101 SWITCHING_PROTOCOLS</h3><p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。<br>在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。<br>例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>\n<h3 id=\"102-PROCESSING\"><a href=\"#102-PROCESSING\" class=\"headerlink\" title=\"102 PROCESSING\"></a>102 PROCESSING</h3><p>一个WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。<br>该响应表明服务器已经收到并正在处理请求，但无响应可用。这可以防止客户端超时并假设请求丢失。</p>\n<h3 id=\"103-EARLY-HINTS\"><a href=\"#103-EARLY-HINTS\" class=\"headerlink\" title=\"103 EARLY_HINTS\"></a>103 EARLY_HINTS</h3><p>用于在最终HTTP消息之前返回一些响应头。</p>\n<h2 id=\"2xx\"><a href=\"#2xx\" class=\"headerlink\" title=\"2xx\"></a>2xx</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>\n<h3 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h3><p>请求已成功，请求所希望的响应头或数据体将随此响应返回，实际的响应将取决于所使用的请求方法。<br>在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>\n<h3 id=\"201-CREATED\"><a href=\"#201-CREATED\" class=\"headerlink\" title=\"201 CREATED\"></a>201 CREATED</h3><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其URI已经随Location头信息返回。<br>假如需要的资源无法及时创建的话，应当返回<code>202 Accepted</code>。</p>\n<h3 id=\"202-ACCEPTED\"><a href=\"#202-ACCEPTED\" class=\"headerlink\" title=\"202 ACCEPTED\"></a>202 ACCEPTED</h3><p>请求已被接受处理，但处理尚未完成。请求可能最终会被处理，也可能不会被处理，在处理发生时可能会被拒绝。</p>\n<h3 id=\"203-NON-AUTHORITATIVE-INFORMATION\"><a href=\"#203-NON-AUTHORITATIVE-INFORMATION\" class=\"headerlink\" title=\"203 NON_AUTHORITATIVE_INFORMATION\"></a>203 NON_AUTHORITATIVE_INFORMATION</h3><p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>\n<h3 id=\"204-NO-CONTENT\"><a href=\"#204-NO-CONTENT\" class=\"headerlink\" title=\"204 NO_CONTENT\"></a>204 NO_CONTENT</h3><p>服务器成功处理了请求，没有返回任何内容。</p>\n<h3 id=\"205-RESET-CONTENT\"><a href=\"#205-RESET-CONTENT\" class=\"headerlink\" title=\"205 RESET_CONTENT\"></a>205 RESET_CONTENT</h3><p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>\n<h3 id=\"206-PARTIAL-CONTENT\"><a href=\"#206-PARTIAL-CONTENT\" class=\"headerlink\" title=\"206 PARTIAL_CONTENT\"></a>206 PARTIAL_CONTENT</h3><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>\n<h3 id=\"207-MULTI-STATUS\"><a href=\"#207-MULTI-STATUS\" class=\"headerlink\" title=\"207 MULTI_STATUS\"></a>207 MULTI_STATUS</h3><p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>\n<h3 id=\"208-ALREADY-REPORTED\"><a href=\"#208-ALREADY-REPORTED\" class=\"headerlink\" title=\"208 ALREADY_REPORTED\"></a>208 ALREADY_REPORTED</h3><p>DAV绑定的成员已经在(多状态 multistatus)响应的前面部分中列举过，并且不再包含。</p>\n<h3 id=\"226-IM-USED\"><a href=\"#226-IM-USED\" class=\"headerlink\" title=\"226 IM_USED\"></a>226 IM_USED</h3><p>服务器已经完成了对资源的请求，响应是应用于当前实例的一个或多个实例操作的结果的表示。</p>\n<h2 id=\"3xx\"><a href=\"#3xx\" class=\"headerlink\" title=\"3xx\"></a>3xx</h2><p>此类状态代码指示客户端必须采取附加操作来完成请求。其中许多状态码用于URL重定向，后续的请求地址（重定向目标）在本次响应的<code>Location</code>域中指明。<br>当且仅当后续的请求所使用的方法是<code>GET</code>或者<code>HEAD</code>时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。<br>客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。<br>按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>\n<h3 id=\"300-MULTIPLE-CHOICES\"><a href=\"#300-MULTIPLE-CHOICES\" class=\"headerlink\" title=\"300 MULTIPLE_CHOICES\"></a>300 MULTIPLE_CHOICES</h3><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个<code>HEAD</code>请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。<br>这个实体的格式由<code>Content-Type</code>定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。<br>当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在<code>Location</code>中应当指明这个回馈的URI，<br>浏览器可能会将这个<code>Location</code>值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>\n<h3 id=\"301-MOVED-PERMANENTLY\"><a href=\"#301-MOVED-PERMANENTLY\" class=\"headerlink\" title=\"301 MOVED_PERMANENTLY\"></a>301 MOVED_PERMANENTLY</h3><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。<br>如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的<code>Location</code>域中返回。除非这是一个<code>HEAD</code>请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个<code>GET</code>或者<code>HEAD</code>请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>\n<h3 id=\"302-FOUND\"><a href=\"#302-FOUND\" class=\"headerlink\" title=\"302 FOUND\"></a>302 FOUND</h3><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。<br>只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI应当在响应的<code>Location</code>域中返回。<br>除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。<br>因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>\n<h3 id=\"303-SEE-OTHER\"><a href=\"#303-SEE-OTHER\" class=\"headerlink\" title=\"303 SEE_OTHER\"></a>303 SEE_OTHER</h3><p>对应当前请求的响应可以在另一个<code>URI</code>上被找到，当响应于<code>POST</code>（或<code>PUT</code> / <code>DELETE</code>）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。<br>这个方法的存在主要是为了允许由脚本激活的<code>POST</code>请求输出重定向到一个新的资源。<br>这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的<code>Location</code>域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。<br>如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>\n<h3 id=\"304-NOT-MODIFIED\"><a href=\"#304-NOT-MODIFIED\" class=\"headerlink\" title=\"304 NOT_MODIFIED\"></a>304 NOT_MODIFIED</h3><p>表示资源在由请求头中的<code>If-Modified-Since</code>或<code>If-None-Match</code>参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>\n<h3 id=\"305-USE-PROXY\"><a href=\"#305-USE-PROXY\" class=\"headerlink\" title=\"305 USE_PROXY\"></a>305 USE_PROXY</h3><p>被请求的资源必须通过指定的代理才能被访问。<code>Location</code>域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。<br>只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla Firefox和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>\n<h3 id=\"306-RESERVED\"><a href=\"#306-RESERVED\" class=\"headerlink\" title=\"306 RESERVED\"></a>306 RESERVED</h3><p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>\n<h3 id=\"307-TEMPORARY-REDIRECT\"><a href=\"#307-TEMPORARY-REDIRECT\" class=\"headerlink\" title=\"307 TEMPORARY_REDIRECT\"></a>307 TEMPORARY_REDIRECT</h3><p>在这种情况下，请求应该与另一个<code>URI</code>重复，但后续的请求应仍使用原始的<code>URI</code>。 与<code>302</code>相反，当重新发出原始请求时，不允许更改请求方法。<br>例如，应该使用另一个<code>POST</code>请求来重复<code>POST</code>请求。</p>\n<h3 id=\"308-PERMANENTLY-REDIRECT\"><a href=\"#308-PERMANENTLY-REDIRECT\" class=\"headerlink\" title=\"308 PERMANENTLY_REDIRECT\"></a>308 PERMANENTLY_REDIRECT</h3><p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>\n<h2 id=\"4xx\"><a href=\"#4xx\" class=\"headerlink\" title=\"4xx\"></a>4xx</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，<br>否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。<br>这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>\n<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。<br>如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，<br>以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>\n<h3 id=\"400-BAD-REQUEST\"><a href=\"#400-BAD-REQUEST\" class=\"headerlink\" title=\"400 BAD_REQUEST\"></a>400 BAD_REQUEST</h3><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>\n<h3 id=\"401-UNAUTHORIZED\"><a href=\"#401-UNAUTHORIZED\" class=\"headerlink\" title=\"401 UNAUTHORIZED\"></a>401 UNAUTHORIZED</h3><p>参见：HTTP基本认证、HTTP摘要认证 类似于<code>403 Forbidden</code>，<code>401</code>语义即“未认证”，即用户没有必要的凭据。<br>该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的<code>WWW-Authenticate</code>信息头用以询问用户信息。<br>客户端可以重复提交一个包含恰当的<code>Authorization</code>头信息的请求。如果当前请求已经包含了<code>Authorization</code>证书，那么<code>401</code>响应代表着服务器验证已经拒绝了那些证书。<br>如果<code>401</code>响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>\n<h3 id=\"402-PAYMENT-REQUIRED\"><a href=\"#402-PAYMENT-REQUIRED\" class=\"headerlink\" title=\"402 PAYMENT_REQUIRED\"></a>402 PAYMENT_REQUIRED</h3><p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。<br>如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。<br>如果帐户没有足够的资金启动调用，Sipgate将使用此代码。<br>当商店没有支付他们的费用并且暂时被禁用时，Shopify使用这个代码。<br>Stripe将此代码用于参数正确的失败支付，例如阻止欺诈支付。</p>\n<h3 id=\"403-FORBIDDEN\"><a href=\"#403-FORBIDDEN\" class=\"headerlink\" title=\"403 FORBIDDEN\"></a>403 FORBIDDEN</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。<br>如果这不是一个<code>HEAD</code>请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个<code>404</code>响应，假如它不希望让客户端获得任何信息。</p>\n<h3 id=\"404-NOT-FOUND\"><a href=\"#404-NOT-FOUND\" class=\"headerlink\" title=\"404 NOT_FOUND\"></a>404 NOT_FOUND</h3><p>请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。<br>假如服务器知道情况的话，应当使用<code>410</code>状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。<br>404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>\n<h3 id=\"405-METHOD-NOT-ALLOWED\"><a href=\"#405-METHOD-NOT-ALLOWED\" class=\"headerlink\" title=\"405 METHOD_NOT_ALLOWED\"></a>405 METHOD_NOT_ALLOWED</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个<code>Allow</code>头信息用以表示出当前资源能够接受的请求方法的列表。<br>例如，需要通过<code>POST</code>呈现数据的表单上的<code>GET</code>请求，或只读资源上的<code>PUT</code>请求。<br>鉴于<code>PUT</code>，<code>DELETE</code>方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回<code>405</code>错误。</p>\n<h3 id=\"406-NOT-ACCEPTABLE\"><a href=\"#406-NOT-ACCEPTABLE\" class=\"headerlink\" title=\"406 NOT_ACCEPTABLE\"></a>406 NOT_ACCEPTABLE</h3><p>内容协商 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个<code>HEAD</code>请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。<br>实体的格式由<code>Content-Type</code>头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>\n<h3 id=\"407-PROXY-AUTHENTICATION-REQUIRED\"><a href=\"#407-PROXY-AUTHENTICATION-REQUIRED\" class=\"headerlink\" title=\"407 PROXY_AUTHENTICATION_REQUIRED\"></a>407 PROXY_AUTHENTICATION_REQUIRED</h3><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个<code>Proxy-Authenticate</code>用以进行身份询问。<br>客户端可以返回一个<code>Proxy-Authorization</code>信息头用以验证。</p>\n<h3 id=\"408-REQUEST-TIMEOUT\"><a href=\"#408-REQUEST-TIMEOUT\" class=\"headerlink\" title=\"408 REQUEST_TIMEOUT\"></a>408 REQUEST_TIMEOUT</h3><p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>\n<h3 id=\"409-CONFLICT\"><a href=\"#409-CONFLICT\" class=\"headerlink\" title=\"409 CONFLICT\"></a>409 CONFLICT</h3><p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>\n<h3 id=\"410-GONE\"><a href=\"#410-GONE\" class=\"headerlink\" title=\"410 GONE\"></a>410 GONE</h3><p>表示所请求的资源不再可用，以后也不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。<br>在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>\n<h3 id=\"411-LENGTH-REQUIRED\"><a href=\"#411-LENGTH-REQUIRED\" class=\"headerlink\" title=\"411 LENGTH_REQUIRED\"></a>411 LENGTH_REQUIRED</h3><p>服务器拒绝在没有定义<code>Content-Length</code>头的情况下接受请求。在添加了表明请求消息体长度的有效<code>Content-Length</code>头之后，客户端可以再次提交该请求。</p>\n<h3 id=\"412-PRECONDITION-FAILED\"><a href=\"#412-PRECONDITION-FAILED\" class=\"headerlink\" title=\"412 PRECONDITION_FAILED\"></a>412 PRECONDITION_FAILED</h3><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。<br>这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>\n<h3 id=\"413-REQUEST-ENTITY-TOO-LARGE\"><a href=\"#413-REQUEST-ENTITY-TOO-LARGE\" class=\"headerlink\" title=\"413 REQUEST_ENTITY_TOO_LARGE\"></a>413 REQUEST_ENTITY_TOO_LARGE</h3><p>表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。<br>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个<code>Retry-After</code>的响应头，以告知客户端可以在多少时间以后重新尝试。</p>\n<h3 id=\"414-REQUEST-URI-TOO-LONG\"><a href=\"#414-REQUEST-URI-TOO-LONG\" class=\"headerlink\" title=\"414 REQUEST_URI_TOO_LONG\"></a>414 REQUEST_URI_TOO_LONG</h3><p>表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。<br>这比较少见，通常的情况包括： 本应使用<code>POST</code>方法的表单提交变成了<code>GET</code>方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。<br>这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>\n<h3 id=\"415-UNSUPPORTED-MEDIA-TYPE\"><a href=\"#415-UNSUPPORTED-MEDIA-TYPE\" class=\"headerlink\" title=\"415 UNSUPPORTED_MEDIA_TYPE\"></a>415 UNSUPPORTED_MEDIA_TYPE</h3><p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。<br>例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>\n<h3 id=\"416-REQUESTED-RANGE-NOT-SATISFIABLE\"><a href=\"#416-REQUESTED-RANGE-NOT-SATISFIABLE\" class=\"headerlink\" title=\"416 REQUESTED_RANGE_NOT_SATISFIABLE\"></a>416 REQUESTED_RANGE_NOT_SATISFIABLE</h3><p>客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>\n<h3 id=\"417-EXPECTATION-FAILED\"><a href=\"#417-EXPECTATION-FAILED\" class=\"headerlink\" title=\"417 EXPECTATION_FAILED\"></a>417 EXPECTATION_FAILED</h3><p>在请求头<code>Expect</code>中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，<code>Expect</code>的内容无法被满足。</p>\n<h3 id=\"418-I-AM-A-TEAPOT\"><a href=\"#418-I-AM-A-TEAPOT\" class=\"headerlink\" title=\"418 I_AM_A_TEAPOT\"></a>418 I_AM_A_TEAPOT</h3><p>该状态码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。<br>当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>\n<h3 id=\"421-MISDIRECTED-REQUEST\"><a href=\"#421-MISDIRECTED-REQUEST\" class=\"headerlink\" title=\"421 MISDIRECTED_REQUEST\"></a>421 MISDIRECTED_REQUEST</h3><p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>\n<h3 id=\"422-UNPROCESSABLE-ENTITY\"><a href=\"#422-UNPROCESSABLE-ENTITY\" class=\"headerlink\" title=\"422 UNPROCESSABLE_ENTITY\"></a>422 UNPROCESSABLE_ENTITY</h3><p>请求格式正确，但是由于含有语义错误，无法响应。</p>\n<h3 id=\"423-LOCKED\"><a href=\"#423-LOCKED\" class=\"headerlink\" title=\"423 LOCKED\"></a>423 LOCKED</h3><p>当前资源被锁定。</p>\n<h3 id=\"424-FAILED-DEPENDENCY\"><a href=\"#424-FAILED-DEPENDENCY\" class=\"headerlink\" title=\"424 FAILED_DEPENDENCY\"></a>424 FAILED_DEPENDENCY</h3><p>请求失败是因为它依赖于另一个请求，而那个请求失败了，例如PROPPATCH。</p>\n<h3 id=\"425-TOO-EARLY\"><a href=\"#425-TOO-EARLY\" class=\"headerlink\" title=\"425 TOO_EARLY\"></a>425 TOO_EARLY</h3><p>表示服务器不愿冒险处理可能重播的请求。</p>\n<h3 id=\"426-UPGRADE-REQUIRED\"><a href=\"#426-UPGRADE-REQUIRED\" class=\"headerlink\" title=\"426 UPGRADE_REQUIRED\"></a>426 UPGRADE_REQUIRED</h3><p>客户端应当切换到TLS/1.0，并在HTTP/1.1 <code>Upgrade</code>头中给出。</p>\n<h3 id=\"428-PRECONDITION-REQUIRED\"><a href=\"#428-PRECONDITION-REQUIRED\" class=\"headerlink\" title=\"428 PRECONDITION_REQUIRED\"></a>428 PRECONDITION_REQUIRED</h3><p>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，<br>但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。</p>\n<h3 id=\"429-TOO-MANY-REQUESTS\"><a href=\"#429-TOO-MANY-REQUESTS\" class=\"headerlink\" title=\"429 TOO_MANY_REQUESTS\"></a>429 TOO_MANY_REQUESTS</h3><p>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>\n<h3 id=\"431-REQUEST-HEADER-FIELDS-TOO-LARGE\"><a href=\"#431-REQUEST-HEADER-FIELDS-TOO-LARGE\" class=\"headerlink\" title=\"431 REQUEST_HEADER_FIELDS_TOO_LARGE\"></a>431 REQUEST_HEADER_FIELDS_TOO_LARGE</h3><p>服务器不愿处理请求，因为一个或多个头字段过大。</p>\n<h3 id=\"451-UNAVAILABLE-FOR-LEGAL-REASONS\"><a href=\"#451-UNAVAILABLE-FOR-LEGAL-REASONS\" class=\"headerlink\" title=\"451 UNAVAILABLE_FOR_LEGAL_REASONS\"></a>451 UNAVAILABLE_FOR_LEGAL_REASONS</h3><p>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>\n<h2 id=\"5xx\"><a href=\"#5xx\" class=\"headerlink\" title=\"5xx\"></a>5xx</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。<br>除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。<br>浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>\n<h3 id=\"500-INTERNAL-SERVER-ERROR\"><a href=\"#500-INTERNAL-SERVER-ERROR\" class=\"headerlink\" title=\"500 INTERNAL_SERVER_ERROR\"></a>500 INTERNAL_SERVER_ERROR</h3><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>\n<h3 id=\"501-NOT-IMPLEMENTED\"><a href=\"#501-NOT-IMPLEMENTED\" class=\"headerlink\" title=\"501 NOT_IMPLEMENTED\"></a>501 NOT_IMPLEMENTED</h3><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>\n<h3 id=\"502-BAD-GATEWAY\"><a href=\"#502-BAD-GATEWAY\" class=\"headerlink\" title=\"502 BAD_GATEWAY\"></a>502 BAD_GATEWAY</h3><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>\n<h3 id=\"503-SERVICE-UNAVAILABLE\"><a href=\"#503-SERVICE-UNAVAILABLE\" class=\"headerlink\" title=\"503 SERVICE_UNAVAILABLE\"></a>503 SERVICE_UNAVAILABLE</h3><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。<br>如果能够预计延迟时间，那么响应中可以包含一个<code>Retry-After</code>头用以标明这个延迟时间。如果没有给出这个<code>Retry-After</code>信息，那么客户端应当以处理500响应的方式处理它。</p>\n<h3 id=\"504-GATEWAY-TIMEOUT\"><a href=\"#504-GATEWAY-TIMEOUT\" class=\"headerlink\" title=\"504 GATEWAY_TIMEOUT\"></a>504 GATEWAY_TIMEOUT</h3><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>\n<h3 id=\"505-VERSION-NOT-SUPPORTED\"><a href=\"#505-VERSION-NOT-SUPPORTED\" class=\"headerlink\" title=\"505 VERSION_NOT_SUPPORTED\"></a>505 VERSION_NOT_SUPPORTED</h3><p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>\n<h3 id=\"506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL\"><a href=\"#506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL\" class=\"headerlink\" title=\"506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL\"></a>506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL</h3><p>请求的透明内容协商将产生一个循环引用。</p>\n<h3 id=\"507-INSUFFICIENT-STORAGE\"><a href=\"#507-INSUFFICIENT-STORAGE\" class=\"headerlink\" title=\"507 INSUFFICIENT_STORAGE\"></a>507 INSUFFICIENT_STORAGE</h3><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>\n<h3 id=\"508-LOOP-DETECTED\"><a href=\"#508-LOOP-DETECTED\" class=\"headerlink\" title=\"508 LOOP_DETECTED\"></a>508 LOOP_DETECTED</h3><p>服务器在处理请求时陷入死循环。（可代替 208状态码）</p>\n<h3 id=\"510-NOT-EXTENDED\"><a href=\"#510-NOT-EXTENDED\" class=\"headerlink\" title=\"510 NOT_EXTENDED\"></a>510 NOT_EXTENDED</h3><p>获取资源所需要的策略并没有被满足。服务器需要对请求进行进一步扩展来满足它。</p>\n<h3 id=\"511-NETWORK-AUTHENTICATION-REQUIRED\"><a href=\"#511-NETWORK-AUTHENTICATION-REQUIRED\" class=\"headerlink\" title=\"511 NETWORK_AUTHENTICATION_REQUIRED\"></a>511 NETWORK_AUTHENTICATION_REQUIRED</h3><p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>\n<p>参考链接：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">维基百科</a></p>\n<p><a href=\"https://www.flysnow.org/tools/table/http-status-codes/\">飞雪无情的博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1xx\"><a href=\"#1xx\" class=\"headerlink\" title=\"1xx\"></a>1xx</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。<br>由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。<br>这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>\n<h3 id=\"100-CONTINUE\"><a href=\"#100-CONTINUE\" class=\"headerlink\" title=\"100 CONTINUE\"></a>100 CONTINUE</h3><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送body的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。<br>服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，<br>并在发送正文之前接收100 Continue状态代码。如果客户端收到一个错误代码，如403(禁止)或405(方法不允许)，那么它不应该发送请求的主体。<br>响应代码417期望失败表示请求不应继续，因为它表明服务器不支持预期(这种情况下例如HTTP/1.0的服务器)。</p>\n<h3 id=\"101-SWITCHING-PROTOCOLS\"><a href=\"#101-SWITCHING-PROTOCOLS\" class=\"headerlink\" title=\"101 SWITCHING_PROTOCOLS\"></a>101 SWITCHING_PROTOCOLS</h3><p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。<br>在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。<br>例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>\n<h3 id=\"102-PROCESSING\"><a href=\"#102-PROCESSING\" class=\"headerlink\" title=\"102 PROCESSING\"></a>102 PROCESSING</h3><p>一个WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。<br>该响应表明服务器已经收到并正在处理请求，但无响应可用。这可以防止客户端超时并假设请求丢失。</p>\n<h3 id=\"103-EARLY-HINTS\"><a href=\"#103-EARLY-HINTS\" class=\"headerlink\" title=\"103 EARLY_HINTS\"></a>103 EARLY_HINTS</h3><p>用于在最终HTTP消息之前返回一些响应头。</p>\n<h2 id=\"2xx\"><a href=\"#2xx\" class=\"headerlink\" title=\"2xx\"></a>2xx</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>\n<h3 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h3><p>请求已成功，请求所希望的响应头或数据体将随此响应返回，实际的响应将取决于所使用的请求方法。<br>在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>\n<h3 id=\"201-CREATED\"><a href=\"#201-CREATED\" class=\"headerlink\" title=\"201 CREATED\"></a>201 CREATED</h3><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其URI已经随Location头信息返回。<br>假如需要的资源无法及时创建的话，应当返回<code>202 Accepted</code>。</p>\n<h3 id=\"202-ACCEPTED\"><a href=\"#202-ACCEPTED\" class=\"headerlink\" title=\"202 ACCEPTED\"></a>202 ACCEPTED</h3><p>请求已被接受处理，但处理尚未完成。请求可能最终会被处理，也可能不会被处理，在处理发生时可能会被拒绝。</p>\n<h3 id=\"203-NON-AUTHORITATIVE-INFORMATION\"><a href=\"#203-NON-AUTHORITATIVE-INFORMATION\" class=\"headerlink\" title=\"203 NON_AUTHORITATIVE_INFORMATION\"></a>203 NON_AUTHORITATIVE_INFORMATION</h3><p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>\n<h3 id=\"204-NO-CONTENT\"><a href=\"#204-NO-CONTENT\" class=\"headerlink\" title=\"204 NO_CONTENT\"></a>204 NO_CONTENT</h3><p>服务器成功处理了请求，没有返回任何内容。</p>\n<h3 id=\"205-RESET-CONTENT\"><a href=\"#205-RESET-CONTENT\" class=\"headerlink\" title=\"205 RESET_CONTENT\"></a>205 RESET_CONTENT</h3><p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>\n<h3 id=\"206-PARTIAL-CONTENT\"><a href=\"#206-PARTIAL-CONTENT\" class=\"headerlink\" title=\"206 PARTIAL_CONTENT\"></a>206 PARTIAL_CONTENT</h3><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>\n<h3 id=\"207-MULTI-STATUS\"><a href=\"#207-MULTI-STATUS\" class=\"headerlink\" title=\"207 MULTI_STATUS\"></a>207 MULTI_STATUS</h3><p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>\n<h3 id=\"208-ALREADY-REPORTED\"><a href=\"#208-ALREADY-REPORTED\" class=\"headerlink\" title=\"208 ALREADY_REPORTED\"></a>208 ALREADY_REPORTED</h3><p>DAV绑定的成员已经在(多状态 multistatus)响应的前面部分中列举过，并且不再包含。</p>\n<h3 id=\"226-IM-USED\"><a href=\"#226-IM-USED\" class=\"headerlink\" title=\"226 IM_USED\"></a>226 IM_USED</h3><p>服务器已经完成了对资源的请求，响应是应用于当前实例的一个或多个实例操作的结果的表示。</p>\n<h2 id=\"3xx\"><a href=\"#3xx\" class=\"headerlink\" title=\"3xx\"></a>3xx</h2><p>此类状态代码指示客户端必须采取附加操作来完成请求。其中许多状态码用于URL重定向，后续的请求地址（重定向目标）在本次响应的<code>Location</code>域中指明。<br>当且仅当后续的请求所使用的方法是<code>GET</code>或者<code>HEAD</code>时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。<br>客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。<br>按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>\n<h3 id=\"300-MULTIPLE-CHOICES\"><a href=\"#300-MULTIPLE-CHOICES\" class=\"headerlink\" title=\"300 MULTIPLE_CHOICES\"></a>300 MULTIPLE_CHOICES</h3><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个<code>HEAD</code>请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。<br>这个实体的格式由<code>Content-Type</code>定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。<br>当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 如果服务器本身已经有了首选的回馈选择，那么在<code>Location</code>中应当指明这个回馈的URI，<br>浏览器可能会将这个<code>Location</code>值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>\n<h3 id=\"301-MOVED-PERMANENTLY\"><a href=\"#301-MOVED-PERMANENTLY\" class=\"headerlink\" title=\"301 MOVED_PERMANENTLY\"></a>301 MOVED_PERMANENTLY</h3><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。<br>如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的<code>Location</code>域中返回。除非这是一个<code>HEAD</code>请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个<code>GET</code>或者<code>HEAD</code>请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>\n<h3 id=\"302-FOUND\"><a href=\"#302-FOUND\" class=\"headerlink\" title=\"302 FOUND\"></a>302 FOUND</h3><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。<br>只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的。 新的临时性的URI应当在响应的<code>Location</code>域中返回。<br>除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。<br>因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>\n<h3 id=\"303-SEE-OTHER\"><a href=\"#303-SEE-OTHER\" class=\"headerlink\" title=\"303 SEE_OTHER\"></a>303 SEE_OTHER</h3><p>对应当前请求的响应可以在另一个<code>URI</code>上被找到，当响应于<code>POST</code>（或<code>PUT</code> / <code>DELETE</code>）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。<br>这个方法的存在主要是为了允许由脚本激活的<code>POST</code>请求输出重定向到一个新的资源。<br>这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的<code>Location</code>域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。<br>如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>\n<h3 id=\"304-NOT-MODIFIED\"><a href=\"#304-NOT-MODIFIED\" class=\"headerlink\" title=\"304 NOT_MODIFIED\"></a>304 NOT_MODIFIED</h3><p>表示资源在由请求头中的<code>If-Modified-Since</code>或<code>If-None-Match</code>参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>\n<h3 id=\"305-USE-PROXY\"><a href=\"#305-USE-PROXY\" class=\"headerlink\" title=\"305 USE_PROXY\"></a>305 USE_PROXY</h3><p>被请求的资源必须通过指定的代理才能被访问。<code>Location</code>域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。<br>只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla Firefox和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>\n<h3 id=\"306-RESERVED\"><a href=\"#306-RESERVED\" class=\"headerlink\" title=\"306 RESERVED\"></a>306 RESERVED</h3><p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>\n<h3 id=\"307-TEMPORARY-REDIRECT\"><a href=\"#307-TEMPORARY-REDIRECT\" class=\"headerlink\" title=\"307 TEMPORARY_REDIRECT\"></a>307 TEMPORARY_REDIRECT</h3><p>在这种情况下，请求应该与另一个<code>URI</code>重复，但后续的请求应仍使用原始的<code>URI</code>。 与<code>302</code>相反，当重新发出原始请求时，不允许更改请求方法。<br>例如，应该使用另一个<code>POST</code>请求来重复<code>POST</code>请求。</p>\n<h3 id=\"308-PERMANENTLY-REDIRECT\"><a href=\"#308-PERMANENTLY-REDIRECT\" class=\"headerlink\" title=\"308 PERMANENTLY_REDIRECT\"></a>308 PERMANENTLY_REDIRECT</h3><p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>\n<h2 id=\"4xx\"><a href=\"#4xx\" class=\"headerlink\" title=\"4xx\"></a>4xx</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，<br>否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。<br>这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>\n<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。<br>如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，<br>以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>\n<h3 id=\"400-BAD-REQUEST\"><a href=\"#400-BAD-REQUEST\" class=\"headerlink\" title=\"400 BAD_REQUEST\"></a>400 BAD_REQUEST</h3><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>\n<h3 id=\"401-UNAUTHORIZED\"><a href=\"#401-UNAUTHORIZED\" class=\"headerlink\" title=\"401 UNAUTHORIZED\"></a>401 UNAUTHORIZED</h3><p>参见：HTTP基本认证、HTTP摘要认证 类似于<code>403 Forbidden</code>，<code>401</code>语义即“未认证”，即用户没有必要的凭据。<br>该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的<code>WWW-Authenticate</code>信息头用以询问用户信息。<br>客户端可以重复提交一个包含恰当的<code>Authorization</code>头信息的请求。如果当前请求已经包含了<code>Authorization</code>证书，那么<code>401</code>响应代表着服务器验证已经拒绝了那些证书。<br>如果<code>401</code>响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>\n<h3 id=\"402-PAYMENT-REQUIRED\"><a href=\"#402-PAYMENT-REQUIRED\" class=\"headerlink\" title=\"402 PAYMENT_REQUIRED\"></a>402 PAYMENT_REQUIRED</h3><p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。<br>如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。<br>如果帐户没有足够的资金启动调用，Sipgate将使用此代码。<br>当商店没有支付他们的费用并且暂时被禁用时，Shopify使用这个代码。<br>Stripe将此代码用于参数正确的失败支付，例如阻止欺诈支付。</p>\n<h3 id=\"403-FORBIDDEN\"><a href=\"#403-FORBIDDEN\" class=\"headerlink\" title=\"403 FORBIDDEN\"></a>403 FORBIDDEN</h3><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。<br>如果这不是一个<code>HEAD</code>请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个<code>404</code>响应，假如它不希望让客户端获得任何信息。</p>\n<h3 id=\"404-NOT-FOUND\"><a href=\"#404-NOT-FOUND\" class=\"headerlink\" title=\"404 NOT_FOUND\"></a>404 NOT_FOUND</h3><p>请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。<br>假如服务器知道情况的话，应当使用<code>410</code>状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。<br>404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>\n<h3 id=\"405-METHOD-NOT-ALLOWED\"><a href=\"#405-METHOD-NOT-ALLOWED\" class=\"headerlink\" title=\"405 METHOD_NOT_ALLOWED\"></a>405 METHOD_NOT_ALLOWED</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个<code>Allow</code>头信息用以表示出当前资源能够接受的请求方法的列表。<br>例如，需要通过<code>POST</code>呈现数据的表单上的<code>GET</code>请求，或只读资源上的<code>PUT</code>请求。<br>鉴于<code>PUT</code>，<code>DELETE</code>方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回<code>405</code>错误。</p>\n<h3 id=\"406-NOT-ACCEPTABLE\"><a href=\"#406-NOT-ACCEPTABLE\" class=\"headerlink\" title=\"406 NOT_ACCEPTABLE\"></a>406 NOT_ACCEPTABLE</h3><p>内容协商 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个<code>HEAD</code>请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。<br>实体的格式由<code>Content-Type</code>头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>\n<h3 id=\"407-PROXY-AUTHENTICATION-REQUIRED\"><a href=\"#407-PROXY-AUTHENTICATION-REQUIRED\" class=\"headerlink\" title=\"407 PROXY_AUTHENTICATION_REQUIRED\"></a>407 PROXY_AUTHENTICATION_REQUIRED</h3><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个<code>Proxy-Authenticate</code>用以进行身份询问。<br>客户端可以返回一个<code>Proxy-Authorization</code>信息头用以验证。</p>\n<h3 id=\"408-REQUEST-TIMEOUT\"><a href=\"#408-REQUEST-TIMEOUT\" class=\"headerlink\" title=\"408 REQUEST_TIMEOUT\"></a>408 REQUEST_TIMEOUT</h3><p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>\n<h3 id=\"409-CONFLICT\"><a href=\"#409-CONFLICT\" class=\"headerlink\" title=\"409 CONFLICT\"></a>409 CONFLICT</h3><p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>\n<h3 id=\"410-GONE\"><a href=\"#410-GONE\" class=\"headerlink\" title=\"410 GONE\"></a>410 GONE</h3><p>表示所请求的资源不再可用，以后也不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。<br>在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>\n<h3 id=\"411-LENGTH-REQUIRED\"><a href=\"#411-LENGTH-REQUIRED\" class=\"headerlink\" title=\"411 LENGTH_REQUIRED\"></a>411 LENGTH_REQUIRED</h3><p>服务器拒绝在没有定义<code>Content-Length</code>头的情况下接受请求。在添加了表明请求消息体长度的有效<code>Content-Length</code>头之后，客户端可以再次提交该请求。</p>\n<h3 id=\"412-PRECONDITION-FAILED\"><a href=\"#412-PRECONDITION-FAILED\" class=\"headerlink\" title=\"412 PRECONDITION_FAILED\"></a>412 PRECONDITION_FAILED</h3><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。<br>这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>\n<h3 id=\"413-REQUEST-ENTITY-TOO-LARGE\"><a href=\"#413-REQUEST-ENTITY-TOO-LARGE\" class=\"headerlink\" title=\"413 REQUEST_ENTITY_TOO_LARGE\"></a>413 REQUEST_ENTITY_TOO_LARGE</h3><p>表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。<br>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 如果这个状况是临时的，服务器应当返回一个<code>Retry-After</code>的响应头，以告知客户端可以在多少时间以后重新尝试。</p>\n<h3 id=\"414-REQUEST-URI-TOO-LONG\"><a href=\"#414-REQUEST-URI-TOO-LONG\" class=\"headerlink\" title=\"414 REQUEST_URI_TOO_LONG\"></a>414 REQUEST_URI_TOO_LONG</h3><p>表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。<br>这比较少见，通常的情况包括： 本应使用<code>POST</code>方法的表单提交变成了<code>GET</code>方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。 客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。<br>这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>\n<h3 id=\"415-UNSUPPORTED-MEDIA-TYPE\"><a href=\"#415-UNSUPPORTED-MEDIA-TYPE\" class=\"headerlink\" title=\"415 UNSUPPORTED_MEDIA_TYPE\"></a>415 UNSUPPORTED_MEDIA_TYPE</h3><p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。<br>例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>\n<h3 id=\"416-REQUESTED-RANGE-NOT-SATISFIABLE\"><a href=\"#416-REQUESTED-RANGE-NOT-SATISFIABLE\" class=\"headerlink\" title=\"416 REQUESTED_RANGE_NOT_SATISFIABLE\"></a>416 REQUESTED_RANGE_NOT_SATISFIABLE</h3><p>客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>\n<h3 id=\"417-EXPECTATION-FAILED\"><a href=\"#417-EXPECTATION-FAILED\" class=\"headerlink\" title=\"417 EXPECTATION_FAILED\"></a>417 EXPECTATION_FAILED</h3><p>在请求头<code>Expect</code>中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，<code>Expect</code>的内容无法被满足。</p>\n<h3 id=\"418-I-AM-A-TEAPOT\"><a href=\"#418-I-AM-A-TEAPOT\" class=\"headerlink\" title=\"418 I_AM_A_TEAPOT\"></a>418 I_AM_A_TEAPOT</h3><p>该状态码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。<br>当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>\n<h3 id=\"421-MISDIRECTED-REQUEST\"><a href=\"#421-MISDIRECTED-REQUEST\" class=\"headerlink\" title=\"421 MISDIRECTED_REQUEST\"></a>421 MISDIRECTED_REQUEST</h3><p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>\n<h3 id=\"422-UNPROCESSABLE-ENTITY\"><a href=\"#422-UNPROCESSABLE-ENTITY\" class=\"headerlink\" title=\"422 UNPROCESSABLE_ENTITY\"></a>422 UNPROCESSABLE_ENTITY</h3><p>请求格式正确，但是由于含有语义错误，无法响应。</p>\n<h3 id=\"423-LOCKED\"><a href=\"#423-LOCKED\" class=\"headerlink\" title=\"423 LOCKED\"></a>423 LOCKED</h3><p>当前资源被锁定。</p>\n<h3 id=\"424-FAILED-DEPENDENCY\"><a href=\"#424-FAILED-DEPENDENCY\" class=\"headerlink\" title=\"424 FAILED_DEPENDENCY\"></a>424 FAILED_DEPENDENCY</h3><p>请求失败是因为它依赖于另一个请求，而那个请求失败了，例如PROPPATCH。</p>\n<h3 id=\"425-TOO-EARLY\"><a href=\"#425-TOO-EARLY\" class=\"headerlink\" title=\"425 TOO_EARLY\"></a>425 TOO_EARLY</h3><p>表示服务器不愿冒险处理可能重播的请求。</p>\n<h3 id=\"426-UPGRADE-REQUIRED\"><a href=\"#426-UPGRADE-REQUIRED\" class=\"headerlink\" title=\"426 UPGRADE_REQUIRED\"></a>426 UPGRADE_REQUIRED</h3><p>客户端应当切换到TLS/1.0，并在HTTP/1.1 <code>Upgrade</code>头中给出。</p>\n<h3 id=\"428-PRECONDITION-REQUIRED\"><a href=\"#428-PRECONDITION-REQUIRED\" class=\"headerlink\" title=\"428 PRECONDITION_REQUIRED\"></a>428 PRECONDITION_REQUIRED</h3><p>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，<br>但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。</p>\n<h3 id=\"429-TOO-MANY-REQUESTS\"><a href=\"#429-TOO-MANY-REQUESTS\" class=\"headerlink\" title=\"429 TOO_MANY_REQUESTS\"></a>429 TOO_MANY_REQUESTS</h3><p>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>\n<h3 id=\"431-REQUEST-HEADER-FIELDS-TOO-LARGE\"><a href=\"#431-REQUEST-HEADER-FIELDS-TOO-LARGE\" class=\"headerlink\" title=\"431 REQUEST_HEADER_FIELDS_TOO_LARGE\"></a>431 REQUEST_HEADER_FIELDS_TOO_LARGE</h3><p>服务器不愿处理请求，因为一个或多个头字段过大。</p>\n<h3 id=\"451-UNAVAILABLE-FOR-LEGAL-REASONS\"><a href=\"#451-UNAVAILABLE-FOR-LEGAL-REASONS\" class=\"headerlink\" title=\"451 UNAVAILABLE_FOR_LEGAL_REASONS\"></a>451 UNAVAILABLE_FOR_LEGAL_REASONS</h3><p>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>\n<h2 id=\"5xx\"><a href=\"#5xx\" class=\"headerlink\" title=\"5xx\"></a>5xx</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。<br>除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。<br>浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>\n<h3 id=\"500-INTERNAL-SERVER-ERROR\"><a href=\"#500-INTERNAL-SERVER-ERROR\" class=\"headerlink\" title=\"500 INTERNAL_SERVER_ERROR\"></a>500 INTERNAL_SERVER_ERROR</h3><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>\n<h3 id=\"501-NOT-IMPLEMENTED\"><a href=\"#501-NOT-IMPLEMENTED\" class=\"headerlink\" title=\"501 NOT_IMPLEMENTED\"></a>501 NOT_IMPLEMENTED</h3><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>\n<h3 id=\"502-BAD-GATEWAY\"><a href=\"#502-BAD-GATEWAY\" class=\"headerlink\" title=\"502 BAD_GATEWAY\"></a>502 BAD_GATEWAY</h3><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>\n<h3 id=\"503-SERVICE-UNAVAILABLE\"><a href=\"#503-SERVICE-UNAVAILABLE\" class=\"headerlink\" title=\"503 SERVICE_UNAVAILABLE\"></a>503 SERVICE_UNAVAILABLE</h3><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。<br>如果能够预计延迟时间，那么响应中可以包含一个<code>Retry-After</code>头用以标明这个延迟时间。如果没有给出这个<code>Retry-After</code>信息，那么客户端应当以处理500响应的方式处理它。</p>\n<h3 id=\"504-GATEWAY-TIMEOUT\"><a href=\"#504-GATEWAY-TIMEOUT\" class=\"headerlink\" title=\"504 GATEWAY_TIMEOUT\"></a>504 GATEWAY_TIMEOUT</h3><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>\n<h3 id=\"505-VERSION-NOT-SUPPORTED\"><a href=\"#505-VERSION-NOT-SUPPORTED\" class=\"headerlink\" title=\"505 VERSION_NOT_SUPPORTED\"></a>505 VERSION_NOT_SUPPORTED</h3><p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>\n<h3 id=\"506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL\"><a href=\"#506-VARIANT-ALSO-NEGOTIATES-EXPERIMENTAL\" class=\"headerlink\" title=\"506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL\"></a>506 VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL</h3><p>请求的透明内容协商将产生一个循环引用。</p>\n<h3 id=\"507-INSUFFICIENT-STORAGE\"><a href=\"#507-INSUFFICIENT-STORAGE\" class=\"headerlink\" title=\"507 INSUFFICIENT_STORAGE\"></a>507 INSUFFICIENT_STORAGE</h3><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>\n<h3 id=\"508-LOOP-DETECTED\"><a href=\"#508-LOOP-DETECTED\" class=\"headerlink\" title=\"508 LOOP_DETECTED\"></a>508 LOOP_DETECTED</h3><p>服务器在处理请求时陷入死循环。（可代替 208状态码）</p>\n<h3 id=\"510-NOT-EXTENDED\"><a href=\"#510-NOT-EXTENDED\" class=\"headerlink\" title=\"510 NOT_EXTENDED\"></a>510 NOT_EXTENDED</h3><p>获取资源所需要的策略并没有被满足。服务器需要对请求进行进一步扩展来满足它。</p>\n<h3 id=\"511-NETWORK-AUTHENTICATION-REQUIRED\"><a href=\"#511-NETWORK-AUTHENTICATION-REQUIRED\" class=\"headerlink\" title=\"511 NETWORK_AUTHENTICATION_REQUIRED\"></a>511 NETWORK_AUTHENTICATION_REQUIRED</h3><p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>\n<p>参考链接：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">维基百科</a></p>\n<p><a href=\"https://www.flysnow.org/tools/table/http-status-codes/\">飞雪无情的博客</a></p>\n"},{"url":"/2020/08/21/道德经.html","title":"道德经","keywords":"道德经","description":"道德经","date":"2020-08-21T04:29:21.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"type":"reprinted","_content":"# 《道德经》\n\n## 一\n\n**道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。\n故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄，众妙之门。**\n\n## 二\n\n**天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。\n故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。\n是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不持，功成而弗居。\n夫唯弗居，是以不去。**\n\n## 三\n\n**不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。\n是以圣人之治，虚其心，实其腹；弱其志，强其骨。\n常使民无知无欲，使夫智者不敢为也。为无为，则无不治。**\n\n## 四\n\n**道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。\n湛兮似或存，吾不知谁之子，象帝之先。**\n\n## 五\n\n**天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。\n天地之间，其犹橐（tuó）籥（yuè）乎？虚而不屈，动而愈出。多言数穷，不如守中。**\n\n## 六\n\n**谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。**\n\n## 七\n\n**天长地久。天地所以能长且久者，以其不自生，故能长生。\n是以圣人后其身而身先，外其身而身存。非以其无私邪？故能成其私。**\n\n## 八\n\n**上善若水，水善利万物而不争：处众人之所恶，故几于道，\n居善地；心善渊；与善仁；言善信；正善治；事善能；动善时。夫唯不争，故无尤。**\n\n## 九\n\n**持而盈之，不如其已。揣而棁（zhuò）之，不可长保。金玉满堂，莫之能守。\n富贵而骄，自遗其咎。功遂身退，天之道**\n\n## 十\n\n**载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？\n爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎？\n生之、畜之，生而不有，为而不恃（shì），长而不宰，是谓玄德。**\n\n## 十一\n\n**三十辐共一毂（gǔ），当其无，有车之用。埏（shān）埴(zhí)以为器，当其无，有器之用。\n凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。**\n\n## 十二\n\n**五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令人行妨。\n是以圣人为腹不为目，故去彼取此。**\n\n## 十三\n\n**宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。\n何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！\n故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。**\n\n## 十四\n\n**视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jíe），故混而为一。\n其上不皦（jiǎo），其下不昧，绳绳（mǐn）不可名，复归于无物。\n是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。\n执古之道，以御今之有。能知古始，是谓道纪。**\n\n## 十五\n\n**古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。\n豫焉若冬渉川，犹兮若畏四邻，俨兮其若家，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。\n孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道这不欲盈，夫唯不盈，故能蔽而新成。**\n\n## 十六\n\n**至虚极，守静笃，万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复命。\n复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。没身不殆。**\n\n## 十七\n\n**太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。\n信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓\"我自然\"。**\n\n## 十八\n\n**大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。**\n\n## 十九\n\n**绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。\n此三者，以为文不足，故令有所属：见素抱朴，少私寡欲。**\n\n## 二十\n\n**绝学无忧。唯之与阿，相去几何？善之与恶，相去几何？\n人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。\n我独泊兮其未兆，如婴儿之未孩。㒦（léi）㒦兮若无所归。众人皆有余，而我独若遗。\n我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。\n澹（dàn）兮其若海，飀（liù）兮若无止。众人皆有以，而我独顽似鄙。\n我独异于人，而贵食母。**\n\n## 二一\n\n**孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。\n窃兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。\n吾何以知众甫之状哉？以此。**\n\n## 二二\n\n**曲则全：枉则直，洼则盈，敝则新，少则得，多则惑。\n是以圣人抱一为天下式：不自见故明，不自是故彰，不自伐故有功，不自矜故长。\n夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。**\n\n## 二三\n\n**希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能长久，而况于人乎？\n故从事于道者，道者同于道，德者同于德，失者同于失。\n同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。**\n\n## 二四\n\n**企者不立，跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。\n其在道也，曰余食赘行。物或恶之，故有道者不处。**\n\n## 二五\n\n**有物混成，先天地生，寂兮寥兮，独立不改，周行而不殆，可以为天下母。\n吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。\n域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。**\n\n## 二六\n\n**重为轻根，静为躁君，是以圣人终日行不离辎（zī）重。虽有荣观，燕处超然。\n奈何万乘之主，而已身轻天下？轻则失本，躁则失君。**\n\n## 二七\n\n**善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。\n是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。\n故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。**\n\n## 二八\n\n**知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。\n知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。\n知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。\n朴散则为器，圣人用之则为官长，故大制不割。**\n\n## 二九\n\n**将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。\n故物或行或随，或歔或吹，或强或赢，或挫或隳（huī）。是以圣人去甚，去奢，去泰。**\n\n## 三十\n\n**以道佐人主者，不以兵强天下，其事好还。师之所处，荆棘生焉。大军之后，必有凶年。\n善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。\n物壮则老，是谓不道，不道早已。**\n\n## 三一\n\n**夫佳兵者，不详之器。物或恶之，故有道者不处。君子居则贵左，用兵则贵右。\n兵者，不详之器，非君子之器，不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。\n夫乐杀人者，则不可以得志与天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。\n杀人之众，以哀悲泣之。战胜，以丧礼处之。**\n\n## 三二\n\n**道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。\n天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。\n譬道之在天下，犹川谷之于江海。**\n\n## 三三\n\n**知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志。\n不失其所者久，死而不亡者寿。**\n\n## 三四\n\n**大道汜兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主。\n常无欲，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。**\n\n## 三五\n\n**执大象，天下往；往而不害，安平太。乐与饵，过客止。\n道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。**\n\n## 三六 三七\n\n**将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之，是谓微明。\n柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。\n道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。\n无名之朴，夫亦将无欲。不欲以静，天下将自定。**\n\n## 三八\n\n**上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德无为而有以为；\n上仁为之而无以为；上义为之而有以为；上礼为之而莫之应，则攘臂而扔之。\n故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首；前识者，道之华而愚之始。\n是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。**\n\n## 三九\n\n**昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下负。\n其致之。天无以清将恐裂，地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以高贵将恐蹶。\n故贵以贱为本，高以下为基。是以侯王自谓孤寡不榖（gǔ）。此非以贱为本邪？非乎？\n故致数舆无舆。不欲琭琭如玉，珞（luò）珞如石。**\n\n## 四十\n\n**反者，道之动；弱者，道之用。天下万物生与有，有生于无。**\n\n## 四一\n\n**上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。\n故建言有之：明道若昧，进道若退，夷道若纇（lèi）。\n上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。\n大方无隅，大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。**\n\n## 四二\n\n**道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。\n人之所恶，唯孤寡不榖，而王公以为称。故物或损之而益，或益之而损。\n人之所教，我亦教之。强梁者不得其死，吾将以为教父。**\n\n## 四三\n\n**天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益，天下希及之。**\n\n## 四四\n\n**名与身孰亲？身与货孰多？得与亡孰病？是故甚爱必大费，多藏必厚亡。\n知足不辱，知止不殆，可以长久。**\n\n## 四五\n\n**大成若缺，其用不弊；大盈若冲，其用不穷。\n大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清净为天下正。**\n\n## 四六\n\n**天下有道，却走马以粪；天下无道，戎马生与郊。\n祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。**\n\n## 四七、四八\n\n**不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成。\n为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常事以无事，及其有事，不足以取天下。**\n\n## 四九\n\n**圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。\n信者，吾信之；不信者，吾亦信之，德信。\n圣人在天下歙（xī）歙，为天下浑其心。百姓皆注其耳目，圣人皆孩之。**\n\n## 五十\n\n**出生入死。生之徒十有三，死之徒十有三。人之生，动之死地，亦十有三。\n夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被甲兵。\n兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。**\n\n## 五一\n\n**道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。\n道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之：长之、育之、亭之、毒之、养之、覆之。\n生而不有，为而不持，长而不宰，是谓玄德**\n\n## 五二\n\n**天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没身不殆。\n塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。\n用其光，复归其明，无遗身殃，是为习常。**\n\n## 五三\n\n**使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。\n朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！**\n\n## 五四\n\n**善建者不拔，善抱者不脱，子孙以祭祀不缀。修之于身，其德乃真；修之于家，其德乃余；\n修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。\n故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。**\n\n## 五五\n\n**含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫，猛兽不据，攫（jué）鸟不搏。\n骨柔筋柔而握固，未知牝（pìn）牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。\n知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。**\n\n## 五六\n\n**知者不言，言者不知。塞其兑，闭其门，挫其锐，解其分，和其光，同其尘，是谓玄同。\n故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱，故为天下贵。**\n\n## 五七\n\n**以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。\n天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋生；法令滋彰，盗贼多有。\n故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。**\n\n## 五八\n\n**其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。\n正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光而不耀。**\n\n## 五九\n\n**治人事天莫若啬。夫唯啬，是谓早服，早服谓之重积德。重积德则无不克，无不克则莫知其极。\n莫知其极，可以有国，有国之母，可以长久。是谓深根固柢，长生久视之道。**\n\n## 六十\n\n**治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。\n夫两不相伤，故德交归焉。**\n\n## 六一\n\n**大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。\n故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。\n大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。**\n\n## 六二\n\n**道者万物之奥，善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？\n故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？\n不曰以求得，有罪以免邪？故为天下贵。**\n\n## 六三\n\n**为无为，事无事，味无味。大小，多少，报怨以德。\n图难于其易，为大于其细。天下难事必作于易，天下大事必作于细。\n是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。**\n\n## 六四\n\n**其安易持，其未兆易谋，其脆易泮，其微易散。为之于未有，治之于未乱。\n合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。\n为者败之，执者失之。是以圣人无为，故无败；无执，故无失。\n民之从事，常于几成而败之。慎始如终，则无败事。是以圣人欲不欲，不贵难得之货；\n学不学，复众人之所过。以辅万物之自然，而不敢为。**\n\n## 六五\n\n**古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。\n知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。**\n\n## 六六\n\n**江海所以能为百谷王者，以其善下之，故能为百谷王。\n是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。\n是以天下乐推而不厌。以其不争，故天下莫能与之争。**\n\n## 六七\n\n**天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细而夫。\n我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。\n慈，故能勇；俭，故能广；不敢为天下先，故能成器长。\n今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固。天将救之，以慈卫之。**\n\n## 六八\n\n**善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。\n是谓不争之德，是谓用人之力，是谓配天古之极。**\n\n## 六九\n\n**用兵有言：吾不敢为主而为客，不敢进寸而退尺。是谓行无行，攘无臂，扔无敌，执无兵。\n祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。**\n\n## 七十\n\n**吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。\n夫唯无知，是以不我知。知我这希，则我者贵。是以圣人被褐（hè）怀玉。**\n\n## 七一\n\n**知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。**\n\n## 七二\n\n**民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。\n是以圣人自知，不自见；自爱，不自贵。故去彼取此。**\n\n## 七三\n\n**勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶。孰知其故？\n是以圣人犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。\n天网恢恢，疏而不失。**\n\n## 七四\n\n**民不畏死，奈何以死惧之？若使民常畏死，而为奇者吾得执而杀之，孰敢？\n常有司杀者杀，夫代司杀者杀，是谓代大匠斫（zhuò）。夫代大匠斫者，希有不伤其手矣。**\n\n## 七五\n\n**民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。\n民之轻死，以其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。**\n\n## 七六\n\n**人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。\n故坚强者死之徒，柔弱者生之徒。是以兵强则不胜，木强则折。强大处下，柔弱处上。**\n\n## 七七\n\n**天之道，其犹张弓与？高者抑之，下者举之；有余者损之，不足者补之。\n天之道，损有余而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。\n是以圣人为而不持，功成而不处，其不欲见贤。**\n\n## 七八\n\n**天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之，弱之胜强，柔之胜刚，天下莫不知，莫能行。\n是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。**\n\n## 七九\n\n**和大怨，必有余怨，安以为善？是以圣人执左契，而不责于人。无德司彻。天道无亲，常与善人。**\n\n## 八十\n\n**小国寡民，使有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；\n使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡鸣犬之声相闻，民至老死不相往来。**\n\n## 八一\n\n**信言不美，美言不信；善者不辩，辩者不善；知者不博，博者不知。\n圣人不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害；圣人之道，为而不争。**\n","source":"_posts/国粹/道德经.md","raw":"---\nurl: /2020/08/21/道德经.html\ntitle: \"道德经\"\nkeywords: \"道德经\"\ndescription: \"道德经\"\ndate: 2020-08-21T20:29:21+08:00\ndraft: false\ntags: [\"国粹\"]\ntags_weight: 100\ncategories: [\"国粹\"]\ncategoryes_weight: 100\ntype: \"reprinted\"\n---\n# 《道德经》\n\n## 一\n\n**道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。\n故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄，众妙之门。**\n\n## 二\n\n**天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。\n故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。\n是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不持，功成而弗居。\n夫唯弗居，是以不去。**\n\n## 三\n\n**不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。\n是以圣人之治，虚其心，实其腹；弱其志，强其骨。\n常使民无知无欲，使夫智者不敢为也。为无为，则无不治。**\n\n## 四\n\n**道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。\n湛兮似或存，吾不知谁之子，象帝之先。**\n\n## 五\n\n**天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。\n天地之间，其犹橐（tuó）籥（yuè）乎？虚而不屈，动而愈出。多言数穷，不如守中。**\n\n## 六\n\n**谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。**\n\n## 七\n\n**天长地久。天地所以能长且久者，以其不自生，故能长生。\n是以圣人后其身而身先，外其身而身存。非以其无私邪？故能成其私。**\n\n## 八\n\n**上善若水，水善利万物而不争：处众人之所恶，故几于道，\n居善地；心善渊；与善仁；言善信；正善治；事善能；动善时。夫唯不争，故无尤。**\n\n## 九\n\n**持而盈之，不如其已。揣而棁（zhuò）之，不可长保。金玉满堂，莫之能守。\n富贵而骄，自遗其咎。功遂身退，天之道**\n\n## 十\n\n**载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？\n爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎？\n生之、畜之，生而不有，为而不恃（shì），长而不宰，是谓玄德。**\n\n## 十一\n\n**三十辐共一毂（gǔ），当其无，有车之用。埏（shān）埴(zhí)以为器，当其无，有器之用。\n凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。**\n\n## 十二\n\n**五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令人行妨。\n是以圣人为腹不为目，故去彼取此。**\n\n## 十三\n\n**宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。\n何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！\n故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。**\n\n## 十四\n\n**视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jíe），故混而为一。\n其上不皦（jiǎo），其下不昧，绳绳（mǐn）不可名，复归于无物。\n是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。\n执古之道，以御今之有。能知古始，是谓道纪。**\n\n## 十五\n\n**古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。\n豫焉若冬渉川，犹兮若畏四邻，俨兮其若家，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。\n孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道这不欲盈，夫唯不盈，故能蔽而新成。**\n\n## 十六\n\n**至虚极，守静笃，万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复命。\n复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。没身不殆。**\n\n## 十七\n\n**太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。\n信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓\"我自然\"。**\n\n## 十八\n\n**大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。**\n\n## 十九\n\n**绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。\n此三者，以为文不足，故令有所属：见素抱朴，少私寡欲。**\n\n## 二十\n\n**绝学无忧。唯之与阿，相去几何？善之与恶，相去几何？\n人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。\n我独泊兮其未兆，如婴儿之未孩。㒦（léi）㒦兮若无所归。众人皆有余，而我独若遗。\n我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。\n澹（dàn）兮其若海，飀（liù）兮若无止。众人皆有以，而我独顽似鄙。\n我独异于人，而贵食母。**\n\n## 二一\n\n**孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。\n窃兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。\n吾何以知众甫之状哉？以此。**\n\n## 二二\n\n**曲则全：枉则直，洼则盈，敝则新，少则得，多则惑。\n是以圣人抱一为天下式：不自见故明，不自是故彰，不自伐故有功，不自矜故长。\n夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。**\n\n## 二三\n\n**希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能长久，而况于人乎？\n故从事于道者，道者同于道，德者同于德，失者同于失。\n同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。**\n\n## 二四\n\n**企者不立，跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。\n其在道也，曰余食赘行。物或恶之，故有道者不处。**\n\n## 二五\n\n**有物混成，先天地生，寂兮寥兮，独立不改，周行而不殆，可以为天下母。\n吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。\n域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。**\n\n## 二六\n\n**重为轻根，静为躁君，是以圣人终日行不离辎（zī）重。虽有荣观，燕处超然。\n奈何万乘之主，而已身轻天下？轻则失本，躁则失君。**\n\n## 二七\n\n**善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。\n是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。\n故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。**\n\n## 二八\n\n**知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。\n知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。\n知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。\n朴散则为器，圣人用之则为官长，故大制不割。**\n\n## 二九\n\n**将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。\n故物或行或随，或歔或吹，或强或赢，或挫或隳（huī）。是以圣人去甚，去奢，去泰。**\n\n## 三十\n\n**以道佐人主者，不以兵强天下，其事好还。师之所处，荆棘生焉。大军之后，必有凶年。\n善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。\n物壮则老，是谓不道，不道早已。**\n\n## 三一\n\n**夫佳兵者，不详之器。物或恶之，故有道者不处。君子居则贵左，用兵则贵右。\n兵者，不详之器，非君子之器，不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。\n夫乐杀人者，则不可以得志与天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。\n杀人之众，以哀悲泣之。战胜，以丧礼处之。**\n\n## 三二\n\n**道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。\n天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。\n譬道之在天下，犹川谷之于江海。**\n\n## 三三\n\n**知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志。\n不失其所者久，死而不亡者寿。**\n\n## 三四\n\n**大道汜兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主。\n常无欲，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。**\n\n## 三五\n\n**执大象，天下往；往而不害，安平太。乐与饵，过客止。\n道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。**\n\n## 三六 三七\n\n**将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之，是谓微明。\n柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。\n道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。\n无名之朴，夫亦将无欲。不欲以静，天下将自定。**\n\n## 三八\n\n**上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德无为而有以为；\n上仁为之而无以为；上义为之而有以为；上礼为之而莫之应，则攘臂而扔之。\n故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首；前识者，道之华而愚之始。\n是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。**\n\n## 三九\n\n**昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下负。\n其致之。天无以清将恐裂，地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以高贵将恐蹶。\n故贵以贱为本，高以下为基。是以侯王自谓孤寡不榖（gǔ）。此非以贱为本邪？非乎？\n故致数舆无舆。不欲琭琭如玉，珞（luò）珞如石。**\n\n## 四十\n\n**反者，道之动；弱者，道之用。天下万物生与有，有生于无。**\n\n## 四一\n\n**上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。\n故建言有之：明道若昧，进道若退，夷道若纇（lèi）。\n上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。\n大方无隅，大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。**\n\n## 四二\n\n**道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。\n人之所恶，唯孤寡不榖，而王公以为称。故物或损之而益，或益之而损。\n人之所教，我亦教之。强梁者不得其死，吾将以为教父。**\n\n## 四三\n\n**天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益，天下希及之。**\n\n## 四四\n\n**名与身孰亲？身与货孰多？得与亡孰病？是故甚爱必大费，多藏必厚亡。\n知足不辱，知止不殆，可以长久。**\n\n## 四五\n\n**大成若缺，其用不弊；大盈若冲，其用不穷。\n大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清净为天下正。**\n\n## 四六\n\n**天下有道，却走马以粪；天下无道，戎马生与郊。\n祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。**\n\n## 四七、四八\n\n**不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成。\n为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常事以无事，及其有事，不足以取天下。**\n\n## 四九\n\n**圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。\n信者，吾信之；不信者，吾亦信之，德信。\n圣人在天下歙（xī）歙，为天下浑其心。百姓皆注其耳目，圣人皆孩之。**\n\n## 五十\n\n**出生入死。生之徒十有三，死之徒十有三。人之生，动之死地，亦十有三。\n夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被甲兵。\n兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。**\n\n## 五一\n\n**道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。\n道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之：长之、育之、亭之、毒之、养之、覆之。\n生而不有，为而不持，长而不宰，是谓玄德**\n\n## 五二\n\n**天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没身不殆。\n塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。\n用其光，复归其明，无遗身殃，是为习常。**\n\n## 五三\n\n**使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。\n朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！**\n\n## 五四\n\n**善建者不拔，善抱者不脱，子孙以祭祀不缀。修之于身，其德乃真；修之于家，其德乃余；\n修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。\n故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。**\n\n## 五五\n\n**含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫，猛兽不据，攫（jué）鸟不搏。\n骨柔筋柔而握固，未知牝（pìn）牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。\n知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。**\n\n## 五六\n\n**知者不言，言者不知。塞其兑，闭其门，挫其锐，解其分，和其光，同其尘，是谓玄同。\n故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱，故为天下贵。**\n\n## 五七\n\n**以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。\n天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋生；法令滋彰，盗贼多有。\n故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。**\n\n## 五八\n\n**其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。\n正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光而不耀。**\n\n## 五九\n\n**治人事天莫若啬。夫唯啬，是谓早服，早服谓之重积德。重积德则无不克，无不克则莫知其极。\n莫知其极，可以有国，有国之母，可以长久。是谓深根固柢，长生久视之道。**\n\n## 六十\n\n**治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。\n夫两不相伤，故德交归焉。**\n\n## 六一\n\n**大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。\n故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。\n大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。**\n\n## 六二\n\n**道者万物之奥，善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？\n故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？\n不曰以求得，有罪以免邪？故为天下贵。**\n\n## 六三\n\n**为无为，事无事，味无味。大小，多少，报怨以德。\n图难于其易，为大于其细。天下难事必作于易，天下大事必作于细。\n是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。**\n\n## 六四\n\n**其安易持，其未兆易谋，其脆易泮，其微易散。为之于未有，治之于未乱。\n合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。\n为者败之，执者失之。是以圣人无为，故无败；无执，故无失。\n民之从事，常于几成而败之。慎始如终，则无败事。是以圣人欲不欲，不贵难得之货；\n学不学，复众人之所过。以辅万物之自然，而不敢为。**\n\n## 六五\n\n**古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。\n知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。**\n\n## 六六\n\n**江海所以能为百谷王者，以其善下之，故能为百谷王。\n是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。\n是以天下乐推而不厌。以其不争，故天下莫能与之争。**\n\n## 六七\n\n**天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细而夫。\n我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。\n慈，故能勇；俭，故能广；不敢为天下先，故能成器长。\n今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固。天将救之，以慈卫之。**\n\n## 六八\n\n**善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。\n是谓不争之德，是谓用人之力，是谓配天古之极。**\n\n## 六九\n\n**用兵有言：吾不敢为主而为客，不敢进寸而退尺。是谓行无行，攘无臂，扔无敌，执无兵。\n祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。**\n\n## 七十\n\n**吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。\n夫唯无知，是以不我知。知我这希，则我者贵。是以圣人被褐（hè）怀玉。**\n\n## 七一\n\n**知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。**\n\n## 七二\n\n**民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。\n是以圣人自知，不自见；自爱，不自贵。故去彼取此。**\n\n## 七三\n\n**勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶。孰知其故？\n是以圣人犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。\n天网恢恢，疏而不失。**\n\n## 七四\n\n**民不畏死，奈何以死惧之？若使民常畏死，而为奇者吾得执而杀之，孰敢？\n常有司杀者杀，夫代司杀者杀，是谓代大匠斫（zhuò）。夫代大匠斫者，希有不伤其手矣。**\n\n## 七五\n\n**民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。\n民之轻死，以其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。**\n\n## 七六\n\n**人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。\n故坚强者死之徒，柔弱者生之徒。是以兵强则不胜，木强则折。强大处下，柔弱处上。**\n\n## 七七\n\n**天之道，其犹张弓与？高者抑之，下者举之；有余者损之，不足者补之。\n天之道，损有余而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。\n是以圣人为而不持，功成而不处，其不欲见贤。**\n\n## 七八\n\n**天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之，弱之胜强，柔之胜刚，天下莫不知，莫能行。\n是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。**\n\n## 七九\n\n**和大怨，必有余怨，安以为善？是以圣人执左契，而不责于人。无德司彻。天道无亲，常与善人。**\n\n## 八十\n\n**小国寡民，使有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；\n使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡鸣犬之声相闻，民至老死不相往来。**\n\n## 八一\n\n**信言不美，美言不信；善者不辩，辩者不善；知者不博，博者不知。\n圣人不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害；圣人之道，为而不争。**\n","slug":"国粹/道德经","published":1,"updated":"2020-10-11T07:14:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf6f00asmv05b5necutj","content":"<h1 id=\"《道德经》\"><a href=\"#《道德经》\" class=\"headerlink\" title=\"《道德经》\"></a>《道德经》</h1><h2 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h2><p><strong>道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。<br>故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄，众妙之门。</strong></p>\n<h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><p><strong>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。<br>故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。<br>是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不持，功成而弗居。<br>夫唯弗居，是以不去。</strong></p>\n<h2 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h2><p><strong>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。<br>是以圣人之治，虚其心，实其腹；弱其志，强其骨。<br>常使民无知无欲，使夫智者不敢为也。为无为，则无不治。</strong></p>\n<h2 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h2><p><strong>道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。<br>湛兮似或存，吾不知谁之子，象帝之先。</strong></p>\n<h2 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h2><p><strong>天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。<br>天地之间，其犹橐（tuó）籥（yuè）乎？虚而不屈，动而愈出。多言数穷，不如守中。</strong></p>\n<h2 id=\"六\"><a href=\"#六\" class=\"headerlink\" title=\"六\"></a>六</h2><p><strong>谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。</strong></p>\n<h2 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h2><p><strong>天长地久。天地所以能长且久者，以其不自生，故能长生。<br>是以圣人后其身而身先，外其身而身存。非以其无私邪？故能成其私。</strong></p>\n<h2 id=\"八\"><a href=\"#八\" class=\"headerlink\" title=\"八\"></a>八</h2><p><strong>上善若水，水善利万物而不争：处众人之所恶，故几于道，<br>居善地；心善渊；与善仁；言善信；正善治；事善能；动善时。夫唯不争，故无尤。</strong></p>\n<h2 id=\"九\"><a href=\"#九\" class=\"headerlink\" title=\"九\"></a>九</h2><p><strong>持而盈之，不如其已。揣而棁（zhuò）之，不可长保。金玉满堂，莫之能守。<br>富贵而骄，自遗其咎。功遂身退，天之道</strong></p>\n<h2 id=\"十\"><a href=\"#十\" class=\"headerlink\" title=\"十\"></a>十</h2><p><strong>载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？<br>爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎？<br>生之、畜之，生而不有，为而不恃（shì），长而不宰，是谓玄德。</strong></p>\n<h2 id=\"十一\"><a href=\"#十一\" class=\"headerlink\" title=\"十一\"></a>十一</h2><p><strong>三十辐共一毂（gǔ），当其无，有车之用。埏（shān）埴(zhí)以为器，当其无，有器之用。<br>凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。</strong></p>\n<h2 id=\"十二\"><a href=\"#十二\" class=\"headerlink\" title=\"十二\"></a>十二</h2><p><strong>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令人行妨。<br>是以圣人为腹不为目，故去彼取此。</strong></p>\n<h2 id=\"十三\"><a href=\"#十三\" class=\"headerlink\" title=\"十三\"></a>十三</h2><p><strong>宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。<br>何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！<br>故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。</strong></p>\n<h2 id=\"十四\"><a href=\"#十四\" class=\"headerlink\" title=\"十四\"></a>十四</h2><p><strong>视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jíe），故混而为一。<br>其上不皦（jiǎo），其下不昧，绳绳（mǐn）不可名，复归于无物。<br>是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。<br>执古之道，以御今之有。能知古始，是谓道纪。</strong></p>\n<h2 id=\"十五\"><a href=\"#十五\" class=\"headerlink\" title=\"十五\"></a>十五</h2><p><strong>古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。<br>豫焉若冬渉川，犹兮若畏四邻，俨兮其若家，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。<br>孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道这不欲盈，夫唯不盈，故能蔽而新成。</strong></p>\n<h2 id=\"十六\"><a href=\"#十六\" class=\"headerlink\" title=\"十六\"></a>十六</h2><p><strong>至虚极，守静笃，万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复命。<br>复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。没身不殆。</strong></p>\n<h2 id=\"十七\"><a href=\"#十七\" class=\"headerlink\" title=\"十七\"></a>十七</h2><p><strong>太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。<br>信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓”我自然”。</strong></p>\n<h2 id=\"十八\"><a href=\"#十八\" class=\"headerlink\" title=\"十八\"></a>十八</h2><p><strong>大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</strong></p>\n<h2 id=\"十九\"><a href=\"#十九\" class=\"headerlink\" title=\"十九\"></a>十九</h2><p><strong>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。<br>此三者，以为文不足，故令有所属：见素抱朴，少私寡欲。</strong></p>\n<h2 id=\"二十\"><a href=\"#二十\" class=\"headerlink\" title=\"二十\"></a>二十</h2><p><strong>绝学无忧。唯之与阿，相去几何？善之与恶，相去几何？<br>人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。<br>我独泊兮其未兆，如婴儿之未孩。㒦（léi）㒦兮若无所归。众人皆有余，而我独若遗。<br>我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。<br>澹（dàn）兮其若海，飀（liù）兮若无止。众人皆有以，而我独顽似鄙。<br>我独异于人，而贵食母。</strong></p>\n<h2 id=\"二一\"><a href=\"#二一\" class=\"headerlink\" title=\"二一\"></a>二一</h2><p><strong>孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。<br>窃兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。<br>吾何以知众甫之状哉？以此。</strong></p>\n<h2 id=\"二二\"><a href=\"#二二\" class=\"headerlink\" title=\"二二\"></a>二二</h2><p><strong>曲则全：枉则直，洼则盈，敝则新，少则得，多则惑。<br>是以圣人抱一为天下式：不自见故明，不自是故彰，不自伐故有功，不自矜故长。<br>夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。</strong></p>\n<h2 id=\"二三\"><a href=\"#二三\" class=\"headerlink\" title=\"二三\"></a>二三</h2><p><strong>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能长久，而况于人乎？<br>故从事于道者，道者同于道，德者同于德，失者同于失。<br>同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。</strong></p>\n<h2 id=\"二四\"><a href=\"#二四\" class=\"headerlink\" title=\"二四\"></a>二四</h2><p><strong>企者不立，跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。<br>其在道也，曰余食赘行。物或恶之，故有道者不处。</strong></p>\n<h2 id=\"二五\"><a href=\"#二五\" class=\"headerlink\" title=\"二五\"></a>二五</h2><p><strong>有物混成，先天地生，寂兮寥兮，独立不改，周行而不殆，可以为天下母。<br>吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。<br>域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。</strong></p>\n<h2 id=\"二六\"><a href=\"#二六\" class=\"headerlink\" title=\"二六\"></a>二六</h2><p><strong>重为轻根，静为躁君，是以圣人终日行不离辎（zī）重。虽有荣观，燕处超然。<br>奈何万乘之主，而已身轻天下？轻则失本，躁则失君。</strong></p>\n<h2 id=\"二七\"><a href=\"#二七\" class=\"headerlink\" title=\"二七\"></a>二七</h2><p><strong>善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。<br>是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。<br>故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。</strong></p>\n<h2 id=\"二八\"><a href=\"#二八\" class=\"headerlink\" title=\"二八\"></a>二八</h2><p><strong>知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。<br>知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。<br>知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。<br>朴散则为器，圣人用之则为官长，故大制不割。</strong></p>\n<h2 id=\"二九\"><a href=\"#二九\" class=\"headerlink\" title=\"二九\"></a>二九</h2><p><strong>将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。<br>故物或行或随，或歔或吹，或强或赢，或挫或隳（huī）。是以圣人去甚，去奢，去泰。</strong></p>\n<h2 id=\"三十\"><a href=\"#三十\" class=\"headerlink\" title=\"三十\"></a>三十</h2><p><strong>以道佐人主者，不以兵强天下，其事好还。师之所处，荆棘生焉。大军之后，必有凶年。<br>善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。<br>物壮则老，是谓不道，不道早已。</strong></p>\n<h2 id=\"三一\"><a href=\"#三一\" class=\"headerlink\" title=\"三一\"></a>三一</h2><p><strong>夫佳兵者，不详之器。物或恶之，故有道者不处。君子居则贵左，用兵则贵右。<br>兵者，不详之器，非君子之器，不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。<br>夫乐杀人者，则不可以得志与天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。<br>杀人之众，以哀悲泣之。战胜，以丧礼处之。</strong></p>\n<h2 id=\"三二\"><a href=\"#三二\" class=\"headerlink\" title=\"三二\"></a>三二</h2><p><strong>道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。<br>天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。<br>譬道之在天下，犹川谷之于江海。</strong></p>\n<h2 id=\"三三\"><a href=\"#三三\" class=\"headerlink\" title=\"三三\"></a>三三</h2><p><strong>知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志。<br>不失其所者久，死而不亡者寿。</strong></p>\n<h2 id=\"三四\"><a href=\"#三四\" class=\"headerlink\" title=\"三四\"></a>三四</h2><p><strong>大道汜兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主。<br>常无欲，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。</strong></p>\n<h2 id=\"三五\"><a href=\"#三五\" class=\"headerlink\" title=\"三五\"></a>三五</h2><p><strong>执大象，天下往；往而不害，安平太。乐与饵，过客止。<br>道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。</strong></p>\n<h2 id=\"三六-三七\"><a href=\"#三六-三七\" class=\"headerlink\" title=\"三六 三七\"></a>三六 三七</h2><p><strong>将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之，是谓微明。<br>柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。<br>道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。<br>无名之朴，夫亦将无欲。不欲以静，天下将自定。</strong></p>\n<h2 id=\"三八\"><a href=\"#三八\" class=\"headerlink\" title=\"三八\"></a>三八</h2><p><strong>上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德无为而有以为；<br>上仁为之而无以为；上义为之而有以为；上礼为之而莫之应，则攘臂而扔之。<br>故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首；前识者，道之华而愚之始。<br>是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。</strong></p>\n<h2 id=\"三九\"><a href=\"#三九\" class=\"headerlink\" title=\"三九\"></a>三九</h2><p><strong>昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下负。<br>其致之。天无以清将恐裂，地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以高贵将恐蹶。<br>故贵以贱为本，高以下为基。是以侯王自谓孤寡不榖（gǔ）。此非以贱为本邪？非乎？<br>故致数舆无舆。不欲琭琭如玉，珞（luò）珞如石。</strong></p>\n<h2 id=\"四十\"><a href=\"#四十\" class=\"headerlink\" title=\"四十\"></a>四十</h2><p><strong>反者，道之动；弱者，道之用。天下万物生与有，有生于无。</strong></p>\n<h2 id=\"四一\"><a href=\"#四一\" class=\"headerlink\" title=\"四一\"></a>四一</h2><p><strong>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。<br>故建言有之：明道若昧，进道若退，夷道若纇（lèi）。<br>上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。<br>大方无隅，大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。</strong></p>\n<h2 id=\"四二\"><a href=\"#四二\" class=\"headerlink\" title=\"四二\"></a>四二</h2><p><strong>道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。<br>人之所恶，唯孤寡不榖，而王公以为称。故物或损之而益，或益之而损。<br>人之所教，我亦教之。强梁者不得其死，吾将以为教父。</strong></p>\n<h2 id=\"四三\"><a href=\"#四三\" class=\"headerlink\" title=\"四三\"></a>四三</h2><p><strong>天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益，天下希及之。</strong></p>\n<h2 id=\"四四\"><a href=\"#四四\" class=\"headerlink\" title=\"四四\"></a>四四</h2><p><strong>名与身孰亲？身与货孰多？得与亡孰病？是故甚爱必大费，多藏必厚亡。<br>知足不辱，知止不殆，可以长久。</strong></p>\n<h2 id=\"四五\"><a href=\"#四五\" class=\"headerlink\" title=\"四五\"></a>四五</h2><p><strong>大成若缺，其用不弊；大盈若冲，其用不穷。<br>大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清净为天下正。</strong></p>\n<h2 id=\"四六\"><a href=\"#四六\" class=\"headerlink\" title=\"四六\"></a>四六</h2><p><strong>天下有道，却走马以粪；天下无道，戎马生与郊。<br>祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。</strong></p>\n<h2 id=\"四七、四八\"><a href=\"#四七、四八\" class=\"headerlink\" title=\"四七、四八\"></a>四七、四八</h2><p><strong>不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成。<br>为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常事以无事，及其有事，不足以取天下。</strong></p>\n<h2 id=\"四九\"><a href=\"#四九\" class=\"headerlink\" title=\"四九\"></a>四九</h2><p><strong>圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。<br>信者，吾信之；不信者，吾亦信之，德信。<br>圣人在天下歙（xī）歙，为天下浑其心。百姓皆注其耳目，圣人皆孩之。</strong></p>\n<h2 id=\"五十\"><a href=\"#五十\" class=\"headerlink\" title=\"五十\"></a>五十</h2><p><strong>出生入死。生之徒十有三，死之徒十有三。人之生，动之死地，亦十有三。<br>夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被甲兵。<br>兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。</strong></p>\n<h2 id=\"五一\"><a href=\"#五一\" class=\"headerlink\" title=\"五一\"></a>五一</h2><p><strong>道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。<br>道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之：长之、育之、亭之、毒之、养之、覆之。<br>生而不有，为而不持，长而不宰，是谓玄德</strong></p>\n<h2 id=\"五二\"><a href=\"#五二\" class=\"headerlink\" title=\"五二\"></a>五二</h2><p><strong>天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没身不殆。<br>塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。<br>用其光，复归其明，无遗身殃，是为习常。</strong></p>\n<h2 id=\"五三\"><a href=\"#五三\" class=\"headerlink\" title=\"五三\"></a>五三</h2><p><strong>使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。<br>朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！</strong></p>\n<h2 id=\"五四\"><a href=\"#五四\" class=\"headerlink\" title=\"五四\"></a>五四</h2><p><strong>善建者不拔，善抱者不脱，子孙以祭祀不缀。修之于身，其德乃真；修之于家，其德乃余；<br>修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。<br>故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。</strong></p>\n<h2 id=\"五五\"><a href=\"#五五\" class=\"headerlink\" title=\"五五\"></a>五五</h2><p><strong>含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫，猛兽不据，攫（jué）鸟不搏。<br>骨柔筋柔而握固，未知牝（pìn）牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。<br>知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。</strong></p>\n<h2 id=\"五六\"><a href=\"#五六\" class=\"headerlink\" title=\"五六\"></a>五六</h2><p><strong>知者不言，言者不知。塞其兑，闭其门，挫其锐，解其分，和其光，同其尘，是谓玄同。<br>故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱，故为天下贵。</strong></p>\n<h2 id=\"五七\"><a href=\"#五七\" class=\"headerlink\" title=\"五七\"></a>五七</h2><p><strong>以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。<br>天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋生；法令滋彰，盗贼多有。<br>故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。</strong></p>\n<h2 id=\"五八\"><a href=\"#五八\" class=\"headerlink\" title=\"五八\"></a>五八</h2><p><strong>其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。<br>正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光而不耀。</strong></p>\n<h2 id=\"五九\"><a href=\"#五九\" class=\"headerlink\" title=\"五九\"></a>五九</h2><p><strong>治人事天莫若啬。夫唯啬，是谓早服，早服谓之重积德。重积德则无不克，无不克则莫知其极。<br>莫知其极，可以有国，有国之母，可以长久。是谓深根固柢，长生久视之道。</strong></p>\n<h2 id=\"六十\"><a href=\"#六十\" class=\"headerlink\" title=\"六十\"></a>六十</h2><p><strong>治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。<br>夫两不相伤，故德交归焉。</strong></p>\n<h2 id=\"六一\"><a href=\"#六一\" class=\"headerlink\" title=\"六一\"></a>六一</h2><p><strong>大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。<br>故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。<br>大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。</strong></p>\n<h2 id=\"六二\"><a href=\"#六二\" class=\"headerlink\" title=\"六二\"></a>六二</h2><p><strong>道者万物之奥，善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？<br>故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？<br>不曰以求得，有罪以免邪？故为天下贵。</strong></p>\n<h2 id=\"六三\"><a href=\"#六三\" class=\"headerlink\" title=\"六三\"></a>六三</h2><p><strong>为无为，事无事，味无味。大小，多少，报怨以德。<br>图难于其易，为大于其细。天下难事必作于易，天下大事必作于细。<br>是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。</strong></p>\n<h2 id=\"六四\"><a href=\"#六四\" class=\"headerlink\" title=\"六四\"></a>六四</h2><p><strong>其安易持，其未兆易谋，其脆易泮，其微易散。为之于未有，治之于未乱。<br>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。<br>为者败之，执者失之。是以圣人无为，故无败；无执，故无失。<br>民之从事，常于几成而败之。慎始如终，则无败事。是以圣人欲不欲，不贵难得之货；<br>学不学，复众人之所过。以辅万物之自然，而不敢为。</strong></p>\n<h2 id=\"六五\"><a href=\"#六五\" class=\"headerlink\" title=\"六五\"></a>六五</h2><p><strong>古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。<br>知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。</strong></p>\n<h2 id=\"六六\"><a href=\"#六六\" class=\"headerlink\" title=\"六六\"></a>六六</h2><p><strong>江海所以能为百谷王者，以其善下之，故能为百谷王。<br>是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。<br>是以天下乐推而不厌。以其不争，故天下莫能与之争。</strong></p>\n<h2 id=\"六七\"><a href=\"#六七\" class=\"headerlink\" title=\"六七\"></a>六七</h2><p><strong>天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细而夫。<br>我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。<br>慈，故能勇；俭，故能广；不敢为天下先，故能成器长。<br>今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固。天将救之，以慈卫之。</strong></p>\n<h2 id=\"六八\"><a href=\"#六八\" class=\"headerlink\" title=\"六八\"></a>六八</h2><p><strong>善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。<br>是谓不争之德，是谓用人之力，是谓配天古之极。</strong></p>\n<h2 id=\"六九\"><a href=\"#六九\" class=\"headerlink\" title=\"六九\"></a>六九</h2><p><strong>用兵有言：吾不敢为主而为客，不敢进寸而退尺。是谓行无行，攘无臂，扔无敌，执无兵。<br>祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。</strong></p>\n<h2 id=\"七十\"><a href=\"#七十\" class=\"headerlink\" title=\"七十\"></a>七十</h2><p><strong>吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。<br>夫唯无知，是以不我知。知我这希，则我者贵。是以圣人被褐（hè）怀玉。</strong></p>\n<h2 id=\"七一\"><a href=\"#七一\" class=\"headerlink\" title=\"七一\"></a>七一</h2><p><strong>知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。</strong></p>\n<h2 id=\"七二\"><a href=\"#七二\" class=\"headerlink\" title=\"七二\"></a>七二</h2><p><strong>民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。<br>是以圣人自知，不自见；自爱，不自贵。故去彼取此。</strong></p>\n<h2 id=\"七三\"><a href=\"#七三\" class=\"headerlink\" title=\"七三\"></a>七三</h2><p><strong>勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶。孰知其故？<br>是以圣人犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。<br>天网恢恢，疏而不失。</strong></p>\n<h2 id=\"七四\"><a href=\"#七四\" class=\"headerlink\" title=\"七四\"></a>七四</h2><p><strong>民不畏死，奈何以死惧之？若使民常畏死，而为奇者吾得执而杀之，孰敢？<br>常有司杀者杀，夫代司杀者杀，是谓代大匠斫（zhuò）。夫代大匠斫者，希有不伤其手矣。</strong></p>\n<h2 id=\"七五\"><a href=\"#七五\" class=\"headerlink\" title=\"七五\"></a>七五</h2><p><strong>民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。<br>民之轻死，以其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。</strong></p>\n<h2 id=\"七六\"><a href=\"#七六\" class=\"headerlink\" title=\"七六\"></a>七六</h2><p><strong>人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。<br>故坚强者死之徒，柔弱者生之徒。是以兵强则不胜，木强则折。强大处下，柔弱处上。</strong></p>\n<h2 id=\"七七\"><a href=\"#七七\" class=\"headerlink\" title=\"七七\"></a>七七</h2><p><strong>天之道，其犹张弓与？高者抑之，下者举之；有余者损之，不足者补之。<br>天之道，损有余而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。<br>是以圣人为而不持，功成而不处，其不欲见贤。</strong></p>\n<h2 id=\"七八\"><a href=\"#七八\" class=\"headerlink\" title=\"七八\"></a>七八</h2><p><strong>天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之，弱之胜强，柔之胜刚，天下莫不知，莫能行。<br>是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。</strong></p>\n<h2 id=\"七九\"><a href=\"#七九\" class=\"headerlink\" title=\"七九\"></a>七九</h2><p><strong>和大怨，必有余怨，安以为善？是以圣人执左契，而不责于人。无德司彻。天道无亲，常与善人。</strong></p>\n<h2 id=\"八十\"><a href=\"#八十\" class=\"headerlink\" title=\"八十\"></a>八十</h2><p><strong>小国寡民，使有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；<br>使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡鸣犬之声相闻，民至老死不相往来。</strong></p>\n<h2 id=\"八一\"><a href=\"#八一\" class=\"headerlink\" title=\"八一\"></a>八一</h2><p><strong>信言不美，美言不信；善者不辩，辩者不善；知者不博，博者不知。<br>圣人不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害；圣人之道，为而不争。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"《道德经》\"><a href=\"#《道德经》\" class=\"headerlink\" title=\"《道德经》\"></a>《道德经》</h1><h2 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h2><p><strong>道可道，非常道；名可名，非常名。无，名天地之始；有，名万物之母。<br>故常无，欲以观其妙；常有，欲以观其徼（jiào）。此二者同出而异名，同谓之玄，玄之又玄，众妙之门。</strong></p>\n<h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><p><strong>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。<br>故有无相生，难易相成，长短相较，高下相倾，音声相和，前后相随。<br>是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不持，功成而弗居。<br>夫唯弗居，是以不去。</strong></p>\n<h2 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h2><p><strong>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。<br>是以圣人之治，虚其心，实其腹；弱其志，强其骨。<br>常使民无知无欲，使夫智者不敢为也。为无为，则无不治。</strong></p>\n<h2 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h2><p><strong>道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。<br>湛兮似或存，吾不知谁之子，象帝之先。</strong></p>\n<h2 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h2><p><strong>天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。<br>天地之间，其犹橐（tuó）籥（yuè）乎？虚而不屈，动而愈出。多言数穷，不如守中。</strong></p>\n<h2 id=\"六\"><a href=\"#六\" class=\"headerlink\" title=\"六\"></a>六</h2><p><strong>谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。</strong></p>\n<h2 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h2><p><strong>天长地久。天地所以能长且久者，以其不自生，故能长生。<br>是以圣人后其身而身先，外其身而身存。非以其无私邪？故能成其私。</strong></p>\n<h2 id=\"八\"><a href=\"#八\" class=\"headerlink\" title=\"八\"></a>八</h2><p><strong>上善若水，水善利万物而不争：处众人之所恶，故几于道，<br>居善地；心善渊；与善仁；言善信；正善治；事善能；动善时。夫唯不争，故无尤。</strong></p>\n<h2 id=\"九\"><a href=\"#九\" class=\"headerlink\" title=\"九\"></a>九</h2><p><strong>持而盈之，不如其已。揣而棁（zhuò）之，不可长保。金玉满堂，莫之能守。<br>富贵而骄，自遗其咎。功遂身退，天之道</strong></p>\n<h2 id=\"十\"><a href=\"#十\" class=\"headerlink\" title=\"十\"></a>十</h2><p><strong>载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？<br>爱民治国，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎？<br>生之、畜之，生而不有，为而不恃（shì），长而不宰，是谓玄德。</strong></p>\n<h2 id=\"十一\"><a href=\"#十一\" class=\"headerlink\" title=\"十一\"></a>十一</h2><p><strong>三十辐共一毂（gǔ），当其无，有车之用。埏（shān）埴(zhí)以为器，当其无，有器之用。<br>凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。</strong></p>\n<h2 id=\"十二\"><a href=\"#十二\" class=\"headerlink\" title=\"十二\"></a>十二</h2><p><strong>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令人行妨。<br>是以圣人为腹不为目，故去彼取此。</strong></p>\n<h2 id=\"十三\"><a href=\"#十三\" class=\"headerlink\" title=\"十三\"></a>十三</h2><p><strong>宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。<br>何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！<br>故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。</strong></p>\n<h2 id=\"十四\"><a href=\"#十四\" class=\"headerlink\" title=\"十四\"></a>十四</h2><p><strong>视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jíe），故混而为一。<br>其上不皦（jiǎo），其下不昧，绳绳（mǐn）不可名，复归于无物。<br>是谓无状之状，无物之象，是谓恍惚。迎之不见其首，随之不见其后。<br>执古之道，以御今之有。能知古始，是谓道纪。</strong></p>\n<h2 id=\"十五\"><a href=\"#十五\" class=\"headerlink\" title=\"十五\"></a>十五</h2><p><strong>古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。<br>豫焉若冬渉川，犹兮若畏四邻，俨兮其若家，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。<br>孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道这不欲盈，夫唯不盈，故能蔽而新成。</strong></p>\n<h2 id=\"十六\"><a href=\"#十六\" class=\"headerlink\" title=\"十六\"></a>十六</h2><p><strong>至虚极，守静笃，万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复命。<br>复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久。没身不殆。</strong></p>\n<h2 id=\"十七\"><a href=\"#十七\" class=\"headerlink\" title=\"十七\"></a>十七</h2><p><strong>太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。<br>信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓”我自然”。</strong></p>\n<h2 id=\"十八\"><a href=\"#十八\" class=\"headerlink\" title=\"十八\"></a>十八</h2><p><strong>大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</strong></p>\n<h2 id=\"十九\"><a href=\"#十九\" class=\"headerlink\" title=\"十九\"></a>十九</h2><p><strong>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。<br>此三者，以为文不足，故令有所属：见素抱朴，少私寡欲。</strong></p>\n<h2 id=\"二十\"><a href=\"#二十\" class=\"headerlink\" title=\"二十\"></a>二十</h2><p><strong>绝学无忧。唯之与阿，相去几何？善之与恶，相去几何？<br>人之所畏，不可不畏。荒兮其未央哉！众人熙熙，如享太牢，如春登台。<br>我独泊兮其未兆，如婴儿之未孩。㒦（léi）㒦兮若无所归。众人皆有余，而我独若遗。<br>我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。<br>澹（dàn）兮其若海，飀（liù）兮若无止。众人皆有以，而我独顽似鄙。<br>我独异于人，而贵食母。</strong></p>\n<h2 id=\"二一\"><a href=\"#二一\" class=\"headerlink\" title=\"二一\"></a>二一</h2><p><strong>孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物。<br>窃兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。<br>吾何以知众甫之状哉？以此。</strong></p>\n<h2 id=\"二二\"><a href=\"#二二\" class=\"headerlink\" title=\"二二\"></a>二二</h2><p><strong>曲则全：枉则直，洼则盈，敝则新，少则得，多则惑。<br>是以圣人抱一为天下式：不自见故明，不自是故彰，不自伐故有功，不自矜故长。<br>夫唯不争，故天下莫能与之争。古之所谓曲则全者，岂虚言哉！诚全而归之。</strong></p>\n<h2 id=\"二三\"><a href=\"#二三\" class=\"headerlink\" title=\"二三\"></a>二三</h2><p><strong>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能长久，而况于人乎？<br>故从事于道者，道者同于道，德者同于德，失者同于失。<br>同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。</strong></p>\n<h2 id=\"二四\"><a href=\"#二四\" class=\"headerlink\" title=\"二四\"></a>二四</h2><p><strong>企者不立，跨者不行，自见者不明，自是者不彰，自伐者无功，自矜者不长。<br>其在道也，曰余食赘行。物或恶之，故有道者不处。</strong></p>\n<h2 id=\"二五\"><a href=\"#二五\" class=\"headerlink\" title=\"二五\"></a>二五</h2><p><strong>有物混成，先天地生，寂兮寥兮，独立不改，周行而不殆，可以为天下母。<br>吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。<br>域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然。</strong></p>\n<h2 id=\"二六\"><a href=\"#二六\" class=\"headerlink\" title=\"二六\"></a>二六</h2><p><strong>重为轻根，静为躁君，是以圣人终日行不离辎（zī）重。虽有荣观，燕处超然。<br>奈何万乘之主，而已身轻天下？轻则失本，躁则失君。</strong></p>\n<h2 id=\"二七\"><a href=\"#二七\" class=\"headerlink\" title=\"二七\"></a>二七</h2><p><strong>善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。<br>是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。<br>故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。</strong></p>\n<h2 id=\"二八\"><a href=\"#二八\" class=\"headerlink\" title=\"二八\"></a>二八</h2><p><strong>知其雄，守其雌，为天下谿。为天下谿，常德不离，复归于婴儿。<br>知其白，守其黑，为天下式。为天下式，常德不忒，复归于无极。<br>知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归于朴。<br>朴散则为器，圣人用之则为官长，故大制不割。</strong></p>\n<h2 id=\"二九\"><a href=\"#二九\" class=\"headerlink\" title=\"二九\"></a>二九</h2><p><strong>将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。<br>故物或行或随，或歔或吹，或强或赢，或挫或隳（huī）。是以圣人去甚，去奢，去泰。</strong></p>\n<h2 id=\"三十\"><a href=\"#三十\" class=\"headerlink\" title=\"三十\"></a>三十</h2><p><strong>以道佐人主者，不以兵强天下，其事好还。师之所处，荆棘生焉。大军之后，必有凶年。<br>善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。<br>物壮则老，是谓不道，不道早已。</strong></p>\n<h2 id=\"三一\"><a href=\"#三一\" class=\"headerlink\" title=\"三一\"></a>三一</h2><p><strong>夫佳兵者，不详之器。物或恶之，故有道者不处。君子居则贵左，用兵则贵右。<br>兵者，不详之器，非君子之器，不得已而用之。恬淡为上，胜而不美。而美之者，是乐杀人。<br>夫乐杀人者，则不可以得志与天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。<br>杀人之众，以哀悲泣之。战胜，以丧礼处之。</strong></p>\n<h2 id=\"三二\"><a href=\"#三二\" class=\"headerlink\" title=\"三二\"></a>三二</h2><p><strong>道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。<br>天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。<br>譬道之在天下，犹川谷之于江海。</strong></p>\n<h2 id=\"三三\"><a href=\"#三三\" class=\"headerlink\" title=\"三三\"></a>三三</h2><p><strong>知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志。<br>不失其所者久，死而不亡者寿。</strong></p>\n<h2 id=\"三四\"><a href=\"#三四\" class=\"headerlink\" title=\"三四\"></a>三四</h2><p><strong>大道汜兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主。<br>常无欲，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。</strong></p>\n<h2 id=\"三五\"><a href=\"#三五\" class=\"headerlink\" title=\"三五\"></a>三五</h2><p><strong>执大象，天下往；往而不害，安平太。乐与饵，过客止。<br>道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。</strong></p>\n<h2 id=\"三六-三七\"><a href=\"#三六-三七\" class=\"headerlink\" title=\"三六 三七\"></a>三六 三七</h2><p><strong>将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之，是谓微明。<br>柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。<br>道常无为而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。<br>无名之朴，夫亦将无欲。不欲以静，天下将自定。</strong></p>\n<h2 id=\"三八\"><a href=\"#三八\" class=\"headerlink\" title=\"三八\"></a>三八</h2><p><strong>上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德无为而有以为；<br>上仁为之而无以为；上义为之而有以为；上礼为之而莫之应，则攘臂而扔之。<br>故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄而乱之首；前识者，道之华而愚之始。<br>是以大丈夫处其厚，不居其薄；处其实，不居其华。故去彼取此。</strong></p>\n<h2 id=\"三九\"><a href=\"#三九\" class=\"headerlink\" title=\"三九\"></a>三九</h2><p><strong>昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王得一以为天下负。<br>其致之。天无以清将恐裂，地无以宁将恐发，神无以灵将恐歇，谷无以盈将恐竭，万物无以生将恐灭，侯王无以高贵将恐蹶。<br>故贵以贱为本，高以下为基。是以侯王自谓孤寡不榖（gǔ）。此非以贱为本邪？非乎？<br>故致数舆无舆。不欲琭琭如玉，珞（luò）珞如石。</strong></p>\n<h2 id=\"四十\"><a href=\"#四十\" class=\"headerlink\" title=\"四十\"></a>四十</h2><p><strong>反者，道之动；弱者，道之用。天下万物生与有，有生于无。</strong></p>\n<h2 id=\"四一\"><a href=\"#四一\" class=\"headerlink\" title=\"四一\"></a>四一</h2><p><strong>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。<br>故建言有之：明道若昧，进道若退，夷道若纇（lèi）。<br>上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。<br>大方无隅，大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。</strong></p>\n<h2 id=\"四二\"><a href=\"#四二\" class=\"headerlink\" title=\"四二\"></a>四二</h2><p><strong>道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。<br>人之所恶，唯孤寡不榖，而王公以为称。故物或损之而益，或益之而损。<br>人之所教，我亦教之。强梁者不得其死，吾将以为教父。</strong></p>\n<h2 id=\"四三\"><a href=\"#四三\" class=\"headerlink\" title=\"四三\"></a>四三</h2><p><strong>天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益，天下希及之。</strong></p>\n<h2 id=\"四四\"><a href=\"#四四\" class=\"headerlink\" title=\"四四\"></a>四四</h2><p><strong>名与身孰亲？身与货孰多？得与亡孰病？是故甚爱必大费，多藏必厚亡。<br>知足不辱，知止不殆，可以长久。</strong></p>\n<h2 id=\"四五\"><a href=\"#四五\" class=\"headerlink\" title=\"四五\"></a>四五</h2><p><strong>大成若缺，其用不弊；大盈若冲，其用不穷。<br>大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清净为天下正。</strong></p>\n<h2 id=\"四六\"><a href=\"#四六\" class=\"headerlink\" title=\"四六\"></a>四六</h2><p><strong>天下有道，却走马以粪；天下无道，戎马生与郊。<br>祸莫大于不知足，咎莫大于欲得。故知足之足，常足矣。</strong></p>\n<h2 id=\"四七、四八\"><a href=\"#四七、四八\" class=\"headerlink\" title=\"四七、四八\"></a>四七、四八</h2><p><strong>不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名，不为而成。<br>为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常事以无事，及其有事，不足以取天下。</strong></p>\n<h2 id=\"四九\"><a href=\"#四九\" class=\"headerlink\" title=\"四九\"></a>四九</h2><p><strong>圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。<br>信者，吾信之；不信者，吾亦信之，德信。<br>圣人在天下歙（xī）歙，为天下浑其心。百姓皆注其耳目，圣人皆孩之。</strong></p>\n<h2 id=\"五十\"><a href=\"#五十\" class=\"headerlink\" title=\"五十\"></a>五十</h2><p><strong>出生入死。生之徒十有三，死之徒十有三。人之生，动之死地，亦十有三。<br>夫何故？以其生生之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被甲兵。<br>兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。</strong></p>\n<h2 id=\"五一\"><a href=\"#五一\" class=\"headerlink\" title=\"五一\"></a>五一</h2><p><strong>道生之，德畜之，物形之，势成之。是以万物莫不尊道而贵德。<br>道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之：长之、育之、亭之、毒之、养之、覆之。<br>生而不有，为而不持，长而不宰，是谓玄德</strong></p>\n<h2 id=\"五二\"><a href=\"#五二\" class=\"headerlink\" title=\"五二\"></a>五二</h2><p><strong>天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没身不殆。<br>塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见小曰明，守柔曰强。<br>用其光，复归其明，无遗身殃，是为习常。</strong></p>\n<h2 id=\"五三\"><a href=\"#五三\" class=\"headerlink\" title=\"五三\"></a>五三</h2><p><strong>使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。<br>朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！</strong></p>\n<h2 id=\"五四\"><a href=\"#五四\" class=\"headerlink\" title=\"五四\"></a>五四</h2><p><strong>善建者不拔，善抱者不脱，子孙以祭祀不缀。修之于身，其德乃真；修之于家，其德乃余；<br>修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。<br>故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。</strong></p>\n<h2 id=\"五五\"><a href=\"#五五\" class=\"headerlink\" title=\"五五\"></a>五五</h2><p><strong>含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫，猛兽不据，攫（jué）鸟不搏。<br>骨柔筋柔而握固，未知牝（pìn）牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。<br>知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。</strong></p>\n<h2 id=\"五六\"><a href=\"#五六\" class=\"headerlink\" title=\"五六\"></a>五六</h2><p><strong>知者不言，言者不知。塞其兑，闭其门，挫其锐，解其分，和其光，同其尘，是谓玄同。<br>故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱，故为天下贵。</strong></p>\n<h2 id=\"五七\"><a href=\"#五七\" class=\"headerlink\" title=\"五七\"></a>五七</h2><p><strong>以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。<br>天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋生；法令滋彰，盗贼多有。<br>故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。</strong></p>\n<h2 id=\"五八\"><a href=\"#五八\" class=\"headerlink\" title=\"五八\"></a>五八</h2><p><strong>其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？其无正。<br>正复为奇，善复为妖。人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光而不耀。</strong></p>\n<h2 id=\"五九\"><a href=\"#五九\" class=\"headerlink\" title=\"五九\"></a>五九</h2><p><strong>治人事天莫若啬。夫唯啬，是谓早服，早服谓之重积德。重积德则无不克，无不克则莫知其极。<br>莫知其极，可以有国，有国之母，可以长久。是谓深根固柢，长生久视之道。</strong></p>\n<h2 id=\"六十\"><a href=\"#六十\" class=\"headerlink\" title=\"六十\"></a>六十</h2><p><strong>治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。<br>夫两不相伤，故德交归焉。</strong></p>\n<h2 id=\"六一\"><a href=\"#六一\" class=\"headerlink\" title=\"六一\"></a>六一</h2><p><strong>大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。<br>故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。<br>大国不过欲兼畜人，小国不过欲入事人。夫两者各得其所欲，大者宜为下。</strong></p>\n<h2 id=\"六二\"><a href=\"#六二\" class=\"headerlink\" title=\"六二\"></a>六二</h2><p><strong>道者万物之奥，善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？<br>故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？<br>不曰以求得，有罪以免邪？故为天下贵。</strong></p>\n<h2 id=\"六三\"><a href=\"#六三\" class=\"headerlink\" title=\"六三\"></a>六三</h2><p><strong>为无为，事无事，味无味。大小，多少，报怨以德。<br>图难于其易，为大于其细。天下难事必作于易，天下大事必作于细。<br>是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。</strong></p>\n<h2 id=\"六四\"><a href=\"#六四\" class=\"headerlink\" title=\"六四\"></a>六四</h2><p><strong>其安易持，其未兆易谋，其脆易泮，其微易散。为之于未有，治之于未乱。<br>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。<br>为者败之，执者失之。是以圣人无为，故无败；无执，故无失。<br>民之从事，常于几成而败之。慎始如终，则无败事。是以圣人欲不欲，不贵难得之货；<br>学不学，复众人之所过。以辅万物之自然，而不敢为。</strong></p>\n<h2 id=\"六五\"><a href=\"#六五\" class=\"headerlink\" title=\"六五\"></a>六五</h2><p><strong>古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。<br>知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。</strong></p>\n<h2 id=\"六六\"><a href=\"#六六\" class=\"headerlink\" title=\"六六\"></a>六六</h2><p><strong>江海所以能为百谷王者，以其善下之，故能为百谷王。<br>是以欲上民，必以言下之；欲先民，必以身后之。是以圣人处上而民不重，处前而民不害。<br>是以天下乐推而不厌。以其不争，故天下莫能与之争。</strong></p>\n<h2 id=\"六七\"><a href=\"#六七\" class=\"headerlink\" title=\"六七\"></a>六七</h2><p><strong>天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细而夫。<br>我有三宝，持而保之。一曰慈，二曰俭，三曰不敢为天下先。<br>慈，故能勇；俭，故能广；不敢为天下先，故能成器长。<br>今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固。天将救之，以慈卫之。</strong></p>\n<h2 id=\"六八\"><a href=\"#六八\" class=\"headerlink\" title=\"六八\"></a>六八</h2><p><strong>善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。<br>是谓不争之德，是谓用人之力，是谓配天古之极。</strong></p>\n<h2 id=\"六九\"><a href=\"#六九\" class=\"headerlink\" title=\"六九\"></a>六九</h2><p><strong>用兵有言：吾不敢为主而为客，不敢进寸而退尺。是谓行无行，攘无臂，扔无敌，执无兵。<br>祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。</strong></p>\n<h2 id=\"七十\"><a href=\"#七十\" class=\"headerlink\" title=\"七十\"></a>七十</h2><p><strong>吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。<br>夫唯无知，是以不我知。知我这希，则我者贵。是以圣人被褐（hè）怀玉。</strong></p>\n<h2 id=\"七一\"><a href=\"#七一\" class=\"headerlink\" title=\"七一\"></a>七一</h2><p><strong>知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。</strong></p>\n<h2 id=\"七二\"><a href=\"#七二\" class=\"headerlink\" title=\"七二\"></a>七二</h2><p><strong>民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。<br>是以圣人自知，不自见；自爱，不自贵。故去彼取此。</strong></p>\n<h2 id=\"七三\"><a href=\"#七三\" class=\"headerlink\" title=\"七三\"></a>七三</h2><p><strong>勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶。孰知其故？<br>是以圣人犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。<br>天网恢恢，疏而不失。</strong></p>\n<h2 id=\"七四\"><a href=\"#七四\" class=\"headerlink\" title=\"七四\"></a>七四</h2><p><strong>民不畏死，奈何以死惧之？若使民常畏死，而为奇者吾得执而杀之，孰敢？<br>常有司杀者杀，夫代司杀者杀，是谓代大匠斫（zhuò）。夫代大匠斫者，希有不伤其手矣。</strong></p>\n<h2 id=\"七五\"><a href=\"#七五\" class=\"headerlink\" title=\"七五\"></a>七五</h2><p><strong>民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。<br>民之轻死，以其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。</strong></p>\n<h2 id=\"七六\"><a href=\"#七六\" class=\"headerlink\" title=\"七六\"></a>七六</h2><p><strong>人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。<br>故坚强者死之徒，柔弱者生之徒。是以兵强则不胜，木强则折。强大处下，柔弱处上。</strong></p>\n<h2 id=\"七七\"><a href=\"#七七\" class=\"headerlink\" title=\"七七\"></a>七七</h2><p><strong>天之道，其犹张弓与？高者抑之，下者举之；有余者损之，不足者补之。<br>天之道，损有余而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。<br>是以圣人为而不持，功成而不处，其不欲见贤。</strong></p>\n<h2 id=\"七八\"><a href=\"#七八\" class=\"headerlink\" title=\"七八\"></a>七八</h2><p><strong>天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之，弱之胜强，柔之胜刚，天下莫不知，莫能行。<br>是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。</strong></p>\n<h2 id=\"七九\"><a href=\"#七九\" class=\"headerlink\" title=\"七九\"></a>七九</h2><p><strong>和大怨，必有余怨，安以为善？是以圣人执左契，而不责于人。无德司彻。天道无亲，常与善人。</strong></p>\n<h2 id=\"八十\"><a href=\"#八十\" class=\"headerlink\" title=\"八十\"></a>八十</h2><p><strong>小国寡民，使有什伯之器而不用，使民重死而不远徙。虽有舟舆，无所乘之；虽有甲兵，无所陈之；<br>使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡鸣犬之声相闻，民至老死不相往来。</strong></p>\n<h2 id=\"八一\"><a href=\"#八一\" class=\"headerlink\" title=\"八一\"></a>八一</h2><p><strong>信言不美，美言不信；善者不辩，辩者不善；知者不博，博者不知。<br>圣人不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害；圣人之道，为而不争。</strong></p>\n"},{"url":"/2020/10/11/最美古诗词.html","title":"最美古诗词","keywords":"道德经","description":"道德经","date":"2020-10-10T23:29:21.000Z","draft":false,"tags_weight":100,"categoryes_weight":100,"type":"reprinted","_content":"\n# 能熟读背诵的古诗词\n\n## 《诗经 邶风》 静女\n\n静女其姝，俟我于城隅。  \n爱而不见，搔首踟蹰。\n\n静女其娈，贻我彤管。  \n彤管有炜，说怿女美。\n\n自牧归荑，洵美且异。  \n匪女之为美，美人之贻。\n\n## 《诗经 秦风》 蒹葭\n\n 蒹葭苍苍，白露为霜  \n 所谓伊人，在水一方。  \n 溯洄从之，道阻且长。  \n 溯游从之，宛在水中央。  \n \n 蒹葭萋萋，白露未晞。  \n 所谓伊人，在水之湄。  \n 溯洄从之，道阻且跻。  \n 溯游从之，宛在水中坻。\n \n 蒹葭采采，白露未已。  \n 所谓伊人，在水之涘。  \n 溯洄从之，道阻且右。  \n 溯游从之，宛在水中沚。\n \n ## 《垓（gāi）下歌》 项羽\n \n 力拔山兮气盖世。时不利兮骓不逝。  \n 骓不逝兮可奈何！虞兮虞兮奈若何！\n\n## 《大风歌》 刘邦\n\n大风起兮云飞扬，威加海内兮归故乡。安得猛士兮守四方！\n\n## 《长歌行》 汉乐府\n\n青青园中葵，朝露待日晞。  \n阳春布德泽，万物生光辉。  \n常恐秋节至， 焜黄华叶衰。  \n百川东到海，何时复西归？  \n少壮不努力，老大徒伤悲！\n\n## 《上邪》 汉乐府\n\n上邪！  \n我欲与君相知，长命无绝衰。  \n山无棱，江水为竭，  \n冬雷震震，夏雨雪，  \n天地合，乃敢与君绝！\n\n## 《迢迢牵牛星》 无名氏\n\n迢迢牵牛星，皎皎河汉女。  \n纤纤擢素手，札扎弄机杼。  \n终日不成章，泣涕零如雨；  \n河汉清且浅，相去复几许！  \n盈盈一水间，脉脉不得语。\n\n## 《观沧海》 曹操\n\n东临碣石，以观沧海。  \n水何澹澹（dàn），山岛竦峙。  \n树木丛生，百草丰茂。  \n秋风萧瑟，洪波涌起。  \n日月之行，若出其中；  \n星汉灿烂，若出其里。  \n幸甚至哉，歌以咏志。\n\n## 《龟虽寿》 曹操\n\n神龟虽寿，犹有竟时。  \n腾蛇乘雾，终为土灰。  \n老骥伏枥，志在千里；  \n烈士暮年， 壮心不已。  \n盈缩之期，不但在天；  \n养怡之福，可得永年。    \n幸甚至哉，歌以咏志。\n\n## 《短歌行》 曹操\n\n对酒当歌，人生几何？  \n譬如朝露，去日苦多。  \n慨当以慷，忧思难忘。  \n何以解忧，唯有杜康。\n\n青青子衿，悠悠我心。  \n但为君故，沉吟至今。  \n呦呦鹿鸣，食野之苹。  \n我有嘉宾，鼓瑟吹笙。  \n\n明明如月，何时可掇？  \n忧从中来，不可断绝。  \n越陌度阡，枉用相存。  \n契阔谈宴，心念旧恩。\n\n月明星稀，乌鹊南飞。  \n绕树三匝，何枝可依？  \n山不厌高，海不厌深。  \n周公吐哺，天下归心。\n\n## 《归园田居 其一》 陶渊明\n\n少无适俗韵，性本爱丘山。  \n误落尘网中，一去三十年。  \n羁鸟恋旧林，池鱼思故渊。  \n开荒南野际，守拙归园田。  \n方宅十余亩，草屋八九间。  \n榆柳荫后檐，桃李罗堂前。  \n暧暧远人村，依依墟里烟。  \n狗吠深巷中，鸡鸣桑树颠。  \n户庭无尘杂，虚室有余闲。  \n久在樊笼里，复得返自然。\n\n## 《归园田居 其三》 陶渊明\n\n种豆南山下，草盛豆苗稀。  \n晨兴理荒秽，带月荷锄归。  \n道狭草木长，夕露沾我衣。  \n衣沾不足惜，但使愿无违。\n\n## 《饮酒 其五》 陶渊明\n\n结庐在人境，而无车马喧。  \n问君何能尔，心远地自偏。  \n采菊东篱下，悠然见南山。  \n山气日夕佳，飞鸟相与还。  \n此中有真意，欲辨已忘言。\n\n## 《入若耶溪》 王籍\n\n艅艎何泛泛，空水共悠悠。  \n阴霞生远岫，阳景逐回流。  \n蝉噪林逾静，鸟鸣山更幽。  \n此地动归念，长年悲倦游。\n\n## 《敕勒歌》 北朝乐府\n\n敕勒川，阴山下。  \n天似穹庐，笼盖四野。  \n天苍苍。野茫茫。  \n风吹草低见牛羊。\n\n## 《木兰诗》 北朝乐府\n\n唧唧复唧唧，木兰当户织。  \n不闻机杼声，惟闻女叹息。  \n问女何所思，问女何所忆。  \n女亦无所思，女亦无所忆。  \n昨夜见军帖，可汗大点兵，  \n军书十二卷，卷卷有爷名。  \n阿爷无大儿，木兰无长兄，  \n愿为市鞍马，从此替爷征。  \n东市买骏马，西市买鞍鞯，  \n南市买辔头，北市买长鞭。  \n\n旦辞爷娘去，暮宿黄河边。  \n不闻爷娘唤女声，但闻黄河流水鸣溅溅。  \n旦辞黄河去，暮至黑山头。  \n不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。  \n万里赴戎机，关山度若飞。  \n朔气传金柝（tuò），寒光照铁衣。  \n将军百战死，壮士十年归。  \n归来见天子，天子坐明堂。  \n策勋十二转，赏赐百千强。  \n可汗问所欲，木兰不用尚书郎，  \n愿驰千里足，送儿还故乡。\n\n爷娘闻女来，出郭相扶将。  \n阿姊闻妹来，当户理红妆。  \n小弟闻姊来，磨刀霍霍向猪羊。  \n开我东阁门，坐我西阁床。  \n脱我战时袍，著我旧时裳。  \n当窗理云鬓，对镜贴花黄。  \n出门看火伴，火伴皆惊忙。  \n同行十二年，不知木兰是女郎。  \n雄兔脚扑朔，雌兔眼迷离；  \n双兔傍地走，安能辨我是雌雄？\n\n## 《送杜少府之任蜀川》 王勃\n\n城阙辅三秦，风烟望五津。  \n与君离别意， 同是宦游人。  \n海内存知己，天涯若比邻。  \n无为在歧路，儿女共沾巾。\n\n## 《登幽州台歌》 陈子昂\n\n前不见古人，后不见来者。  \n念天地之悠悠，独怆然而涕下。\n\n## 《春江花月夜》 张若虚\n\n春江潮水连海平，海上明月共潮生。  \n滟滟随波千万里，何处春江无月明。  \n江流宛转绕芳甸，月照花林皆似霰。  \n空里流霜不觉飞，汀（tīng）上白沙看不见。  \n江天一色无纤尘， 皎皎空中孤月轮。  \n江畔何人初见月？江月何年初照人？  \n人生代代无穷已，江月年年只相似。  \n不知江月待何人，但见长江送流水。  \n白云一片去悠悠，青枫浦上不胜愁。  \n谁家今夜扁舟子？何处相思明月楼？  \n可怜楼上月徘徊，应照离人妆镜台。  \n玉户帘中卷不去，捣衣砧上拂还来。  \n此时相望不相闻，愿逐月华流照君。  \n鸿雁长飞光不度，鱼龙潜跃水成文。  \n昨夜闲潭梦落花，可怜春半不还家。  \n江水流春去欲尽，江潭落月复西斜。  \n斜月沉沉藏海雾，碣石潇湘无限路。  \n不知乘月几人归，落月摇情满江树。\n\n## 《望月怀远》 张九龄\n\n海上生明月，天涯共此时。  \n情人怨遥夜，竟夕起相思。  \n灭烛怜光满，披衣觉露滋。  \n不堪盈手赠，还寝梦佳期。\n\n## 《回乡偶书》 贺知章\n\n少小离家老大回，乡音无改鬓毛衰。  \n儿童相见不相识，笑问客从何处来。\n\n## 《登鹳雀楼》 王之涣\n\n白日依山尽，黄河入海流。  \n欲穷千里目，更上一层楼。\n\n## 《凉州词》 王之涣\n\n黄河远上白云间，一片孤城万仞山。  \n羌笛何须怨杨柳，春风不度玉门关。\n\n## 《春晓》 孟浩然\n\n春眠不觉晓，处处闻啼鸟。  \n夜来风雨声，花落知多少。\n\n## 《过故人庄》 孟浩然\n\n故人具鸡黍，邀我至田家。  \n绿树村边合，青山郭外斜。  \n开轩面场圃，把酒话桑麻。  \n待到重阳日，还来就菊花。\n\n## 《出塞 其一》 王昌龄\n\n秦时明月汉时关，万里长征人未还。  \n但使龙城飞将在，不教胡马度阴山。\n\n## 《从军行 其四》 王昌龄\n\n青海长云暗雪山，孤城遥望玉门关。  \n黄沙百战穿金甲，不破楼兰终不还。\n\n## 《芙蓉楼送辛渐》 王昌龄\n\n寒雨连江夜入吴，平明送客楚山孤。  \n洛阳亲友如相问，一片冰心在玉壶。\n\n## 《闺怨》 王昌龄\n\n闺中少妇不知愁，春日凝妆上翠楼。  \n忽见陌头杨柳色，悔教夫婿觅封侯。\n\n## 《凉州词》 王翰\n\n葡萄美酒夜光杯，欲饮琵琶马上催。  \n醉卧沙场君莫笑，古来征战几人回？\n\n## 《九月九忆山东兄弟》 王维\n\n独在异乡为异客，每逢佳节倍思亲。  \n遥知兄弟登高处，遍插茱（zhū）萸少一人。\n\n## 《山居秋暝》 王维\n\n空山新雨后，天气晚来秋。  \n明月松间照，清泉石上流。  \n竹喧归浣女，莲动下渔舟。  \n随意春芳歇，王孙自可留。\n\n## 《相思》 王维\n\n红豆生南国，春来发几枝。  \n愿君多采撷，此物最相思。\n\n## 《送元二使安西》 王维\n\n渭城朝雨浥轻尘，客舍青青柳色新。  \n劝君更尽一杯酒，西出阳关无故人。\n\n## 《使至塞上》 王维\n\n单车欲问边，属国过居延。  \n征蓬出汉塞，归雁入胡天。  \n大漠孤烟直，长河落日圆。  \n萧关逢候骑，都护在燕然。\n\n## 《早发白帝城》 李白\n\n朝辞白帝彩云间，千里江陵一日还。  \n两岸猿声啼不住，轻舟已过万重山。\n\n## 《峨眉山月歌》 李白\n\n峨眉山月半轮秋，影入平羌江水流。  \n夜发清溪向三峡，思君不见下渝州。\n\n## 《度荆门送别》 李白\n\n渡远荆门外，来从楚国游。  \n山随平野尽，江入大荒流。  \n月下飞天镜，云生结海楼。  \n仍怜故乡水，万里送行舟。\n\n## 《望庐山瀑布》 李白\n\n日照香炉生紫烟，遥看瀑布挂前川。  \n飞流直下三千尺，疑是银河落九天。\n\n## 《黄鹤楼送孟浩然之广陵》 李白\n\n故人西辞黄鹤楼，烟花三月下扬州。  \n孤帆远影碧空尽，唯见长江天际流。\n\n## 《蜀道难》 李白\n\n噫吁嚱，危乎高哉！蜀道之难，难于上青天！  \n蚕丛及鱼凫，开国何茫然！  \n尔来四万八千岁，不与秦塞通人烟。  \n西当太白有鸟道，可以横绝峨眉巅。  \n地崩山摧壮士死，然后天梯石栈相钩连。  \n上有六龙回日之高标，下有冲波逆折之回川。  \n黄鹤之飞尚不得过， 猿揉欲度愁攀援。  \n青泥何盘盘，百步九折萦岩峦。  \n扪参历井仰胁息，以手抚膺坐长叹。  \n问君西游何时还？畏途巉岩不可攀。  \n但见悲鸟号古木，雄飞雌从绕林间。  \n又闻子规啼月夜，愁空山。  \n蜀道之难，难于上青天，使人听此凋朱颜！  \n连峰去天不盈尺，枯松倒挂倚绝壁。  \n飞湍瀑流争喧豗，砯（pīng）崖转石万壑雷。  \n其险也如此，嗟尔远道之人胡为乎来哉！  \n剑阁峥嵘而崔嵬，一夫当关，万夫莫开。  \n所守或匪亲，化为狼与豺。  \n朝避猛虎，夕避长蛇。  \n磨牙吮血，杀人如麻。  \n锦城虽云乐，不如早还家。  \n蜀道之难，难于上青天，侧身西望常咨嗟！\n\n## 《宣州谢朓（tiǎo）楼饯别校书叔云》 李白\n\n弃我去者，昨日之日不可留，  \n乱我心者，今日之日多烦忧。  \n长风万里送秋雁，对此可以酣高楼。  \n蓬莱文章建安骨，中间小谢又清发。  \n俱怀逸兴壮思飞， 欲上青天揽明月。  \n抽刀断水水更流，举杯消愁愁更愁。  \n人生在世不称意，明朝散发弄扁舟。\n\n## 《将（qiāng）进酒》 李白\n\n君不见黄河之水天上来，奔流到海不复回。  \n君不见高堂明镜悲白发，朝如青丝暮成雪。  \n人生得意须尽欢，莫使金樽空对月。  \n天生我材必有用，千金散尽还复来。  \n烹羊宰牛且为乐，会须一饮三百杯。  \n岑夫子，丹丘生，将进酒，杯莫停。  \n与君歌一曲，请君为我倾耳听。  \n钟鼓馔玉不足贵，但愿长醉不复醒。  \n古来圣贤皆寂寞，惟有饮者留其名。  \n陈王昔时宴平乐，斗酒十千恣欢谑（xuè）。  \n主人何为言少钱，径须沽取对君酌。  \n五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。\n\n\n## 《月下独酌》 李白\n\n花间一壶酒，独酌无相亲。  \n举杯邀明月，对影成三人。  \n月既不解饮，影徒随我身。  \n暂伴月将影，行乐须及春。  \n我歌月徘徊，我舞影零乱。  \n醒时相交欢，醉后各分散。  \n永结无情游，相期邈云汉。\n\n## 《春夜洛城闻笛》 李白\n\n谁家玉笛暗飞声，散入春风满洛城。  \n此夜曲中闻折柳，何人不起故园情。\n\n## 《闻王昌龄左迁龙标，遥有此寄》 李白\n\n杨花落尽子规啼，闻道龙标过五溪。  \n我寄愁心与明月，随风直到夜郎西。\n\n## 《望天门山》 李白\n\n天门中断楚江开，碧水东流至此回。  \n两岸青山相对出，孤帆一片日边来。\n\n## 《行路难三首 其一》 李白\n\n金樽清酒斗十千，玉盘珍羞直万钱。  \n停杯投箸不能食，拔剑四顾心茫然。  \n欲渡黄河冰塞川， 将登太行雪满山。  \n闲来垂钓碧溪上，忽复乘舟梦日边。  \n行路难，行路难，多歧路，今安在？  \n长风破浪会有时，直挂云帆济沧海！\n\n## 《梦游天姥吟留别》 李白\n\n海客谈瀛洲，烟涛微茫信难求。  \n越人语天姥，云霞明灭或可睹。  \n天姥连天向天横，势拔五岳掩赤城。  \n天台四万八千丈，对此欲倒东南倾。  \n我欲因之梦吴越，一夜飞度镜湖月。  \n湖月照我影，送我至剡溪。  \n谢公宿处今尚在，渌水荡漾清猿啼。  \n脚著谢公屐。身登青云梯。  \n半壁见海日，空中闻天鸡。  \n千岩万转路不定，迷花倚石忽已暝。  \n熊咆龙吟殷岩泉，栗深林兮惊层巅。  \n云青青兮欲雨，水澹澹兮生烟。  \n列缺霹雳，丘峦崩摧。洞天石扉，訇然中开。  \n青冥浩荡不见底，日月照耀金银台。  \n霓为衣兮风为马，云之君兮纷纷而来下。  \n虎鼓瑟兮鸾回车，仙之人兮列如麻。  \n忽魂悸以魄动，恍惊起而长嗟。  \n惟觉时之枕席，失向来之烟霞。  \n世间行乐亦如此，古来万事东流水。  \n别君去兮何时还，且放白鹿青崖间，须行即骑访名山。  \n按摧眉折腰事权贵，使我不得开心颜。\n\n## 《赠汪伦》 李白\n\n李白乘舟将欲行，忽闻岸上踏歌声。  \n桃花潭水深千尺，不及汪伦送我情。\n\n## 《次北固山下》 王湾\n\n客路青山外，行舟绿水前。  \n潮平两岸阔，风正一帆悬。  \n海日生残夜，江春入旧年。  \n乡书何处达，归雁洛阳边。\n\n## 《黄鹤楼》 崔颢（hào）\n\n昔人已乘黄鹤去，此地空余黄鹤楼。  \n黄鹤一去不复返，白云千载空悠悠。  \n晴川历历汉阳树，芳草萋萋鹦鹉洲。  \n日暮乡关何处是，烟波江上使人愁。 \n\n## 《别董大二首 其一》 高适\n\n千里黄云白日曛，北风吹雁雪纷纷。  \n莫愁前路无知己，天下谁人不识君。\n\n## 《题破山寺后禅院》 常建\n\n清晨入古寺，初日照高林。  \n曲径通幽处，禅房花木深。  \n山光悦鸟性，潭影空人心。  \n万籁此俱寂，但余钟磬音。\n\n## 《春望》 杜甫\n\n国破山河在，城春草木深。  \n感时花溅泪，恨别鸟惊心。  \n烽火连三月，家书抵万金。  \n白头搔更短，浑欲不胜簪。\n\n## 《旅夜书怀》 杜甫\n\n细草微风岸，危樯独夜舟。  \n星垂平野阔，月涌大江流。  \n名岂文章著，官应老病休。  \n飘飘何所似，天地一沙鸥。\n\n## 《江南逢李龟年》 杜甫\n\n岐王宅里寻常见，崔九堂前几度闻。  \n正是江南好风景，落花时节又逢君。\n\n## 《蜀相》 杜甫\n\n丞相祠堂何处寻，锦官城外柏森森。  \n映阶碧草自春色，隔叶黄鹂空好音。  \n三顾频烦天下计，两朝开济老臣心。  \n出师未捷身先死，长使英雄泪满襟。\n\n## 《春夜喜雨》 杜甫\n\n好雨知时节，当春乃发生。  \n随风潜入夜，润物细无声。  \n野径云俱黑，江船火独明。  \n晓看红湿处，花重谨琯城。\n\n## 《客至》 杜甫\n\n舍南舍北皆春水，但见群鸥日日来。  \n花径不曾缘客扫，蓬门今始为君开。  \n盘飧市远无兼味，樽酒家贫只旧醅。  \n肯与邻翁相对饮， 隔篱呼取尽余杯。\n\n## 《茅屋为秋风所破歌》 杜甫\n\n八月秋高风怒号，卷我屋上三重茅。  \n茅飞渡江洒江郊，高者挂罥长林梢，下着飘转沉塘坳。  \n南村群童欺我老无力，忍能对面为盗贼。  \n公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。  \n俄顷风定云墨色，秋天漠漠向昏黑。  \n布衾多年冷似铁，娇儿恶卧踏里裂。  \n床头屋漏无干处，雨脚如麻未断绝。  \n自经丧乱少睡眠，长夜沾湿何由彻！  \n安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！  \n呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足。\n\n## 《赠花卿》 杜甫\n\n锦城丝管日纷纷，半入江风半入云。  \n此曲只应天上有，人间能得几回闻。\n\n## 《登岳阳楼》 杜甫\n\n昔闻洞庭水，今上岳阳楼。  \n吴楚东南坼，乾坤日夜浮。  \n亲朋无一字，老病有孤舟。  \n戎马关山北，凭轩涕泗流。\n\n## 《登高》 杜甫\n\n风急天高猿啸哀，渚清沙白鸟飞回。  \n无边落木萧萧下，不尽长江滚滚来。  \n万里悲秋常作客，百年多病独登台。  \n艰难苦恨繁霜鬓，潦倒新停浊酒杯。\n\n## 《白雪歌送武判官归京》 岑参\n\n北风卷地白草折，胡天八月即飞雪。  \n忽如一夜春风来，千树万树梨花开。  \n散入珠帘湿罗幕，狐裘不暖锦衾（qīn）薄。  \n将军角弓不得控，都护铁衣冷难着。  \n瀚海阑干百丈冰，愁云惨淡万里凝。  \n中军置酒饮归客，胡琴琵琶与羌笛。  \n纷纷暮雪下辕门，风掣红旗冻不翻。  \n轮台东门送君去，去时雪满天山路。  \n山回路转不见君，雪上空留马行处。\n\n## 《逢入京使》 岑参\n\n故园东望路漫漫，双袖龙钟泪不干。  \n马上相逢无纸笔，凭君传语报平安。\n\n## 《枫桥夜泊》 张继\n\n月落乌啼霜满天，江枫渔火对愁眠。  \n姑苏城外寒山寺，夜半钟声到客船。\n\n## 《逢雪宿芙蓉山主人》 刘长卿\n\n日暮苍山远，天寒白屋贫。  \n柴门闻犬吠，风雪夜归人。\n\n## 《滁州西涧》 韦应物\n\n独怜幽草涧边生，上有黄鹂深树鸣。  \n春潮带雨晚来急，野渡无人舟自横。\n\n## 《游子吟》 孟郊\n\n慈母手中线，游子身上衣。  \n临行密密缝，意恐迟迟归。  \n谁言寸草心，报得三春晖。\n\n## 《题都城南庄》 崔护\n\n去年今日此门中，人面桃花相映红。  \n人面不知何处去，桃花依旧笑春风。\n\n## 《早春呈水部张十八员外二首 其一》 韩愈\n\n天街小雨润如酥，草色遥看近却无。  \n最是一年春好处，绝胜烟柳满皇都。\n\n## 《秋词二首 其一》 刘禹锡\n\n自古逢秋悲寂寥，我言秋日胜春朝。  \n晴空一鹤排云上，便引诗情到碧霄。\n\n## 《竹枝词二首 其一》 刘禹锡\n\n杨柳青青江水平，闻郎江上唱歌声。  \n东边日出西边雨，道是无晴却有晴。\n\n## 《乌衣巷》 刘禹锡\n\n朱雀桥边野草花，乌衣巷口夕阳斜。  \n旧时王谢堂前燕，飞入寻常百姓家。\n\n## 《石头城》 刘禹锡\n\n山围故国周遭在，潮打空城寂寞回。  \n淮水东边旧时月，夜深还过女墙来。\n\n## 《酬乐天扬州初逢席上见赠》 刘禹锡\n\n巴山楚水凄凉地，二十三年弃置身。  \n怀旧空吟闻笛赋，到乡翻似烂柯人。  \n沉舟侧畔千帆过，病树前头万木春。  \n今日听君歌一曲，暂凭杯酒长精神。\n\n## 《赠的古原草送别》 白居易\n\n离离原上草，一岁一枯荣。  \n野火烧不尽，春风吹又生。  \n远芳侵古道，晴翠接荒城。  \n又送王孙去，萋萋满别情。\n\n## 《长恨歌》 白居易\n\n汉皇重色思倾国，御宇多年求不得。  \n杨家有女初长成，养在深闺人未识。  \n天生丽质难自弃，一朝选在君王侧。  \n回眸一笑百媚生，六宫粉黛无颜色。  \n春寒赐浴华清池，温泉水滑洗凝脂。  \n侍儿扶起娇无力，始是新承恩泽时。  \n云鬓花颜金步摇，芙蓉帐暖度春宵。  \n春宵苦短日高起，从此君王不早朝。  \n承欢侍宴无闲暇，春从春游夜专夜。  \n后宫佳丽三千人，三千宠爱在一身。  \n金屋妆成娇侍夜，玉楼宴罢醉和春。  \n姊妹弟兄皆列土，可怜光彩生门户。  \n遂令天下父母心，不重生男重生女。  \n骊宫高处入青云，仙乐风飘处处闻。  \n缓歌慢舞凝丝竹，尽日君王不看足。  \n渔阳鼙（pí）鼓动地来，惊破霓裳羽衣曲。  \n九重城阙烟尘生，千乘万骑西南行。  \n翠华摇摇行复止，西出都门百余里。  \n六军不发无奈何，宛转蛾眉马前死。  \n花钿委地无人收，翠翘金雀玉搔头。  \n君王掩面救不得，回看血泪相和流。  \n黄埃散漫风萧索，云栈萦纡登剑阁。  \n峨眉山下少人行，旌旗无光日色薄。  \n行宫见月伤心色，夜雨闻铃肠断声。  \n天旋地转回龙驭，到此踌躇不能去。  \n马嵬坡下泥土中，不见玉颜空死处。  \n君臣相顾尽沾衣，东望都门信马归。  \n归来池苑皆依旧，太液芙蓉未央柳。  \n芙蓉如面柳如眉，对此如何不泪垂。  \n春风桃李花开日，秋雨梧桐叶落时。  \n西宫南内多秋草，落叶满阶红不扫。  \n梨园弟子白发新，椒房阿监青娥老。  \n夕殿萤飞思悄然，孤灯挑尽未成眠。  \n迟迟钟鼓初长夜，耿耿星河欲曙天。  \n鸳鸯瓦冷霜华重，翡翠衾（qīn）寒谁与共。  \n悠悠生死别经年，魂魄不曾来入梦。  \n临邛（qióng）道士鸿都客，能以精诚致魂魄。  \n为感君王展转思，遂教方士殷勤觅。  \n排空驭气奔如电，升天入地求之遍。  \n上穷碧落下黄泉，两处茫茫皆不见。  \n忽闻海上有仙山，山在虚无缥缈间。  \n楼阁玲珑五云起，其中绰（chuò）约多仙子。  \n中有一人字太真，雪肤花貌参差是。  \n金阙西厢叩玉扃（jiōng），转教小玉报双成。  \n闻道汉家天子使，九华帐里梦魂惊。  \n揽衣推枕起徘徊，珠箔银屏迤（yǐ）逦开。  \n云鬓半偏新睡觉，花冠不整下堂来。  \n风吹仙袂飘飘举，犹似霓裳羽衣舞。  \n玉容寂寞泪阑干，梨花一枝春带雨。  \n含情凝睇谢君王，一别音容两渺茫。  \n昭阳殿里恩爱绝，蓬莱宫中日月长。  \n回头下望人寰（huán）处，不见长安见尘雾。  \n惟将旧物表深情，钿合金钗寄将去。  \n钗留一股合一扇，钗擘黄金合分钿。  \n但教心似金钿坚，天上人间会相见。  \n临别殷勤重寄词，词中有誓两心知。  \n七月七日长生殿，半夜无人私语时。  \n在天愿作比翼鸟，在地愿为连理枝。  \n天长地久有时尽，此恨绵绵无绝期。\n\n## 《琵琶行》 白居易\n\n浔阳江头夜送客，枫叶荻花秋瑟瑟。  \n主人下马客在船，举酒欲饮无管弦。  \n醉不成欢惨将别，别时茫茫江浸月。  \n忽闻水上琵琶声，主人忘归客不发。  \n寻声暗问弹者谁，琵琶声停欲语迟。  \n移船相近邀相见，添酒回灯重开宴。  \n千呼万唤始出来，犹抱琵琶半遮面。  \n转轴拨弦三两声，未成曲调先有情。  \n弦弦掩抑声声思，似诉平生不得志。  \n低眉信手续续弹，说尽心中无限事。  \n轻拢慢捻抹复挑，初为霓裳后六幺。  \n大弦嘈嘈如急雨，小弦切切如私语。  \n嘈嘈切切错杂弹，大珠小珠落玉盘。  \n间关莺语花底滑，幽咽泉流冰下难。  \n冰泉冷涩弦凝绝，凝绝不通声暂歇。  \n别有幽愁暗恨生，此时无声胜有声。  \n银瓶乍破水浆迸，铁骑突出刀枪鸣。  \n曲终收拨当心画，四弦一声如裂帛。  \n东船西舫悄无言，唯见江心秋月白。  \n沉吟放拨插弦中，整顿衣裳起敛容。  \n自言本是京城女，家在虾蟆陵下住。  \n十三学得琵琶成，名属教坊第一部。  \n曲罢曾教善才服，妆成每被秋娘妒。  \n五陵年少争缠头，一曲红绡不知数。  \n钿头云篦击节碎，血色罗裙翻酒污。  \n今年欢笑复明年，秋月春风等闲度。  \n弟走从军阿姨死，暮去朝来颜色故。  \n门前冷落鞍马稀，老大嫁作商人妇。  \n商人重利轻别离，前月浮梁买茶去。  \n去来江口守空船，绕船月明江水寒。  \n深夜忽梦少年事，梦啼妆泪红阑干。  \n我闻琵琶已叹息，又闻此语重唧唧。  \n同是天涯沦落人，相逢何必曾相识。  \n我从去年辞帝京，谪居卧病浔阳城。  \n浔阳地僻无音乐，终岁不闻丝竹声。  \n住近湓江地低湿，黄芦苦竹绕宅生。  \n其间旦暮闻何物，杜鹃啼血猿哀鸣。  \n春江花朝秋月夜，往往取酒还独倾。  \n岂无山歌与村笛，呕哑嘲哳难为听。  \n今夜闻君琵琶语，如听仙乐耳暂明。  \n莫辞更坐弹一曲，为君翻作琵琶行。  \n感我此言良久立，却坐促弦弦转急。  \n凄凄不似向前声，满座重闻皆掩泣。  \n座中泣下谁最多，江州司马青衫湿。\n\n## 《钱塘江春行》 白居易\n\n孤山寺北贾亭西，水面初平云脚低。  \n几处早莺争暖树，谁家新燕啄春泥。  \n乱花渐欲迷人眼，浅草才能没马蹄。  \n最爱湖东行不足，绿杨阴里白沙堤。\n\n## 《江雪》 柳宗元\n\n千山鸟飞绝，万径人踪灭。  \n孤舟蓑笠翁，独钓寒江雪。\n\n## 《闻乐天授江州司马》 元稹（zhěn）\n\n残灯无焰影幢幢，此夕闻君谪九江。  \n垂死病中惊坐起，暗风吹雨入寒窗。\n\n## 《离思五首 其四》 元稹\n\n曾经沧海难为水，除却巫山不是云。  \n取次花丛懒回顾，半缘修道半缘君。\n\n## 《题鹤林寺僧舍》 李涉\n\n终日昏昏醉梦间，忽闻春尽强登山。  \n因过竹院逢僧话，又得浮生半日闲。\n\n## 《陇西行》 陈陶\n\n誓扫匈奴不顾身，五千貂锦丧胡尘。  \n可怜无定河边骨，犹是春闺梦里人。\n\n## 《寻隐者不遇》 贾岛\n\n松下问童子，言师采药去。  \n只在此山中，云深不知处。\n\n## 《近试上张水部》 朱庆馀\n\n洞房昨夜停红烛，待晓堂前拜舅姑。  \n妆罢低声问夫婿：画眉深浅入时无？\n\n## 《雁门太守行》 李贺\n\n黑云压城城欲摧，甲光向日金鳞开。  \n角声满天秋色里，塞上燕脂凝夜紫。  \n半卷红旗临易水，霜重鼓寒声不起。  \n报君黄金台上意，提携玉龙为君死。\n\n## 《寄扬州韩绰判官》 杜牧\n\n青山隐隐水迢迢，秋尽江南草未凋。  \n二十四桥明月夜，玉人何处教吹箫。\n\n## 《山行》 杜牧\n\n远上寒山石径斜，白云深处有人家。  \n停车坐爱枫林晚，霜叶红于二月花。\n\n## 《过华清宫绝句三首 其一》 杜牧\n\n长安回望绣成堆，山顶千门次第开。  \n一骑红尘妃子笑，无人知是荔枝来。\n\n## 《赤壁》 杜牧\n\n折戟沉沙铁未销，自将磨洗认前朝。  \n东风不与周郎便，铜雀春深锁二乔。\n\n## 《江南春》 杜牧\n\n千里莺啼绿映红，水村山郭酒旗风。  \n南朝四百八十寺，多少楼台烟雨中。\n\n## 《泊秦淮》 杜牧\n\n烟笼寒水月笼沙，夜泊秦淮近酒家。  \n商女不知亡国恨，隔江犹唱后庭花。\n\n## 《清明》 杜牧\n\n清明时节雨纷纷，路上行人欲断魂。  \n借问酒家何处有？牧童遥指杏花村。\n\n## 《锦瑟》 李商隐\n\n锦瑟无端五十弦，一弦一柱思华年。  \n庄生晓梦迷蝴蝶，望帝春心托杜鹃。  \n沧海月明珠有泪，蓝田日暖玉生烟。  \n此情可待成追忆，只是当时已惘然。\n\n## 《无题》 李商隐\n\n相见时难别亦难，东风无力百花残。  \n春蚕到死丝方尽，蜡炬成灰泪始干。  \n晓镜但愁云鬓改，夜吟应觉月光寒。  \n蓬山此去无多路，青鸟殷勤为探看。\n\n## 《无题二首 其一》 李商隐\n\n昨夜星辰昨夜风，画楼西畔桂堂东。  \n身无彩凤双飞翼，心有灵犀一点通。  \n隔座送钩春酒暖，分曹射覆蜡灯红。  \n嗟余听鼓应官去，走马兰台类转蓬。\n\n## 《登乐游原》 李商隐\n\n向晚意不适，驱车登古原。  \n夕阳无限好，只是近黄昏。\n\n## 《夜雨寄北》 李商隐\n\n君问归期未有期，巴山夜雨涨秋池。  \n何当共剪西窗烛，却话巴山夜雨时。\n\n## 《林逋》 梅花\n\n众芳摇落独暄妍，占尽风情向小园。  \n疏影横斜水清浅，暗香浮动月黄昏。  \n霜禽欲下先偷眼，粉蝶如知合断魂。  \n幸有微吟可相狎，不须檀（tán）板共金尊。\n\n## 《泊船瓜州》 王安石\n\n京口瓜洲一水间，钟山只隔数重山。  \n春风又绿江南岸，明月何时照我还。\n\n## 《梅花》 王安石\n\n墙角数枝梅，凌寒独自开。  \n遥知不是雪，为有暗香来。\n\n## 《饮湖上初晴后雨 其二》 苏轼\n\n水光潋滟晴方好，山色空蒙雨亦奇。  \n欲把西湖比西子，淡妆浓抹总相宜。\n\n## 《题西林壁》 苏轼\n\n横看成岭侧成峰，远近高低各不同。  \n不识庐山真面目，只缘身在此山中。\n\n## 《惠崇春江晚景》 苏轼\n\n竹外桃花三两枝，春江水暖鸭先知。  \n蒌蒿满地芦芽短，正是河豚欲上时。\n\n## 《小池》 杨万里\n\n泉眼无声惜细流，树阴照水爱晴柔。  \n小荷才露尖尖角，早有蜻蜓立上头。\n\n## 《晓出净慈寺送林子方》 杨万里\n\n毕竟西湖六月中，风光不与四时同。  \n接天莲叶无穷碧，映日荷花别样红。\n\n## 《游山西村》 陆游\n\n莫笑农家腊酒浑，丰年留客足鸡豚。  \n山重水复疑无路，柳暗花明又一村。  \n箫鼓追随春社近，衣冠简朴古风存。  \n从今若许闲乘月，拄杖无时夜叩门。\n\n## 《书愤》 陆游\n\n早岁那知世事艰，中原北望气如山。  \n楼船夜雪瓜洲渡，铁马秋风大散关。  \n塞上长城空自许，镜中衰鬓已先斑。  \n出师一表真名世，千载谁堪伯仲间。\n\n## 《十一月四日风雨大作二首 其二》 陆游\n\n僵卧孤村不自哀，尚思为国戍轮台。  \n夜阑卧听风吹雨，铁马冰河入梦来。\n\n## 《示儿》 陆游\n\n死去元知万事空，但悲不见九州同。  \n王师北定中原日，家祭无忘告乃翁。\n\n## 《春日》 朱熹\n\n胜日寻芳泗水滨，无边光景一时新。  \n等闲识得东风面，万紫千红总是春。\n\n## 《观书有感二首 其一》 朱熹\n\n半亩方塘一鉴开，天光云影共徘徊。  \n问渠那得清如许，为有源头活水来。\n\n## 《题临安邸》 林升\n\n山外青山楼外楼，西湖歌舞几时休？  \n暖风熏得游人醉，直把杭州作汴州。\n\n## 《游园不值》 叶绍翁\n\n应怜屐齿印苍苔，小扣柴扉久不开。  \n春色满园关不住，一枝红杏出墙来。\n\n## 《过零丁洋》 文天祥\n\n辛苦遭逢起一经，干戈寥落四周星。  \n山河破碎风飘絮，身世浮沉雨打萍。  \n惶恐滩头说惶恐，零丁洋里叹零丁。  \n人生自古谁无死，留取丹心照汗青。\n\n## 《墨梅》 王冕\n\n我家洗砚池头树，朵朵花开淡墨痕。  \n不要人夸好颜色，只留清气满乾坤。\n\n## 《石灰吟》 于谦\n\n千锤万击出深山，烈火焚烧若等闲。  \n粉身碎骨浑不怕，要留清白在人间。\n\n## 《竹石》 郑板桥\n\n咬定青山不放松，立根原在破岩中。  \n千磨万击还坚劲，任尔东西南北风。\n\n## 《论诗五首 其二》 赵翼\n\n李杜诗篇万口传，至今已觉不新鲜。  \n江山代有才人出，各领风骚数百年。\n\n## 《已亥杂诗 第五首》 龚自珍\n\n浩荡离愁白日斜，吟鞭东指即天涯。  \n落红不是无情物，化作春泥更护花。\n\n## 《已亥杂诗 第一首》 龚自珍\n\n九州生气恃风雷，万马齐喑究可哀。  \n我劝天公重抖擞，不拘一格降人才。\n\n## 《渔父》 张志和\n\n西塞山前白鹭飞，桃花流水鳜鱼肥。青箬笠，绿蓑衣，斜风细雨不须归。\n\n## 《忆江南》 白居易\n\n江南好，风景旧曾谙。日出江花红胜火，春来江水绿如蓝。能不忆江南。\n\n## 《虞美人》 李煜\n\n春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。  \n雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。\n\n## 《乌夜啼》 李煜\n\n无言独上西楼，月如钩。寂寞梧桐深院锁清秋。  \n剪不断，理还乱，是离愁。别有一番滋味在心头。\n\n## 《渔家傲》-秋思 范仲淹\n\n塞下秋来风景异，衡阳雁去无留意。四面边声连角起。千嶂里，长烟落日孤城闭。  \n浊酒一杯家万里，燕然未勒归无计。羌管悠悠霜满地。人不寐，将军白发征夫泪。\n\n## 《雨霖铃》 柳永\n\n寒蝉凄切。对长亭晚，骤雨初歇。都门帐饮无绪，留恋处、兰舟催发。执手相看泪眼，\n竟无语凝噎。念去去、千里烟波，暮霭沉沉楚天阔。  \n多情自古伤离别。更那堪、冷落清秋节。今宵酒醒何处？杨柳岸、晓风残月。\n此去经年，应是良辰好景虚设。便纵有、千种风情，更与何人说。\n\n## 《凤栖梧》 柳永\n\n伫（zhù）倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。  \n拟把疏狂图一醉。对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。\n","source":"_posts/国粹/最美古诗词.md","raw":"---\nurl: /2020/10/11/最美古诗词.html\ntitle: \"最美古诗词\"\nkeywords: \"道德经\"\ndescription: \"道德经\"\ndate: 2020-10-11T15:29:21+08:00\ndraft: false\ntags: [\"国粹\"]\ntags_weight: 100\ncategories: [\"国粹\"]\ncategoryes_weight: 100\ntype: \"reprinted\"\n---\n\n# 能熟读背诵的古诗词\n\n## 《诗经 邶风》 静女\n\n静女其姝，俟我于城隅。  \n爱而不见，搔首踟蹰。\n\n静女其娈，贻我彤管。  \n彤管有炜，说怿女美。\n\n自牧归荑，洵美且异。  \n匪女之为美，美人之贻。\n\n## 《诗经 秦风》 蒹葭\n\n 蒹葭苍苍，白露为霜  \n 所谓伊人，在水一方。  \n 溯洄从之，道阻且长。  \n 溯游从之，宛在水中央。  \n \n 蒹葭萋萋，白露未晞。  \n 所谓伊人，在水之湄。  \n 溯洄从之，道阻且跻。  \n 溯游从之，宛在水中坻。\n \n 蒹葭采采，白露未已。  \n 所谓伊人，在水之涘。  \n 溯洄从之，道阻且右。  \n 溯游从之，宛在水中沚。\n \n ## 《垓（gāi）下歌》 项羽\n \n 力拔山兮气盖世。时不利兮骓不逝。  \n 骓不逝兮可奈何！虞兮虞兮奈若何！\n\n## 《大风歌》 刘邦\n\n大风起兮云飞扬，威加海内兮归故乡。安得猛士兮守四方！\n\n## 《长歌行》 汉乐府\n\n青青园中葵，朝露待日晞。  \n阳春布德泽，万物生光辉。  \n常恐秋节至， 焜黄华叶衰。  \n百川东到海，何时复西归？  \n少壮不努力，老大徒伤悲！\n\n## 《上邪》 汉乐府\n\n上邪！  \n我欲与君相知，长命无绝衰。  \n山无棱，江水为竭，  \n冬雷震震，夏雨雪，  \n天地合，乃敢与君绝！\n\n## 《迢迢牵牛星》 无名氏\n\n迢迢牵牛星，皎皎河汉女。  \n纤纤擢素手，札扎弄机杼。  \n终日不成章，泣涕零如雨；  \n河汉清且浅，相去复几许！  \n盈盈一水间，脉脉不得语。\n\n## 《观沧海》 曹操\n\n东临碣石，以观沧海。  \n水何澹澹（dàn），山岛竦峙。  \n树木丛生，百草丰茂。  \n秋风萧瑟，洪波涌起。  \n日月之行，若出其中；  \n星汉灿烂，若出其里。  \n幸甚至哉，歌以咏志。\n\n## 《龟虽寿》 曹操\n\n神龟虽寿，犹有竟时。  \n腾蛇乘雾，终为土灰。  \n老骥伏枥，志在千里；  \n烈士暮年， 壮心不已。  \n盈缩之期，不但在天；  \n养怡之福，可得永年。    \n幸甚至哉，歌以咏志。\n\n## 《短歌行》 曹操\n\n对酒当歌，人生几何？  \n譬如朝露，去日苦多。  \n慨当以慷，忧思难忘。  \n何以解忧，唯有杜康。\n\n青青子衿，悠悠我心。  \n但为君故，沉吟至今。  \n呦呦鹿鸣，食野之苹。  \n我有嘉宾，鼓瑟吹笙。  \n\n明明如月，何时可掇？  \n忧从中来，不可断绝。  \n越陌度阡，枉用相存。  \n契阔谈宴，心念旧恩。\n\n月明星稀，乌鹊南飞。  \n绕树三匝，何枝可依？  \n山不厌高，海不厌深。  \n周公吐哺，天下归心。\n\n## 《归园田居 其一》 陶渊明\n\n少无适俗韵，性本爱丘山。  \n误落尘网中，一去三十年。  \n羁鸟恋旧林，池鱼思故渊。  \n开荒南野际，守拙归园田。  \n方宅十余亩，草屋八九间。  \n榆柳荫后檐，桃李罗堂前。  \n暧暧远人村，依依墟里烟。  \n狗吠深巷中，鸡鸣桑树颠。  \n户庭无尘杂，虚室有余闲。  \n久在樊笼里，复得返自然。\n\n## 《归园田居 其三》 陶渊明\n\n种豆南山下，草盛豆苗稀。  \n晨兴理荒秽，带月荷锄归。  \n道狭草木长，夕露沾我衣。  \n衣沾不足惜，但使愿无违。\n\n## 《饮酒 其五》 陶渊明\n\n结庐在人境，而无车马喧。  \n问君何能尔，心远地自偏。  \n采菊东篱下，悠然见南山。  \n山气日夕佳，飞鸟相与还。  \n此中有真意，欲辨已忘言。\n\n## 《入若耶溪》 王籍\n\n艅艎何泛泛，空水共悠悠。  \n阴霞生远岫，阳景逐回流。  \n蝉噪林逾静，鸟鸣山更幽。  \n此地动归念，长年悲倦游。\n\n## 《敕勒歌》 北朝乐府\n\n敕勒川，阴山下。  \n天似穹庐，笼盖四野。  \n天苍苍。野茫茫。  \n风吹草低见牛羊。\n\n## 《木兰诗》 北朝乐府\n\n唧唧复唧唧，木兰当户织。  \n不闻机杼声，惟闻女叹息。  \n问女何所思，问女何所忆。  \n女亦无所思，女亦无所忆。  \n昨夜见军帖，可汗大点兵，  \n军书十二卷，卷卷有爷名。  \n阿爷无大儿，木兰无长兄，  \n愿为市鞍马，从此替爷征。  \n东市买骏马，西市买鞍鞯，  \n南市买辔头，北市买长鞭。  \n\n旦辞爷娘去，暮宿黄河边。  \n不闻爷娘唤女声，但闻黄河流水鸣溅溅。  \n旦辞黄河去，暮至黑山头。  \n不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。  \n万里赴戎机，关山度若飞。  \n朔气传金柝（tuò），寒光照铁衣。  \n将军百战死，壮士十年归。  \n归来见天子，天子坐明堂。  \n策勋十二转，赏赐百千强。  \n可汗问所欲，木兰不用尚书郎，  \n愿驰千里足，送儿还故乡。\n\n爷娘闻女来，出郭相扶将。  \n阿姊闻妹来，当户理红妆。  \n小弟闻姊来，磨刀霍霍向猪羊。  \n开我东阁门，坐我西阁床。  \n脱我战时袍，著我旧时裳。  \n当窗理云鬓，对镜贴花黄。  \n出门看火伴，火伴皆惊忙。  \n同行十二年，不知木兰是女郎。  \n雄兔脚扑朔，雌兔眼迷离；  \n双兔傍地走，安能辨我是雌雄？\n\n## 《送杜少府之任蜀川》 王勃\n\n城阙辅三秦，风烟望五津。  \n与君离别意， 同是宦游人。  \n海内存知己，天涯若比邻。  \n无为在歧路，儿女共沾巾。\n\n## 《登幽州台歌》 陈子昂\n\n前不见古人，后不见来者。  \n念天地之悠悠，独怆然而涕下。\n\n## 《春江花月夜》 张若虚\n\n春江潮水连海平，海上明月共潮生。  \n滟滟随波千万里，何处春江无月明。  \n江流宛转绕芳甸，月照花林皆似霰。  \n空里流霜不觉飞，汀（tīng）上白沙看不见。  \n江天一色无纤尘， 皎皎空中孤月轮。  \n江畔何人初见月？江月何年初照人？  \n人生代代无穷已，江月年年只相似。  \n不知江月待何人，但见长江送流水。  \n白云一片去悠悠，青枫浦上不胜愁。  \n谁家今夜扁舟子？何处相思明月楼？  \n可怜楼上月徘徊，应照离人妆镜台。  \n玉户帘中卷不去，捣衣砧上拂还来。  \n此时相望不相闻，愿逐月华流照君。  \n鸿雁长飞光不度，鱼龙潜跃水成文。  \n昨夜闲潭梦落花，可怜春半不还家。  \n江水流春去欲尽，江潭落月复西斜。  \n斜月沉沉藏海雾，碣石潇湘无限路。  \n不知乘月几人归，落月摇情满江树。\n\n## 《望月怀远》 张九龄\n\n海上生明月，天涯共此时。  \n情人怨遥夜，竟夕起相思。  \n灭烛怜光满，披衣觉露滋。  \n不堪盈手赠，还寝梦佳期。\n\n## 《回乡偶书》 贺知章\n\n少小离家老大回，乡音无改鬓毛衰。  \n儿童相见不相识，笑问客从何处来。\n\n## 《登鹳雀楼》 王之涣\n\n白日依山尽，黄河入海流。  \n欲穷千里目，更上一层楼。\n\n## 《凉州词》 王之涣\n\n黄河远上白云间，一片孤城万仞山。  \n羌笛何须怨杨柳，春风不度玉门关。\n\n## 《春晓》 孟浩然\n\n春眠不觉晓，处处闻啼鸟。  \n夜来风雨声，花落知多少。\n\n## 《过故人庄》 孟浩然\n\n故人具鸡黍，邀我至田家。  \n绿树村边合，青山郭外斜。  \n开轩面场圃，把酒话桑麻。  \n待到重阳日，还来就菊花。\n\n## 《出塞 其一》 王昌龄\n\n秦时明月汉时关，万里长征人未还。  \n但使龙城飞将在，不教胡马度阴山。\n\n## 《从军行 其四》 王昌龄\n\n青海长云暗雪山，孤城遥望玉门关。  \n黄沙百战穿金甲，不破楼兰终不还。\n\n## 《芙蓉楼送辛渐》 王昌龄\n\n寒雨连江夜入吴，平明送客楚山孤。  \n洛阳亲友如相问，一片冰心在玉壶。\n\n## 《闺怨》 王昌龄\n\n闺中少妇不知愁，春日凝妆上翠楼。  \n忽见陌头杨柳色，悔教夫婿觅封侯。\n\n## 《凉州词》 王翰\n\n葡萄美酒夜光杯，欲饮琵琶马上催。  \n醉卧沙场君莫笑，古来征战几人回？\n\n## 《九月九忆山东兄弟》 王维\n\n独在异乡为异客，每逢佳节倍思亲。  \n遥知兄弟登高处，遍插茱（zhū）萸少一人。\n\n## 《山居秋暝》 王维\n\n空山新雨后，天气晚来秋。  \n明月松间照，清泉石上流。  \n竹喧归浣女，莲动下渔舟。  \n随意春芳歇，王孙自可留。\n\n## 《相思》 王维\n\n红豆生南国，春来发几枝。  \n愿君多采撷，此物最相思。\n\n## 《送元二使安西》 王维\n\n渭城朝雨浥轻尘，客舍青青柳色新。  \n劝君更尽一杯酒，西出阳关无故人。\n\n## 《使至塞上》 王维\n\n单车欲问边，属国过居延。  \n征蓬出汉塞，归雁入胡天。  \n大漠孤烟直，长河落日圆。  \n萧关逢候骑，都护在燕然。\n\n## 《早发白帝城》 李白\n\n朝辞白帝彩云间，千里江陵一日还。  \n两岸猿声啼不住，轻舟已过万重山。\n\n## 《峨眉山月歌》 李白\n\n峨眉山月半轮秋，影入平羌江水流。  \n夜发清溪向三峡，思君不见下渝州。\n\n## 《度荆门送别》 李白\n\n渡远荆门外，来从楚国游。  \n山随平野尽，江入大荒流。  \n月下飞天镜，云生结海楼。  \n仍怜故乡水，万里送行舟。\n\n## 《望庐山瀑布》 李白\n\n日照香炉生紫烟，遥看瀑布挂前川。  \n飞流直下三千尺，疑是银河落九天。\n\n## 《黄鹤楼送孟浩然之广陵》 李白\n\n故人西辞黄鹤楼，烟花三月下扬州。  \n孤帆远影碧空尽，唯见长江天际流。\n\n## 《蜀道难》 李白\n\n噫吁嚱，危乎高哉！蜀道之难，难于上青天！  \n蚕丛及鱼凫，开国何茫然！  \n尔来四万八千岁，不与秦塞通人烟。  \n西当太白有鸟道，可以横绝峨眉巅。  \n地崩山摧壮士死，然后天梯石栈相钩连。  \n上有六龙回日之高标，下有冲波逆折之回川。  \n黄鹤之飞尚不得过， 猿揉欲度愁攀援。  \n青泥何盘盘，百步九折萦岩峦。  \n扪参历井仰胁息，以手抚膺坐长叹。  \n问君西游何时还？畏途巉岩不可攀。  \n但见悲鸟号古木，雄飞雌从绕林间。  \n又闻子规啼月夜，愁空山。  \n蜀道之难，难于上青天，使人听此凋朱颜！  \n连峰去天不盈尺，枯松倒挂倚绝壁。  \n飞湍瀑流争喧豗，砯（pīng）崖转石万壑雷。  \n其险也如此，嗟尔远道之人胡为乎来哉！  \n剑阁峥嵘而崔嵬，一夫当关，万夫莫开。  \n所守或匪亲，化为狼与豺。  \n朝避猛虎，夕避长蛇。  \n磨牙吮血，杀人如麻。  \n锦城虽云乐，不如早还家。  \n蜀道之难，难于上青天，侧身西望常咨嗟！\n\n## 《宣州谢朓（tiǎo）楼饯别校书叔云》 李白\n\n弃我去者，昨日之日不可留，  \n乱我心者，今日之日多烦忧。  \n长风万里送秋雁，对此可以酣高楼。  \n蓬莱文章建安骨，中间小谢又清发。  \n俱怀逸兴壮思飞， 欲上青天揽明月。  \n抽刀断水水更流，举杯消愁愁更愁。  \n人生在世不称意，明朝散发弄扁舟。\n\n## 《将（qiāng）进酒》 李白\n\n君不见黄河之水天上来，奔流到海不复回。  \n君不见高堂明镜悲白发，朝如青丝暮成雪。  \n人生得意须尽欢，莫使金樽空对月。  \n天生我材必有用，千金散尽还复来。  \n烹羊宰牛且为乐，会须一饮三百杯。  \n岑夫子，丹丘生，将进酒，杯莫停。  \n与君歌一曲，请君为我倾耳听。  \n钟鼓馔玉不足贵，但愿长醉不复醒。  \n古来圣贤皆寂寞，惟有饮者留其名。  \n陈王昔时宴平乐，斗酒十千恣欢谑（xuè）。  \n主人何为言少钱，径须沽取对君酌。  \n五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。\n\n\n## 《月下独酌》 李白\n\n花间一壶酒，独酌无相亲。  \n举杯邀明月，对影成三人。  \n月既不解饮，影徒随我身。  \n暂伴月将影，行乐须及春。  \n我歌月徘徊，我舞影零乱。  \n醒时相交欢，醉后各分散。  \n永结无情游，相期邈云汉。\n\n## 《春夜洛城闻笛》 李白\n\n谁家玉笛暗飞声，散入春风满洛城。  \n此夜曲中闻折柳，何人不起故园情。\n\n## 《闻王昌龄左迁龙标，遥有此寄》 李白\n\n杨花落尽子规啼，闻道龙标过五溪。  \n我寄愁心与明月，随风直到夜郎西。\n\n## 《望天门山》 李白\n\n天门中断楚江开，碧水东流至此回。  \n两岸青山相对出，孤帆一片日边来。\n\n## 《行路难三首 其一》 李白\n\n金樽清酒斗十千，玉盘珍羞直万钱。  \n停杯投箸不能食，拔剑四顾心茫然。  \n欲渡黄河冰塞川， 将登太行雪满山。  \n闲来垂钓碧溪上，忽复乘舟梦日边。  \n行路难，行路难，多歧路，今安在？  \n长风破浪会有时，直挂云帆济沧海！\n\n## 《梦游天姥吟留别》 李白\n\n海客谈瀛洲，烟涛微茫信难求。  \n越人语天姥，云霞明灭或可睹。  \n天姥连天向天横，势拔五岳掩赤城。  \n天台四万八千丈，对此欲倒东南倾。  \n我欲因之梦吴越，一夜飞度镜湖月。  \n湖月照我影，送我至剡溪。  \n谢公宿处今尚在，渌水荡漾清猿啼。  \n脚著谢公屐。身登青云梯。  \n半壁见海日，空中闻天鸡。  \n千岩万转路不定，迷花倚石忽已暝。  \n熊咆龙吟殷岩泉，栗深林兮惊层巅。  \n云青青兮欲雨，水澹澹兮生烟。  \n列缺霹雳，丘峦崩摧。洞天石扉，訇然中开。  \n青冥浩荡不见底，日月照耀金银台。  \n霓为衣兮风为马，云之君兮纷纷而来下。  \n虎鼓瑟兮鸾回车，仙之人兮列如麻。  \n忽魂悸以魄动，恍惊起而长嗟。  \n惟觉时之枕席，失向来之烟霞。  \n世间行乐亦如此，古来万事东流水。  \n别君去兮何时还，且放白鹿青崖间，须行即骑访名山。  \n按摧眉折腰事权贵，使我不得开心颜。\n\n## 《赠汪伦》 李白\n\n李白乘舟将欲行，忽闻岸上踏歌声。  \n桃花潭水深千尺，不及汪伦送我情。\n\n## 《次北固山下》 王湾\n\n客路青山外，行舟绿水前。  \n潮平两岸阔，风正一帆悬。  \n海日生残夜，江春入旧年。  \n乡书何处达，归雁洛阳边。\n\n## 《黄鹤楼》 崔颢（hào）\n\n昔人已乘黄鹤去，此地空余黄鹤楼。  \n黄鹤一去不复返，白云千载空悠悠。  \n晴川历历汉阳树，芳草萋萋鹦鹉洲。  \n日暮乡关何处是，烟波江上使人愁。 \n\n## 《别董大二首 其一》 高适\n\n千里黄云白日曛，北风吹雁雪纷纷。  \n莫愁前路无知己，天下谁人不识君。\n\n## 《题破山寺后禅院》 常建\n\n清晨入古寺，初日照高林。  \n曲径通幽处，禅房花木深。  \n山光悦鸟性，潭影空人心。  \n万籁此俱寂，但余钟磬音。\n\n## 《春望》 杜甫\n\n国破山河在，城春草木深。  \n感时花溅泪，恨别鸟惊心。  \n烽火连三月，家书抵万金。  \n白头搔更短，浑欲不胜簪。\n\n## 《旅夜书怀》 杜甫\n\n细草微风岸，危樯独夜舟。  \n星垂平野阔，月涌大江流。  \n名岂文章著，官应老病休。  \n飘飘何所似，天地一沙鸥。\n\n## 《江南逢李龟年》 杜甫\n\n岐王宅里寻常见，崔九堂前几度闻。  \n正是江南好风景，落花时节又逢君。\n\n## 《蜀相》 杜甫\n\n丞相祠堂何处寻，锦官城外柏森森。  \n映阶碧草自春色，隔叶黄鹂空好音。  \n三顾频烦天下计，两朝开济老臣心。  \n出师未捷身先死，长使英雄泪满襟。\n\n## 《春夜喜雨》 杜甫\n\n好雨知时节，当春乃发生。  \n随风潜入夜，润物细无声。  \n野径云俱黑，江船火独明。  \n晓看红湿处，花重谨琯城。\n\n## 《客至》 杜甫\n\n舍南舍北皆春水，但见群鸥日日来。  \n花径不曾缘客扫，蓬门今始为君开。  \n盘飧市远无兼味，樽酒家贫只旧醅。  \n肯与邻翁相对饮， 隔篱呼取尽余杯。\n\n## 《茅屋为秋风所破歌》 杜甫\n\n八月秋高风怒号，卷我屋上三重茅。  \n茅飞渡江洒江郊，高者挂罥长林梢，下着飘转沉塘坳。  \n南村群童欺我老无力，忍能对面为盗贼。  \n公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。  \n俄顷风定云墨色，秋天漠漠向昏黑。  \n布衾多年冷似铁，娇儿恶卧踏里裂。  \n床头屋漏无干处，雨脚如麻未断绝。  \n自经丧乱少睡眠，长夜沾湿何由彻！  \n安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！  \n呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足。\n\n## 《赠花卿》 杜甫\n\n锦城丝管日纷纷，半入江风半入云。  \n此曲只应天上有，人间能得几回闻。\n\n## 《登岳阳楼》 杜甫\n\n昔闻洞庭水，今上岳阳楼。  \n吴楚东南坼，乾坤日夜浮。  \n亲朋无一字，老病有孤舟。  \n戎马关山北，凭轩涕泗流。\n\n## 《登高》 杜甫\n\n风急天高猿啸哀，渚清沙白鸟飞回。  \n无边落木萧萧下，不尽长江滚滚来。  \n万里悲秋常作客，百年多病独登台。  \n艰难苦恨繁霜鬓，潦倒新停浊酒杯。\n\n## 《白雪歌送武判官归京》 岑参\n\n北风卷地白草折，胡天八月即飞雪。  \n忽如一夜春风来，千树万树梨花开。  \n散入珠帘湿罗幕，狐裘不暖锦衾（qīn）薄。  \n将军角弓不得控，都护铁衣冷难着。  \n瀚海阑干百丈冰，愁云惨淡万里凝。  \n中军置酒饮归客，胡琴琵琶与羌笛。  \n纷纷暮雪下辕门，风掣红旗冻不翻。  \n轮台东门送君去，去时雪满天山路。  \n山回路转不见君，雪上空留马行处。\n\n## 《逢入京使》 岑参\n\n故园东望路漫漫，双袖龙钟泪不干。  \n马上相逢无纸笔，凭君传语报平安。\n\n## 《枫桥夜泊》 张继\n\n月落乌啼霜满天，江枫渔火对愁眠。  \n姑苏城外寒山寺，夜半钟声到客船。\n\n## 《逢雪宿芙蓉山主人》 刘长卿\n\n日暮苍山远，天寒白屋贫。  \n柴门闻犬吠，风雪夜归人。\n\n## 《滁州西涧》 韦应物\n\n独怜幽草涧边生，上有黄鹂深树鸣。  \n春潮带雨晚来急，野渡无人舟自横。\n\n## 《游子吟》 孟郊\n\n慈母手中线，游子身上衣。  \n临行密密缝，意恐迟迟归。  \n谁言寸草心，报得三春晖。\n\n## 《题都城南庄》 崔护\n\n去年今日此门中，人面桃花相映红。  \n人面不知何处去，桃花依旧笑春风。\n\n## 《早春呈水部张十八员外二首 其一》 韩愈\n\n天街小雨润如酥，草色遥看近却无。  \n最是一年春好处，绝胜烟柳满皇都。\n\n## 《秋词二首 其一》 刘禹锡\n\n自古逢秋悲寂寥，我言秋日胜春朝。  \n晴空一鹤排云上，便引诗情到碧霄。\n\n## 《竹枝词二首 其一》 刘禹锡\n\n杨柳青青江水平，闻郎江上唱歌声。  \n东边日出西边雨，道是无晴却有晴。\n\n## 《乌衣巷》 刘禹锡\n\n朱雀桥边野草花，乌衣巷口夕阳斜。  \n旧时王谢堂前燕，飞入寻常百姓家。\n\n## 《石头城》 刘禹锡\n\n山围故国周遭在，潮打空城寂寞回。  \n淮水东边旧时月，夜深还过女墙来。\n\n## 《酬乐天扬州初逢席上见赠》 刘禹锡\n\n巴山楚水凄凉地，二十三年弃置身。  \n怀旧空吟闻笛赋，到乡翻似烂柯人。  \n沉舟侧畔千帆过，病树前头万木春。  \n今日听君歌一曲，暂凭杯酒长精神。\n\n## 《赠的古原草送别》 白居易\n\n离离原上草，一岁一枯荣。  \n野火烧不尽，春风吹又生。  \n远芳侵古道，晴翠接荒城。  \n又送王孙去，萋萋满别情。\n\n## 《长恨歌》 白居易\n\n汉皇重色思倾国，御宇多年求不得。  \n杨家有女初长成，养在深闺人未识。  \n天生丽质难自弃，一朝选在君王侧。  \n回眸一笑百媚生，六宫粉黛无颜色。  \n春寒赐浴华清池，温泉水滑洗凝脂。  \n侍儿扶起娇无力，始是新承恩泽时。  \n云鬓花颜金步摇，芙蓉帐暖度春宵。  \n春宵苦短日高起，从此君王不早朝。  \n承欢侍宴无闲暇，春从春游夜专夜。  \n后宫佳丽三千人，三千宠爱在一身。  \n金屋妆成娇侍夜，玉楼宴罢醉和春。  \n姊妹弟兄皆列土，可怜光彩生门户。  \n遂令天下父母心，不重生男重生女。  \n骊宫高处入青云，仙乐风飘处处闻。  \n缓歌慢舞凝丝竹，尽日君王不看足。  \n渔阳鼙（pí）鼓动地来，惊破霓裳羽衣曲。  \n九重城阙烟尘生，千乘万骑西南行。  \n翠华摇摇行复止，西出都门百余里。  \n六军不发无奈何，宛转蛾眉马前死。  \n花钿委地无人收，翠翘金雀玉搔头。  \n君王掩面救不得，回看血泪相和流。  \n黄埃散漫风萧索，云栈萦纡登剑阁。  \n峨眉山下少人行，旌旗无光日色薄。  \n行宫见月伤心色，夜雨闻铃肠断声。  \n天旋地转回龙驭，到此踌躇不能去。  \n马嵬坡下泥土中，不见玉颜空死处。  \n君臣相顾尽沾衣，东望都门信马归。  \n归来池苑皆依旧，太液芙蓉未央柳。  \n芙蓉如面柳如眉，对此如何不泪垂。  \n春风桃李花开日，秋雨梧桐叶落时。  \n西宫南内多秋草，落叶满阶红不扫。  \n梨园弟子白发新，椒房阿监青娥老。  \n夕殿萤飞思悄然，孤灯挑尽未成眠。  \n迟迟钟鼓初长夜，耿耿星河欲曙天。  \n鸳鸯瓦冷霜华重，翡翠衾（qīn）寒谁与共。  \n悠悠生死别经年，魂魄不曾来入梦。  \n临邛（qióng）道士鸿都客，能以精诚致魂魄。  \n为感君王展转思，遂教方士殷勤觅。  \n排空驭气奔如电，升天入地求之遍。  \n上穷碧落下黄泉，两处茫茫皆不见。  \n忽闻海上有仙山，山在虚无缥缈间。  \n楼阁玲珑五云起，其中绰（chuò）约多仙子。  \n中有一人字太真，雪肤花貌参差是。  \n金阙西厢叩玉扃（jiōng），转教小玉报双成。  \n闻道汉家天子使，九华帐里梦魂惊。  \n揽衣推枕起徘徊，珠箔银屏迤（yǐ）逦开。  \n云鬓半偏新睡觉，花冠不整下堂来。  \n风吹仙袂飘飘举，犹似霓裳羽衣舞。  \n玉容寂寞泪阑干，梨花一枝春带雨。  \n含情凝睇谢君王，一别音容两渺茫。  \n昭阳殿里恩爱绝，蓬莱宫中日月长。  \n回头下望人寰（huán）处，不见长安见尘雾。  \n惟将旧物表深情，钿合金钗寄将去。  \n钗留一股合一扇，钗擘黄金合分钿。  \n但教心似金钿坚，天上人间会相见。  \n临别殷勤重寄词，词中有誓两心知。  \n七月七日长生殿，半夜无人私语时。  \n在天愿作比翼鸟，在地愿为连理枝。  \n天长地久有时尽，此恨绵绵无绝期。\n\n## 《琵琶行》 白居易\n\n浔阳江头夜送客，枫叶荻花秋瑟瑟。  \n主人下马客在船，举酒欲饮无管弦。  \n醉不成欢惨将别，别时茫茫江浸月。  \n忽闻水上琵琶声，主人忘归客不发。  \n寻声暗问弹者谁，琵琶声停欲语迟。  \n移船相近邀相见，添酒回灯重开宴。  \n千呼万唤始出来，犹抱琵琶半遮面。  \n转轴拨弦三两声，未成曲调先有情。  \n弦弦掩抑声声思，似诉平生不得志。  \n低眉信手续续弹，说尽心中无限事。  \n轻拢慢捻抹复挑，初为霓裳后六幺。  \n大弦嘈嘈如急雨，小弦切切如私语。  \n嘈嘈切切错杂弹，大珠小珠落玉盘。  \n间关莺语花底滑，幽咽泉流冰下难。  \n冰泉冷涩弦凝绝，凝绝不通声暂歇。  \n别有幽愁暗恨生，此时无声胜有声。  \n银瓶乍破水浆迸，铁骑突出刀枪鸣。  \n曲终收拨当心画，四弦一声如裂帛。  \n东船西舫悄无言，唯见江心秋月白。  \n沉吟放拨插弦中，整顿衣裳起敛容。  \n自言本是京城女，家在虾蟆陵下住。  \n十三学得琵琶成，名属教坊第一部。  \n曲罢曾教善才服，妆成每被秋娘妒。  \n五陵年少争缠头，一曲红绡不知数。  \n钿头云篦击节碎，血色罗裙翻酒污。  \n今年欢笑复明年，秋月春风等闲度。  \n弟走从军阿姨死，暮去朝来颜色故。  \n门前冷落鞍马稀，老大嫁作商人妇。  \n商人重利轻别离，前月浮梁买茶去。  \n去来江口守空船，绕船月明江水寒。  \n深夜忽梦少年事，梦啼妆泪红阑干。  \n我闻琵琶已叹息，又闻此语重唧唧。  \n同是天涯沦落人，相逢何必曾相识。  \n我从去年辞帝京，谪居卧病浔阳城。  \n浔阳地僻无音乐，终岁不闻丝竹声。  \n住近湓江地低湿，黄芦苦竹绕宅生。  \n其间旦暮闻何物，杜鹃啼血猿哀鸣。  \n春江花朝秋月夜，往往取酒还独倾。  \n岂无山歌与村笛，呕哑嘲哳难为听。  \n今夜闻君琵琶语，如听仙乐耳暂明。  \n莫辞更坐弹一曲，为君翻作琵琶行。  \n感我此言良久立，却坐促弦弦转急。  \n凄凄不似向前声，满座重闻皆掩泣。  \n座中泣下谁最多，江州司马青衫湿。\n\n## 《钱塘江春行》 白居易\n\n孤山寺北贾亭西，水面初平云脚低。  \n几处早莺争暖树，谁家新燕啄春泥。  \n乱花渐欲迷人眼，浅草才能没马蹄。  \n最爱湖东行不足，绿杨阴里白沙堤。\n\n## 《江雪》 柳宗元\n\n千山鸟飞绝，万径人踪灭。  \n孤舟蓑笠翁，独钓寒江雪。\n\n## 《闻乐天授江州司马》 元稹（zhěn）\n\n残灯无焰影幢幢，此夕闻君谪九江。  \n垂死病中惊坐起，暗风吹雨入寒窗。\n\n## 《离思五首 其四》 元稹\n\n曾经沧海难为水，除却巫山不是云。  \n取次花丛懒回顾，半缘修道半缘君。\n\n## 《题鹤林寺僧舍》 李涉\n\n终日昏昏醉梦间，忽闻春尽强登山。  \n因过竹院逢僧话，又得浮生半日闲。\n\n## 《陇西行》 陈陶\n\n誓扫匈奴不顾身，五千貂锦丧胡尘。  \n可怜无定河边骨，犹是春闺梦里人。\n\n## 《寻隐者不遇》 贾岛\n\n松下问童子，言师采药去。  \n只在此山中，云深不知处。\n\n## 《近试上张水部》 朱庆馀\n\n洞房昨夜停红烛，待晓堂前拜舅姑。  \n妆罢低声问夫婿：画眉深浅入时无？\n\n## 《雁门太守行》 李贺\n\n黑云压城城欲摧，甲光向日金鳞开。  \n角声满天秋色里，塞上燕脂凝夜紫。  \n半卷红旗临易水，霜重鼓寒声不起。  \n报君黄金台上意，提携玉龙为君死。\n\n## 《寄扬州韩绰判官》 杜牧\n\n青山隐隐水迢迢，秋尽江南草未凋。  \n二十四桥明月夜，玉人何处教吹箫。\n\n## 《山行》 杜牧\n\n远上寒山石径斜，白云深处有人家。  \n停车坐爱枫林晚，霜叶红于二月花。\n\n## 《过华清宫绝句三首 其一》 杜牧\n\n长安回望绣成堆，山顶千门次第开。  \n一骑红尘妃子笑，无人知是荔枝来。\n\n## 《赤壁》 杜牧\n\n折戟沉沙铁未销，自将磨洗认前朝。  \n东风不与周郎便，铜雀春深锁二乔。\n\n## 《江南春》 杜牧\n\n千里莺啼绿映红，水村山郭酒旗风。  \n南朝四百八十寺，多少楼台烟雨中。\n\n## 《泊秦淮》 杜牧\n\n烟笼寒水月笼沙，夜泊秦淮近酒家。  \n商女不知亡国恨，隔江犹唱后庭花。\n\n## 《清明》 杜牧\n\n清明时节雨纷纷，路上行人欲断魂。  \n借问酒家何处有？牧童遥指杏花村。\n\n## 《锦瑟》 李商隐\n\n锦瑟无端五十弦，一弦一柱思华年。  \n庄生晓梦迷蝴蝶，望帝春心托杜鹃。  \n沧海月明珠有泪，蓝田日暖玉生烟。  \n此情可待成追忆，只是当时已惘然。\n\n## 《无题》 李商隐\n\n相见时难别亦难，东风无力百花残。  \n春蚕到死丝方尽，蜡炬成灰泪始干。  \n晓镜但愁云鬓改，夜吟应觉月光寒。  \n蓬山此去无多路，青鸟殷勤为探看。\n\n## 《无题二首 其一》 李商隐\n\n昨夜星辰昨夜风，画楼西畔桂堂东。  \n身无彩凤双飞翼，心有灵犀一点通。  \n隔座送钩春酒暖，分曹射覆蜡灯红。  \n嗟余听鼓应官去，走马兰台类转蓬。\n\n## 《登乐游原》 李商隐\n\n向晚意不适，驱车登古原。  \n夕阳无限好，只是近黄昏。\n\n## 《夜雨寄北》 李商隐\n\n君问归期未有期，巴山夜雨涨秋池。  \n何当共剪西窗烛，却话巴山夜雨时。\n\n## 《林逋》 梅花\n\n众芳摇落独暄妍，占尽风情向小园。  \n疏影横斜水清浅，暗香浮动月黄昏。  \n霜禽欲下先偷眼，粉蝶如知合断魂。  \n幸有微吟可相狎，不须檀（tán）板共金尊。\n\n## 《泊船瓜州》 王安石\n\n京口瓜洲一水间，钟山只隔数重山。  \n春风又绿江南岸，明月何时照我还。\n\n## 《梅花》 王安石\n\n墙角数枝梅，凌寒独自开。  \n遥知不是雪，为有暗香来。\n\n## 《饮湖上初晴后雨 其二》 苏轼\n\n水光潋滟晴方好，山色空蒙雨亦奇。  \n欲把西湖比西子，淡妆浓抹总相宜。\n\n## 《题西林壁》 苏轼\n\n横看成岭侧成峰，远近高低各不同。  \n不识庐山真面目，只缘身在此山中。\n\n## 《惠崇春江晚景》 苏轼\n\n竹外桃花三两枝，春江水暖鸭先知。  \n蒌蒿满地芦芽短，正是河豚欲上时。\n\n## 《小池》 杨万里\n\n泉眼无声惜细流，树阴照水爱晴柔。  \n小荷才露尖尖角，早有蜻蜓立上头。\n\n## 《晓出净慈寺送林子方》 杨万里\n\n毕竟西湖六月中，风光不与四时同。  \n接天莲叶无穷碧，映日荷花别样红。\n\n## 《游山西村》 陆游\n\n莫笑农家腊酒浑，丰年留客足鸡豚。  \n山重水复疑无路，柳暗花明又一村。  \n箫鼓追随春社近，衣冠简朴古风存。  \n从今若许闲乘月，拄杖无时夜叩门。\n\n## 《书愤》 陆游\n\n早岁那知世事艰，中原北望气如山。  \n楼船夜雪瓜洲渡，铁马秋风大散关。  \n塞上长城空自许，镜中衰鬓已先斑。  \n出师一表真名世，千载谁堪伯仲间。\n\n## 《十一月四日风雨大作二首 其二》 陆游\n\n僵卧孤村不自哀，尚思为国戍轮台。  \n夜阑卧听风吹雨，铁马冰河入梦来。\n\n## 《示儿》 陆游\n\n死去元知万事空，但悲不见九州同。  \n王师北定中原日，家祭无忘告乃翁。\n\n## 《春日》 朱熹\n\n胜日寻芳泗水滨，无边光景一时新。  \n等闲识得东风面，万紫千红总是春。\n\n## 《观书有感二首 其一》 朱熹\n\n半亩方塘一鉴开，天光云影共徘徊。  \n问渠那得清如许，为有源头活水来。\n\n## 《题临安邸》 林升\n\n山外青山楼外楼，西湖歌舞几时休？  \n暖风熏得游人醉，直把杭州作汴州。\n\n## 《游园不值》 叶绍翁\n\n应怜屐齿印苍苔，小扣柴扉久不开。  \n春色满园关不住，一枝红杏出墙来。\n\n## 《过零丁洋》 文天祥\n\n辛苦遭逢起一经，干戈寥落四周星。  \n山河破碎风飘絮，身世浮沉雨打萍。  \n惶恐滩头说惶恐，零丁洋里叹零丁。  \n人生自古谁无死，留取丹心照汗青。\n\n## 《墨梅》 王冕\n\n我家洗砚池头树，朵朵花开淡墨痕。  \n不要人夸好颜色，只留清气满乾坤。\n\n## 《石灰吟》 于谦\n\n千锤万击出深山，烈火焚烧若等闲。  \n粉身碎骨浑不怕，要留清白在人间。\n\n## 《竹石》 郑板桥\n\n咬定青山不放松，立根原在破岩中。  \n千磨万击还坚劲，任尔东西南北风。\n\n## 《论诗五首 其二》 赵翼\n\n李杜诗篇万口传，至今已觉不新鲜。  \n江山代有才人出，各领风骚数百年。\n\n## 《已亥杂诗 第五首》 龚自珍\n\n浩荡离愁白日斜，吟鞭东指即天涯。  \n落红不是无情物，化作春泥更护花。\n\n## 《已亥杂诗 第一首》 龚自珍\n\n九州生气恃风雷，万马齐喑究可哀。  \n我劝天公重抖擞，不拘一格降人才。\n\n## 《渔父》 张志和\n\n西塞山前白鹭飞，桃花流水鳜鱼肥。青箬笠，绿蓑衣，斜风细雨不须归。\n\n## 《忆江南》 白居易\n\n江南好，风景旧曾谙。日出江花红胜火，春来江水绿如蓝。能不忆江南。\n\n## 《虞美人》 李煜\n\n春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。  \n雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。\n\n## 《乌夜啼》 李煜\n\n无言独上西楼，月如钩。寂寞梧桐深院锁清秋。  \n剪不断，理还乱，是离愁。别有一番滋味在心头。\n\n## 《渔家傲》-秋思 范仲淹\n\n塞下秋来风景异，衡阳雁去无留意。四面边声连角起。千嶂里，长烟落日孤城闭。  \n浊酒一杯家万里，燕然未勒归无计。羌管悠悠霜满地。人不寐，将军白发征夫泪。\n\n## 《雨霖铃》 柳永\n\n寒蝉凄切。对长亭晚，骤雨初歇。都门帐饮无绪，留恋处、兰舟催发。执手相看泪眼，\n竟无语凝噎。念去去、千里烟波，暮霭沉沉楚天阔。  \n多情自古伤离别。更那堪、冷落清秋节。今宵酒醒何处？杨柳岸、晓风残月。\n此去经年，应是良辰好景虚设。便纵有、千种风情，更与何人说。\n\n## 《凤栖梧》 柳永\n\n伫（zhù）倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。  \n拟把疏狂图一醉。对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。\n","slug":"国粹/最美古诗词","published":1,"updated":"2020-10-29T15:33:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8tf6i00b1mv051mtj5f82","content":"<h1 id=\"能熟读背诵的古诗词\"><a href=\"#能熟读背诵的古诗词\" class=\"headerlink\" title=\"能熟读背诵的古诗词\"></a>能熟读背诵的古诗词</h1><h2 id=\"《诗经-邶风》-静女\"><a href=\"#《诗经-邶风》-静女\" class=\"headerlink\" title=\"《诗经 邶风》 静女\"></a>《诗经 邶风》 静女</h2><p>静女其姝，俟我于城隅。<br>爱而不见，搔首踟蹰。</p>\n<p>静女其娈，贻我彤管。<br>彤管有炜，说怿女美。</p>\n<p>自牧归荑，洵美且异。<br>匪女之为美，美人之贻。</p>\n<h2 id=\"《诗经-秦风》-蒹葭\"><a href=\"#《诗经-秦风》-蒹葭\" class=\"headerlink\" title=\"《诗经 秦风》 蒹葭\"></a>《诗经 秦风》 蒹葭</h2><p> 蒹葭苍苍，白露为霜<br> 所谓伊人，在水一方。<br> 溯洄从之，道阻且长。<br> 溯游从之，宛在水中央。  </p>\n<p> 蒹葭萋萋，白露未晞。<br> 所谓伊人，在水之湄。<br> 溯洄从之，道阻且跻。<br> 溯游从之，宛在水中坻。</p>\n<p> 蒹葭采采，白露未已。<br> 所谓伊人，在水之涘。<br> 溯洄从之，道阻且右。<br> 溯游从之，宛在水中沚。</p>\n<h2 id=\"《垓（gai）下歌》-项羽\"><a href=\"#《垓（gai）下歌》-项羽\" class=\"headerlink\" title=\"《垓（gāi）下歌》 项羽\"></a>《垓（gāi）下歌》 项羽</h2><p> 力拔山兮气盖世。时不利兮骓不逝。<br> 骓不逝兮可奈何！虞兮虞兮奈若何！</p>\n<h2 id=\"《大风歌》-刘邦\"><a href=\"#《大风歌》-刘邦\" class=\"headerlink\" title=\"《大风歌》 刘邦\"></a>《大风歌》 刘邦</h2><p>大风起兮云飞扬，威加海内兮归故乡。安得猛士兮守四方！</p>\n<h2 id=\"《长歌行》-汉乐府\"><a href=\"#《长歌行》-汉乐府\" class=\"headerlink\" title=\"《长歌行》 汉乐府\"></a>《长歌行》 汉乐府</h2><p>青青园中葵，朝露待日晞。<br>阳春布德泽，万物生光辉。<br>常恐秋节至， 焜黄华叶衰。<br>百川东到海，何时复西归？<br>少壮不努力，老大徒伤悲！</p>\n<h2 id=\"《上邪》-汉乐府\"><a href=\"#《上邪》-汉乐府\" class=\"headerlink\" title=\"《上邪》 汉乐府\"></a>《上邪》 汉乐府</h2><p>上邪！<br>我欲与君相知，长命无绝衰。<br>山无棱，江水为竭，<br>冬雷震震，夏雨雪，<br>天地合，乃敢与君绝！</p>\n<h2 id=\"《迢迢牵牛星》-无名氏\"><a href=\"#《迢迢牵牛星》-无名氏\" class=\"headerlink\" title=\"《迢迢牵牛星》 无名氏\"></a>《迢迢牵牛星》 无名氏</h2><p>迢迢牵牛星，皎皎河汉女。<br>纤纤擢素手，札扎弄机杼。<br>终日不成章，泣涕零如雨；<br>河汉清且浅，相去复几许！<br>盈盈一水间，脉脉不得语。</p>\n<h2 id=\"《观沧海》-曹操\"><a href=\"#《观沧海》-曹操\" class=\"headerlink\" title=\"《观沧海》 曹操\"></a>《观沧海》 曹操</h2><p>东临碣石，以观沧海。<br>水何澹澹（dàn），山岛竦峙。<br>树木丛生，百草丰茂。<br>秋风萧瑟，洪波涌起。<br>日月之行，若出其中；<br>星汉灿烂，若出其里。<br>幸甚至哉，歌以咏志。</p>\n<h2 id=\"《龟虽寿》-曹操\"><a href=\"#《龟虽寿》-曹操\" class=\"headerlink\" title=\"《龟虽寿》 曹操\"></a>《龟虽寿》 曹操</h2><p>神龟虽寿，犹有竟时。<br>腾蛇乘雾，终为土灰。<br>老骥伏枥，志在千里；<br>烈士暮年， 壮心不已。<br>盈缩之期，不但在天；<br>养怡之福，可得永年。<br>幸甚至哉，歌以咏志。</p>\n<h2 id=\"《短歌行》-曹操\"><a href=\"#《短歌行》-曹操\" class=\"headerlink\" title=\"《短歌行》 曹操\"></a>《短歌行》 曹操</h2><p>对酒当歌，人生几何？<br>譬如朝露，去日苦多。<br>慨当以慷，忧思难忘。<br>何以解忧，唯有杜康。</p>\n<p>青青子衿，悠悠我心。<br>但为君故，沉吟至今。<br>呦呦鹿鸣，食野之苹。<br>我有嘉宾，鼓瑟吹笙。  </p>\n<p>明明如月，何时可掇？<br>忧从中来，不可断绝。<br>越陌度阡，枉用相存。<br>契阔谈宴，心念旧恩。</p>\n<p>月明星稀，乌鹊南飞。<br>绕树三匝，何枝可依？<br>山不厌高，海不厌深。<br>周公吐哺，天下归心。</p>\n<h2 id=\"《归园田居-其一》-陶渊明\"><a href=\"#《归园田居-其一》-陶渊明\" class=\"headerlink\" title=\"《归园田居 其一》 陶渊明\"></a>《归园田居 其一》 陶渊明</h2><p>少无适俗韵，性本爱丘山。<br>误落尘网中，一去三十年。<br>羁鸟恋旧林，池鱼思故渊。<br>开荒南野际，守拙归园田。<br>方宅十余亩，草屋八九间。<br>榆柳荫后檐，桃李罗堂前。<br>暧暧远人村，依依墟里烟。<br>狗吠深巷中，鸡鸣桑树颠。<br>户庭无尘杂，虚室有余闲。<br>久在樊笼里，复得返自然。</p>\n<h2 id=\"《归园田居-其三》-陶渊明\"><a href=\"#《归园田居-其三》-陶渊明\" class=\"headerlink\" title=\"《归园田居 其三》 陶渊明\"></a>《归园田居 其三》 陶渊明</h2><p>种豆南山下，草盛豆苗稀。<br>晨兴理荒秽，带月荷锄归。<br>道狭草木长，夕露沾我衣。<br>衣沾不足惜，但使愿无违。</p>\n<h2 id=\"《饮酒-其五》-陶渊明\"><a href=\"#《饮酒-其五》-陶渊明\" class=\"headerlink\" title=\"《饮酒 其五》 陶渊明\"></a>《饮酒 其五》 陶渊明</h2><p>结庐在人境，而无车马喧。<br>问君何能尔，心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>\n<h2 id=\"《入若耶溪》-王籍\"><a href=\"#《入若耶溪》-王籍\" class=\"headerlink\" title=\"《入若耶溪》 王籍\"></a>《入若耶溪》 王籍</h2><p>艅艎何泛泛，空水共悠悠。<br>阴霞生远岫，阳景逐回流。<br>蝉噪林逾静，鸟鸣山更幽。<br>此地动归念，长年悲倦游。</p>\n<h2 id=\"《敕勒歌》-北朝乐府\"><a href=\"#《敕勒歌》-北朝乐府\" class=\"headerlink\" title=\"《敕勒歌》 北朝乐府\"></a>《敕勒歌》 北朝乐府</h2><p>敕勒川，阴山下。<br>天似穹庐，笼盖四野。<br>天苍苍。野茫茫。<br>风吹草低见牛羊。</p>\n<h2 id=\"《木兰诗》-北朝乐府\"><a href=\"#《木兰诗》-北朝乐府\" class=\"headerlink\" title=\"《木兰诗》 北朝乐府\"></a>《木兰诗》 北朝乐府</h2><p>唧唧复唧唧，木兰当户织。<br>不闻机杼声，惟闻女叹息。<br>问女何所思，问女何所忆。<br>女亦无所思，女亦无所忆。<br>昨夜见军帖，可汗大点兵，<br>军书十二卷，卷卷有爷名。<br>阿爷无大儿，木兰无长兄，<br>愿为市鞍马，从此替爷征。<br>东市买骏马，西市买鞍鞯，<br>南市买辔头，北市买长鞭。  </p>\n<p>旦辞爷娘去，暮宿黄河边。<br>不闻爷娘唤女声，但闻黄河流水鸣溅溅。<br>旦辞黄河去，暮至黑山头。<br>不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。<br>万里赴戎机，关山度若飞。<br>朔气传金柝（tuò），寒光照铁衣。<br>将军百战死，壮士十年归。<br>归来见天子，天子坐明堂。<br>策勋十二转，赏赐百千强。<br>可汗问所欲，木兰不用尚书郎，<br>愿驰千里足，送儿还故乡。</p>\n<p>爷娘闻女来，出郭相扶将。<br>阿姊闻妹来，当户理红妆。<br>小弟闻姊来，磨刀霍霍向猪羊。<br>开我东阁门，坐我西阁床。<br>脱我战时袍，著我旧时裳。<br>当窗理云鬓，对镜贴花黄。<br>出门看火伴，火伴皆惊忙。<br>同行十二年，不知木兰是女郎。<br>雄兔脚扑朔，雌兔眼迷离；<br>双兔傍地走，安能辨我是雌雄？</p>\n<h2 id=\"《送杜少府之任蜀川》-王勃\"><a href=\"#《送杜少府之任蜀川》-王勃\" class=\"headerlink\" title=\"《送杜少府之任蜀川》 王勃\"></a>《送杜少府之任蜀川》 王勃</h2><p>城阙辅三秦，风烟望五津。<br>与君离别意， 同是宦游人。<br>海内存知己，天涯若比邻。<br>无为在歧路，儿女共沾巾。</p>\n<h2 id=\"《登幽州台歌》-陈子昂\"><a href=\"#《登幽州台歌》-陈子昂\" class=\"headerlink\" title=\"《登幽州台歌》 陈子昂\"></a>《登幽州台歌》 陈子昂</h2><p>前不见古人，后不见来者。<br>念天地之悠悠，独怆然而涕下。</p>\n<h2 id=\"《春江花月夜》-张若虚\"><a href=\"#《春江花月夜》-张若虚\" class=\"headerlink\" title=\"《春江花月夜》 张若虚\"></a>《春江花月夜》 张若虚</h2><p>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明。<br>江流宛转绕芳甸，月照花林皆似霰。<br>空里流霜不觉飞，汀（tīng）上白沙看不见。<br>江天一色无纤尘， 皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p>\n<h2 id=\"《望月怀远》-张九龄\"><a href=\"#《望月怀远》-张九龄\" class=\"headerlink\" title=\"《望月怀远》 张九龄\"></a>《望月怀远》 张九龄</h2><p>海上生明月，天涯共此时。<br>情人怨遥夜，竟夕起相思。<br>灭烛怜光满，披衣觉露滋。<br>不堪盈手赠，还寝梦佳期。</p>\n<h2 id=\"《回乡偶书》-贺知章\"><a href=\"#《回乡偶书》-贺知章\" class=\"headerlink\" title=\"《回乡偶书》 贺知章\"></a>《回乡偶书》 贺知章</h2><p>少小离家老大回，乡音无改鬓毛衰。<br>儿童相见不相识，笑问客从何处来。</p>\n<h2 id=\"《登鹳雀楼》-王之涣\"><a href=\"#《登鹳雀楼》-王之涣\" class=\"headerlink\" title=\"《登鹳雀楼》 王之涣\"></a>《登鹳雀楼》 王之涣</h2><p>白日依山尽，黄河入海流。<br>欲穷千里目，更上一层楼。</p>\n<h2 id=\"《凉州词》-王之涣\"><a href=\"#《凉州词》-王之涣\" class=\"headerlink\" title=\"《凉州词》 王之涣\"></a>《凉州词》 王之涣</h2><p>黄河远上白云间，一片孤城万仞山。<br>羌笛何须怨杨柳，春风不度玉门关。</p>\n<h2 id=\"《春晓》-孟浩然\"><a href=\"#《春晓》-孟浩然\" class=\"headerlink\" title=\"《春晓》 孟浩然\"></a>《春晓》 孟浩然</h2><p>春眠不觉晓，处处闻啼鸟。<br>夜来风雨声，花落知多少。</p>\n<h2 id=\"《过故人庄》-孟浩然\"><a href=\"#《过故人庄》-孟浩然\" class=\"headerlink\" title=\"《过故人庄》 孟浩然\"></a>《过故人庄》 孟浩然</h2><p>故人具鸡黍，邀我至田家。<br>绿树村边合，青山郭外斜。<br>开轩面场圃，把酒话桑麻。<br>待到重阳日，还来就菊花。</p>\n<h2 id=\"《出塞-其一》-王昌龄\"><a href=\"#《出塞-其一》-王昌龄\" class=\"headerlink\" title=\"《出塞 其一》 王昌龄\"></a>《出塞 其一》 王昌龄</h2><p>秦时明月汉时关，万里长征人未还。<br>但使龙城飞将在，不教胡马度阴山。</p>\n<h2 id=\"《从军行-其四》-王昌龄\"><a href=\"#《从军行-其四》-王昌龄\" class=\"headerlink\" title=\"《从军行 其四》 王昌龄\"></a>《从军行 其四》 王昌龄</h2><p>青海长云暗雪山，孤城遥望玉门关。<br>黄沙百战穿金甲，不破楼兰终不还。</p>\n<h2 id=\"《芙蓉楼送辛渐》-王昌龄\"><a href=\"#《芙蓉楼送辛渐》-王昌龄\" class=\"headerlink\" title=\"《芙蓉楼送辛渐》 王昌龄\"></a>《芙蓉楼送辛渐》 王昌龄</h2><p>寒雨连江夜入吴，平明送客楚山孤。<br>洛阳亲友如相问，一片冰心在玉壶。</p>\n<h2 id=\"《闺怨》-王昌龄\"><a href=\"#《闺怨》-王昌龄\" class=\"headerlink\" title=\"《闺怨》 王昌龄\"></a>《闺怨》 王昌龄</h2><p>闺中少妇不知愁，春日凝妆上翠楼。<br>忽见陌头杨柳色，悔教夫婿觅封侯。</p>\n<h2 id=\"《凉州词》-王翰\"><a href=\"#《凉州词》-王翰\" class=\"headerlink\" title=\"《凉州词》 王翰\"></a>《凉州词》 王翰</h2><p>葡萄美酒夜光杯，欲饮琵琶马上催。<br>醉卧沙场君莫笑，古来征战几人回？</p>\n<h2 id=\"《九月九忆山东兄弟》-王维\"><a href=\"#《九月九忆山东兄弟》-王维\" class=\"headerlink\" title=\"《九月九忆山东兄弟》 王维\"></a>《九月九忆山东兄弟》 王维</h2><p>独在异乡为异客，每逢佳节倍思亲。<br>遥知兄弟登高处，遍插茱（zhū）萸少一人。</p>\n<h2 id=\"《山居秋暝》-王维\"><a href=\"#《山居秋暝》-王维\" class=\"headerlink\" title=\"《山居秋暝》 王维\"></a>《山居秋暝》 王维</h2><p>空山新雨后，天气晚来秋。<br>明月松间照，清泉石上流。<br>竹喧归浣女，莲动下渔舟。<br>随意春芳歇，王孙自可留。</p>\n<h2 id=\"《相思》-王维\"><a href=\"#《相思》-王维\" class=\"headerlink\" title=\"《相思》 王维\"></a>《相思》 王维</h2><p>红豆生南国，春来发几枝。<br>愿君多采撷，此物最相思。</p>\n<h2 id=\"《送元二使安西》-王维\"><a href=\"#《送元二使安西》-王维\" class=\"headerlink\" title=\"《送元二使安西》 王维\"></a>《送元二使安西》 王维</h2><p>渭城朝雨浥轻尘，客舍青青柳色新。<br>劝君更尽一杯酒，西出阳关无故人。</p>\n<h2 id=\"《使至塞上》-王维\"><a href=\"#《使至塞上》-王维\" class=\"headerlink\" title=\"《使至塞上》 王维\"></a>《使至塞上》 王维</h2><p>单车欲问边，属国过居延。<br>征蓬出汉塞，归雁入胡天。<br>大漠孤烟直，长河落日圆。<br>萧关逢候骑，都护在燕然。</p>\n<h2 id=\"《早发白帝城》-李白\"><a href=\"#《早发白帝城》-李白\" class=\"headerlink\" title=\"《早发白帝城》 李白\"></a>《早发白帝城》 李白</h2><p>朝辞白帝彩云间，千里江陵一日还。<br>两岸猿声啼不住，轻舟已过万重山。</p>\n<h2 id=\"《峨眉山月歌》-李白\"><a href=\"#《峨眉山月歌》-李白\" class=\"headerlink\" title=\"《峨眉山月歌》 李白\"></a>《峨眉山月歌》 李白</h2><p>峨眉山月半轮秋，影入平羌江水流。<br>夜发清溪向三峡，思君不见下渝州。</p>\n<h2 id=\"《度荆门送别》-李白\"><a href=\"#《度荆门送别》-李白\" class=\"headerlink\" title=\"《度荆门送别》 李白\"></a>《度荆门送别》 李白</h2><p>渡远荆门外，来从楚国游。<br>山随平野尽，江入大荒流。<br>月下飞天镜，云生结海楼。<br>仍怜故乡水，万里送行舟。</p>\n<h2 id=\"《望庐山瀑布》-李白\"><a href=\"#《望庐山瀑布》-李白\" class=\"headerlink\" title=\"《望庐山瀑布》 李白\"></a>《望庐山瀑布》 李白</h2><p>日照香炉生紫烟，遥看瀑布挂前川。<br>飞流直下三千尺，疑是银河落九天。</p>\n<h2 id=\"《黄鹤楼送孟浩然之广陵》-李白\"><a href=\"#《黄鹤楼送孟浩然之广陵》-李白\" class=\"headerlink\" title=\"《黄鹤楼送孟浩然之广陵》 李白\"></a>《黄鹤楼送孟浩然之广陵》 李白</h2><p>故人西辞黄鹤楼，烟花三月下扬州。<br>孤帆远影碧空尽，唯见长江天际流。</p>\n<h2 id=\"《蜀道难》-李白\"><a href=\"#《蜀道难》-李白\" class=\"headerlink\" title=\"《蜀道难》 李白\"></a>《蜀道难》 李白</h2><p>噫吁嚱，危乎高哉！蜀道之难，难于上青天！<br>蚕丛及鱼凫，开国何茫然！<br>尔来四万八千岁，不与秦塞通人烟。<br>西当太白有鸟道，可以横绝峨眉巅。<br>地崩山摧壮士死，然后天梯石栈相钩连。<br>上有六龙回日之高标，下有冲波逆折之回川。<br>黄鹤之飞尚不得过， 猿揉欲度愁攀援。<br>青泥何盘盘，百步九折萦岩峦。<br>扪参历井仰胁息，以手抚膺坐长叹。<br>问君西游何时还？畏途巉岩不可攀。<br>但见悲鸟号古木，雄飞雌从绕林间。<br>又闻子规啼月夜，愁空山。<br>蜀道之难，难于上青天，使人听此凋朱颜！<br>连峰去天不盈尺，枯松倒挂倚绝壁。<br>飞湍瀑流争喧豗，砯（pīng）崖转石万壑雷。<br>其险也如此，嗟尔远道之人胡为乎来哉！<br>剑阁峥嵘而崔嵬，一夫当关，万夫莫开。<br>所守或匪亲，化为狼与豺。<br>朝避猛虎，夕避长蛇。<br>磨牙吮血，杀人如麻。<br>锦城虽云乐，不如早还家。<br>蜀道之难，难于上青天，侧身西望常咨嗟！</p>\n<h2 id=\"《宣州谢朓（tiao）楼饯别校书叔云》-李白\"><a href=\"#《宣州谢朓（tiao）楼饯别校书叔云》-李白\" class=\"headerlink\" title=\"《宣州谢朓（tiǎo）楼饯别校书叔云》 李白\"></a>《宣州谢朓（tiǎo）楼饯别校书叔云》 李白</h2><p>弃我去者，昨日之日不可留，<br>乱我心者，今日之日多烦忧。<br>长风万里送秋雁，对此可以酣高楼。<br>蓬莱文章建安骨，中间小谢又清发。<br>俱怀逸兴壮思飞， 欲上青天揽明月。<br>抽刀断水水更流，举杯消愁愁更愁。<br>人生在世不称意，明朝散发弄扁舟。</p>\n<h2 id=\"《将（qiang）进酒》-李白\"><a href=\"#《将（qiang）进酒》-李白\" class=\"headerlink\" title=\"《将（qiāng）进酒》 李白\"></a>《将（qiāng）进酒》 李白</h2><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。<br>钟鼓馔玉不足贵，但愿长醉不复醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑（xuè）。<br>主人何为言少钱，径须沽取对君酌。<br>五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。</p>\n<h2 id=\"《月下独酌》-李白\"><a href=\"#《月下独酌》-李白\" class=\"headerlink\" title=\"《月下独酌》 李白\"></a>《月下独酌》 李白</h2><p>花间一壶酒，独酌无相亲。<br>举杯邀明月，对影成三人。<br>月既不解饮，影徒随我身。<br>暂伴月将影，行乐须及春。<br>我歌月徘徊，我舞影零乱。<br>醒时相交欢，醉后各分散。<br>永结无情游，相期邈云汉。</p>\n<h2 id=\"《春夜洛城闻笛》-李白\"><a href=\"#《春夜洛城闻笛》-李白\" class=\"headerlink\" title=\"《春夜洛城闻笛》 李白\"></a>《春夜洛城闻笛》 李白</h2><p>谁家玉笛暗飞声，散入春风满洛城。<br>此夜曲中闻折柳，何人不起故园情。</p>\n<h2 id=\"《闻王昌龄左迁龙标，遥有此寄》-李白\"><a href=\"#《闻王昌龄左迁龙标，遥有此寄》-李白\" class=\"headerlink\" title=\"《闻王昌龄左迁龙标，遥有此寄》 李白\"></a>《闻王昌龄左迁龙标，遥有此寄》 李白</h2><p>杨花落尽子规啼，闻道龙标过五溪。<br>我寄愁心与明月，随风直到夜郎西。</p>\n<h2 id=\"《望天门山》-李白\"><a href=\"#《望天门山》-李白\" class=\"headerlink\" title=\"《望天门山》 李白\"></a>《望天门山》 李白</h2><p>天门中断楚江开，碧水东流至此回。<br>两岸青山相对出，孤帆一片日边来。</p>\n<h2 id=\"《行路难三首-其一》-李白\"><a href=\"#《行路难三首-其一》-李白\" class=\"headerlink\" title=\"《行路难三首 其一》 李白\"></a>《行路难三首 其一》 李白</h2><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川， 将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海！</p>\n<h2 id=\"《梦游天姥吟留别》-李白\"><a href=\"#《梦游天姥吟留别》-李白\" class=\"headerlink\" title=\"《梦游天姥吟留别》 李白\"></a>《梦游天姥吟留别》 李白</h2><p>海客谈瀛洲，烟涛微茫信难求。<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。<br>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐。身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。<br>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还，且放白鹿青崖间，须行即骑访名山。<br>按摧眉折腰事权贵，使我不得开心颜。</p>\n<h2 id=\"《赠汪伦》-李白\"><a href=\"#《赠汪伦》-李白\" class=\"headerlink\" title=\"《赠汪伦》 李白\"></a>《赠汪伦》 李白</h2><p>李白乘舟将欲行，忽闻岸上踏歌声。<br>桃花潭水深千尺，不及汪伦送我情。</p>\n<h2 id=\"《次北固山下》-王湾\"><a href=\"#《次北固山下》-王湾\" class=\"headerlink\" title=\"《次北固山下》 王湾\"></a>《次北固山下》 王湾</h2><p>客路青山外，行舟绿水前。<br>潮平两岸阔，风正一帆悬。<br>海日生残夜，江春入旧年。<br>乡书何处达，归雁洛阳边。</p>\n<h2 id=\"《黄鹤楼》-崔颢（hao）\"><a href=\"#《黄鹤楼》-崔颢（hao）\" class=\"headerlink\" title=\"《黄鹤楼》 崔颢（hào）\"></a>《黄鹤楼》 崔颢（hào）</h2><p>昔人已乘黄鹤去，此地空余黄鹤楼。<br>黄鹤一去不复返，白云千载空悠悠。<br>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br>日暮乡关何处是，烟波江上使人愁。 </p>\n<h2 id=\"《别董大二首-其一》-高适\"><a href=\"#《别董大二首-其一》-高适\" class=\"headerlink\" title=\"《别董大二首 其一》 高适\"></a>《别董大二首 其一》 高适</h2><p>千里黄云白日曛，北风吹雁雪纷纷。<br>莫愁前路无知己，天下谁人不识君。</p>\n<h2 id=\"《题破山寺后禅院》-常建\"><a href=\"#《题破山寺后禅院》-常建\" class=\"headerlink\" title=\"《题破山寺后禅院》 常建\"></a>《题破山寺后禅院》 常建</h2><p>清晨入古寺，初日照高林。<br>曲径通幽处，禅房花木深。<br>山光悦鸟性，潭影空人心。<br>万籁此俱寂，但余钟磬音。</p>\n<h2 id=\"《春望》-杜甫\"><a href=\"#《春望》-杜甫\" class=\"headerlink\" title=\"《春望》 杜甫\"></a>《春望》 杜甫</h2><p>国破山河在，城春草木深。<br>感时花溅泪，恨别鸟惊心。<br>烽火连三月，家书抵万金。<br>白头搔更短，浑欲不胜簪。</p>\n<h2 id=\"《旅夜书怀》-杜甫\"><a href=\"#《旅夜书怀》-杜甫\" class=\"headerlink\" title=\"《旅夜书怀》 杜甫\"></a>《旅夜书怀》 杜甫</h2><p>细草微风岸，危樯独夜舟。<br>星垂平野阔，月涌大江流。<br>名岂文章著，官应老病休。<br>飘飘何所似，天地一沙鸥。</p>\n<h2 id=\"《江南逢李龟年》-杜甫\"><a href=\"#《江南逢李龟年》-杜甫\" class=\"headerlink\" title=\"《江南逢李龟年》 杜甫\"></a>《江南逢李龟年》 杜甫</h2><p>岐王宅里寻常见，崔九堂前几度闻。<br>正是江南好风景，落花时节又逢君。</p>\n<h2 id=\"《蜀相》-杜甫\"><a href=\"#《蜀相》-杜甫\" class=\"headerlink\" title=\"《蜀相》 杜甫\"></a>《蜀相》 杜甫</h2><p>丞相祠堂何处寻，锦官城外柏森森。<br>映阶碧草自春色，隔叶黄鹂空好音。<br>三顾频烦天下计，两朝开济老臣心。<br>出师未捷身先死，长使英雄泪满襟。</p>\n<h2 id=\"《春夜喜雨》-杜甫\"><a href=\"#《春夜喜雨》-杜甫\" class=\"headerlink\" title=\"《春夜喜雨》 杜甫\"></a>《春夜喜雨》 杜甫</h2><p>好雨知时节，当春乃发生。<br>随风潜入夜，润物细无声。<br>野径云俱黑，江船火独明。<br>晓看红湿处，花重谨琯城。</p>\n<h2 id=\"《客至》-杜甫\"><a href=\"#《客至》-杜甫\" class=\"headerlink\" title=\"《客至》 杜甫\"></a>《客至》 杜甫</h2><p>舍南舍北皆春水，但见群鸥日日来。<br>花径不曾缘客扫，蓬门今始为君开。<br>盘飧市远无兼味，樽酒家贫只旧醅。<br>肯与邻翁相对饮， 隔篱呼取尽余杯。</p>\n<h2 id=\"《茅屋为秋风所破歌》-杜甫\"><a href=\"#《茅屋为秋风所破歌》-杜甫\" class=\"headerlink\" title=\"《茅屋为秋风所破歌》 杜甫\"></a>《茅屋为秋风所破歌》 杜甫</h2><p>八月秋高风怒号，卷我屋上三重茅。<br>茅飞渡江洒江郊，高者挂罥长林梢，下着飘转沉塘坳。<br>南村群童欺我老无力，忍能对面为盗贼。<br>公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。<br>俄顷风定云墨色，秋天漠漠向昏黑。<br>布衾多年冷似铁，娇儿恶卧踏里裂。<br>床头屋漏无干处，雨脚如麻未断绝。<br>自经丧乱少睡眠，长夜沾湿何由彻！<br>安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！<br>呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足。</p>\n<h2 id=\"《赠花卿》-杜甫\"><a href=\"#《赠花卿》-杜甫\" class=\"headerlink\" title=\"《赠花卿》 杜甫\"></a>《赠花卿》 杜甫</h2><p>锦城丝管日纷纷，半入江风半入云。<br>此曲只应天上有，人间能得几回闻。</p>\n<h2 id=\"《登岳阳楼》-杜甫\"><a href=\"#《登岳阳楼》-杜甫\" class=\"headerlink\" title=\"《登岳阳楼》 杜甫\"></a>《登岳阳楼》 杜甫</h2><p>昔闻洞庭水，今上岳阳楼。<br>吴楚东南坼，乾坤日夜浮。<br>亲朋无一字，老病有孤舟。<br>戎马关山北，凭轩涕泗流。</p>\n<h2 id=\"《登高》-杜甫\"><a href=\"#《登高》-杜甫\" class=\"headerlink\" title=\"《登高》 杜甫\"></a>《登高》 杜甫</h2><p>风急天高猿啸哀，渚清沙白鸟飞回。<br>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。<br>艰难苦恨繁霜鬓，潦倒新停浊酒杯。</p>\n<h2 id=\"《白雪歌送武判官归京》-岑参\"><a href=\"#《白雪歌送武判官归京》-岑参\" class=\"headerlink\" title=\"《白雪歌送武判官归京》 岑参\"></a>《白雪歌送武判官归京》 岑参</h2><p>北风卷地白草折，胡天八月即飞雪。<br>忽如一夜春风来，千树万树梨花开。<br>散入珠帘湿罗幕，狐裘不暖锦衾（qīn）薄。<br>将军角弓不得控，都护铁衣冷难着。<br>瀚海阑干百丈冰，愁云惨淡万里凝。<br>中军置酒饮归客，胡琴琵琶与羌笛。<br>纷纷暮雪下辕门，风掣红旗冻不翻。<br>轮台东门送君去，去时雪满天山路。<br>山回路转不见君，雪上空留马行处。</p>\n<h2 id=\"《逢入京使》-岑参\"><a href=\"#《逢入京使》-岑参\" class=\"headerlink\" title=\"《逢入京使》 岑参\"></a>《逢入京使》 岑参</h2><p>故园东望路漫漫，双袖龙钟泪不干。<br>马上相逢无纸笔，凭君传语报平安。</p>\n<h2 id=\"《枫桥夜泊》-张继\"><a href=\"#《枫桥夜泊》-张继\" class=\"headerlink\" title=\"《枫桥夜泊》 张继\"></a>《枫桥夜泊》 张继</h2><p>月落乌啼霜满天，江枫渔火对愁眠。<br>姑苏城外寒山寺，夜半钟声到客船。</p>\n<h2 id=\"《逢雪宿芙蓉山主人》-刘长卿\"><a href=\"#《逢雪宿芙蓉山主人》-刘长卿\" class=\"headerlink\" title=\"《逢雪宿芙蓉山主人》 刘长卿\"></a>《逢雪宿芙蓉山主人》 刘长卿</h2><p>日暮苍山远，天寒白屋贫。<br>柴门闻犬吠，风雪夜归人。</p>\n<h2 id=\"《滁州西涧》-韦应物\"><a href=\"#《滁州西涧》-韦应物\" class=\"headerlink\" title=\"《滁州西涧》 韦应物\"></a>《滁州西涧》 韦应物</h2><p>独怜幽草涧边生，上有黄鹂深树鸣。<br>春潮带雨晚来急，野渡无人舟自横。</p>\n<h2 id=\"《游子吟》-孟郊\"><a href=\"#《游子吟》-孟郊\" class=\"headerlink\" title=\"《游子吟》 孟郊\"></a>《游子吟》 孟郊</h2><p>慈母手中线，游子身上衣。<br>临行密密缝，意恐迟迟归。<br>谁言寸草心，报得三春晖。</p>\n<h2 id=\"《题都城南庄》-崔护\"><a href=\"#《题都城南庄》-崔护\" class=\"headerlink\" title=\"《题都城南庄》 崔护\"></a>《题都城南庄》 崔护</h2><p>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p>\n<h2 id=\"《早春呈水部张十八员外二首-其一》-韩愈\"><a href=\"#《早春呈水部张十八员外二首-其一》-韩愈\" class=\"headerlink\" title=\"《早春呈水部张十八员外二首 其一》 韩愈\"></a>《早春呈水部张十八员外二首 其一》 韩愈</h2><p>天街小雨润如酥，草色遥看近却无。<br>最是一年春好处，绝胜烟柳满皇都。</p>\n<h2 id=\"《秋词二首-其一》-刘禹锡\"><a href=\"#《秋词二首-其一》-刘禹锡\" class=\"headerlink\" title=\"《秋词二首 其一》 刘禹锡\"></a>《秋词二首 其一》 刘禹锡</h2><p>自古逢秋悲寂寥，我言秋日胜春朝。<br>晴空一鹤排云上，便引诗情到碧霄。</p>\n<h2 id=\"《竹枝词二首-其一》-刘禹锡\"><a href=\"#《竹枝词二首-其一》-刘禹锡\" class=\"headerlink\" title=\"《竹枝词二首 其一》 刘禹锡\"></a>《竹枝词二首 其一》 刘禹锡</h2><p>杨柳青青江水平，闻郎江上唱歌声。<br>东边日出西边雨，道是无晴却有晴。</p>\n<h2 id=\"《乌衣巷》-刘禹锡\"><a href=\"#《乌衣巷》-刘禹锡\" class=\"headerlink\" title=\"《乌衣巷》 刘禹锡\"></a>《乌衣巷》 刘禹锡</h2><p>朱雀桥边野草花，乌衣巷口夕阳斜。<br>旧时王谢堂前燕，飞入寻常百姓家。</p>\n<h2 id=\"《石头城》-刘禹锡\"><a href=\"#《石头城》-刘禹锡\" class=\"headerlink\" title=\"《石头城》 刘禹锡\"></a>《石头城》 刘禹锡</h2><p>山围故国周遭在，潮打空城寂寞回。<br>淮水东边旧时月，夜深还过女墙来。</p>\n<h2 id=\"《酬乐天扬州初逢席上见赠》-刘禹锡\"><a href=\"#《酬乐天扬州初逢席上见赠》-刘禹锡\" class=\"headerlink\" title=\"《酬乐天扬州初逢席上见赠》 刘禹锡\"></a>《酬乐天扬州初逢席上见赠》 刘禹锡</h2><p>巴山楚水凄凉地，二十三年弃置身。<br>怀旧空吟闻笛赋，到乡翻似烂柯人。<br>沉舟侧畔千帆过，病树前头万木春。<br>今日听君歌一曲，暂凭杯酒长精神。</p>\n<h2 id=\"《赠的古原草送别》-白居易\"><a href=\"#《赠的古原草送别》-白居易\" class=\"headerlink\" title=\"《赠的古原草送别》 白居易\"></a>《赠的古原草送别》 白居易</h2><p>离离原上草，一岁一枯荣。<br>野火烧不尽，春风吹又生。<br>远芳侵古道，晴翠接荒城。<br>又送王孙去，萋萋满别情。</p>\n<h2 id=\"《长恨歌》-白居易\"><a href=\"#《长恨歌》-白居易\" class=\"headerlink\" title=\"《长恨歌》 白居易\"></a>《长恨歌》 白居易</h2><p>汉皇重色思倾国，御宇多年求不得。<br>杨家有女初长成，养在深闺人未识。<br>天生丽质难自弃，一朝选在君王侧。<br>回眸一笑百媚生，六宫粉黛无颜色。<br>春寒赐浴华清池，温泉水滑洗凝脂。<br>侍儿扶起娇无力，始是新承恩泽时。<br>云鬓花颜金步摇，芙蓉帐暖度春宵。<br>春宵苦短日高起，从此君王不早朝。<br>承欢侍宴无闲暇，春从春游夜专夜。<br>后宫佳丽三千人，三千宠爱在一身。<br>金屋妆成娇侍夜，玉楼宴罢醉和春。<br>姊妹弟兄皆列土，可怜光彩生门户。<br>遂令天下父母心，不重生男重生女。<br>骊宫高处入青云，仙乐风飘处处闻。<br>缓歌慢舞凝丝竹，尽日君王不看足。<br>渔阳鼙（pí）鼓动地来，惊破霓裳羽衣曲。<br>九重城阙烟尘生，千乘万骑西南行。<br>翠华摇摇行复止，西出都门百余里。<br>六军不发无奈何，宛转蛾眉马前死。<br>花钿委地无人收，翠翘金雀玉搔头。<br>君王掩面救不得，回看血泪相和流。<br>黄埃散漫风萧索，云栈萦纡登剑阁。<br>峨眉山下少人行，旌旗无光日色薄。<br>行宫见月伤心色，夜雨闻铃肠断声。<br>天旋地转回龙驭，到此踌躇不能去。<br>马嵬坡下泥土中，不见玉颜空死处。<br>君臣相顾尽沾衣，东望都门信马归。<br>归来池苑皆依旧，太液芙蓉未央柳。<br>芙蓉如面柳如眉，对此如何不泪垂。<br>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南内多秋草，落叶满阶红不扫。<br>梨园弟子白发新，椒房阿监青娥老。<br>夕殿萤飞思悄然，孤灯挑尽未成眠。<br>迟迟钟鼓初长夜，耿耿星河欲曙天。<br>鸳鸯瓦冷霜华重，翡翠衾（qīn）寒谁与共。<br>悠悠生死别经年，魂魄不曾来入梦。<br>临邛（qióng）道士鸿都客，能以精诚致魂魄。<br>为感君王展转思，遂教方士殷勤觅。<br>排空驭气奔如电，升天入地求之遍。<br>上穷碧落下黄泉，两处茫茫皆不见。<br>忽闻海上有仙山，山在虚无缥缈间。<br>楼阁玲珑五云起，其中绰（chuò）约多仙子。<br>中有一人字太真，雪肤花貌参差是。<br>金阙西厢叩玉扃（jiōng），转教小玉报双成。<br>闻道汉家天子使，九华帐里梦魂惊。<br>揽衣推枕起徘徊，珠箔银屏迤（yǐ）逦开。<br>云鬓半偏新睡觉，花冠不整下堂来。<br>风吹仙袂飘飘举，犹似霓裳羽衣舞。<br>玉容寂寞泪阑干，梨花一枝春带雨。<br>含情凝睇谢君王，一别音容两渺茫。<br>昭阳殿里恩爱绝，蓬莱宫中日月长。<br>回头下望人寰（huán）处，不见长安见尘雾。<br>惟将旧物表深情，钿合金钗寄将去。<br>钗留一股合一扇，钗擘黄金合分钿。<br>但教心似金钿坚，天上人间会相见。<br>临别殷勤重寄词，词中有誓两心知。<br>七月七日长生殿，半夜无人私语时。<br>在天愿作比翼鸟，在地愿为连理枝。<br>天长地久有时尽，此恨绵绵无绝期。</p>\n<h2 id=\"《琵琶行》-白居易\"><a href=\"#《琵琶行》-白居易\" class=\"headerlink\" title=\"《琵琶行》 白居易\"></a>《琵琶行》 白居易</h2><p>浔阳江头夜送客，枫叶荻花秋瑟瑟。<br>主人下马客在船，举酒欲饮无管弦。<br>醉不成欢惨将别，别时茫茫江浸月。<br>忽闻水上琵琶声，主人忘归客不发。<br>寻声暗问弹者谁，琵琶声停欲语迟。<br>移船相近邀相见，添酒回灯重开宴。<br>千呼万唤始出来，犹抱琵琶半遮面。<br>转轴拨弦三两声，未成曲调先有情。<br>弦弦掩抑声声思，似诉平生不得志。<br>低眉信手续续弹，说尽心中无限事。<br>轻拢慢捻抹复挑，初为霓裳后六幺。<br>大弦嘈嘈如急雨，小弦切切如私语。<br>嘈嘈切切错杂弹，大珠小珠落玉盘。<br>间关莺语花底滑，幽咽泉流冰下难。<br>冰泉冷涩弦凝绝，凝绝不通声暂歇。<br>别有幽愁暗恨生，此时无声胜有声。<br>银瓶乍破水浆迸，铁骑突出刀枪鸣。<br>曲终收拨当心画，四弦一声如裂帛。<br>东船西舫悄无言，唯见江心秋月白。<br>沉吟放拨插弦中，整顿衣裳起敛容。<br>自言本是京城女，家在虾蟆陵下住。<br>十三学得琵琶成，名属教坊第一部。<br>曲罢曾教善才服，妆成每被秋娘妒。<br>五陵年少争缠头，一曲红绡不知数。<br>钿头云篦击节碎，血色罗裙翻酒污。<br>今年欢笑复明年，秋月春风等闲度。<br>弟走从军阿姨死，暮去朝来颜色故。<br>门前冷落鞍马稀，老大嫁作商人妇。<br>商人重利轻别离，前月浮梁买茶去。<br>去来江口守空船，绕船月明江水寒。<br>深夜忽梦少年事，梦啼妆泪红阑干。<br>我闻琵琶已叹息，又闻此语重唧唧。<br>同是天涯沦落人，相逢何必曾相识。<br>我从去年辞帝京，谪居卧病浔阳城。<br>浔阳地僻无音乐，终岁不闻丝竹声。<br>住近湓江地低湿，黄芦苦竹绕宅生。<br>其间旦暮闻何物，杜鹃啼血猿哀鸣。<br>春江花朝秋月夜，往往取酒还独倾。<br>岂无山歌与村笛，呕哑嘲哳难为听。<br>今夜闻君琵琶语，如听仙乐耳暂明。<br>莫辞更坐弹一曲，为君翻作琵琶行。<br>感我此言良久立，却坐促弦弦转急。<br>凄凄不似向前声，满座重闻皆掩泣。<br>座中泣下谁最多，江州司马青衫湿。</p>\n<h2 id=\"《钱塘江春行》-白居易\"><a href=\"#《钱塘江春行》-白居易\" class=\"headerlink\" title=\"《钱塘江春行》 白居易\"></a>《钱塘江春行》 白居易</h2><p>孤山寺北贾亭西，水面初平云脚低。<br>几处早莺争暖树，谁家新燕啄春泥。<br>乱花渐欲迷人眼，浅草才能没马蹄。<br>最爱湖东行不足，绿杨阴里白沙堤。</p>\n<h2 id=\"《江雪》-柳宗元\"><a href=\"#《江雪》-柳宗元\" class=\"headerlink\" title=\"《江雪》 柳宗元\"></a>《江雪》 柳宗元</h2><p>千山鸟飞绝，万径人踪灭。<br>孤舟蓑笠翁，独钓寒江雪。</p>\n<h2 id=\"《闻乐天授江州司马》-元稹（zhen）\"><a href=\"#《闻乐天授江州司马》-元稹（zhen）\" class=\"headerlink\" title=\"《闻乐天授江州司马》 元稹（zhěn）\"></a>《闻乐天授江州司马》 元稹（zhěn）</h2><p>残灯无焰影幢幢，此夕闻君谪九江。<br>垂死病中惊坐起，暗风吹雨入寒窗。</p>\n<h2 id=\"《离思五首-其四》-元稹\"><a href=\"#《离思五首-其四》-元稹\" class=\"headerlink\" title=\"《离思五首 其四》 元稹\"></a>《离思五首 其四》 元稹</h2><p>曾经沧海难为水，除却巫山不是云。<br>取次花丛懒回顾，半缘修道半缘君。</p>\n<h2 id=\"《题鹤林寺僧舍》-李涉\"><a href=\"#《题鹤林寺僧舍》-李涉\" class=\"headerlink\" title=\"《题鹤林寺僧舍》 李涉\"></a>《题鹤林寺僧舍》 李涉</h2><p>终日昏昏醉梦间，忽闻春尽强登山。<br>因过竹院逢僧话，又得浮生半日闲。</p>\n<h2 id=\"《陇西行》-陈陶\"><a href=\"#《陇西行》-陈陶\" class=\"headerlink\" title=\"《陇西行》 陈陶\"></a>《陇西行》 陈陶</h2><p>誓扫匈奴不顾身，五千貂锦丧胡尘。<br>可怜无定河边骨，犹是春闺梦里人。</p>\n<h2 id=\"《寻隐者不遇》-贾岛\"><a href=\"#《寻隐者不遇》-贾岛\" class=\"headerlink\" title=\"《寻隐者不遇》 贾岛\"></a>《寻隐者不遇》 贾岛</h2><p>松下问童子，言师采药去。<br>只在此山中，云深不知处。</p>\n<h2 id=\"《近试上张水部》-朱庆馀\"><a href=\"#《近试上张水部》-朱庆馀\" class=\"headerlink\" title=\"《近试上张水部》 朱庆馀\"></a>《近试上张水部》 朱庆馀</h2><p>洞房昨夜停红烛，待晓堂前拜舅姑。<br>妆罢低声问夫婿：画眉深浅入时无？</p>\n<h2 id=\"《雁门太守行》-李贺\"><a href=\"#《雁门太守行》-李贺\" class=\"headerlink\" title=\"《雁门太守行》 李贺\"></a>《雁门太守行》 李贺</h2><p>黑云压城城欲摧，甲光向日金鳞开。<br>角声满天秋色里，塞上燕脂凝夜紫。<br>半卷红旗临易水，霜重鼓寒声不起。<br>报君黄金台上意，提携玉龙为君死。</p>\n<h2 id=\"《寄扬州韩绰判官》-杜牧\"><a href=\"#《寄扬州韩绰判官》-杜牧\" class=\"headerlink\" title=\"《寄扬州韩绰判官》 杜牧\"></a>《寄扬州韩绰判官》 杜牧</h2><p>青山隐隐水迢迢，秋尽江南草未凋。<br>二十四桥明月夜，玉人何处教吹箫。</p>\n<h2 id=\"《山行》-杜牧\"><a href=\"#《山行》-杜牧\" class=\"headerlink\" title=\"《山行》 杜牧\"></a>《山行》 杜牧</h2><p>远上寒山石径斜，白云深处有人家。<br>停车坐爱枫林晚，霜叶红于二月花。</p>\n<h2 id=\"《过华清宫绝句三首-其一》-杜牧\"><a href=\"#《过华清宫绝句三首-其一》-杜牧\" class=\"headerlink\" title=\"《过华清宫绝句三首 其一》 杜牧\"></a>《过华清宫绝句三首 其一》 杜牧</h2><p>长安回望绣成堆，山顶千门次第开。<br>一骑红尘妃子笑，无人知是荔枝来。</p>\n<h2 id=\"《赤壁》-杜牧\"><a href=\"#《赤壁》-杜牧\" class=\"headerlink\" title=\"《赤壁》 杜牧\"></a>《赤壁》 杜牧</h2><p>折戟沉沙铁未销，自将磨洗认前朝。<br>东风不与周郎便，铜雀春深锁二乔。</p>\n<h2 id=\"《江南春》-杜牧\"><a href=\"#《江南春》-杜牧\" class=\"headerlink\" title=\"《江南春》 杜牧\"></a>《江南春》 杜牧</h2><p>千里莺啼绿映红，水村山郭酒旗风。<br>南朝四百八十寺，多少楼台烟雨中。</p>\n<h2 id=\"《泊秦淮》-杜牧\"><a href=\"#《泊秦淮》-杜牧\" class=\"headerlink\" title=\"《泊秦淮》 杜牧\"></a>《泊秦淮》 杜牧</h2><p>烟笼寒水月笼沙，夜泊秦淮近酒家。<br>商女不知亡国恨，隔江犹唱后庭花。</p>\n<h2 id=\"《清明》-杜牧\"><a href=\"#《清明》-杜牧\" class=\"headerlink\" title=\"《清明》 杜牧\"></a>《清明》 杜牧</h2><p>清明时节雨纷纷，路上行人欲断魂。<br>借问酒家何处有？牧童遥指杏花村。</p>\n<h2 id=\"《锦瑟》-李商隐\"><a href=\"#《锦瑟》-李商隐\" class=\"headerlink\" title=\"《锦瑟》 李商隐\"></a>《锦瑟》 李商隐</h2><p>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p>\n<h2 id=\"《无题》-李商隐\"><a href=\"#《无题》-李商隐\" class=\"headerlink\" title=\"《无题》 李商隐\"></a>《无题》 李商隐</h2><p>相见时难别亦难，东风无力百花残。<br>春蚕到死丝方尽，蜡炬成灰泪始干。<br>晓镜但愁云鬓改，夜吟应觉月光寒。<br>蓬山此去无多路，青鸟殷勤为探看。</p>\n<h2 id=\"《无题二首-其一》-李商隐\"><a href=\"#《无题二首-其一》-李商隐\" class=\"headerlink\" title=\"《无题二首 其一》 李商隐\"></a>《无题二首 其一》 李商隐</h2><p>昨夜星辰昨夜风，画楼西畔桂堂东。<br>身无彩凤双飞翼，心有灵犀一点通。<br>隔座送钩春酒暖，分曹射覆蜡灯红。<br>嗟余听鼓应官去，走马兰台类转蓬。</p>\n<h2 id=\"《登乐游原》-李商隐\"><a href=\"#《登乐游原》-李商隐\" class=\"headerlink\" title=\"《登乐游原》 李商隐\"></a>《登乐游原》 李商隐</h2><p>向晚意不适，驱车登古原。<br>夕阳无限好，只是近黄昏。</p>\n<h2 id=\"《夜雨寄北》-李商隐\"><a href=\"#《夜雨寄北》-李商隐\" class=\"headerlink\" title=\"《夜雨寄北》 李商隐\"></a>《夜雨寄北》 李商隐</h2><p>君问归期未有期，巴山夜雨涨秋池。<br>何当共剪西窗烛，却话巴山夜雨时。</p>\n<h2 id=\"《林逋》-梅花\"><a href=\"#《林逋》-梅花\" class=\"headerlink\" title=\"《林逋》 梅花\"></a>《林逋》 梅花</h2><p>众芳摇落独暄妍，占尽风情向小园。<br>疏影横斜水清浅，暗香浮动月黄昏。<br>霜禽欲下先偷眼，粉蝶如知合断魂。<br>幸有微吟可相狎，不须檀（tán）板共金尊。</p>\n<h2 id=\"《泊船瓜州》-王安石\"><a href=\"#《泊船瓜州》-王安石\" class=\"headerlink\" title=\"《泊船瓜州》 王安石\"></a>《泊船瓜州》 王安石</h2><p>京口瓜洲一水间，钟山只隔数重山。<br>春风又绿江南岸，明月何时照我还。</p>\n<h2 id=\"《梅花》-王安石\"><a href=\"#《梅花》-王安石\" class=\"headerlink\" title=\"《梅花》 王安石\"></a>《梅花》 王安石</h2><p>墙角数枝梅，凌寒独自开。<br>遥知不是雪，为有暗香来。</p>\n<h2 id=\"《饮湖上初晴后雨-其二》-苏轼\"><a href=\"#《饮湖上初晴后雨-其二》-苏轼\" class=\"headerlink\" title=\"《饮湖上初晴后雨 其二》 苏轼\"></a>《饮湖上初晴后雨 其二》 苏轼</h2><p>水光潋滟晴方好，山色空蒙雨亦奇。<br>欲把西湖比西子，淡妆浓抹总相宜。</p>\n<h2 id=\"《题西林壁》-苏轼\"><a href=\"#《题西林壁》-苏轼\" class=\"headerlink\" title=\"《题西林壁》 苏轼\"></a>《题西林壁》 苏轼</h2><p>横看成岭侧成峰，远近高低各不同。<br>不识庐山真面目，只缘身在此山中。</p>\n<h2 id=\"《惠崇春江晚景》-苏轼\"><a href=\"#《惠崇春江晚景》-苏轼\" class=\"headerlink\" title=\"《惠崇春江晚景》 苏轼\"></a>《惠崇春江晚景》 苏轼</h2><p>竹外桃花三两枝，春江水暖鸭先知。<br>蒌蒿满地芦芽短，正是河豚欲上时。</p>\n<h2 id=\"《小池》-杨万里\"><a href=\"#《小池》-杨万里\" class=\"headerlink\" title=\"《小池》 杨万里\"></a>《小池》 杨万里</h2><p>泉眼无声惜细流，树阴照水爱晴柔。<br>小荷才露尖尖角，早有蜻蜓立上头。</p>\n<h2 id=\"《晓出净慈寺送林子方》-杨万里\"><a href=\"#《晓出净慈寺送林子方》-杨万里\" class=\"headerlink\" title=\"《晓出净慈寺送林子方》 杨万里\"></a>《晓出净慈寺送林子方》 杨万里</h2><p>毕竟西湖六月中，风光不与四时同。<br>接天莲叶无穷碧，映日荷花别样红。</p>\n<h2 id=\"《游山西村》-陆游\"><a href=\"#《游山西村》-陆游\" class=\"headerlink\" title=\"《游山西村》 陆游\"></a>《游山西村》 陆游</h2><p>莫笑农家腊酒浑，丰年留客足鸡豚。<br>山重水复疑无路，柳暗花明又一村。<br>箫鼓追随春社近，衣冠简朴古风存。<br>从今若许闲乘月，拄杖无时夜叩门。</p>\n<h2 id=\"《书愤》-陆游\"><a href=\"#《书愤》-陆游\" class=\"headerlink\" title=\"《书愤》 陆游\"></a>《书愤》 陆游</h2><p>早岁那知世事艰，中原北望气如山。<br>楼船夜雪瓜洲渡，铁马秋风大散关。<br>塞上长城空自许，镜中衰鬓已先斑。<br>出师一表真名世，千载谁堪伯仲间。</p>\n<h2 id=\"《十一月四日风雨大作二首-其二》-陆游\"><a href=\"#《十一月四日风雨大作二首-其二》-陆游\" class=\"headerlink\" title=\"《十一月四日风雨大作二首 其二》 陆游\"></a>《十一月四日风雨大作二首 其二》 陆游</h2><p>僵卧孤村不自哀，尚思为国戍轮台。<br>夜阑卧听风吹雨，铁马冰河入梦来。</p>\n<h2 id=\"《示儿》-陆游\"><a href=\"#《示儿》-陆游\" class=\"headerlink\" title=\"《示儿》 陆游\"></a>《示儿》 陆游</h2><p>死去元知万事空，但悲不见九州同。<br>王师北定中原日，家祭无忘告乃翁。</p>\n<h2 id=\"《春日》-朱熹\"><a href=\"#《春日》-朱熹\" class=\"headerlink\" title=\"《春日》 朱熹\"></a>《春日》 朱熹</h2><p>胜日寻芳泗水滨，无边光景一时新。<br>等闲识得东风面，万紫千红总是春。</p>\n<h2 id=\"《观书有感二首-其一》-朱熹\"><a href=\"#《观书有感二首-其一》-朱熹\" class=\"headerlink\" title=\"《观书有感二首 其一》 朱熹\"></a>《观书有感二首 其一》 朱熹</h2><p>半亩方塘一鉴开，天光云影共徘徊。<br>问渠那得清如许，为有源头活水来。</p>\n<h2 id=\"《题临安邸》-林升\"><a href=\"#《题临安邸》-林升\" class=\"headerlink\" title=\"《题临安邸》 林升\"></a>《题临安邸》 林升</h2><p>山外青山楼外楼，西湖歌舞几时休？<br>暖风熏得游人醉，直把杭州作汴州。</p>\n<h2 id=\"《游园不值》-叶绍翁\"><a href=\"#《游园不值》-叶绍翁\" class=\"headerlink\" title=\"《游园不值》 叶绍翁\"></a>《游园不值》 叶绍翁</h2><p>应怜屐齿印苍苔，小扣柴扉久不开。<br>春色满园关不住，一枝红杏出墙来。</p>\n<h2 id=\"《过零丁洋》-文天祥\"><a href=\"#《过零丁洋》-文天祥\" class=\"headerlink\" title=\"《过零丁洋》 文天祥\"></a>《过零丁洋》 文天祥</h2><p>辛苦遭逢起一经，干戈寥落四周星。<br>山河破碎风飘絮，身世浮沉雨打萍。<br>惶恐滩头说惶恐，零丁洋里叹零丁。<br>人生自古谁无死，留取丹心照汗青。</p>\n<h2 id=\"《墨梅》-王冕\"><a href=\"#《墨梅》-王冕\" class=\"headerlink\" title=\"《墨梅》 王冕\"></a>《墨梅》 王冕</h2><p>我家洗砚池头树，朵朵花开淡墨痕。<br>不要人夸好颜色，只留清气满乾坤。</p>\n<h2 id=\"《石灰吟》-于谦\"><a href=\"#《石灰吟》-于谦\" class=\"headerlink\" title=\"《石灰吟》 于谦\"></a>《石灰吟》 于谦</h2><p>千锤万击出深山，烈火焚烧若等闲。<br>粉身碎骨浑不怕，要留清白在人间。</p>\n<h2 id=\"《竹石》-郑板桥\"><a href=\"#《竹石》-郑板桥\" class=\"headerlink\" title=\"《竹石》 郑板桥\"></a>《竹石》 郑板桥</h2><p>咬定青山不放松，立根原在破岩中。<br>千磨万击还坚劲，任尔东西南北风。</p>\n<h2 id=\"《论诗五首-其二》-赵翼\"><a href=\"#《论诗五首-其二》-赵翼\" class=\"headerlink\" title=\"《论诗五首 其二》 赵翼\"></a>《论诗五首 其二》 赵翼</h2><p>李杜诗篇万口传，至今已觉不新鲜。<br>江山代有才人出，各领风骚数百年。</p>\n<h2 id=\"《已亥杂诗-第五首》-龚自珍\"><a href=\"#《已亥杂诗-第五首》-龚自珍\" class=\"headerlink\" title=\"《已亥杂诗 第五首》 龚自珍\"></a>《已亥杂诗 第五首》 龚自珍</h2><p>浩荡离愁白日斜，吟鞭东指即天涯。<br>落红不是无情物，化作春泥更护花。</p>\n<h2 id=\"《已亥杂诗-第一首》-龚自珍\"><a href=\"#《已亥杂诗-第一首》-龚自珍\" class=\"headerlink\" title=\"《已亥杂诗 第一首》 龚自珍\"></a>《已亥杂诗 第一首》 龚自珍</h2><p>九州生气恃风雷，万马齐喑究可哀。<br>我劝天公重抖擞，不拘一格降人才。</p>\n<h2 id=\"《渔父》-张志和\"><a href=\"#《渔父》-张志和\" class=\"headerlink\" title=\"《渔父》 张志和\"></a>《渔父》 张志和</h2><p>西塞山前白鹭飞，桃花流水鳜鱼肥。青箬笠，绿蓑衣，斜风细雨不须归。</p>\n<h2 id=\"《忆江南》-白居易\"><a href=\"#《忆江南》-白居易\" class=\"headerlink\" title=\"《忆江南》 白居易\"></a>《忆江南》 白居易</h2><p>江南好，风景旧曾谙。日出江花红胜火，春来江水绿如蓝。能不忆江南。</p>\n<h2 id=\"《虞美人》-李煜\"><a href=\"#《虞美人》-李煜\" class=\"headerlink\" title=\"《虞美人》 李煜\"></a>《虞美人》 李煜</h2><p>春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。<br>雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。</p>\n<h2 id=\"《乌夜啼》-李煜\"><a href=\"#《乌夜啼》-李煜\" class=\"headerlink\" title=\"《乌夜啼》 李煜\"></a>《乌夜啼》 李煜</h2><p>无言独上西楼，月如钩。寂寞梧桐深院锁清秋。<br>剪不断，理还乱，是离愁。别有一番滋味在心头。</p>\n<h2 id=\"《渔家傲》-秋思-范仲淹\"><a href=\"#《渔家傲》-秋思-范仲淹\" class=\"headerlink\" title=\"《渔家傲》-秋思 范仲淹\"></a>《渔家傲》-秋思 范仲淹</h2><p>塞下秋来风景异，衡阳雁去无留意。四面边声连角起。千嶂里，长烟落日孤城闭。<br>浊酒一杯家万里，燕然未勒归无计。羌管悠悠霜满地。人不寐，将军白发征夫泪。</p>\n<h2 id=\"《雨霖铃》-柳永\"><a href=\"#《雨霖铃》-柳永\" class=\"headerlink\" title=\"《雨霖铃》 柳永\"></a>《雨霖铃》 柳永</h2><p>寒蝉凄切。对长亭晚，骤雨初歇。都门帐饮无绪，留恋处、兰舟催发。执手相看泪眼，<br>竟无语凝噎。念去去、千里烟波，暮霭沉沉楚天阔。<br>多情自古伤离别。更那堪、冷落清秋节。今宵酒醒何处？杨柳岸、晓风残月。<br>此去经年，应是良辰好景虚设。便纵有、千种风情，更与何人说。</p>\n<h2 id=\"《凤栖梧》-柳永\"><a href=\"#《凤栖梧》-柳永\" class=\"headerlink\" title=\"《凤栖梧》 柳永\"></a>《凤栖梧》 柳永</h2><p>伫（zhù）倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。<br>拟把疏狂图一醉。对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"能熟读背诵的古诗词\"><a href=\"#能熟读背诵的古诗词\" class=\"headerlink\" title=\"能熟读背诵的古诗词\"></a>能熟读背诵的古诗词</h1><h2 id=\"《诗经-邶风》-静女\"><a href=\"#《诗经-邶风》-静女\" class=\"headerlink\" title=\"《诗经 邶风》 静女\"></a>《诗经 邶风》 静女</h2><p>静女其姝，俟我于城隅。<br>爱而不见，搔首踟蹰。</p>\n<p>静女其娈，贻我彤管。<br>彤管有炜，说怿女美。</p>\n<p>自牧归荑，洵美且异。<br>匪女之为美，美人之贻。</p>\n<h2 id=\"《诗经-秦风》-蒹葭\"><a href=\"#《诗经-秦风》-蒹葭\" class=\"headerlink\" title=\"《诗经 秦风》 蒹葭\"></a>《诗经 秦风》 蒹葭</h2><p> 蒹葭苍苍，白露为霜<br> 所谓伊人，在水一方。<br> 溯洄从之，道阻且长。<br> 溯游从之，宛在水中央。  </p>\n<p> 蒹葭萋萋，白露未晞。<br> 所谓伊人，在水之湄。<br> 溯洄从之，道阻且跻。<br> 溯游从之，宛在水中坻。</p>\n<p> 蒹葭采采，白露未已。<br> 所谓伊人，在水之涘。<br> 溯洄从之，道阻且右。<br> 溯游从之，宛在水中沚。</p>\n<h2 id=\"《垓（gai）下歌》-项羽\"><a href=\"#《垓（gai）下歌》-项羽\" class=\"headerlink\" title=\"《垓（gāi）下歌》 项羽\"></a>《垓（gāi）下歌》 项羽</h2><p> 力拔山兮气盖世。时不利兮骓不逝。<br> 骓不逝兮可奈何！虞兮虞兮奈若何！</p>\n<h2 id=\"《大风歌》-刘邦\"><a href=\"#《大风歌》-刘邦\" class=\"headerlink\" title=\"《大风歌》 刘邦\"></a>《大风歌》 刘邦</h2><p>大风起兮云飞扬，威加海内兮归故乡。安得猛士兮守四方！</p>\n<h2 id=\"《长歌行》-汉乐府\"><a href=\"#《长歌行》-汉乐府\" class=\"headerlink\" title=\"《长歌行》 汉乐府\"></a>《长歌行》 汉乐府</h2><p>青青园中葵，朝露待日晞。<br>阳春布德泽，万物生光辉。<br>常恐秋节至， 焜黄华叶衰。<br>百川东到海，何时复西归？<br>少壮不努力，老大徒伤悲！</p>\n<h2 id=\"《上邪》-汉乐府\"><a href=\"#《上邪》-汉乐府\" class=\"headerlink\" title=\"《上邪》 汉乐府\"></a>《上邪》 汉乐府</h2><p>上邪！<br>我欲与君相知，长命无绝衰。<br>山无棱，江水为竭，<br>冬雷震震，夏雨雪，<br>天地合，乃敢与君绝！</p>\n<h2 id=\"《迢迢牵牛星》-无名氏\"><a href=\"#《迢迢牵牛星》-无名氏\" class=\"headerlink\" title=\"《迢迢牵牛星》 无名氏\"></a>《迢迢牵牛星》 无名氏</h2><p>迢迢牵牛星，皎皎河汉女。<br>纤纤擢素手，札扎弄机杼。<br>终日不成章，泣涕零如雨；<br>河汉清且浅，相去复几许！<br>盈盈一水间，脉脉不得语。</p>\n<h2 id=\"《观沧海》-曹操\"><a href=\"#《观沧海》-曹操\" class=\"headerlink\" title=\"《观沧海》 曹操\"></a>《观沧海》 曹操</h2><p>东临碣石，以观沧海。<br>水何澹澹（dàn），山岛竦峙。<br>树木丛生，百草丰茂。<br>秋风萧瑟，洪波涌起。<br>日月之行，若出其中；<br>星汉灿烂，若出其里。<br>幸甚至哉，歌以咏志。</p>\n<h2 id=\"《龟虽寿》-曹操\"><a href=\"#《龟虽寿》-曹操\" class=\"headerlink\" title=\"《龟虽寿》 曹操\"></a>《龟虽寿》 曹操</h2><p>神龟虽寿，犹有竟时。<br>腾蛇乘雾，终为土灰。<br>老骥伏枥，志在千里；<br>烈士暮年， 壮心不已。<br>盈缩之期，不但在天；<br>养怡之福，可得永年。<br>幸甚至哉，歌以咏志。</p>\n<h2 id=\"《短歌行》-曹操\"><a href=\"#《短歌行》-曹操\" class=\"headerlink\" title=\"《短歌行》 曹操\"></a>《短歌行》 曹操</h2><p>对酒当歌，人生几何？<br>譬如朝露，去日苦多。<br>慨当以慷，忧思难忘。<br>何以解忧，唯有杜康。</p>\n<p>青青子衿，悠悠我心。<br>但为君故，沉吟至今。<br>呦呦鹿鸣，食野之苹。<br>我有嘉宾，鼓瑟吹笙。  </p>\n<p>明明如月，何时可掇？<br>忧从中来，不可断绝。<br>越陌度阡，枉用相存。<br>契阔谈宴，心念旧恩。</p>\n<p>月明星稀，乌鹊南飞。<br>绕树三匝，何枝可依？<br>山不厌高，海不厌深。<br>周公吐哺，天下归心。</p>\n<h2 id=\"《归园田居-其一》-陶渊明\"><a href=\"#《归园田居-其一》-陶渊明\" class=\"headerlink\" title=\"《归园田居 其一》 陶渊明\"></a>《归园田居 其一》 陶渊明</h2><p>少无适俗韵，性本爱丘山。<br>误落尘网中，一去三十年。<br>羁鸟恋旧林，池鱼思故渊。<br>开荒南野际，守拙归园田。<br>方宅十余亩，草屋八九间。<br>榆柳荫后檐，桃李罗堂前。<br>暧暧远人村，依依墟里烟。<br>狗吠深巷中，鸡鸣桑树颠。<br>户庭无尘杂，虚室有余闲。<br>久在樊笼里，复得返自然。</p>\n<h2 id=\"《归园田居-其三》-陶渊明\"><a href=\"#《归园田居-其三》-陶渊明\" class=\"headerlink\" title=\"《归园田居 其三》 陶渊明\"></a>《归园田居 其三》 陶渊明</h2><p>种豆南山下，草盛豆苗稀。<br>晨兴理荒秽，带月荷锄归。<br>道狭草木长，夕露沾我衣。<br>衣沾不足惜，但使愿无违。</p>\n<h2 id=\"《饮酒-其五》-陶渊明\"><a href=\"#《饮酒-其五》-陶渊明\" class=\"headerlink\" title=\"《饮酒 其五》 陶渊明\"></a>《饮酒 其五》 陶渊明</h2><p>结庐在人境，而无车马喧。<br>问君何能尔，心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>\n<h2 id=\"《入若耶溪》-王籍\"><a href=\"#《入若耶溪》-王籍\" class=\"headerlink\" title=\"《入若耶溪》 王籍\"></a>《入若耶溪》 王籍</h2><p>艅艎何泛泛，空水共悠悠。<br>阴霞生远岫，阳景逐回流。<br>蝉噪林逾静，鸟鸣山更幽。<br>此地动归念，长年悲倦游。</p>\n<h2 id=\"《敕勒歌》-北朝乐府\"><a href=\"#《敕勒歌》-北朝乐府\" class=\"headerlink\" title=\"《敕勒歌》 北朝乐府\"></a>《敕勒歌》 北朝乐府</h2><p>敕勒川，阴山下。<br>天似穹庐，笼盖四野。<br>天苍苍。野茫茫。<br>风吹草低见牛羊。</p>\n<h2 id=\"《木兰诗》-北朝乐府\"><a href=\"#《木兰诗》-北朝乐府\" class=\"headerlink\" title=\"《木兰诗》 北朝乐府\"></a>《木兰诗》 北朝乐府</h2><p>唧唧复唧唧，木兰当户织。<br>不闻机杼声，惟闻女叹息。<br>问女何所思，问女何所忆。<br>女亦无所思，女亦无所忆。<br>昨夜见军帖，可汗大点兵，<br>军书十二卷，卷卷有爷名。<br>阿爷无大儿，木兰无长兄，<br>愿为市鞍马，从此替爷征。<br>东市买骏马，西市买鞍鞯，<br>南市买辔头，北市买长鞭。  </p>\n<p>旦辞爷娘去，暮宿黄河边。<br>不闻爷娘唤女声，但闻黄河流水鸣溅溅。<br>旦辞黄河去，暮至黑山头。<br>不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。<br>万里赴戎机，关山度若飞。<br>朔气传金柝（tuò），寒光照铁衣。<br>将军百战死，壮士十年归。<br>归来见天子，天子坐明堂。<br>策勋十二转，赏赐百千强。<br>可汗问所欲，木兰不用尚书郎，<br>愿驰千里足，送儿还故乡。</p>\n<p>爷娘闻女来，出郭相扶将。<br>阿姊闻妹来，当户理红妆。<br>小弟闻姊来，磨刀霍霍向猪羊。<br>开我东阁门，坐我西阁床。<br>脱我战时袍，著我旧时裳。<br>当窗理云鬓，对镜贴花黄。<br>出门看火伴，火伴皆惊忙。<br>同行十二年，不知木兰是女郎。<br>雄兔脚扑朔，雌兔眼迷离；<br>双兔傍地走，安能辨我是雌雄？</p>\n<h2 id=\"《送杜少府之任蜀川》-王勃\"><a href=\"#《送杜少府之任蜀川》-王勃\" class=\"headerlink\" title=\"《送杜少府之任蜀川》 王勃\"></a>《送杜少府之任蜀川》 王勃</h2><p>城阙辅三秦，风烟望五津。<br>与君离别意， 同是宦游人。<br>海内存知己，天涯若比邻。<br>无为在歧路，儿女共沾巾。</p>\n<h2 id=\"《登幽州台歌》-陈子昂\"><a href=\"#《登幽州台歌》-陈子昂\" class=\"headerlink\" title=\"《登幽州台歌》 陈子昂\"></a>《登幽州台歌》 陈子昂</h2><p>前不见古人，后不见来者。<br>念天地之悠悠，独怆然而涕下。</p>\n<h2 id=\"《春江花月夜》-张若虚\"><a href=\"#《春江花月夜》-张若虚\" class=\"headerlink\" title=\"《春江花月夜》 张若虚\"></a>《春江花月夜》 张若虚</h2><p>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明。<br>江流宛转绕芳甸，月照花林皆似霰。<br>空里流霜不觉飞，汀（tīng）上白沙看不见。<br>江天一色无纤尘， 皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p>\n<h2 id=\"《望月怀远》-张九龄\"><a href=\"#《望月怀远》-张九龄\" class=\"headerlink\" title=\"《望月怀远》 张九龄\"></a>《望月怀远》 张九龄</h2><p>海上生明月，天涯共此时。<br>情人怨遥夜，竟夕起相思。<br>灭烛怜光满，披衣觉露滋。<br>不堪盈手赠，还寝梦佳期。</p>\n<h2 id=\"《回乡偶书》-贺知章\"><a href=\"#《回乡偶书》-贺知章\" class=\"headerlink\" title=\"《回乡偶书》 贺知章\"></a>《回乡偶书》 贺知章</h2><p>少小离家老大回，乡音无改鬓毛衰。<br>儿童相见不相识，笑问客从何处来。</p>\n<h2 id=\"《登鹳雀楼》-王之涣\"><a href=\"#《登鹳雀楼》-王之涣\" class=\"headerlink\" title=\"《登鹳雀楼》 王之涣\"></a>《登鹳雀楼》 王之涣</h2><p>白日依山尽，黄河入海流。<br>欲穷千里目，更上一层楼。</p>\n<h2 id=\"《凉州词》-王之涣\"><a href=\"#《凉州词》-王之涣\" class=\"headerlink\" title=\"《凉州词》 王之涣\"></a>《凉州词》 王之涣</h2><p>黄河远上白云间，一片孤城万仞山。<br>羌笛何须怨杨柳，春风不度玉门关。</p>\n<h2 id=\"《春晓》-孟浩然\"><a href=\"#《春晓》-孟浩然\" class=\"headerlink\" title=\"《春晓》 孟浩然\"></a>《春晓》 孟浩然</h2><p>春眠不觉晓，处处闻啼鸟。<br>夜来风雨声，花落知多少。</p>\n<h2 id=\"《过故人庄》-孟浩然\"><a href=\"#《过故人庄》-孟浩然\" class=\"headerlink\" title=\"《过故人庄》 孟浩然\"></a>《过故人庄》 孟浩然</h2><p>故人具鸡黍，邀我至田家。<br>绿树村边合，青山郭外斜。<br>开轩面场圃，把酒话桑麻。<br>待到重阳日，还来就菊花。</p>\n<h2 id=\"《出塞-其一》-王昌龄\"><a href=\"#《出塞-其一》-王昌龄\" class=\"headerlink\" title=\"《出塞 其一》 王昌龄\"></a>《出塞 其一》 王昌龄</h2><p>秦时明月汉时关，万里长征人未还。<br>但使龙城飞将在，不教胡马度阴山。</p>\n<h2 id=\"《从军行-其四》-王昌龄\"><a href=\"#《从军行-其四》-王昌龄\" class=\"headerlink\" title=\"《从军行 其四》 王昌龄\"></a>《从军行 其四》 王昌龄</h2><p>青海长云暗雪山，孤城遥望玉门关。<br>黄沙百战穿金甲，不破楼兰终不还。</p>\n<h2 id=\"《芙蓉楼送辛渐》-王昌龄\"><a href=\"#《芙蓉楼送辛渐》-王昌龄\" class=\"headerlink\" title=\"《芙蓉楼送辛渐》 王昌龄\"></a>《芙蓉楼送辛渐》 王昌龄</h2><p>寒雨连江夜入吴，平明送客楚山孤。<br>洛阳亲友如相问，一片冰心在玉壶。</p>\n<h2 id=\"《闺怨》-王昌龄\"><a href=\"#《闺怨》-王昌龄\" class=\"headerlink\" title=\"《闺怨》 王昌龄\"></a>《闺怨》 王昌龄</h2><p>闺中少妇不知愁，春日凝妆上翠楼。<br>忽见陌头杨柳色，悔教夫婿觅封侯。</p>\n<h2 id=\"《凉州词》-王翰\"><a href=\"#《凉州词》-王翰\" class=\"headerlink\" title=\"《凉州词》 王翰\"></a>《凉州词》 王翰</h2><p>葡萄美酒夜光杯，欲饮琵琶马上催。<br>醉卧沙场君莫笑，古来征战几人回？</p>\n<h2 id=\"《九月九忆山东兄弟》-王维\"><a href=\"#《九月九忆山东兄弟》-王维\" class=\"headerlink\" title=\"《九月九忆山东兄弟》 王维\"></a>《九月九忆山东兄弟》 王维</h2><p>独在异乡为异客，每逢佳节倍思亲。<br>遥知兄弟登高处，遍插茱（zhū）萸少一人。</p>\n<h2 id=\"《山居秋暝》-王维\"><a href=\"#《山居秋暝》-王维\" class=\"headerlink\" title=\"《山居秋暝》 王维\"></a>《山居秋暝》 王维</h2><p>空山新雨后，天气晚来秋。<br>明月松间照，清泉石上流。<br>竹喧归浣女，莲动下渔舟。<br>随意春芳歇，王孙自可留。</p>\n<h2 id=\"《相思》-王维\"><a href=\"#《相思》-王维\" class=\"headerlink\" title=\"《相思》 王维\"></a>《相思》 王维</h2><p>红豆生南国，春来发几枝。<br>愿君多采撷，此物最相思。</p>\n<h2 id=\"《送元二使安西》-王维\"><a href=\"#《送元二使安西》-王维\" class=\"headerlink\" title=\"《送元二使安西》 王维\"></a>《送元二使安西》 王维</h2><p>渭城朝雨浥轻尘，客舍青青柳色新。<br>劝君更尽一杯酒，西出阳关无故人。</p>\n<h2 id=\"《使至塞上》-王维\"><a href=\"#《使至塞上》-王维\" class=\"headerlink\" title=\"《使至塞上》 王维\"></a>《使至塞上》 王维</h2><p>单车欲问边，属国过居延。<br>征蓬出汉塞，归雁入胡天。<br>大漠孤烟直，长河落日圆。<br>萧关逢候骑，都护在燕然。</p>\n<h2 id=\"《早发白帝城》-李白\"><a href=\"#《早发白帝城》-李白\" class=\"headerlink\" title=\"《早发白帝城》 李白\"></a>《早发白帝城》 李白</h2><p>朝辞白帝彩云间，千里江陵一日还。<br>两岸猿声啼不住，轻舟已过万重山。</p>\n<h2 id=\"《峨眉山月歌》-李白\"><a href=\"#《峨眉山月歌》-李白\" class=\"headerlink\" title=\"《峨眉山月歌》 李白\"></a>《峨眉山月歌》 李白</h2><p>峨眉山月半轮秋，影入平羌江水流。<br>夜发清溪向三峡，思君不见下渝州。</p>\n<h2 id=\"《度荆门送别》-李白\"><a href=\"#《度荆门送别》-李白\" class=\"headerlink\" title=\"《度荆门送别》 李白\"></a>《度荆门送别》 李白</h2><p>渡远荆门外，来从楚国游。<br>山随平野尽，江入大荒流。<br>月下飞天镜，云生结海楼。<br>仍怜故乡水，万里送行舟。</p>\n<h2 id=\"《望庐山瀑布》-李白\"><a href=\"#《望庐山瀑布》-李白\" class=\"headerlink\" title=\"《望庐山瀑布》 李白\"></a>《望庐山瀑布》 李白</h2><p>日照香炉生紫烟，遥看瀑布挂前川。<br>飞流直下三千尺，疑是银河落九天。</p>\n<h2 id=\"《黄鹤楼送孟浩然之广陵》-李白\"><a href=\"#《黄鹤楼送孟浩然之广陵》-李白\" class=\"headerlink\" title=\"《黄鹤楼送孟浩然之广陵》 李白\"></a>《黄鹤楼送孟浩然之广陵》 李白</h2><p>故人西辞黄鹤楼，烟花三月下扬州。<br>孤帆远影碧空尽，唯见长江天际流。</p>\n<h2 id=\"《蜀道难》-李白\"><a href=\"#《蜀道难》-李白\" class=\"headerlink\" title=\"《蜀道难》 李白\"></a>《蜀道难》 李白</h2><p>噫吁嚱，危乎高哉！蜀道之难，难于上青天！<br>蚕丛及鱼凫，开国何茫然！<br>尔来四万八千岁，不与秦塞通人烟。<br>西当太白有鸟道，可以横绝峨眉巅。<br>地崩山摧壮士死，然后天梯石栈相钩连。<br>上有六龙回日之高标，下有冲波逆折之回川。<br>黄鹤之飞尚不得过， 猿揉欲度愁攀援。<br>青泥何盘盘，百步九折萦岩峦。<br>扪参历井仰胁息，以手抚膺坐长叹。<br>问君西游何时还？畏途巉岩不可攀。<br>但见悲鸟号古木，雄飞雌从绕林间。<br>又闻子规啼月夜，愁空山。<br>蜀道之难，难于上青天，使人听此凋朱颜！<br>连峰去天不盈尺，枯松倒挂倚绝壁。<br>飞湍瀑流争喧豗，砯（pīng）崖转石万壑雷。<br>其险也如此，嗟尔远道之人胡为乎来哉！<br>剑阁峥嵘而崔嵬，一夫当关，万夫莫开。<br>所守或匪亲，化为狼与豺。<br>朝避猛虎，夕避长蛇。<br>磨牙吮血，杀人如麻。<br>锦城虽云乐，不如早还家。<br>蜀道之难，难于上青天，侧身西望常咨嗟！</p>\n<h2 id=\"《宣州谢朓（tiao）楼饯别校书叔云》-李白\"><a href=\"#《宣州谢朓（tiao）楼饯别校书叔云》-李白\" class=\"headerlink\" title=\"《宣州谢朓（tiǎo）楼饯别校书叔云》 李白\"></a>《宣州谢朓（tiǎo）楼饯别校书叔云》 李白</h2><p>弃我去者，昨日之日不可留，<br>乱我心者，今日之日多烦忧。<br>长风万里送秋雁，对此可以酣高楼。<br>蓬莱文章建安骨，中间小谢又清发。<br>俱怀逸兴壮思飞， 欲上青天揽明月。<br>抽刀断水水更流，举杯消愁愁更愁。<br>人生在世不称意，明朝散发弄扁舟。</p>\n<h2 id=\"《将（qiang）进酒》-李白\"><a href=\"#《将（qiang）进酒》-李白\" class=\"headerlink\" title=\"《将（qiāng）进酒》 李白\"></a>《将（qiāng）进酒》 李白</h2><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。<br>人生得意须尽欢，莫使金樽空对月。<br>天生我材必有用，千金散尽还复来。<br>烹羊宰牛且为乐，会须一饮三百杯。<br>岑夫子，丹丘生，将进酒，杯莫停。<br>与君歌一曲，请君为我倾耳听。<br>钟鼓馔玉不足贵，但愿长醉不复醒。<br>古来圣贤皆寂寞，惟有饮者留其名。<br>陈王昔时宴平乐，斗酒十千恣欢谑（xuè）。<br>主人何为言少钱，径须沽取对君酌。<br>五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。</p>\n<h2 id=\"《月下独酌》-李白\"><a href=\"#《月下独酌》-李白\" class=\"headerlink\" title=\"《月下独酌》 李白\"></a>《月下独酌》 李白</h2><p>花间一壶酒，独酌无相亲。<br>举杯邀明月，对影成三人。<br>月既不解饮，影徒随我身。<br>暂伴月将影，行乐须及春。<br>我歌月徘徊，我舞影零乱。<br>醒时相交欢，醉后各分散。<br>永结无情游，相期邈云汉。</p>\n<h2 id=\"《春夜洛城闻笛》-李白\"><a href=\"#《春夜洛城闻笛》-李白\" class=\"headerlink\" title=\"《春夜洛城闻笛》 李白\"></a>《春夜洛城闻笛》 李白</h2><p>谁家玉笛暗飞声，散入春风满洛城。<br>此夜曲中闻折柳，何人不起故园情。</p>\n<h2 id=\"《闻王昌龄左迁龙标，遥有此寄》-李白\"><a href=\"#《闻王昌龄左迁龙标，遥有此寄》-李白\" class=\"headerlink\" title=\"《闻王昌龄左迁龙标，遥有此寄》 李白\"></a>《闻王昌龄左迁龙标，遥有此寄》 李白</h2><p>杨花落尽子规啼，闻道龙标过五溪。<br>我寄愁心与明月，随风直到夜郎西。</p>\n<h2 id=\"《望天门山》-李白\"><a href=\"#《望天门山》-李白\" class=\"headerlink\" title=\"《望天门山》 李白\"></a>《望天门山》 李白</h2><p>天门中断楚江开，碧水东流至此回。<br>两岸青山相对出，孤帆一片日边来。</p>\n<h2 id=\"《行路难三首-其一》-李白\"><a href=\"#《行路难三首-其一》-李白\" class=\"headerlink\" title=\"《行路难三首 其一》 李白\"></a>《行路难三首 其一》 李白</h2><p>金樽清酒斗十千，玉盘珍羞直万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川， 将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海！</p>\n<h2 id=\"《梦游天姥吟留别》-李白\"><a href=\"#《梦游天姥吟留别》-李白\" class=\"headerlink\" title=\"《梦游天姥吟留别》 李白\"></a>《梦游天姥吟留别》 李白</h2><p>海客谈瀛洲，烟涛微茫信难求。<br>越人语天姥，云霞明灭或可睹。<br>天姥连天向天横，势拔五岳掩赤城。<br>天台四万八千丈，对此欲倒东南倾。<br>我欲因之梦吴越，一夜飞度镜湖月。<br>湖月照我影，送我至剡溪。<br>谢公宿处今尚在，渌水荡漾清猿啼。<br>脚著谢公屐。身登青云梯。<br>半壁见海日，空中闻天鸡。<br>千岩万转路不定，迷花倚石忽已暝。<br>熊咆龙吟殷岩泉，栗深林兮惊层巅。<br>云青青兮欲雨，水澹澹兮生烟。<br>列缺霹雳，丘峦崩摧。洞天石扉，訇然中开。<br>青冥浩荡不见底，日月照耀金银台。<br>霓为衣兮风为马，云之君兮纷纷而来下。<br>虎鼓瑟兮鸾回车，仙之人兮列如麻。<br>忽魂悸以魄动，恍惊起而长嗟。<br>惟觉时之枕席，失向来之烟霞。<br>世间行乐亦如此，古来万事东流水。<br>别君去兮何时还，且放白鹿青崖间，须行即骑访名山。<br>按摧眉折腰事权贵，使我不得开心颜。</p>\n<h2 id=\"《赠汪伦》-李白\"><a href=\"#《赠汪伦》-李白\" class=\"headerlink\" title=\"《赠汪伦》 李白\"></a>《赠汪伦》 李白</h2><p>李白乘舟将欲行，忽闻岸上踏歌声。<br>桃花潭水深千尺，不及汪伦送我情。</p>\n<h2 id=\"《次北固山下》-王湾\"><a href=\"#《次北固山下》-王湾\" class=\"headerlink\" title=\"《次北固山下》 王湾\"></a>《次北固山下》 王湾</h2><p>客路青山外，行舟绿水前。<br>潮平两岸阔，风正一帆悬。<br>海日生残夜，江春入旧年。<br>乡书何处达，归雁洛阳边。</p>\n<h2 id=\"《黄鹤楼》-崔颢（hao）\"><a href=\"#《黄鹤楼》-崔颢（hao）\" class=\"headerlink\" title=\"《黄鹤楼》 崔颢（hào）\"></a>《黄鹤楼》 崔颢（hào）</h2><p>昔人已乘黄鹤去，此地空余黄鹤楼。<br>黄鹤一去不复返，白云千载空悠悠。<br>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br>日暮乡关何处是，烟波江上使人愁。 </p>\n<h2 id=\"《别董大二首-其一》-高适\"><a href=\"#《别董大二首-其一》-高适\" class=\"headerlink\" title=\"《别董大二首 其一》 高适\"></a>《别董大二首 其一》 高适</h2><p>千里黄云白日曛，北风吹雁雪纷纷。<br>莫愁前路无知己，天下谁人不识君。</p>\n<h2 id=\"《题破山寺后禅院》-常建\"><a href=\"#《题破山寺后禅院》-常建\" class=\"headerlink\" title=\"《题破山寺后禅院》 常建\"></a>《题破山寺后禅院》 常建</h2><p>清晨入古寺，初日照高林。<br>曲径通幽处，禅房花木深。<br>山光悦鸟性，潭影空人心。<br>万籁此俱寂，但余钟磬音。</p>\n<h2 id=\"《春望》-杜甫\"><a href=\"#《春望》-杜甫\" class=\"headerlink\" title=\"《春望》 杜甫\"></a>《春望》 杜甫</h2><p>国破山河在，城春草木深。<br>感时花溅泪，恨别鸟惊心。<br>烽火连三月，家书抵万金。<br>白头搔更短，浑欲不胜簪。</p>\n<h2 id=\"《旅夜书怀》-杜甫\"><a href=\"#《旅夜书怀》-杜甫\" class=\"headerlink\" title=\"《旅夜书怀》 杜甫\"></a>《旅夜书怀》 杜甫</h2><p>细草微风岸，危樯独夜舟。<br>星垂平野阔，月涌大江流。<br>名岂文章著，官应老病休。<br>飘飘何所似，天地一沙鸥。</p>\n<h2 id=\"《江南逢李龟年》-杜甫\"><a href=\"#《江南逢李龟年》-杜甫\" class=\"headerlink\" title=\"《江南逢李龟年》 杜甫\"></a>《江南逢李龟年》 杜甫</h2><p>岐王宅里寻常见，崔九堂前几度闻。<br>正是江南好风景，落花时节又逢君。</p>\n<h2 id=\"《蜀相》-杜甫\"><a href=\"#《蜀相》-杜甫\" class=\"headerlink\" title=\"《蜀相》 杜甫\"></a>《蜀相》 杜甫</h2><p>丞相祠堂何处寻，锦官城外柏森森。<br>映阶碧草自春色，隔叶黄鹂空好音。<br>三顾频烦天下计，两朝开济老臣心。<br>出师未捷身先死，长使英雄泪满襟。</p>\n<h2 id=\"《春夜喜雨》-杜甫\"><a href=\"#《春夜喜雨》-杜甫\" class=\"headerlink\" title=\"《春夜喜雨》 杜甫\"></a>《春夜喜雨》 杜甫</h2><p>好雨知时节，当春乃发生。<br>随风潜入夜，润物细无声。<br>野径云俱黑，江船火独明。<br>晓看红湿处，花重谨琯城。</p>\n<h2 id=\"《客至》-杜甫\"><a href=\"#《客至》-杜甫\" class=\"headerlink\" title=\"《客至》 杜甫\"></a>《客至》 杜甫</h2><p>舍南舍北皆春水，但见群鸥日日来。<br>花径不曾缘客扫，蓬门今始为君开。<br>盘飧市远无兼味，樽酒家贫只旧醅。<br>肯与邻翁相对饮， 隔篱呼取尽余杯。</p>\n<h2 id=\"《茅屋为秋风所破歌》-杜甫\"><a href=\"#《茅屋为秋风所破歌》-杜甫\" class=\"headerlink\" title=\"《茅屋为秋风所破歌》 杜甫\"></a>《茅屋为秋风所破歌》 杜甫</h2><p>八月秋高风怒号，卷我屋上三重茅。<br>茅飞渡江洒江郊，高者挂罥长林梢，下着飘转沉塘坳。<br>南村群童欺我老无力，忍能对面为盗贼。<br>公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。<br>俄顷风定云墨色，秋天漠漠向昏黑。<br>布衾多年冷似铁，娇儿恶卧踏里裂。<br>床头屋漏无干处，雨脚如麻未断绝。<br>自经丧乱少睡眠，长夜沾湿何由彻！<br>安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！<br>呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足。</p>\n<h2 id=\"《赠花卿》-杜甫\"><a href=\"#《赠花卿》-杜甫\" class=\"headerlink\" title=\"《赠花卿》 杜甫\"></a>《赠花卿》 杜甫</h2><p>锦城丝管日纷纷，半入江风半入云。<br>此曲只应天上有，人间能得几回闻。</p>\n<h2 id=\"《登岳阳楼》-杜甫\"><a href=\"#《登岳阳楼》-杜甫\" class=\"headerlink\" title=\"《登岳阳楼》 杜甫\"></a>《登岳阳楼》 杜甫</h2><p>昔闻洞庭水，今上岳阳楼。<br>吴楚东南坼，乾坤日夜浮。<br>亲朋无一字，老病有孤舟。<br>戎马关山北，凭轩涕泗流。</p>\n<h2 id=\"《登高》-杜甫\"><a href=\"#《登高》-杜甫\" class=\"headerlink\" title=\"《登高》 杜甫\"></a>《登高》 杜甫</h2><p>风急天高猿啸哀，渚清沙白鸟飞回。<br>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。<br>艰难苦恨繁霜鬓，潦倒新停浊酒杯。</p>\n<h2 id=\"《白雪歌送武判官归京》-岑参\"><a href=\"#《白雪歌送武判官归京》-岑参\" class=\"headerlink\" title=\"《白雪歌送武判官归京》 岑参\"></a>《白雪歌送武判官归京》 岑参</h2><p>北风卷地白草折，胡天八月即飞雪。<br>忽如一夜春风来，千树万树梨花开。<br>散入珠帘湿罗幕，狐裘不暖锦衾（qīn）薄。<br>将军角弓不得控，都护铁衣冷难着。<br>瀚海阑干百丈冰，愁云惨淡万里凝。<br>中军置酒饮归客，胡琴琵琶与羌笛。<br>纷纷暮雪下辕门，风掣红旗冻不翻。<br>轮台东门送君去，去时雪满天山路。<br>山回路转不见君，雪上空留马行处。</p>\n<h2 id=\"《逢入京使》-岑参\"><a href=\"#《逢入京使》-岑参\" class=\"headerlink\" title=\"《逢入京使》 岑参\"></a>《逢入京使》 岑参</h2><p>故园东望路漫漫，双袖龙钟泪不干。<br>马上相逢无纸笔，凭君传语报平安。</p>\n<h2 id=\"《枫桥夜泊》-张继\"><a href=\"#《枫桥夜泊》-张继\" class=\"headerlink\" title=\"《枫桥夜泊》 张继\"></a>《枫桥夜泊》 张继</h2><p>月落乌啼霜满天，江枫渔火对愁眠。<br>姑苏城外寒山寺，夜半钟声到客船。</p>\n<h2 id=\"《逢雪宿芙蓉山主人》-刘长卿\"><a href=\"#《逢雪宿芙蓉山主人》-刘长卿\" class=\"headerlink\" title=\"《逢雪宿芙蓉山主人》 刘长卿\"></a>《逢雪宿芙蓉山主人》 刘长卿</h2><p>日暮苍山远，天寒白屋贫。<br>柴门闻犬吠，风雪夜归人。</p>\n<h2 id=\"《滁州西涧》-韦应物\"><a href=\"#《滁州西涧》-韦应物\" class=\"headerlink\" title=\"《滁州西涧》 韦应物\"></a>《滁州西涧》 韦应物</h2><p>独怜幽草涧边生，上有黄鹂深树鸣。<br>春潮带雨晚来急，野渡无人舟自横。</p>\n<h2 id=\"《游子吟》-孟郊\"><a href=\"#《游子吟》-孟郊\" class=\"headerlink\" title=\"《游子吟》 孟郊\"></a>《游子吟》 孟郊</h2><p>慈母手中线，游子身上衣。<br>临行密密缝，意恐迟迟归。<br>谁言寸草心，报得三春晖。</p>\n<h2 id=\"《题都城南庄》-崔护\"><a href=\"#《题都城南庄》-崔护\" class=\"headerlink\" title=\"《题都城南庄》 崔护\"></a>《题都城南庄》 崔护</h2><p>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p>\n<h2 id=\"《早春呈水部张十八员外二首-其一》-韩愈\"><a href=\"#《早春呈水部张十八员外二首-其一》-韩愈\" class=\"headerlink\" title=\"《早春呈水部张十八员外二首 其一》 韩愈\"></a>《早春呈水部张十八员外二首 其一》 韩愈</h2><p>天街小雨润如酥，草色遥看近却无。<br>最是一年春好处，绝胜烟柳满皇都。</p>\n<h2 id=\"《秋词二首-其一》-刘禹锡\"><a href=\"#《秋词二首-其一》-刘禹锡\" class=\"headerlink\" title=\"《秋词二首 其一》 刘禹锡\"></a>《秋词二首 其一》 刘禹锡</h2><p>自古逢秋悲寂寥，我言秋日胜春朝。<br>晴空一鹤排云上，便引诗情到碧霄。</p>\n<h2 id=\"《竹枝词二首-其一》-刘禹锡\"><a href=\"#《竹枝词二首-其一》-刘禹锡\" class=\"headerlink\" title=\"《竹枝词二首 其一》 刘禹锡\"></a>《竹枝词二首 其一》 刘禹锡</h2><p>杨柳青青江水平，闻郎江上唱歌声。<br>东边日出西边雨，道是无晴却有晴。</p>\n<h2 id=\"《乌衣巷》-刘禹锡\"><a href=\"#《乌衣巷》-刘禹锡\" class=\"headerlink\" title=\"《乌衣巷》 刘禹锡\"></a>《乌衣巷》 刘禹锡</h2><p>朱雀桥边野草花，乌衣巷口夕阳斜。<br>旧时王谢堂前燕，飞入寻常百姓家。</p>\n<h2 id=\"《石头城》-刘禹锡\"><a href=\"#《石头城》-刘禹锡\" class=\"headerlink\" title=\"《石头城》 刘禹锡\"></a>《石头城》 刘禹锡</h2><p>山围故国周遭在，潮打空城寂寞回。<br>淮水东边旧时月，夜深还过女墙来。</p>\n<h2 id=\"《酬乐天扬州初逢席上见赠》-刘禹锡\"><a href=\"#《酬乐天扬州初逢席上见赠》-刘禹锡\" class=\"headerlink\" title=\"《酬乐天扬州初逢席上见赠》 刘禹锡\"></a>《酬乐天扬州初逢席上见赠》 刘禹锡</h2><p>巴山楚水凄凉地，二十三年弃置身。<br>怀旧空吟闻笛赋，到乡翻似烂柯人。<br>沉舟侧畔千帆过，病树前头万木春。<br>今日听君歌一曲，暂凭杯酒长精神。</p>\n<h2 id=\"《赠的古原草送别》-白居易\"><a href=\"#《赠的古原草送别》-白居易\" class=\"headerlink\" title=\"《赠的古原草送别》 白居易\"></a>《赠的古原草送别》 白居易</h2><p>离离原上草，一岁一枯荣。<br>野火烧不尽，春风吹又生。<br>远芳侵古道，晴翠接荒城。<br>又送王孙去，萋萋满别情。</p>\n<h2 id=\"《长恨歌》-白居易\"><a href=\"#《长恨歌》-白居易\" class=\"headerlink\" title=\"《长恨歌》 白居易\"></a>《长恨歌》 白居易</h2><p>汉皇重色思倾国，御宇多年求不得。<br>杨家有女初长成，养在深闺人未识。<br>天生丽质难自弃，一朝选在君王侧。<br>回眸一笑百媚生，六宫粉黛无颜色。<br>春寒赐浴华清池，温泉水滑洗凝脂。<br>侍儿扶起娇无力，始是新承恩泽时。<br>云鬓花颜金步摇，芙蓉帐暖度春宵。<br>春宵苦短日高起，从此君王不早朝。<br>承欢侍宴无闲暇，春从春游夜专夜。<br>后宫佳丽三千人，三千宠爱在一身。<br>金屋妆成娇侍夜，玉楼宴罢醉和春。<br>姊妹弟兄皆列土，可怜光彩生门户。<br>遂令天下父母心，不重生男重生女。<br>骊宫高处入青云，仙乐风飘处处闻。<br>缓歌慢舞凝丝竹，尽日君王不看足。<br>渔阳鼙（pí）鼓动地来，惊破霓裳羽衣曲。<br>九重城阙烟尘生，千乘万骑西南行。<br>翠华摇摇行复止，西出都门百余里。<br>六军不发无奈何，宛转蛾眉马前死。<br>花钿委地无人收，翠翘金雀玉搔头。<br>君王掩面救不得，回看血泪相和流。<br>黄埃散漫风萧索，云栈萦纡登剑阁。<br>峨眉山下少人行，旌旗无光日色薄。<br>行宫见月伤心色，夜雨闻铃肠断声。<br>天旋地转回龙驭，到此踌躇不能去。<br>马嵬坡下泥土中，不见玉颜空死处。<br>君臣相顾尽沾衣，东望都门信马归。<br>归来池苑皆依旧，太液芙蓉未央柳。<br>芙蓉如面柳如眉，对此如何不泪垂。<br>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南内多秋草，落叶满阶红不扫。<br>梨园弟子白发新，椒房阿监青娥老。<br>夕殿萤飞思悄然，孤灯挑尽未成眠。<br>迟迟钟鼓初长夜，耿耿星河欲曙天。<br>鸳鸯瓦冷霜华重，翡翠衾（qīn）寒谁与共。<br>悠悠生死别经年，魂魄不曾来入梦。<br>临邛（qióng）道士鸿都客，能以精诚致魂魄。<br>为感君王展转思，遂教方士殷勤觅。<br>排空驭气奔如电，升天入地求之遍。<br>上穷碧落下黄泉，两处茫茫皆不见。<br>忽闻海上有仙山，山在虚无缥缈间。<br>楼阁玲珑五云起，其中绰（chuò）约多仙子。<br>中有一人字太真，雪肤花貌参差是。<br>金阙西厢叩玉扃（jiōng），转教小玉报双成。<br>闻道汉家天子使，九华帐里梦魂惊。<br>揽衣推枕起徘徊，珠箔银屏迤（yǐ）逦开。<br>云鬓半偏新睡觉，花冠不整下堂来。<br>风吹仙袂飘飘举，犹似霓裳羽衣舞。<br>玉容寂寞泪阑干，梨花一枝春带雨。<br>含情凝睇谢君王，一别音容两渺茫。<br>昭阳殿里恩爱绝，蓬莱宫中日月长。<br>回头下望人寰（huán）处，不见长安见尘雾。<br>惟将旧物表深情，钿合金钗寄将去。<br>钗留一股合一扇，钗擘黄金合分钿。<br>但教心似金钿坚，天上人间会相见。<br>临别殷勤重寄词，词中有誓两心知。<br>七月七日长生殿，半夜无人私语时。<br>在天愿作比翼鸟，在地愿为连理枝。<br>天长地久有时尽，此恨绵绵无绝期。</p>\n<h2 id=\"《琵琶行》-白居易\"><a href=\"#《琵琶行》-白居易\" class=\"headerlink\" title=\"《琵琶行》 白居易\"></a>《琵琶行》 白居易</h2><p>浔阳江头夜送客，枫叶荻花秋瑟瑟。<br>主人下马客在船，举酒欲饮无管弦。<br>醉不成欢惨将别，别时茫茫江浸月。<br>忽闻水上琵琶声，主人忘归客不发。<br>寻声暗问弹者谁，琵琶声停欲语迟。<br>移船相近邀相见，添酒回灯重开宴。<br>千呼万唤始出来，犹抱琵琶半遮面。<br>转轴拨弦三两声，未成曲调先有情。<br>弦弦掩抑声声思，似诉平生不得志。<br>低眉信手续续弹，说尽心中无限事。<br>轻拢慢捻抹复挑，初为霓裳后六幺。<br>大弦嘈嘈如急雨，小弦切切如私语。<br>嘈嘈切切错杂弹，大珠小珠落玉盘。<br>间关莺语花底滑，幽咽泉流冰下难。<br>冰泉冷涩弦凝绝，凝绝不通声暂歇。<br>别有幽愁暗恨生，此时无声胜有声。<br>银瓶乍破水浆迸，铁骑突出刀枪鸣。<br>曲终收拨当心画，四弦一声如裂帛。<br>东船西舫悄无言，唯见江心秋月白。<br>沉吟放拨插弦中，整顿衣裳起敛容。<br>自言本是京城女，家在虾蟆陵下住。<br>十三学得琵琶成，名属教坊第一部。<br>曲罢曾教善才服，妆成每被秋娘妒。<br>五陵年少争缠头，一曲红绡不知数。<br>钿头云篦击节碎，血色罗裙翻酒污。<br>今年欢笑复明年，秋月春风等闲度。<br>弟走从军阿姨死，暮去朝来颜色故。<br>门前冷落鞍马稀，老大嫁作商人妇。<br>商人重利轻别离，前月浮梁买茶去。<br>去来江口守空船，绕船月明江水寒。<br>深夜忽梦少年事，梦啼妆泪红阑干。<br>我闻琵琶已叹息，又闻此语重唧唧。<br>同是天涯沦落人，相逢何必曾相识。<br>我从去年辞帝京，谪居卧病浔阳城。<br>浔阳地僻无音乐，终岁不闻丝竹声。<br>住近湓江地低湿，黄芦苦竹绕宅生。<br>其间旦暮闻何物，杜鹃啼血猿哀鸣。<br>春江花朝秋月夜，往往取酒还独倾。<br>岂无山歌与村笛，呕哑嘲哳难为听。<br>今夜闻君琵琶语，如听仙乐耳暂明。<br>莫辞更坐弹一曲，为君翻作琵琶行。<br>感我此言良久立，却坐促弦弦转急。<br>凄凄不似向前声，满座重闻皆掩泣。<br>座中泣下谁最多，江州司马青衫湿。</p>\n<h2 id=\"《钱塘江春行》-白居易\"><a href=\"#《钱塘江春行》-白居易\" class=\"headerlink\" title=\"《钱塘江春行》 白居易\"></a>《钱塘江春行》 白居易</h2><p>孤山寺北贾亭西，水面初平云脚低。<br>几处早莺争暖树，谁家新燕啄春泥。<br>乱花渐欲迷人眼，浅草才能没马蹄。<br>最爱湖东行不足，绿杨阴里白沙堤。</p>\n<h2 id=\"《江雪》-柳宗元\"><a href=\"#《江雪》-柳宗元\" class=\"headerlink\" title=\"《江雪》 柳宗元\"></a>《江雪》 柳宗元</h2><p>千山鸟飞绝，万径人踪灭。<br>孤舟蓑笠翁，独钓寒江雪。</p>\n<h2 id=\"《闻乐天授江州司马》-元稹（zhen）\"><a href=\"#《闻乐天授江州司马》-元稹（zhen）\" class=\"headerlink\" title=\"《闻乐天授江州司马》 元稹（zhěn）\"></a>《闻乐天授江州司马》 元稹（zhěn）</h2><p>残灯无焰影幢幢，此夕闻君谪九江。<br>垂死病中惊坐起，暗风吹雨入寒窗。</p>\n<h2 id=\"《离思五首-其四》-元稹\"><a href=\"#《离思五首-其四》-元稹\" class=\"headerlink\" title=\"《离思五首 其四》 元稹\"></a>《离思五首 其四》 元稹</h2><p>曾经沧海难为水，除却巫山不是云。<br>取次花丛懒回顾，半缘修道半缘君。</p>\n<h2 id=\"《题鹤林寺僧舍》-李涉\"><a href=\"#《题鹤林寺僧舍》-李涉\" class=\"headerlink\" title=\"《题鹤林寺僧舍》 李涉\"></a>《题鹤林寺僧舍》 李涉</h2><p>终日昏昏醉梦间，忽闻春尽强登山。<br>因过竹院逢僧话，又得浮生半日闲。</p>\n<h2 id=\"《陇西行》-陈陶\"><a href=\"#《陇西行》-陈陶\" class=\"headerlink\" title=\"《陇西行》 陈陶\"></a>《陇西行》 陈陶</h2><p>誓扫匈奴不顾身，五千貂锦丧胡尘。<br>可怜无定河边骨，犹是春闺梦里人。</p>\n<h2 id=\"《寻隐者不遇》-贾岛\"><a href=\"#《寻隐者不遇》-贾岛\" class=\"headerlink\" title=\"《寻隐者不遇》 贾岛\"></a>《寻隐者不遇》 贾岛</h2><p>松下问童子，言师采药去。<br>只在此山中，云深不知处。</p>\n<h2 id=\"《近试上张水部》-朱庆馀\"><a href=\"#《近试上张水部》-朱庆馀\" class=\"headerlink\" title=\"《近试上张水部》 朱庆馀\"></a>《近试上张水部》 朱庆馀</h2><p>洞房昨夜停红烛，待晓堂前拜舅姑。<br>妆罢低声问夫婿：画眉深浅入时无？</p>\n<h2 id=\"《雁门太守行》-李贺\"><a href=\"#《雁门太守行》-李贺\" class=\"headerlink\" title=\"《雁门太守行》 李贺\"></a>《雁门太守行》 李贺</h2><p>黑云压城城欲摧，甲光向日金鳞开。<br>角声满天秋色里，塞上燕脂凝夜紫。<br>半卷红旗临易水，霜重鼓寒声不起。<br>报君黄金台上意，提携玉龙为君死。</p>\n<h2 id=\"《寄扬州韩绰判官》-杜牧\"><a href=\"#《寄扬州韩绰判官》-杜牧\" class=\"headerlink\" title=\"《寄扬州韩绰判官》 杜牧\"></a>《寄扬州韩绰判官》 杜牧</h2><p>青山隐隐水迢迢，秋尽江南草未凋。<br>二十四桥明月夜，玉人何处教吹箫。</p>\n<h2 id=\"《山行》-杜牧\"><a href=\"#《山行》-杜牧\" class=\"headerlink\" title=\"《山行》 杜牧\"></a>《山行》 杜牧</h2><p>远上寒山石径斜，白云深处有人家。<br>停车坐爱枫林晚，霜叶红于二月花。</p>\n<h2 id=\"《过华清宫绝句三首-其一》-杜牧\"><a href=\"#《过华清宫绝句三首-其一》-杜牧\" class=\"headerlink\" title=\"《过华清宫绝句三首 其一》 杜牧\"></a>《过华清宫绝句三首 其一》 杜牧</h2><p>长安回望绣成堆，山顶千门次第开。<br>一骑红尘妃子笑，无人知是荔枝来。</p>\n<h2 id=\"《赤壁》-杜牧\"><a href=\"#《赤壁》-杜牧\" class=\"headerlink\" title=\"《赤壁》 杜牧\"></a>《赤壁》 杜牧</h2><p>折戟沉沙铁未销，自将磨洗认前朝。<br>东风不与周郎便，铜雀春深锁二乔。</p>\n<h2 id=\"《江南春》-杜牧\"><a href=\"#《江南春》-杜牧\" class=\"headerlink\" title=\"《江南春》 杜牧\"></a>《江南春》 杜牧</h2><p>千里莺啼绿映红，水村山郭酒旗风。<br>南朝四百八十寺，多少楼台烟雨中。</p>\n<h2 id=\"《泊秦淮》-杜牧\"><a href=\"#《泊秦淮》-杜牧\" class=\"headerlink\" title=\"《泊秦淮》 杜牧\"></a>《泊秦淮》 杜牧</h2><p>烟笼寒水月笼沙，夜泊秦淮近酒家。<br>商女不知亡国恨，隔江犹唱后庭花。</p>\n<h2 id=\"《清明》-杜牧\"><a href=\"#《清明》-杜牧\" class=\"headerlink\" title=\"《清明》 杜牧\"></a>《清明》 杜牧</h2><p>清明时节雨纷纷，路上行人欲断魂。<br>借问酒家何处有？牧童遥指杏花村。</p>\n<h2 id=\"《锦瑟》-李商隐\"><a href=\"#《锦瑟》-李商隐\" class=\"headerlink\" title=\"《锦瑟》 李商隐\"></a>《锦瑟》 李商隐</h2><p>锦瑟无端五十弦，一弦一柱思华年。<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。<br>此情可待成追忆，只是当时已惘然。</p>\n<h2 id=\"《无题》-李商隐\"><a href=\"#《无题》-李商隐\" class=\"headerlink\" title=\"《无题》 李商隐\"></a>《无题》 李商隐</h2><p>相见时难别亦难，东风无力百花残。<br>春蚕到死丝方尽，蜡炬成灰泪始干。<br>晓镜但愁云鬓改，夜吟应觉月光寒。<br>蓬山此去无多路，青鸟殷勤为探看。</p>\n<h2 id=\"《无题二首-其一》-李商隐\"><a href=\"#《无题二首-其一》-李商隐\" class=\"headerlink\" title=\"《无题二首 其一》 李商隐\"></a>《无题二首 其一》 李商隐</h2><p>昨夜星辰昨夜风，画楼西畔桂堂东。<br>身无彩凤双飞翼，心有灵犀一点通。<br>隔座送钩春酒暖，分曹射覆蜡灯红。<br>嗟余听鼓应官去，走马兰台类转蓬。</p>\n<h2 id=\"《登乐游原》-李商隐\"><a href=\"#《登乐游原》-李商隐\" class=\"headerlink\" title=\"《登乐游原》 李商隐\"></a>《登乐游原》 李商隐</h2><p>向晚意不适，驱车登古原。<br>夕阳无限好，只是近黄昏。</p>\n<h2 id=\"《夜雨寄北》-李商隐\"><a href=\"#《夜雨寄北》-李商隐\" class=\"headerlink\" title=\"《夜雨寄北》 李商隐\"></a>《夜雨寄北》 李商隐</h2><p>君问归期未有期，巴山夜雨涨秋池。<br>何当共剪西窗烛，却话巴山夜雨时。</p>\n<h2 id=\"《林逋》-梅花\"><a href=\"#《林逋》-梅花\" class=\"headerlink\" title=\"《林逋》 梅花\"></a>《林逋》 梅花</h2><p>众芳摇落独暄妍，占尽风情向小园。<br>疏影横斜水清浅，暗香浮动月黄昏。<br>霜禽欲下先偷眼，粉蝶如知合断魂。<br>幸有微吟可相狎，不须檀（tán）板共金尊。</p>\n<h2 id=\"《泊船瓜州》-王安石\"><a href=\"#《泊船瓜州》-王安石\" class=\"headerlink\" title=\"《泊船瓜州》 王安石\"></a>《泊船瓜州》 王安石</h2><p>京口瓜洲一水间，钟山只隔数重山。<br>春风又绿江南岸，明月何时照我还。</p>\n<h2 id=\"《梅花》-王安石\"><a href=\"#《梅花》-王安石\" class=\"headerlink\" title=\"《梅花》 王安石\"></a>《梅花》 王安石</h2><p>墙角数枝梅，凌寒独自开。<br>遥知不是雪，为有暗香来。</p>\n<h2 id=\"《饮湖上初晴后雨-其二》-苏轼\"><a href=\"#《饮湖上初晴后雨-其二》-苏轼\" class=\"headerlink\" title=\"《饮湖上初晴后雨 其二》 苏轼\"></a>《饮湖上初晴后雨 其二》 苏轼</h2><p>水光潋滟晴方好，山色空蒙雨亦奇。<br>欲把西湖比西子，淡妆浓抹总相宜。</p>\n<h2 id=\"《题西林壁》-苏轼\"><a href=\"#《题西林壁》-苏轼\" class=\"headerlink\" title=\"《题西林壁》 苏轼\"></a>《题西林壁》 苏轼</h2><p>横看成岭侧成峰，远近高低各不同。<br>不识庐山真面目，只缘身在此山中。</p>\n<h2 id=\"《惠崇春江晚景》-苏轼\"><a href=\"#《惠崇春江晚景》-苏轼\" class=\"headerlink\" title=\"《惠崇春江晚景》 苏轼\"></a>《惠崇春江晚景》 苏轼</h2><p>竹外桃花三两枝，春江水暖鸭先知。<br>蒌蒿满地芦芽短，正是河豚欲上时。</p>\n<h2 id=\"《小池》-杨万里\"><a href=\"#《小池》-杨万里\" class=\"headerlink\" title=\"《小池》 杨万里\"></a>《小池》 杨万里</h2><p>泉眼无声惜细流，树阴照水爱晴柔。<br>小荷才露尖尖角，早有蜻蜓立上头。</p>\n<h2 id=\"《晓出净慈寺送林子方》-杨万里\"><a href=\"#《晓出净慈寺送林子方》-杨万里\" class=\"headerlink\" title=\"《晓出净慈寺送林子方》 杨万里\"></a>《晓出净慈寺送林子方》 杨万里</h2><p>毕竟西湖六月中，风光不与四时同。<br>接天莲叶无穷碧，映日荷花别样红。</p>\n<h2 id=\"《游山西村》-陆游\"><a href=\"#《游山西村》-陆游\" class=\"headerlink\" title=\"《游山西村》 陆游\"></a>《游山西村》 陆游</h2><p>莫笑农家腊酒浑，丰年留客足鸡豚。<br>山重水复疑无路，柳暗花明又一村。<br>箫鼓追随春社近，衣冠简朴古风存。<br>从今若许闲乘月，拄杖无时夜叩门。</p>\n<h2 id=\"《书愤》-陆游\"><a href=\"#《书愤》-陆游\" class=\"headerlink\" title=\"《书愤》 陆游\"></a>《书愤》 陆游</h2><p>早岁那知世事艰，中原北望气如山。<br>楼船夜雪瓜洲渡，铁马秋风大散关。<br>塞上长城空自许，镜中衰鬓已先斑。<br>出师一表真名世，千载谁堪伯仲间。</p>\n<h2 id=\"《十一月四日风雨大作二首-其二》-陆游\"><a href=\"#《十一月四日风雨大作二首-其二》-陆游\" class=\"headerlink\" title=\"《十一月四日风雨大作二首 其二》 陆游\"></a>《十一月四日风雨大作二首 其二》 陆游</h2><p>僵卧孤村不自哀，尚思为国戍轮台。<br>夜阑卧听风吹雨，铁马冰河入梦来。</p>\n<h2 id=\"《示儿》-陆游\"><a href=\"#《示儿》-陆游\" class=\"headerlink\" title=\"《示儿》 陆游\"></a>《示儿》 陆游</h2><p>死去元知万事空，但悲不见九州同。<br>王师北定中原日，家祭无忘告乃翁。</p>\n<h2 id=\"《春日》-朱熹\"><a href=\"#《春日》-朱熹\" class=\"headerlink\" title=\"《春日》 朱熹\"></a>《春日》 朱熹</h2><p>胜日寻芳泗水滨，无边光景一时新。<br>等闲识得东风面，万紫千红总是春。</p>\n<h2 id=\"《观书有感二首-其一》-朱熹\"><a href=\"#《观书有感二首-其一》-朱熹\" class=\"headerlink\" title=\"《观书有感二首 其一》 朱熹\"></a>《观书有感二首 其一》 朱熹</h2><p>半亩方塘一鉴开，天光云影共徘徊。<br>问渠那得清如许，为有源头活水来。</p>\n<h2 id=\"《题临安邸》-林升\"><a href=\"#《题临安邸》-林升\" class=\"headerlink\" title=\"《题临安邸》 林升\"></a>《题临安邸》 林升</h2><p>山外青山楼外楼，西湖歌舞几时休？<br>暖风熏得游人醉，直把杭州作汴州。</p>\n<h2 id=\"《游园不值》-叶绍翁\"><a href=\"#《游园不值》-叶绍翁\" class=\"headerlink\" title=\"《游园不值》 叶绍翁\"></a>《游园不值》 叶绍翁</h2><p>应怜屐齿印苍苔，小扣柴扉久不开。<br>春色满园关不住，一枝红杏出墙来。</p>\n<h2 id=\"《过零丁洋》-文天祥\"><a href=\"#《过零丁洋》-文天祥\" class=\"headerlink\" title=\"《过零丁洋》 文天祥\"></a>《过零丁洋》 文天祥</h2><p>辛苦遭逢起一经，干戈寥落四周星。<br>山河破碎风飘絮，身世浮沉雨打萍。<br>惶恐滩头说惶恐，零丁洋里叹零丁。<br>人生自古谁无死，留取丹心照汗青。</p>\n<h2 id=\"《墨梅》-王冕\"><a href=\"#《墨梅》-王冕\" class=\"headerlink\" title=\"《墨梅》 王冕\"></a>《墨梅》 王冕</h2><p>我家洗砚池头树，朵朵花开淡墨痕。<br>不要人夸好颜色，只留清气满乾坤。</p>\n<h2 id=\"《石灰吟》-于谦\"><a href=\"#《石灰吟》-于谦\" class=\"headerlink\" title=\"《石灰吟》 于谦\"></a>《石灰吟》 于谦</h2><p>千锤万击出深山，烈火焚烧若等闲。<br>粉身碎骨浑不怕，要留清白在人间。</p>\n<h2 id=\"《竹石》-郑板桥\"><a href=\"#《竹石》-郑板桥\" class=\"headerlink\" title=\"《竹石》 郑板桥\"></a>《竹石》 郑板桥</h2><p>咬定青山不放松，立根原在破岩中。<br>千磨万击还坚劲，任尔东西南北风。</p>\n<h2 id=\"《论诗五首-其二》-赵翼\"><a href=\"#《论诗五首-其二》-赵翼\" class=\"headerlink\" title=\"《论诗五首 其二》 赵翼\"></a>《论诗五首 其二》 赵翼</h2><p>李杜诗篇万口传，至今已觉不新鲜。<br>江山代有才人出，各领风骚数百年。</p>\n<h2 id=\"《已亥杂诗-第五首》-龚自珍\"><a href=\"#《已亥杂诗-第五首》-龚自珍\" class=\"headerlink\" title=\"《已亥杂诗 第五首》 龚自珍\"></a>《已亥杂诗 第五首》 龚自珍</h2><p>浩荡离愁白日斜，吟鞭东指即天涯。<br>落红不是无情物，化作春泥更护花。</p>\n<h2 id=\"《已亥杂诗-第一首》-龚自珍\"><a href=\"#《已亥杂诗-第一首》-龚自珍\" class=\"headerlink\" title=\"《已亥杂诗 第一首》 龚自珍\"></a>《已亥杂诗 第一首》 龚自珍</h2><p>九州生气恃风雷，万马齐喑究可哀。<br>我劝天公重抖擞，不拘一格降人才。</p>\n<h2 id=\"《渔父》-张志和\"><a href=\"#《渔父》-张志和\" class=\"headerlink\" title=\"《渔父》 张志和\"></a>《渔父》 张志和</h2><p>西塞山前白鹭飞，桃花流水鳜鱼肥。青箬笠，绿蓑衣，斜风细雨不须归。</p>\n<h2 id=\"《忆江南》-白居易\"><a href=\"#《忆江南》-白居易\" class=\"headerlink\" title=\"《忆江南》 白居易\"></a>《忆江南》 白居易</h2><p>江南好，风景旧曾谙。日出江花红胜火，春来江水绿如蓝。能不忆江南。</p>\n<h2 id=\"《虞美人》-李煜\"><a href=\"#《虞美人》-李煜\" class=\"headerlink\" title=\"《虞美人》 李煜\"></a>《虞美人》 李煜</h2><p>春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。<br>雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。</p>\n<h2 id=\"《乌夜啼》-李煜\"><a href=\"#《乌夜啼》-李煜\" class=\"headerlink\" title=\"《乌夜啼》 李煜\"></a>《乌夜啼》 李煜</h2><p>无言独上西楼，月如钩。寂寞梧桐深院锁清秋。<br>剪不断，理还乱，是离愁。别有一番滋味在心头。</p>\n<h2 id=\"《渔家傲》-秋思-范仲淹\"><a href=\"#《渔家傲》-秋思-范仲淹\" class=\"headerlink\" title=\"《渔家傲》-秋思 范仲淹\"></a>《渔家傲》-秋思 范仲淹</h2><p>塞下秋来风景异，衡阳雁去无留意。四面边声连角起。千嶂里，长烟落日孤城闭。<br>浊酒一杯家万里，燕然未勒归无计。羌管悠悠霜满地。人不寐，将军白发征夫泪。</p>\n<h2 id=\"《雨霖铃》-柳永\"><a href=\"#《雨霖铃》-柳永\" class=\"headerlink\" title=\"《雨霖铃》 柳永\"></a>《雨霖铃》 柳永</h2><p>寒蝉凄切。对长亭晚，骤雨初歇。都门帐饮无绪，留恋处、兰舟催发。执手相看泪眼，<br>竟无语凝噎。念去去、千里烟波，暮霭沉沉楚天阔。<br>多情自古伤离别。更那堪、冷落清秋节。今宵酒醒何处？杨柳岸、晓风残月。<br>此去经年，应是良辰好景虚设。便纵有、千种风情，更与何人说。</p>\n<h2 id=\"《凤栖梧》-柳永\"><a href=\"#《凤栖梧》-柳永\" class=\"headerlink\" title=\"《凤栖梧》 柳永\"></a>《凤栖梧》 柳永</h2><p>伫（zhù）倚危楼风细细，望极春愁，黯黯生天际。草色烟光残照里，无言谁会凭阑意。<br>拟把疏狂图一醉。对酒当歌，强乐还无味。衣带渐宽终不悔，为伊消得人憔悴。</p>\n"},{"url":"/2020/09/12/english-word1.html","title":"英语单词学习1","keywords":"英语单词","description":"英语单词","date":"2020-09-12T04:31:57.000Z","draft":true,"tags_weight":100,"categoryes_weight":100,"_content":"\n单词|释义|例句|例句释义\n---|---|---|---\nabbreviation|缩写|MIA is an abbreviation for 'Missing in Action'.|MIA 是 Missing in Action 的缩略语\n","source":"_drafts/english/1.md","raw":"---\nurl: /2020/09/12/english-word1.html\ntitle: \"英语单词学习1\"\nkeywords: \"英语单词\"\ndescription: \"英语单词\"\ndate: 2020-09-12T20:31:57+08:00\ndraft: true\ntags: [\"英语\"]\ntags_weight: 100\ncategories: [\"英语\"]\ncategoryes_weight: 100\n---\n\n单词|释义|例句|例句释义\n---|---|---|---\nabbreviation|缩写|MIA is an abbreviation for 'Missing in Action'.|MIA 是 Missing in Action 的缩略语\n","slug":"english/1","published":0,"updated":"2020-10-11T07:37:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8z69t00b4mv05ca13e97y","content":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abbreviation</td>\n<td>缩写</td>\n<td>MIA is an abbreviation for ‘Missing in Action’.</td>\n<td>MIA 是 Missing in Action 的缩略语</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abbreviation</td>\n<td>缩写</td>\n<td>MIA is an abbreviation for ‘Missing in Action’.</td>\n<td>MIA 是 Missing in Action 的缩略语</td>\n</tr>\n</tbody></table>\n"},{"url":"/2020/09/12/english-word2.html","title":"英语单词学习2","keywords":"英语单词","description":"英语单词","date":"2020-09-12T04:31:57.000Z","draft":true,"tags_weight":100,"categoryes_weight":100,"_content":"\n单词|释义|例句|例句释义\n---|---|---|---\nabandon|离开|I'm sorry I abandoned you like that.|很抱歉我那样突然抛下你走了。\n","source":"_drafts/english/2.md","raw":"---\nurl: /2020/09/12/english-word2.html\ntitle: \"英语单词学习2\"\nkeywords: \"英语单词\"\ndescription: \"英语单词\"\ndate: 2020-09-12T20:31:57+08:00\ndraft: true\ntags: [\"英语\"]\ntags_weight: 100\ncategories: [\"英语\"]\ncategoryes_weight: 100\n---\n\n单词|释义|例句|例句释义\n---|---|---|---\nabandon|离开|I'm sorry I abandoned you like that.|很抱歉我那样突然抛下你走了。\n","slug":"english/2","published":0,"updated":"2020-10-11T07:37:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8z69v00b5mv052bbi2fw7","content":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abandon</td>\n<td>离开</td>\n<td>I’m sorry I abandoned you like that.</td>\n<td>很抱歉我那样突然抛下你走了。</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abandon</td>\n<td>离开</td>\n<td>I’m sorry I abandoned you like that.</td>\n<td>很抱歉我那样突然抛下你走了。</td>\n</tr>\n</tbody></table>\n"},{"url":"/2020/09/12/english-word3.html","title":"英语单词学习3","keywords":"英语单词","description":"英语单词","date":"2020-09-12T04:31:57.000Z","draft":true,"tags_weight":100,"categoryes_weight":100,"_content":"\n单词|释义|例句|例句释义\n---|---|---|---\na|一|You need a dictionary.|你需要一本词典。\nability|能力|Managers have different talents and abilities|经理们有着不同的天赋和技能\n","source":"_drafts/english/3.md","raw":"---\nurl: /2020/09/12/english-word3.html\ntitle: \"英语单词学习3\"\nkeywords: \"英语单词\"\ndescription: \"英语单词\"\ndate: 2020-09-12T20:31:57+08:00\ndraft: true\ntags: [\"英语\"]\ntags_weight: 100\ncategories: [\"英语\"]\ncategoryes_weight: 100\n---\n\n单词|释义|例句|例句释义\n---|---|---|---\na|一|You need a dictionary.|你需要一本词典。\nability|能力|Managers have different talents and abilities|经理们有着不同的天赋和技能\n","slug":"english/3","published":0,"updated":"2020-10-11T07:37:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg8z69w00b7mv054ktd2llh","content":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>一</td>\n<td>You need a dictionary.</td>\n<td>你需要一本词典。</td>\n</tr>\n<tr>\n<td>ability</td>\n<td>能力</td>\n<td>Managers have different talents and abilities</td>\n<td>经理们有着不同的天赋和技能</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>释义</th>\n<th>例句</th>\n<th>例句释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>一</td>\n<td>You need a dictionary.</td>\n<td>你需要一本词典。</td>\n</tr>\n<tr>\n<td>ability</td>\n<td>能力</td>\n<td>Managers have different talents and abilities</td>\n<td>经理们有着不同的天赋和技能</td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhg8rer40000fw052gw344wn","category_id":"ckhg8rerf0001fw05498h316a","_id":"ckhg8reri0004fw051mx33egu"},{"post_id":"ckhg8tf1z0000mv05hd6q2i89","category_id":"ckhg8tf260002mv0536637cq3","_id":"ckhg8tf2g000bmv052k0996ze"},{"post_id":"ckhg8tf280004mv0547qu7yb4","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2o000nmv05d1wte4mk"},{"post_id":"ckhg8tf2o000pmv05dpxdevvx","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2t000xmv054ejdb7cg"},{"post_id":"ckhg8tf2o000pmv05dpxdevvx","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf2v0012mv051inn85b0"},{"post_id":"ckhg8tf2d0009mv054hn17x1x","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2w0015mv059zbhdox4"},{"post_id":"ckhg8tf2d0009mv054hn17x1x","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf2y001amv05dvr57cx5"},{"post_id":"ckhg8tf2p000qmv05e2qw09x3","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf2z001dmv05dtmjhuik"},{"post_id":"ckhg8tf2p000qmv05e2qw09x3","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf31001imv05d3tf90mi"},{"post_id":"ckhg8tf2r000umv058aqth0cb","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf32001lmv057ox897sg"},{"post_id":"ckhg8tf2r000umv058aqth0cb","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf33001qmv052r765tf2"},{"post_id":"ckhg8tf240001mv054gewgqn8","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf37001tmv054vv4hezu"},{"post_id":"ckhg8tf240001mv054gewgqn8","category_id":"ckhg8tf2q000rmv05e90120g4","_id":"ckhg8tf39001ymv0572fe4p9j"},{"post_id":"ckhg8tf2s000wmv05fw0ehr6z","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3a0021mv050evf8nmn"},{"post_id":"ckhg8tf2s000wmv05fw0ehr6z","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf3c0026mv05h1fpaa30"},{"post_id":"ckhg8tf2f000amv05epcm1qeu","category_id":"ckhg8tf2t0010mv051m51c017","_id":"ckhg8tf3e0029mv05bfs6em5w"},{"post_id":"ckhg8tf2i000emv059xnbde3d","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3g002emv056i4gcqbp"},{"post_id":"ckhg8tf2i000emv059xnbde3d","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf3h002hmv0590lb8a3g"},{"post_id":"ckhg8tf2k000gmv05gca9birg","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3i002lmv0512d04ip1"},{"post_id":"ckhg8tf2k000gmv05gca9birg","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf3k002pmv05cgy65cjb"},{"post_id":"ckhg8tf2m000jmv05hu3748lf","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3l002smv0536j17ii9"},{"post_id":"ckhg8tf2m000jmv05hu3748lf","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf3n002xmv050bd69o0p"},{"post_id":"ckhg8tf2b0005mv05fdk26zvr","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3p0030mv05fdp23y45"},{"post_id":"ckhg8tf2b0005mv05fdk26zvr","category_id":"ckhg8tf2n000mmv05a1lh12no","_id":"ckhg8tf3r0035mv055otceepm"},{"post_id":"ckhg8tf2n000lmv05fg9f7ynv","category_id":"ckhg8tf2t0010mv051m51c017","_id":"ckhg8tf3s0038mv05gkj3fprz"},{"post_id":"ckhg8tf3e002cmv05exzlfdnw","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3w003dmv05c81f0sbe"},{"post_id":"ckhg8tf3g002gmv05eiqlhv7u","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf3x003gmv05c4wk8pqy"},{"post_id":"ckhg8tf2u0011mv05cmsyfszu","category_id":"ckhg8tf3f002dmv054bh84h71","_id":"ckhg8tf3z003lmv05d21pem9v"},{"post_id":"ckhg8tf3h002jmv05hfqh59f3","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf40003omv056s6o5lpd"},{"post_id":"ckhg8tf30001gmv05ejgx0zrk","category_id":"ckhg8tf3u003amv0594wf37v1","_id":"ckhg8tf470044mv05df2bagdo"},{"post_id":"ckhg8tf31001kmv056cvj4ul2","category_id":"ckhg8tf3u003amv0594wf37v1","_id":"ckhg8tf4a0049mv0524pt5lv7"},{"post_id":"ckhg8tf33001omv05df3dd9h6","category_id":"ckhg8tf3u003amv0594wf37v1","_id":"ckhg8tf4b004cmv05gjlofq5u"},{"post_id":"ckhg8tf34001smv059v3wg3as","category_id":"ckhg8tf3u003amv0594wf37v1","_id":"ckhg8tf4d004gmv05b32derce"},{"post_id":"ckhg8tf38001wmv052p1ff0c5","category_id":"ckhg8tf490047mv058j0p8qvo","_id":"ckhg8tf4f004kmv05439u65h7"},{"post_id":"ckhg8tf3a0020mv0557988imy","category_id":"ckhg8tf4d004fmv05g8dqetv9","_id":"ckhg8tf4i004rmv0537pehv6p"},{"post_id":"ckhg8tf3b0024mv05f58475o4","category_id":"ckhg8tf4g004lmv055o6a3iz7","_id":"ckhg8tf4m004wmv05cv62cb87"},{"post_id":"ckhg8tf3d0028mv057j6bd7a3","category_id":"ckhg8tf4j004smv051zvg0gon","_id":"ckhg8tf4r0053mv051ynh0190"},{"post_id":"ckhg8tf3j002omv050ck8dfnm","category_id":"ckhg8tf4m004xmv054xsz0d69","_id":"ckhg8tf4x005amv0564kca42z"},{"post_id":"ckhg8tf3k002rmv050xex0m1i","category_id":"ckhg8tf3u003amv0594wf37v1","_id":"ckhg8tf4z005gmv0589vs6ms9"},{"post_id":"ckhg8tf3m002wmv0548z3251x","category_id":"ckhg8tf4x0059mv05dfki4ue0","_id":"ckhg8tf52005lmv055paj875r"},{"post_id":"ckhg8tf3n002zmv05b5zq29v3","category_id":"ckhg8tf4z005hmv05gxf43s8t","_id":"ckhg8tf55005qmv052xlf1lcw"},{"post_id":"ckhg8tf3q0034mv0532rd63s5","category_id":"ckhg8tf52005mmv051t2x8v8g","_id":"ckhg8tf57005xmv05b5n47o8n"},{"post_id":"ckhg8tf53005pmv056ohsb767","category_id":"ckhg8tf2t0010mv051m51c017","_id":"ckhg8tf580060mv05d9za7mh3"},{"post_id":"ckhg8tf3r0037mv05bbhacny6","category_id":"ckhg8tf55005smv05ammt8qr4","_id":"ckhg8tf590064mv057ocp3sit"},{"post_id":"ckhg8tf3v003cmv05blpt05io","category_id":"ckhg8tf55005smv05ammt8qr4","_id":"ckhg8tf5a0068mv05afpi12pu"},{"post_id":"ckhg8tf3w003fmv05d1qmfa8c","category_id":"ckhg8tf55005smv05ammt8qr4","_id":"ckhg8tf5b006bmv051rtm5xlu"},{"post_id":"ckhg8tf3y003kmv05azfub5pm","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5c006gmv05ark2bzmh"},{"post_id":"ckhg8tf3y003kmv05azfub5pm","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5d006imv054dy9a9y9"},{"post_id":"ckhg8tf40003nmv051782633g","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5d006lmv052fkb7hu1"},{"post_id":"ckhg8tf40003nmv051782633g","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5e006nmv05aooo018a"},{"post_id":"ckhg8tf42003smv050ei7gnlg","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5f006qmv050mtobv45"},{"post_id":"ckhg8tf42003smv050ei7gnlg","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5f006smv05c311g35w"},{"post_id":"ckhg8tf43003vmv050jrmeefz","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5f006umv05b6xdboy0"},{"post_id":"ckhg8tf43003vmv050jrmeefz","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5g006xmv05aaquc5z9"},{"post_id":"ckhg8tf450040mv053crhgpwx","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5g0070mv054rpugq3g"},{"post_id":"ckhg8tf450040mv053crhgpwx","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5h0073mv0513w97xti"},{"post_id":"ckhg8tf470043mv05c96bdx7r","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5i0076mv05hdnpcaf6"},{"post_id":"ckhg8tf470043mv05c96bdx7r","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5i0079mv05ftt7clrq"},{"post_id":"ckhg8tf490048mv0527ms67mu","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5j007cmv058dv24y4g"},{"post_id":"ckhg8tf490048mv0527ms67mu","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5k007fmv0548q5ga95"},{"post_id":"ckhg8tf4a004bmv055gx32sh9","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5k007imv0588aa1295"},{"post_id":"ckhg8tf4a004bmv055gx32sh9","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5l007lmv051lgrdl2k"},{"post_id":"ckhg8tf4c004emv055ihk2e9i","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5l007omv05bko277ds"},{"post_id":"ckhg8tf4c004emv055ihk2e9i","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5m007rmv05e5ez57ze"},{"post_id":"ckhg8tf4d004hmv056vv4dzg0","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5n007umv051l9h067e"},{"post_id":"ckhg8tf4d004hmv056vv4dzg0","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5n007xmv053t6i9vmr"},{"post_id":"ckhg8tf4f004jmv05cejo4u0x","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5o0080mv05bwgo7z8a"},{"post_id":"ckhg8tf4f004jmv05cejo4u0x","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5p0083mv05hmk9aps2"},{"post_id":"ckhg8tf4g004nmv053ifya413","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5p0086mv05g9vh8grt"},{"post_id":"ckhg8tf4g004nmv053ifya413","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5q0089mv053ukneg8p"},{"post_id":"ckhg8tf4h004pmv05ajy5006d","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5r008cmv05bifa3vx4"},{"post_id":"ckhg8tf4h004pmv05ajy5006d","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5s008fmv05cw66c430"},{"post_id":"ckhg8tf4j004tmv054qplcegt","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5s008imv059hkmfbdj"},{"post_id":"ckhg8tf4j004tmv054qplcegt","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5t008lmv05aclidtth"},{"post_id":"ckhg8tf4k004umv055mol7hfj","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5t008omv05ag1y7iw2"},{"post_id":"ckhg8tf4k004umv055mol7hfj","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5u008rmv051ke50bri"},{"post_id":"ckhg8tf4m004zmv054hg4h7cb","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5v008umv05c17n80d5"},{"post_id":"ckhg8tf4m004zmv054hg4h7cb","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5v008xmv055jir2nyi"},{"post_id":"ckhg8tf4n0051mv05dy0c4b6o","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5w0090mv057fz2csaz"},{"post_id":"ckhg8tf4n0051mv05dy0c4b6o","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5x0093mv05h3jdccvw"},{"post_id":"ckhg8tf4r0054mv05cg6udjde","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5x0096mv05d9e87kw3"},{"post_id":"ckhg8tf4r0054mv05cg6udjde","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5y0099mv0512cidqq3"},{"post_id":"ckhg8tf4v0056mv052cswegqf","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf5z009cmv050i9lapps"},{"post_id":"ckhg8tf4v0056mv052cswegqf","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf5z009fmv05cdc040i6"},{"post_id":"ckhg8tf4w0058mv054frgf0lb","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf60009imv05615l4hba"},{"post_id":"ckhg8tf4w0058mv054frgf0lb","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf61009lmv05e27y9i58"},{"post_id":"ckhg8tf4x005cmv057kwuguhk","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf61009omv050pli7shl"},{"post_id":"ckhg8tf4x005cmv057kwuguhk","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf62009rmv050y68byh5"},{"post_id":"ckhg8tf4y005fmv053aq254dl","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf62009umv05bzqugwzk"},{"post_id":"ckhg8tf4y005fmv053aq254dl","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf63009xmv050lfoaqip"},{"post_id":"ckhg8tf50005imv05djfw38wd","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf6300a0mv05dg8ufa8w"},{"post_id":"ckhg8tf50005imv05djfw38wd","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf6400a3mv0511ylgjqu"},{"post_id":"ckhg8tf51005kmv055qg940mg","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf6700a6mv058v19ddgc"},{"post_id":"ckhg8tf51005kmv055qg940mg","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf6700a9mv05hxkt3vzp"},{"post_id":"ckhg8tf52005nmv055xkydwoq","category_id":"ckhg8tf2c0006mv05b75c60uq","_id":"ckhg8tf6800abmv0559ct0l4q"},{"post_id":"ckhg8tf52005nmv055xkydwoq","category_id":"ckhg8tf5a0067mv054vkvc983","_id":"ckhg8tf6a00aemv058jb88ask"},{"post_id":"ckhg8tf55005tmv053f1u3xse","category_id":"ckhg8tf6600a5mv059xte870v","_id":"ckhg8tf6a00ahmv05eeum8gqa"},{"post_id":"ckhg8tf6e00armv059q4d73pd","category_id":"ckhg8tf6g00atmv053028dzfn","_id":"ckhg8tf6h00aymv057k2xdpw9"},{"post_id":"ckhg8tf6f00asmv05b5necutj","category_id":"ckhg8tf6g00avmv058r4d1jiz","_id":"ckhg8tf6h00b0mv05flbefwma"},{"post_id":"ckhg8tf6i00b1mv051mtj5f82","category_id":"ckhg8tf6g00avmv058r4d1jiz","_id":"ckhg8tf6j00b3mv05ehukd7dg"},{"post_id":"ckhg8z69t00b4mv05ca13e97y","category_id":"ckhg8tf3i002mmv05fi0fb0j0","_id":"ckhg8z69y00b9mv05bd2y68gt"},{"post_id":"ckhg8z69v00b5mv052bbi2fw7","category_id":"ckhg8tf3i002mmv05fi0fb0j0","_id":"ckhg8z69y00bbmv05g4hlbut8"},{"post_id":"ckhg8z69w00b7mv054ktd2llh","category_id":"ckhg8tf3i002mmv05fi0fb0j0","_id":"ckhg8z69z00bcmv053nj7gqmd"}],"PostTag":[{"post_id":"ckhg8rer40000fw052gw344wn","tag_id":"ckhg8rerh0002fw05g2ita820","_id":"ckhg8reri0003fw05551lbels"},{"post_id":"ckhg8tf1z0000mv05hd6q2i89","tag_id":"ckhg8tf280003mv05fjii0yo5","_id":"ckhg8tf2d0008mv057pnhfuyq"},{"post_id":"ckhg8tf240001mv054gewgqn8","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2j000fmv0529a83s37"},{"post_id":"ckhg8tf280004mv0547qu7yb4","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2m000kmv0582uqazhg"},{"post_id":"ckhg8tf2o000pmv05dpxdevvx","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2q000tmv05gqpveiq6"},{"post_id":"ckhg8tf2o000pmv05dpxdevvx","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf2s000vmv057nh25ggn"},{"post_id":"ckhg8tf2b0005mv05fdk26zvr","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2t000zmv058sdjbug7"},{"post_id":"ckhg8tf2b0005mv05fdk26zvr","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf2v0013mv05683k1wkw"},{"post_id":"ckhg8tf2p000qmv05e2qw09x3","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2w0017mv05bb7k4g2y"},{"post_id":"ckhg8tf2p000qmv05e2qw09x3","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf2y001bmv0527em3q1a"},{"post_id":"ckhg8tf2r000umv058aqth0cb","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf2z001fmv057e580j9m"},{"post_id":"ckhg8tf2r000umv058aqth0cb","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf31001jmv05a47j37qk"},{"post_id":"ckhg8tf2d0009mv054hn17x1x","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf32001nmv05dtjlf0o2"},{"post_id":"ckhg8tf2d0009mv054hn17x1x","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf34001rmv0576eh3em8"},{"post_id":"ckhg8tf2s000wmv05fw0ehr6z","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf37001vmv056txh32dn"},{"post_id":"ckhg8tf2s000wmv05fw0ehr6z","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf39001zmv059fiu0u1a"},{"post_id":"ckhg8tf2f000amv05epcm1qeu","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf3b0023mv05hzcl678c"},{"post_id":"ckhg8tf2i000emv059xnbde3d","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3d0027mv052ewc3nsy"},{"post_id":"ckhg8tf2i000emv059xnbde3d","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf3e002amv057fgy8cye"},{"post_id":"ckhg8tf2k000gmv05gca9birg","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3g002fmv054il92pmd"},{"post_id":"ckhg8tf2k000gmv05gca9birg","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf3h002imv051l042w35"},{"post_id":"ckhg8tf2m000jmv05hu3748lf","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3j002nmv05dhzxbfoe"},{"post_id":"ckhg8tf2m000jmv05hu3748lf","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf3k002qmv052jg12a52"},{"post_id":"ckhg8tf2n000lmv05fg9f7ynv","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf3m002vmv052asw4pmm"},{"post_id":"ckhg8tf3e002cmv05exzlfdnw","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3n002ymv05c1ok00yc"},{"post_id":"ckhg8tf3g002gmv05eiqlhv7u","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3q0033mv052x0c1ddn"},{"post_id":"ckhg8tf2u0011mv05cmsyfszu","tag_id":"ckhg8tf3b0022mv058d7i2ilb","_id":"ckhg8tf3r0036mv050j1d5hx2"},{"post_id":"ckhg8tf2u0011mv05cmsyfszu","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf3v003bmv05abyt81dl"},{"post_id":"ckhg8tf3h002jmv05hfqh59f3","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf3w003emv054xbo5wu1"},{"post_id":"ckhg8tf3k002rmv050xex0m1i","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf40003mmv058ph18b68"},{"post_id":"ckhg8tf30001gmv05ejgx0zrk","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf44003ymv05ew0udlpv"},{"post_id":"ckhg8tf31001kmv056cvj4ul2","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf460042mv0522rkavk2"},{"post_id":"ckhg8tf33001omv05df3dd9h6","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf480046mv054mb4dotw"},{"post_id":"ckhg8tf34001smv059v3wg3as","tag_id":"ckhg8tf3e002bmv05f4cg5xjk","_id":"ckhg8tf4a004amv05e8sifejy"},{"post_id":"ckhg8tf38001wmv052p1ff0c5","tag_id":"ckhg8tf480045mv0595bb3ipt","_id":"ckhg8tf4g004mmv055uraew4s"},{"post_id":"ckhg8tf38001wmv052p1ff0c5","tag_id":"ckhg8tf4b004dmv05dhwgas4j","_id":"ckhg8tf4h004omv058q7i9ju1"},{"post_id":"ckhg8tf3a0020mv0557988imy","tag_id":"ckhg8tf4f004imv05615o65cb","_id":"ckhg8tf4m004ymv05g27w0b52"},{"post_id":"ckhg8tf3a0020mv0557988imy","tag_id":"ckhg8tf4b004dmv05dhwgas4j","_id":"ckhg8tf4n0050mv0519xy5uy3"},{"post_id":"ckhg8tf3b0024mv05f58475o4","tag_id":"ckhg8tf4l004vmv05fg8i3v8f","_id":"ckhg8tf4x005bmv05a9d46fr1"},{"post_id":"ckhg8tf3b0024mv05f58475o4","tag_id":"ckhg8tf4b004dmv05dhwgas4j","_id":"ckhg8tf4y005dmv05feel8opz"},{"post_id":"ckhg8tf3d0028mv057j6bd7a3","tag_id":"ckhg8tf4v0057mv059xmw9jbs","_id":"ckhg8tf55005rmv053gbeesqn"},{"post_id":"ckhg8tf3d0028mv057j6bd7a3","tag_id":"ckhg8tf4y005emv052tq00n3x","_id":"ckhg8tf56005umv05a1ps70xf"},{"post_id":"ckhg8tf3d0028mv057j6bd7a3","tag_id":"ckhg8tf4b004dmv05dhwgas4j","_id":"ckhg8tf57005wmv05gunrcdbi"},{"post_id":"ckhg8tf53005pmv056ohsb767","tag_id":"ckhg8tf2o000omv05fwewexol","_id":"ckhg8tf57005zmv0562jy1sb3"},{"post_id":"ckhg8tf3j002omv050ck8dfnm","tag_id":"ckhg8tf53005omv0561qf1kw7","_id":"ckhg8tf590062mv05bmgf82ux"},{"post_id":"ckhg8tf3m002wmv0548z3251x","tag_id":"ckhg8tf56005vmv051q3yh2pl","_id":"ckhg8tf5a0065mv05b6u6d205"},{"post_id":"ckhg8tf3n002zmv05b5zq29v3","tag_id":"ckhg8tf580061mv0568pf751s","_id":"ckhg8tf5b0069mv057z48fqmy"},{"post_id":"ckhg8tf3q0034mv0532rd63s5","tag_id":"ckhg8tf5a0066mv05fzul57wd","_id":"ckhg8tf5c006dmv0593es20bl"},{"post_id":"ckhg8tf3r0037mv05bbhacny6","tag_id":"ckhg8tf5b006amv05arvx9m3a","_id":"ckhg8tf5d006hmv056ox19288"},{"post_id":"ckhg8tf3v003cmv05blpt05io","tag_id":"ckhg8tf5b006amv05arvx9m3a","_id":"ckhg8tf5e006mmv05cfl13q48"},{"post_id":"ckhg8tf3w003fmv05d1qmfa8c","tag_id":"ckhg8tf5b006amv05arvx9m3a","_id":"ckhg8tf5f006rmv05c3c45gr9"},{"post_id":"ckhg8tf3y003kmv05azfub5pm","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5g006wmv053lach2el"},{"post_id":"ckhg8tf3y003kmv05azfub5pm","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5g006ymv055b5m8mm5"},{"post_id":"ckhg8tf40003nmv051782633g","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5h0072mv057kyldmpr"},{"post_id":"ckhg8tf40003nmv051782633g","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5h0074mv058i4w5fe6"},{"post_id":"ckhg8tf42003smv050ei7gnlg","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5i0078mv05bj60byke"},{"post_id":"ckhg8tf42003smv050ei7gnlg","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5j007amv0593ek499o"},{"post_id":"ckhg8tf43003vmv050jrmeefz","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5k007emv05bmb8c2ep"},{"post_id":"ckhg8tf43003vmv050jrmeefz","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5k007gmv05f1tm5fks"},{"post_id":"ckhg8tf450040mv053crhgpwx","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5l007kmv05cbl9ahtv"},{"post_id":"ckhg8tf450040mv053crhgpwx","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5l007mmv05gohbginx"},{"post_id":"ckhg8tf470043mv05c96bdx7r","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5m007qmv05c5sm8kej"},{"post_id":"ckhg8tf470043mv05c96bdx7r","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5m007smv05bypgayq2"},{"post_id":"ckhg8tf490048mv0527ms67mu","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5n007wmv050skf7u6m"},{"post_id":"ckhg8tf490048mv0527ms67mu","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5n007ymv05duak9cgg"},{"post_id":"ckhg8tf4a004bmv055gx32sh9","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5p0082mv052sx5f1yf"},{"post_id":"ckhg8tf4a004bmv055gx32sh9","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5p0084mv05bcevgx42"},{"post_id":"ckhg8tf4c004emv055ihk2e9i","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5q0088mv05aoh9358e"},{"post_id":"ckhg8tf4c004emv055ihk2e9i","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5q008amv051kq98orq"},{"post_id":"ckhg8tf4d004hmv056vv4dzg0","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5s008emv058a9u8aat"},{"post_id":"ckhg8tf4d004hmv056vv4dzg0","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5s008gmv050mrb3jxs"},{"post_id":"ckhg8tf4f004jmv05cejo4u0x","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5t008kmv05fwjdhi47"},{"post_id":"ckhg8tf4f004jmv05cejo4u0x","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5t008mmv05g8b63vva"},{"post_id":"ckhg8tf4g004nmv053ifya413","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5u008qmv052bj22yoy"},{"post_id":"ckhg8tf4g004nmv053ifya413","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5u008smv05a4ex9hxx"},{"post_id":"ckhg8tf4h004pmv05ajy5006d","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5v008wmv055ge63zxs"},{"post_id":"ckhg8tf4h004pmv05ajy5006d","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5w008ymv0547o89zi5"},{"post_id":"ckhg8tf4j004tmv054qplcegt","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5x0092mv05dd0h7axu"},{"post_id":"ckhg8tf4j004tmv054qplcegt","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5x0094mv05ayifctug"},{"post_id":"ckhg8tf4k004umv055mol7hfj","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5y0098mv050litdu2s"},{"post_id":"ckhg8tf4k004umv055mol7hfj","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf5y009amv057uh8fpu7"},{"post_id":"ckhg8tf4m004zmv054hg4h7cb","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf5z009emv056qrd8zag"},{"post_id":"ckhg8tf4m004zmv054hg4h7cb","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf60009gmv050wcfbk0s"},{"post_id":"ckhg8tf4n0051mv05dy0c4b6o","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf61009kmv052p8g7rus"},{"post_id":"ckhg8tf4n0051mv05dy0c4b6o","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf61009mmv051iz521rx"},{"post_id":"ckhg8tf4r0054mv05cg6udjde","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf62009qmv058p016pur"},{"post_id":"ckhg8tf4r0054mv05cg6udjde","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf62009smv05d4ju9h6z"},{"post_id":"ckhg8tf4v0056mv052cswegqf","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf63009wmv051xweb5sw"},{"post_id":"ckhg8tf4v0056mv052cswegqf","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf63009ymv0535cnbewr"},{"post_id":"ckhg8tf4w0058mv054frgf0lb","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6400a2mv0578yscbts"},{"post_id":"ckhg8tf4w0058mv054frgf0lb","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6500a4mv055tyneku1"},{"post_id":"ckhg8tf4x005cmv057kwuguhk","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6700a8mv05f7hn548f"},{"post_id":"ckhg8tf4x005cmv057kwuguhk","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6800aamv053n0jdfko"},{"post_id":"ckhg8tf4y005fmv053aq254dl","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6900admv051pik7yc9"},{"post_id":"ckhg8tf4y005fmv053aq254dl","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6a00afmv057uk33ff7"},{"post_id":"ckhg8tf50005imv05djfw38wd","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6a00aimv0598n71lkx"},{"post_id":"ckhg8tf50005imv05djfw38wd","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6b00ajmv05h5jgdhub"},{"post_id":"ckhg8tf51005kmv055qg940mg","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6b00almv05hj8ba5p3"},{"post_id":"ckhg8tf51005kmv055qg940mg","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6b00ammv056w7rdjl1"},{"post_id":"ckhg8tf52005nmv055xkydwoq","tag_id":"ckhg8tf2c0007mv05bl5bfwng","_id":"ckhg8tf6c00aomv05bd6o38th"},{"post_id":"ckhg8tf52005nmv055xkydwoq","tag_id":"ckhg8tf5e006omv052pbc3ybv","_id":"ckhg8tf6c00apmv05e2legkqa"},{"post_id":"ckhg8tf55005tmv053f1u3xse","tag_id":"ckhg8tf6b00anmv0581b20uqu","_id":"ckhg8tf6c00aqmv05hou38mmr"},{"post_id":"ckhg8tf6e00armv059q4d73pd","tag_id":"ckhg8tf6g00aumv05ah0189ic","_id":"ckhg8tf6h00axmv053yg2g5im"},{"post_id":"ckhg8tf6f00asmv05b5necutj","tag_id":"ckhg8tf6g00awmv053u93b6di","_id":"ckhg8tf6h00azmv050utx71e1"},{"post_id":"ckhg8tf6i00b1mv051mtj5f82","tag_id":"ckhg8tf6g00awmv053u93b6di","_id":"ckhg8tf6j00b2mv052e9m7zc2"},{"post_id":"ckhg8z69t00b4mv05ca13e97y","tag_id":"ckhg8tf3i002kmv05bovm0h6v","_id":"ckhg8z69w00b6mv054g6vgnnt"},{"post_id":"ckhg8z69v00b5mv052bbi2fw7","tag_id":"ckhg8tf3i002kmv05bovm0h6v","_id":"ckhg8z69x00b8mv051uar06kw"},{"post_id":"ckhg8z69w00b7mv054ktd2llh","tag_id":"ckhg8tf3i002kmv05bovm0h6v","_id":"ckhg8z69y00bamv059q0ydifz"}],"Tag":[{"name":"歌曲","_id":"ckhg8rerh0002fw05g2ita820"},{"name":"字符集编码","_id":"ckhg8tf280003mv05fjii0yo5"},{"name":"PHP","_id":"ckhg8tf2c0007mv05bl5bfwng"},{"name":"算法","_id":"ckhg8tf2o000omv05fwewexol"},{"name":"Redis","_id":"ckhg8tf3b0022mv058d7i2ilb"},{"name":"Linux","_id":"ckhg8tf3e002bmv05f4cg5xjk"},{"name":"英语","_id":"ckhg8tf3i002kmv05bovm0h6v"},{"name":"5G","_id":"ckhg8tf480045mv0595bb3ipt"},{"name":"Network","_id":"ckhg8tf4b004dmv05dhwgas4j"},{"name":"NAT","_id":"ckhg8tf4f004imv05615o65cb"},{"name":"TCP","_id":"ckhg8tf4l004vmv05fg8i3v8f"},{"name":"TLS","_id":"ckhg8tf4v0057mv059xmw9jbs"},{"name":"RSA","_id":"ckhg8tf4y005emv052tq00n3x"},{"name":"Git","_id":"ckhg8tf53005omv0561qf1kw7"},{"name":"Markdown","_id":"ckhg8tf56005vmv051q3yh2pl"},{"name":"Phpstorm","_id":"ckhg8tf580061mv0568pf751s"},{"name":"正则表达式","_id":"ckhg8tf5a0066mv05fzul57wd"},{"name":"MySQL","_id":"ckhg8tf5b006amv05arvx9m3a"},{"name":"设计模式","_id":"ckhg8tf5e006omv052pbc3ybv"},{"name":"Algorithms","_id":"ckhg8tf6b00anmv0581b20uqu"},{"name":"Http","_id":"ckhg8tf6g00aumv05ah0189ic"},{"name":"国粹","_id":"ckhg8tf6g00awmv053u93b6di"}]}}